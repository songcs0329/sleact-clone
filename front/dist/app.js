/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={9669:(e,t,r)=>{e.exports=r(1609)},5448:(e,t,r)=>{"use strict";var n=r(4867),o=r(6026),a=r(4372),i=r(5327),u=r(4097),l=r(4109),s=r(7985),c=r(5061),f=r(7874),p=r(5263);e.exports=function(e){return new Promise((function(t,r){var d,h=e.data,v=e.headers,g=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}n.isFormData(h)&&delete v["Content-Type"];var m=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",w=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";v.Authorization="Basic "+btoa(b+":"+w)}var x=u(e.baseURL,e.url);function E(){if(m){var n="getAllResponseHeaders"in m?l(m.getAllResponseHeaders()):null,a={data:g&&"text"!==g&&"json"!==g?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:n,config:e,request:m};o((function(e){t(e),y()}),(function(e){r(e),y()}),a),m=null}}if(m.open(e.method.toUpperCase(),i(x,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,"onloadend"in m?m.onloadend=E:m.onreadystatechange=function(){m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))&&setTimeout(E)},m.onabort=function(){m&&(r(c("Request aborted",e,"ECONNABORTED",m)),m=null)},m.onerror=function(){r(c("Network Error",e,null,m)),m=null},m.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",n=e.transitional||f;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(c(t,e,n.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",m)),m=null},n.isStandardBrowserEnv()){var S=(e.withCredentials||s(x))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;S&&(v[e.xsrfHeaderName]=S)}"setRequestHeader"in m&&n.forEach(v,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete v[t]:m.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(m.withCredentials=!!e.withCredentials),g&&"json"!==g&&(m.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(d=function(e){m&&(r(!e||e&&e.type?new p("canceled"):e),m.abort(),m=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d))),h||(h=null),m.send(h)}))}},1609:(e,t,r)=>{"use strict";var n=r(4867),o=r(1849),a=r(321),i=r(7185),u=function e(t){var r=new a(t),u=o(a.prototype.request,r);return n.extend(u,a.prototype,r),n.extend(u,r),u.create=function(r){return e(i(t,r))},u}(r(5546));u.Axios=a,u.Cancel=r(5263),u.CancelToken=r(4972),u.isCancel=r(6502),u.VERSION=r(7288).version,u.all=function(e){return Promise.all(e)},u.spread=r(8713),u.isAxiosError=r(6268),e.exports=u,e.exports.default=u},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,r)=>{"use strict";var n=r(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;this.promise.then((function(e){if(r._listeners){var t,n=r._listeners.length;for(t=0;t<n;t++)r._listeners[t](e);r._listeners=null}})),this.promise.then=function(e){var t,n=new Promise((function(e){r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,r)=>{"use strict";var n=r(4867),o=r(5327),a=r(782),i=r(3572),u=r(7185),l=r(4875),s=l.validators;function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=u(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var r=t.transitional;void 0!==r&&l.assertOptions(r,{silentJSONParsing:s.transitional(s.boolean),forcedJSONParsing:s.transitional(s.boolean),clarifyTimeoutError:s.transitional(s.boolean)},!1);var n=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,n.unshift(e.fulfilled,e.rejected))}));var a,c=[];if(this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)})),!o){var f=[i,void 0];for(Array.prototype.unshift.apply(f,n),f=f.concat(c),a=Promise.resolve(t);f.length;)a=a.then(f.shift(),f.shift());return a}for(var p=t;n.length;){var d=n.shift(),h=n.shift();try{p=d(p)}catch(e){h(e);break}}try{a=i(p)}catch(e){return Promise.reject(e)}for(;c.length;)a=a.then(c.shift(),c.shift());return a},c.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,r){return this.request(u(r||{},{method:e,url:t,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,r,n){return this.request(u(n||{},{method:e,url:t,data:r}))}})),e.exports=c},782:(e,t,r)=>{"use strict";var n=r(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,r)=>{"use strict";var n=r(1793),o=r(7303);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},5061:(e,t,r)=>{"use strict";var n=r(481);e.exports=function(e,t,r,o,a){var i=new Error(e);return n(i,t,r,o,a)}},3572:(e,t,r)=>{"use strict";var n=r(4867),o=r(8527),a=r(6502),i=r(5546),u=r(5263);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new u("canceled")}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},7185:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){t=t||{};var r={};function o(e,t){return n.isPlainObject(e)&&n.isPlainObject(t)?n.merge(e,t):n.isPlainObject(t)?n.merge({},t):n.isArray(t)?t.slice():t}function a(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(e[r],t[r])}function i(e){if(!n.isUndefined(t[e]))return o(void 0,t[e])}function u(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:o(void 0,e[r]):o(void 0,t[r])}function l(r){return r in t?o(e[r],t[r]):r in e?o(void 0,e[r]):void 0}var s={url:i,method:i,data:i,baseURL:u,transformRequest:u,transformResponse:u,paramsSerializer:u,timeout:u,timeoutMessage:u,withCredentials:u,adapter:u,responseType:u,xsrfCookieName:u,xsrfHeaderName:u,onUploadProgress:u,onDownloadProgress:u,decompress:u,maxContentLength:u,maxBodyLength:u,transport:u,httpAgent:u,httpsAgent:u,cancelToken:u,socketPath:u,responseEncoding:u,validateStatus:l};return n.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=s[e]||a,o=t(e);n.isUndefined(o)&&t!==l||(r[e]=o)})),r}},6026:(e,t,r)=>{"use strict";var n=r(5061);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},8527:(e,t,r)=>{"use strict";var n=r(4867),o=r(5546);e.exports=function(e,t,r){var a=this||o;return n.forEach(r,(function(r){e=r.call(a,e,t)})),e}},5546:(e,t,r)=>{"use strict";var n=r(4867),o=r(6016),a=r(481),i=r(7874),u={"Content-Type":"application/x-www-form-urlencoded"};function l(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,c={transitional:i,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=r(5448)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(l(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)||t&&"application/json"===t["Content-Type"]?(l(t,"application/json"),function(e,t,r){if(n.isString(e))try{return(0,JSON.parse)(e),n.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||c.transitional,r=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!r&&"json"===this.responseType;if(i||o&&n.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){c.headers[e]=n.merge(u)})),e.exports=c},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.26.1"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},5327:(e,t,r)=>{"use strict";var n=r(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var a;if(r)a=r(t);else if(n.isURLSearchParams(t))a=t.toString();else{var i=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,a,i){var u=[];u.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&u.push("expires="+new Date(r).toGMTString()),n.isString(o)&&u.push("path="+o),n.isString(a)&&u.push("domain="+a),!0===i&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e){return n.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},6016:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},4109:(e,t,r)=>{"use strict";var n=r(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,a,i={};return e?(n.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=n.trim(e.substr(0,a)).toLowerCase(),r=n.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,r)=>{"use strict";var n=r(7288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));var a={};o.transitional=function(e,t,r){function o(e,t){return"[Axios v"+n+"] Transitional option '"+e+"'"+t+(r?". "+r:"")}return function(r,n,i){if(!1===e)throw new Error(o(n," has been removed"+(t?" in "+t:"")));return t&&!a[n]&&(a[n]=!0,console.warn(o(n," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,n,i)}},e.exports={assertOptions:function(e,t,r){if("object"!=typeof e)throw new TypeError("options must be an object");for(var n=Object.keys(e),o=n.length;o-- >0;){var a=n[o],i=t[a];if(i){var u=e[a],l=void 0===u||i(u,a,e);if(!0!==l)throw new TypeError("option "+a+" must be "+l)}else if(!0!==r)throw Error("Unknown option "+a)}},validators:o}},4867:(e,t,r)=>{"use strict";var n=r(1849),o=Object.prototype.toString;function a(e){return Array.isArray(e)}function i(e){return void 0===e}function u(e){return"[object ArrayBuffer]"===o.call(e)}function l(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function f(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:u,isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"[object FormData]"===o.call(e)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&u(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return l(e)&&c(e.pipe)},isURLSearchParams:function(e){return"[object URLSearchParams]"===o.call(e)},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function e(){var t={};function r(r,n){s(t[n])&&s(r)?t[n]=e(t[n],r):s(r)?t[n]=e({},r):a(r)?t[n]=r.slice():t[n]=r}for(var n=0,o=arguments.length;n<o;n++)f(arguments[n],r);return t},extend:function(e,t,r){return f(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},9662:(e,t,r)=>{var n=r(7854),o=r(614),a=r(6330),i=n.TypeError;e.exports=function(e){if(o(e))return e;throw i(a(e)+" is not a function")}},9483:(e,t,r)=>{var n=r(7854),o=r(4411),a=r(6330),i=n.TypeError;e.exports=function(e){if(o(e))return e;throw i(a(e)+" is not a constructor")}},6077:(e,t,r)=>{var n=r(7854),o=r(614),a=n.String,i=n.TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw i("Can't set "+a(e)+" as a prototype")}},1223:(e,t,r)=>{var n=r(5112),o=r(30),a=r(3070),i=n("unscopables"),u=Array.prototype;null==u[i]&&a.f(u,i,{configurable:!0,value:o(null)}),e.exports=function(e){u[i][e]=!0}},1530:(e,t,r)=>{"use strict";var n=r(8710).charAt;e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},5787:(e,t,r)=>{var n=r(7854),o=r(7976),a=n.TypeError;e.exports=function(e,t){if(o(t,e))return e;throw a("Incorrect invocation")}},9670:(e,t,r)=>{var n=r(7854),o=r(111),a=n.String,i=n.TypeError;e.exports=function(e){if(o(e))return e;throw i(a(e)+" is not an object")}},4019:e=>{e.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},7556:(e,t,r)=>{var n=r(7293);e.exports=n((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},260:(e,t,r)=>{"use strict";var n,o,a,i=r(4019),u=r(9781),l=r(7854),s=r(614),c=r(111),f=r(2597),p=r(648),d=r(6330),h=r(8880),v=r(1320),g=r(3070).f,y=r(7976),m=r(9518),b=r(7674),w=r(5112),x=r(9711),E=l.Int8Array,S=E&&E.prototype,k=l.Uint8ClampedArray,O=k&&k.prototype,R=E&&m(E),T=S&&m(S),A=Object.prototype,C=l.TypeError,_=w("toStringTag"),P=x("TYPED_ARRAY_TAG"),N=x("TYPED_ARRAY_CONSTRUCTOR"),M=i&&!!b&&"Opera"!==p(l.opera),L=!1,I={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},j={BigInt64Array:8,BigUint64Array:8},U=function(e){if(!c(e))return!1;var t=p(e);return f(I,t)||f(j,t)};for(n in I)(a=(o=l[n])&&o.prototype)?h(a,N,o):M=!1;for(n in j)(a=(o=l[n])&&o.prototype)&&h(a,N,o);if((!M||!s(R)||R===Function.prototype)&&(R=function(){throw C("Incorrect invocation")},M))for(n in I)l[n]&&b(l[n],R);if((!M||!T||T===A)&&(T=R.prototype,M))for(n in I)l[n]&&b(l[n].prototype,T);if(M&&m(O)!==T&&b(O,T),u&&!f(T,_))for(n in L=!0,g(T,_,{get:function(){return c(this)?this[P]:void 0}}),I)l[n]&&h(l[n],P,n);e.exports={NATIVE_ARRAY_BUFFER_VIEWS:M,TYPED_ARRAY_CONSTRUCTOR:N,TYPED_ARRAY_TAG:L&&P,aTypedArray:function(e){if(U(e))return e;throw C("Target is not a typed array")},aTypedArrayConstructor:function(e){if(s(e)&&(!b||y(R,e)))return e;throw C(d(e)+" is not a typed array constructor")},exportTypedArrayMethod:function(e,t,r,n){if(u){if(r)for(var o in I){var a=l[o];if(a&&f(a.prototype,e))try{delete a.prototype[e]}catch(r){try{a.prototype[e]=t}catch(e){}}}T[e]&&!r||v(T,e,r?t:M&&S[e]||t,n)}},exportTypedArrayStaticMethod:function(e,t,r){var n,o;if(u){if(b){if(r)for(n in I)if((o=l[n])&&f(o,e))try{delete o[e]}catch(e){}if(R[e]&&!r)return;try{return v(R,e,r?t:M&&R[e]||t)}catch(e){}}for(n in I)!(o=l[n])||o[e]&&!r||v(o,e,t)}},isView:function(e){if(!c(e))return!1;var t=p(e);return"DataView"===t||f(I,t)||f(j,t)},isTypedArray:U,TypedArray:R,TypedArrayPrototype:T}},3331:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(9781),i=r(4019),u=r(6530),l=r(8880),s=r(2248),c=r(7293),f=r(5787),p=r(9303),d=r(7466),h=r(7067),v=r(1179),g=r(9518),y=r(7674),m=r(8006).f,b=r(3070).f,w=r(1285),x=r(1589),E=r(8003),S=r(9909),k=u.PROPER,O=u.CONFIGURABLE,R=S.get,T=S.set,A="ArrayBuffer",C="Wrong index",_=n.ArrayBuffer,P=_,N=P&&P.prototype,M=n.DataView,L=M&&M.prototype,I=Object.prototype,j=n.Array,U=n.RangeError,D=o(w),F=o([].reverse),z=v.pack,B=v.unpack,V=function(e){return[255&e]},$=function(e){return[255&e,e>>8&255]},W=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},H=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},q=function(e){return z(e,23,4)},Q=function(e){return z(e,52,8)},Y=function(e,t){b(e.prototype,t,{get:function(){return R(this)[t]}})},G=function(e,t,r,n){var o=h(r),a=R(e);if(o+t>a.byteLength)throw U(C);var i=R(a.buffer).bytes,u=o+a.byteOffset,l=x(i,u,u+t);return n?l:F(l)},K=function(e,t,r,n,o,a){var i=h(r),u=R(e);if(i+t>u.byteLength)throw U(C);for(var l=R(u.buffer).bytes,s=i+u.byteOffset,c=n(+o),f=0;f<t;f++)l[s+f]=c[a?f:t-f-1]};if(i){var X=k&&_.name!==A;if(c((function(){_(1)}))&&c((function(){new _(-1)}))&&!c((function(){return new _,new _(1.5),new _(NaN),X&&!O})))X&&O&&l(_,"name",A);else{(P=function(e){return f(this,N),new _(h(e))}).prototype=N;for(var J,Z=m(_),ee=0;Z.length>ee;)(J=Z[ee++])in P||l(P,J,_[J]);N.constructor=P}y&&g(L)!==I&&y(L,I);var te=new M(new P(2)),re=o(L.setInt8);te.setInt8(0,2147483648),te.setInt8(1,2147483649),!te.getInt8(0)&&te.getInt8(1)||s(L,{setInt8:function(e,t){re(this,e,t<<24>>24)},setUint8:function(e,t){re(this,e,t<<24>>24)}},{unsafe:!0})}else N=(P=function(e){f(this,N);var t=h(e);T(this,{bytes:D(j(t),0),byteLength:t}),a||(this.byteLength=t)}).prototype,L=(M=function(e,t,r){f(this,L),f(e,N);var n=R(e).byteLength,o=p(t);if(o<0||o>n)throw U("Wrong offset");if(o+(r=void 0===r?n-o:d(r))>n)throw U("Wrong length");T(this,{buffer:e,byteLength:r,byteOffset:o}),a||(this.buffer=e,this.byteLength=r,this.byteOffset=o)}).prototype,a&&(Y(P,"byteLength"),Y(M,"buffer"),Y(M,"byteLength"),Y(M,"byteOffset")),s(L,{getInt8:function(e){return G(this,1,e)[0]<<24>>24},getUint8:function(e){return G(this,1,e)[0]},getInt16:function(e){var t=G(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=G(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return H(G(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return H(G(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return B(G(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return B(G(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){K(this,1,e,V,t)},setUint8:function(e,t){K(this,1,e,V,t)},setInt16:function(e,t){K(this,2,e,$,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){K(this,2,e,$,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){K(this,4,e,W,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){K(this,4,e,W,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){K(this,4,e,q,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){K(this,8,e,Q,t,arguments.length>2?arguments[2]:void 0)}});E(P,A),E(M,"DataView"),e.exports={ArrayBuffer:P,DataView:M}},1048:(e,t,r)=>{"use strict";var n=r(7908),o=r(1400),a=r(6244),i=Math.min;e.exports=[].copyWithin||function(e,t){var r=n(this),u=a(r),l=o(e,u),s=o(t,u),c=arguments.length>2?arguments[2]:void 0,f=i((void 0===c?u:o(c,u))-s,u-l),p=1;for(s<l&&l<s+f&&(p=-1,s+=f-1,l+=f-1);f-- >0;)s in r?r[l]=r[s]:delete r[l],l+=p,s+=p;return r}},1285:(e,t,r)=>{"use strict";var n=r(7908),o=r(1400),a=r(6244);e.exports=function(e){for(var t=n(this),r=a(t),i=arguments.length,u=o(i>1?arguments[1]:void 0,r),l=i>2?arguments[2]:void 0,s=void 0===l?r:o(l,r);s>u;)t[u++]=e;return t}},8533:(e,t,r)=>{"use strict";var n=r(2092).forEach,o=r(2133)("forEach");e.exports=o?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},7745:(e,t,r)=>{var n=r(6244);e.exports=function(e,t){for(var r=0,o=n(t),a=new e(o);o>r;)a[r]=t[r++];return a}},8457:(e,t,r)=>{"use strict";var n=r(7854),o=r(9974),a=r(6916),i=r(7908),u=r(3411),l=r(7659),s=r(4411),c=r(6244),f=r(6135),p=r(8554),d=r(1246),h=n.Array;e.exports=function(e){var t=i(e),r=s(this),n=arguments.length,v=n>1?arguments[1]:void 0,g=void 0!==v;g&&(v=o(v,n>2?arguments[2]:void 0));var y,m,b,w,x,E,S=d(t),k=0;if(!S||this==h&&l(S))for(y=c(t),m=r?new this(y):h(y);y>k;k++)E=g?v(t[k],k):t[k],f(m,k,E);else for(x=(w=p(t,S)).next,m=r?new this:[];!(b=a(x,w)).done;k++)E=g?u(w,v,[b.value,k],!0):b.value,f(m,k,E);return m.length=k,m}},1318:(e,t,r)=>{var n=r(5656),o=r(1400),a=r(6244),i=function(e){return function(t,r,i){var u,l=n(t),s=a(l),c=o(i,s);if(e&&r!=r){for(;s>c;)if((u=l[c++])!=u)return!0}else for(;s>c;c++)if((e||c in l)&&l[c]===r)return e||c||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},2092:(e,t,r)=>{var n=r(9974),o=r(1702),a=r(8361),i=r(7908),u=r(6244),l=r(5417),s=o([].push),c=function(e){var t=1==e,r=2==e,o=3==e,c=4==e,f=6==e,p=7==e,d=5==e||f;return function(h,v,g,y){for(var m,b,w=i(h),x=a(w),E=n(v,g),S=u(x),k=0,O=y||l,R=t?O(h,S):r||p?O(h,0):void 0;S>k;k++)if((d||k in x)&&(b=E(m=x[k],k,w),e))if(t)R[k]=b;else if(b)switch(e){case 3:return!0;case 5:return m;case 6:return k;case 2:s(R,m)}else switch(e){case 4:return!1;case 7:s(R,m)}return f?-1:o||c?c:R}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterReject:c(7)}},6583:(e,t,r)=>{"use strict";var n=r(2104),o=r(5656),a=r(9303),i=r(6244),u=r(2133),l=Math.min,s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0,f=u("lastIndexOf"),p=c||!f;e.exports=p?function(e){if(c)return n(s,this,arguments)||0;var t=o(this),r=i(t),u=r-1;for(arguments.length>1&&(u=l(u,a(arguments[1]))),u<0&&(u=r+u);u>=0;u--)if(u in t&&t[u]===e)return u||0;return-1}:s},1194:(e,t,r)=>{var n=r(7293),o=r(5112),a=r(7392),i=o("species");e.exports=function(e){return a>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},2133:(e,t,r)=>{"use strict";var n=r(7293);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){return 1},1)}))}},3671:(e,t,r)=>{var n=r(7854),o=r(9662),a=r(7908),i=r(8361),u=r(6244),l=n.TypeError,s=function(e){return function(t,r,n,s){o(r);var c=a(t),f=i(c),p=u(c),d=e?p-1:0,h=e?-1:1;if(n<2)for(;;){if(d in f){s=f[d],d+=h;break}if(d+=h,e?d<0:p<=d)throw l("Reduce of empty array with no initial value")}for(;e?d>=0:p>d;d+=h)d in f&&(s=r(s,f[d],d,c));return s}};e.exports={left:s(!1),right:s(!0)}},1589:(e,t,r)=>{var n=r(7854),o=r(1400),a=r(6244),i=r(6135),u=n.Array,l=Math.max;e.exports=function(e,t,r){for(var n=a(e),s=o(t,n),c=o(void 0===r?n:r,n),f=u(l(c-s,0)),p=0;s<c;s++,p++)i(f,p,e[s]);return f.length=p,f}},206:(e,t,r)=>{var n=r(1702);e.exports=n([].slice)},4362:(e,t,r)=>{var n=r(1589),o=Math.floor,a=function(e,t){var r=e.length,l=o(r/2);return r<8?i(e,t):u(e,a(n(e,0,l),t),a(n(e,l),t),t)},i=function(e,t){for(var r,n,o=e.length,a=1;a<o;){for(n=a,r=e[a];n&&t(e[n-1],r)>0;)e[n]=e[--n];n!==a++&&(e[n]=r)}return e},u=function(e,t,r,n){for(var o=t.length,a=r.length,i=0,u=0;i<o||u<a;)e[i+u]=i<o&&u<a?n(t[i],r[u])<=0?t[i++]:r[u++]:i<o?t[i++]:r[u++];return e};e.exports=a},7475:(e,t,r)=>{var n=r(7854),o=r(3157),a=r(4411),i=r(111),u=r(5112)("species"),l=n.Array;e.exports=function(e){var t;return o(e)&&(t=e.constructor,(a(t)&&(t===l||o(t.prototype))||i(t)&&null===(t=t[u]))&&(t=void 0)),void 0===t?l:t}},5417:(e,t,r)=>{var n=r(7475);e.exports=function(e,t){return new(n(e))(0===t?0:t)}},4170:e=>{for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",r={},n=0;n<66;n++)r[t.charAt(n)]=n;e.exports={itoc:t,ctoi:r}},3411:(e,t,r)=>{var n=r(9670),o=r(9212);e.exports=function(e,t,r,a){try{return a?t(n(r)[0],r[1]):t(r)}catch(t){o(e,"throw",t)}}},7072:(e,t,r)=>{var n=r(5112)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},e(a)}catch(e){}return r}},4326:(e,t,r)=>{var n=r(1702),o=n({}.toString),a=n("".slice);e.exports=function(e){return a(o(e),8,-1)}},648:(e,t,r)=>{var n=r(7854),o=r(1694),a=r(614),i=r(4326),u=r(5112)("toStringTag"),l=n.Object,s="Arguments"==i(function(){return arguments}());e.exports=o?i:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=l(e),u))?r:s?i(t):"Object"==(n=i(t))&&a(t.callee)?"Arguments":n}},7741:(e,t,r)=>{var n=r(1702)("".replace),o=String(Error("zxcasd").stack),a=/\n\s*at [^:]*:[^\n]*/,i=a.test(o);e.exports=function(e,t){if(i&&"string"==typeof e)for(;t--;)e=n(e,a,"");return e}},5631:(e,t,r)=>{"use strict";var n=r(3070).f,o=r(30),a=r(2248),i=r(9974),u=r(5787),l=r(408),s=r(654),c=r(6340),f=r(9781),p=r(2423).fastKey,d=r(9909),h=d.set,v=d.getterFor;e.exports={getConstructor:function(e,t,r,s){var c=e((function(e,n){u(e,d),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),null!=n&&l(n,e[s],{that:e,AS_ENTRIES:r})})),d=c.prototype,g=v(t),y=function(e,t,r){var n,o,a=g(e),i=m(e,t);return i?i.value=r:(a.last=i={index:o=p(t,!0),key:t,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var r,n=g(e),o=p(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==t)return r};return a(d,{clear:function(){for(var e=g(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,r=g(t),n=m(t,e);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=g(this),n=i(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(d,r?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return y(this,0===e?0:e,t)}}:{add:function(e){return y(this,e=0===e?0:e,e)}}),f&&n(d,"size",{get:function(){return g(this).size}}),c},setStrong:function(e,t,r){var n=t+" Iterator",o=v(t),a=v(n);s(e,t,(function(e,t){h(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),c(t)}}},9320:(e,t,r)=>{"use strict";var n=r(1702),o=r(2248),a=r(2423).getWeakData,i=r(9670),u=r(111),l=r(5787),s=r(408),c=r(2092),f=r(2597),p=r(9909),d=p.set,h=p.getterFor,v=c.find,g=c.findIndex,y=n([].splice),m=0,b=function(e){return e.frozen||(e.frozen=new w)},w=function(){this.entries=[]},x=function(e,t){return v(e.entries,(function(e){return e[0]===t}))};w.prototype={get:function(e){var t=x(this,e);if(t)return t[1]},has:function(e){return!!x(this,e)},set:function(e,t){var r=x(this,e);r?r[1]=t:this.entries.push([e,t])},delete:function(e){var t=g(this.entries,(function(t){return t[0]===e}));return~t&&y(this.entries,t,1),!!~t}},e.exports={getConstructor:function(e,t,r,n){var c=e((function(e,o){l(e,p),d(e,{type:t,id:m++,frozen:void 0}),null!=o&&s(o,e[n],{that:e,AS_ENTRIES:r})})),p=c.prototype,v=h(t),g=function(e,t,r){var n=v(e),o=a(i(t),!0);return!0===o?b(n).set(t,r):o[n.id]=r,e};return o(p,{delete:function(e){var t=v(this);if(!u(e))return!1;var r=a(e);return!0===r?b(t).delete(e):r&&f(r,t.id)&&delete r[t.id]},has:function(e){var t=v(this);if(!u(e))return!1;var r=a(e);return!0===r?b(t).has(e):r&&f(r,t.id)}}),o(p,r?{get:function(e){var t=v(this);if(u(e)){var r=a(e);return!0===r?b(t).get(e):r?r[t.id]:void 0}},set:function(e,t){return g(this,e,t)}}:{add:function(e){return g(this,e,!0)}}),c}}},7710:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1702),i=r(4705),u=r(1320),l=r(2423),s=r(408),c=r(5787),f=r(614),p=r(111),d=r(7293),h=r(7072),v=r(8003),g=r(9587);e.exports=function(e,t,r){var y=-1!==e.indexOf("Map"),m=-1!==e.indexOf("Weak"),b=y?"set":"add",w=o[e],x=w&&w.prototype,E=w,S={},k=function(e){var t=a(x[e]);u(x,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(m&&!p(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return m&&!p(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(m&&!p(e))&&t(this,0===e?0:e)}:function(e,r){return t(this,0===e?0:e,r),this})};if(i(e,!f(w)||!(m||x.forEach&&!d((function(){(new w).entries().next()})))))E=r.getConstructor(t,e,y,b),l.enable();else if(i(e,!0)){var O=new E,R=O[b](m?{}:-0,1)!=O,T=d((function(){O.has(1)})),A=h((function(e){new w(e)})),C=!m&&d((function(){for(var e=new w,t=5;t--;)e[b](t,t);return!e.has(-0)}));A||((E=t((function(e,t){c(e,x);var r=g(new w,e,E);return null!=t&&s(t,r[b],{that:r,AS_ENTRIES:y}),r}))).prototype=x,x.constructor=E),(T||C)&&(k("delete"),k("has"),y&&k("get")),(C||R)&&k(b),m&&x.clear&&delete x.clear}return S[e]=E,n({global:!0,forced:E!=w},S),v(E,e),m||r.setStrong(E,e,y),E}},9920:(e,t,r)=>{var n=r(2597),o=r(3887),a=r(1236),i=r(3070);e.exports=function(e,t,r){for(var u=o(t),l=i.f,s=a.f,c=0;c<u.length;c++){var f=u[c];n(e,f)||r&&n(r,f)||l(e,f,s(t,f))}}},4964:(e,t,r)=>{var n=r(5112)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(r){try{return t[n]=!1,"/./"[e](t)}catch(e){}}return!1}},8544:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4230:(e,t,r)=>{var n=r(1702),o=r(4488),a=r(1340),i=/"/g,u=n("".replace);e.exports=function(e,t,r,n){var l=a(o(e)),s="<"+t;return""!==r&&(s+=" "+r+'="'+u(a(n),i,"&quot;")+'"'),s+">"+l+"</"+t+">"}},4994:(e,t,r)=>{"use strict";var n=r(3383).IteratorPrototype,o=r(30),a=r(9114),i=r(8003),u=r(7497),l=function(){return this};e.exports=function(e,t,r,s){var c=t+" Iterator";return e.prototype=o(n,{next:a(+!s,r)}),i(e,c,!1,!0),u[c]=l,e}},8880:(e,t,r)=>{var n=r(9781),o=r(3070),a=r(9114);e.exports=n?function(e,t,r){return o.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},9114:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:(e,t,r)=>{"use strict";var n=r(4948),o=r(3070),a=r(9114);e.exports=function(e,t,r){var i=n(t);i in e?o.f(e,i,a(0,r)):e[i]=r}},5573:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(7293),i=r(6650).start,u=n.RangeError,l=Math.abs,s=Date.prototype,c=s.toISOString,f=o(s.getTime),p=o(s.getUTCDate),d=o(s.getUTCFullYear),h=o(s.getUTCHours),v=o(s.getUTCMilliseconds),g=o(s.getUTCMinutes),y=o(s.getUTCMonth),m=o(s.getUTCSeconds);e.exports=a((function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-50000000000001))}))||!a((function(){c.call(new Date(NaN))}))?function(){if(!isFinite(f(this)))throw u("Invalid time value");var e=this,t=d(e),r=v(e),n=t<0?"-":t>9999?"+":"";return n+i(l(t),n?6:4,0)+"-"+i(y(e)+1,2,0)+"-"+i(p(e),2,0)+"T"+i(h(e),2,0)+":"+i(g(e),2,0)+":"+i(m(e),2,0)+"."+i(r,3,0)+"Z"}:c},8709:(e,t,r)=>{"use strict";var n=r(7854),o=r(9670),a=r(2140),i=n.TypeError;e.exports=function(e){if(o(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw i("Incorrect hint");return a(this,e)}},654:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916),a=r(1913),i=r(6530),u=r(614),l=r(4994),s=r(9518),c=r(7674),f=r(8003),p=r(8880),d=r(1320),h=r(5112),v=r(7497),g=r(3383),y=i.PROPER,m=i.CONFIGURABLE,b=g.IteratorPrototype,w=g.BUGGY_SAFARI_ITERATORS,x=h("iterator"),E="keys",S="values",k="entries",O=function(){return this};e.exports=function(e,t,r,i,h,g,R){l(r,t,i);var T,A,C,_=function(e){if(e===h&&I)return I;if(!w&&e in M)return M[e];switch(e){case E:case S:case k:return function(){return new r(this,e)}}return function(){return new r(this)}},P=t+" Iterator",N=!1,M=e.prototype,L=M[x]||M["@@iterator"]||h&&M[h],I=!w&&L||_(h),j="Array"==t&&M.entries||L;if(j&&(T=s(j.call(new e)))!==Object.prototype&&T.next&&(a||s(T)===b||(c?c(T,b):u(T[x])||d(T,x,O)),f(T,P,!0,!0),a&&(v[P]=O)),y&&h==S&&L&&L.name!==S&&(!a&&m?p(M,"name",S):(N=!0,I=function(){return o(L,this)})),h)if(A={values:_(S),keys:g?I:_(E),entries:_(k)},R)for(C in A)(w||N||!(C in M))&&d(M,C,A[C]);else n({target:t,proto:!0,forced:w||N},A);return a&&!R||M[x]===I||d(M,x,I,{name:h}),v[t]=I,A}},7235:(e,t,r)=>{var n=r(857),o=r(2597),a=r(6061),i=r(3070).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},9781:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(e,t,r)=>{var n=r(7854),o=r(111),a=n.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},3678:e=>{e.exports={IndexSizeError:{s:"INDEX_SIZE_ERR",c:1,m:1},DOMStringSizeError:{s:"DOMSTRING_SIZE_ERR",c:2,m:0},HierarchyRequestError:{s:"HIERARCHY_REQUEST_ERR",c:3,m:1},WrongDocumentError:{s:"WRONG_DOCUMENT_ERR",c:4,m:1},InvalidCharacterError:{s:"INVALID_CHARACTER_ERR",c:5,m:1},NoDataAllowedError:{s:"NO_DATA_ALLOWED_ERR",c:6,m:0},NoModificationAllowedError:{s:"NO_MODIFICATION_ALLOWED_ERR",c:7,m:1},NotFoundError:{s:"NOT_FOUND_ERR",c:8,m:1},NotSupportedError:{s:"NOT_SUPPORTED_ERR",c:9,m:1},InUseAttributeError:{s:"INUSE_ATTRIBUTE_ERR",c:10,m:1},InvalidStateError:{s:"INVALID_STATE_ERR",c:11,m:1},SyntaxError:{s:"SYNTAX_ERR",c:12,m:1},InvalidModificationError:{s:"INVALID_MODIFICATION_ERR",c:13,m:1},NamespaceError:{s:"NAMESPACE_ERR",c:14,m:1},InvalidAccessError:{s:"INVALID_ACCESS_ERR",c:15,m:1},ValidationError:{s:"VALIDATION_ERR",c:16,m:0},TypeMismatchError:{s:"TYPE_MISMATCH_ERR",c:17,m:1},SecurityError:{s:"SECURITY_ERR",c:18,m:1},NetworkError:{s:"NETWORK_ERR",c:19,m:1},AbortError:{s:"ABORT_ERR",c:20,m:1},URLMismatchError:{s:"URL_MISMATCH_ERR",c:21,m:1},QuotaExceededError:{s:"QUOTA_EXCEEDED_ERR",c:22,m:1},TimeoutError:{s:"TIMEOUT_ERR",c:23,m:1},InvalidNodeTypeError:{s:"INVALID_NODE_TYPE_ERR",c:24,m:1},DataCloneError:{s:"DATA_CLONE_ERR",c:25,m:1}}},8324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(e,t,r)=>{var n=r(317)("span").classList,o=n&&n.constructor&&n.constructor.prototype;e.exports=o===Object.prototype?void 0:o},8886:(e,t,r)=>{var n=r(8113).match(/firefox\/(\d+)/i);e.exports=!!n&&+n[1]},7871:e=>{e.exports="object"==typeof window},256:(e,t,r)=>{var n=r(8113);e.exports=/MSIE|Trident/.test(n)},1528:(e,t,r)=>{var n=r(8113),o=r(7854);e.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},8334:(e,t,r)=>{var n=r(8113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},5268:(e,t,r)=>{var n=r(4326),o=r(7854);e.exports="process"==n(o.process)},1036:(e,t,r)=>{var n=r(8113);e.exports=/web0s(?!.*chrome)/i.test(n)},8113:(e,t,r)=>{var n=r(5005);e.exports=n("navigator","userAgent")||""},7392:(e,t,r)=>{var n,o,a=r(7854),i=r(8113),u=a.process,l=a.Deno,s=u&&u.versions||l&&l.version,c=s&&s.v8;c&&(o=(n=c.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&i&&(!(n=i.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\/(\d+)/))&&(o=+n[1]),e.exports=o},8008:(e,t,r)=>{var n=r(8113).match(/AppleWebKit\/(\d+)\./);e.exports=!!n&&+n[1]},748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2914:(e,t,r)=>{var n=r(7293),o=r(9114);e.exports=!n((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",o(1,7)),7!==e.stack)}))},7762:(e,t,r)=>{"use strict";var n=r(9781),o=r(7293),a=r(9670),i=r(30),u=r(6277),l=Error.prototype.toString,s=o((function(){if(n){var e=i(Object.defineProperty({},"name",{get:function(){return this===e}}));if("true"!==l.call(e))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));e.exports=s?function(){var e=a(this),t=u(e.name,"Error"),r=u(e.message);return t?r?t+": "+r:t:r}:l},2109:(e,t,r)=>{var n=r(7854),o=r(1236).f,a=r(8880),i=r(1320),u=r(3505),l=r(9920),s=r(4705);e.exports=function(e,t){var r,c,f,p,d,h=e.target,v=e.global,g=e.stat;if(r=v?n:g?n[h]||u(h,{}):(n[h]||{}).prototype)for(c in t){if(p=t[c],f=e.noTargetGet?(d=o(r,c))&&d.value:r[c],!s(v?c:h+(g?".":"#")+c,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;l(p,f)}(e.sham||f&&f.sham)&&a(p,"sham",!0),i(r,c,p,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},7007:(e,t,r)=>{"use strict";r(4916);var n=r(1702),o=r(1320),a=r(2261),i=r(7293),u=r(5112),l=r(8880),s=u("species"),c=RegExp.prototype;e.exports=function(e,t,r,f){var p=u(e),d=!i((function(){var t={};return t[p]=function(){return 7},7!=""[e](t)})),h=d&&!i((function(){var t=!1,r=/a/;return"split"===e&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[p]=/./[p]),r.exec=function(){return t=!0,null},r[p](""),!t}));if(!d||!h||r){var v=n(/./[p]),g=t(p,""[e],(function(e,t,r,o,i){var u=n(e),l=t.exec;return l===a||l===c.exec?d&&!i?{done:!0,value:v(t,r,o)}:{done:!0,value:u(r,t,o)}:{done:!1}}));o(String.prototype,e,g[0]),o(c,p,g[1])}f&&l(c[p],"sham",!0)}},6790:(e,t,r)=>{"use strict";var n=r(7854),o=r(3157),a=r(6244),i=r(9974),u=n.TypeError,l=function(e,t,r,n,s,c,f,p){for(var d,h,v=s,g=0,y=!!f&&i(f,p);g<n;){if(g in r){if(d=y?y(r[g],g,t):r[g],c>0&&o(d))h=a(d),v=l(e,t,d,h,v,c-1)-1;else{if(v>=9007199254740991)throw u("Exceed the acceptable array length");e[v]=d}v++}g++}return v};e.exports=l},6677:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},2104:(e,t,r)=>{var n=r(4374),o=Function.prototype,a=o.apply,i=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?i.bind(a):function(){return i.apply(a,arguments)})},9974:(e,t,r)=>{var n=r(1702),o=r(9662),a=r(4374),i=n(n.bind);e.exports=function(e,t){return o(e),void 0===t?e:a?i(e,t):function(){return e.apply(t,arguments)}}},4374:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},7065:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(9662),i=r(111),u=r(2597),l=r(206),s=r(4374),c=n.Function,f=o([].concat),p=o([].join),d={},h=function(e,t,r){if(!u(d,t)){for(var n=[],o=0;o<t;o++)n[o]="a["+o+"]";d[t]=c("C,a","return new C("+p(n,",")+")")}return d[t](e,r)};e.exports=s?c.bind:function(e){var t=a(this),r=t.prototype,n=l(arguments,1),o=function(){var r=f(n,l(arguments));return this instanceof o?h(t,r.length,r):t.apply(e,r)};return i(r)&&(o.prototype=r),o}},6916:(e,t,r)=>{var n=r(4374),o=Function.prototype.call;e.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},6530:(e,t,r)=>{var n=r(9781),o=r(2597),a=Function.prototype,i=n&&Object.getOwnPropertyDescriptor,u=o(a,"name"),l=u&&"something"===function(){}.name,s=u&&(!n||n&&i(a,"name").configurable);e.exports={EXISTS:u,PROPER:l,CONFIGURABLE:s}},1702:(e,t,r)=>{var n=r(4374),o=Function.prototype,a=o.bind,i=o.call,u=n&&a.bind(i,i);e.exports=n?function(e){return e&&u(e)}:function(e){return e&&function(){return i.apply(e,arguments)}}},5005:(e,t,r)=>{var n=r(7854),o=r(614),a=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?a(n[e]):n[e]&&n[e][t]}},1246:(e,t,r)=>{var n=r(648),o=r(8173),a=r(7497),i=r(5112)("iterator");e.exports=function(e){if(null!=e)return o(e,i)||o(e,"@@iterator")||a[n(e)]}},8554:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(9662),i=r(9670),u=r(6330),l=r(1246),s=n.TypeError;e.exports=function(e,t){var r=arguments.length<2?l(e):t;if(a(r))return i(o(r,e));throw s(u(e)+" is not iterable")}},8173:(e,t,r)=>{var n=r(9662);e.exports=function(e,t){var r=e[t];return null==r?void 0:n(r)}},647:(e,t,r)=>{var n=r(1702),o=r(7908),a=Math.floor,i=n("".charAt),u=n("".replace),l=n("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,r,n,f,p){var d=r+e.length,h=n.length,v=c;return void 0!==f&&(f=o(f),v=s),u(p,v,(function(o,u){var s;switch(i(u,0)){case"$":return"$";case"&":return e;case"`":return l(t,0,r);case"'":return l(t,d);case"<":s=f[l(u,1,-1)];break;default:var c=+u;if(0===c)return o;if(c>h){var p=a(c/10);return 0===p?o:p<=h?void 0===n[p-1]?i(u,1):n[p-1]+i(u,1):o}s=n[c-1]}return void 0===s?"":s}))}},7854:(e,t,r)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},2597:(e,t,r)=>{var n=r(1702),o=r(7908),a=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return a(o(e),t)}},3501:e=>{e.exports={}},842:(e,t,r)=>{var n=r(7854);e.exports=function(e,t){var r=n.console;r&&r.error&&(1==arguments.length?r.error(e):r.error(e,t))}},490:(e,t,r)=>{var n=r(5005);e.exports=n("document","documentElement")},4664:(e,t,r)=>{var n=r(9781),o=r(7293),a=r(317);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},1179:(e,t,r)=>{var n=r(7854).Array,o=Math.abs,a=Math.pow,i=Math.floor,u=Math.log,l=Math.LN2;e.exports={pack:function(e,t,r){var s,c,f,p=n(r),d=8*r-t-1,h=(1<<d)-1,v=h>>1,g=23===t?a(2,-24)-a(2,-77):0,y=e<0||0===e&&1/e<0?1:0,m=0;for((e=o(e))!=e||e===1/0?(c=e!=e?1:0,s=h):(s=i(u(e)/l),e*(f=a(2,-s))<1&&(s--,f*=2),(e+=s+v>=1?g/f:g*a(2,1-v))*f>=2&&(s++,f/=2),s+v>=h?(c=0,s=h):s+v>=1?(c=(e*f-1)*a(2,t),s+=v):(c=e*a(2,v-1)*a(2,t),s=0));t>=8;)p[m++]=255&c,c/=256,t-=8;for(s=s<<t|c,d+=t;d>0;)p[m++]=255&s,s/=256,d-=8;return p[--m]|=128*y,p},unpack:function(e,t){var r,n=e.length,o=8*n-t-1,i=(1<<o)-1,u=i>>1,l=o-7,s=n-1,c=e[s--],f=127&c;for(c>>=7;l>0;)f=256*f+e[s--],l-=8;for(r=f&(1<<-l)-1,f>>=-l,l+=t;l>0;)r=256*r+e[s--],l-=8;if(0===f)f=1-u;else{if(f===i)return r?NaN:c?-1/0:1/0;r+=a(2,t),f-=u}return(c?-1:1)*r*a(2,f-t)}}},8361:(e,t,r)=>{var n=r(7854),o=r(1702),a=r(7293),i=r(4326),u=n.Object,l=o("".split);e.exports=a((function(){return!u("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?l(e,""):u(e)}:u},9587:(e,t,r)=>{var n=r(614),o=r(111),a=r(7674);e.exports=function(e,t,r){var i,u;return a&&n(i=t.constructor)&&i!==r&&o(u=i.prototype)&&u!==r.prototype&&a(e,u),e}},2788:(e,t,r)=>{var n=r(1702),o=r(614),a=r(5465),i=n(Function.toString);o(a.inspectSource)||(a.inspectSource=function(e){return i(e)}),e.exports=a.inspectSource},8340:(e,t,r)=>{var n=r(111),o=r(8880);e.exports=function(e,t){n(t)&&"cause"in t&&o(e,"cause",t.cause)}},2423:(e,t,r)=>{var n=r(2109),o=r(1702),a=r(3501),i=r(111),u=r(2597),l=r(3070).f,s=r(8006),c=r(1156),f=r(2050),p=r(9711),d=r(6677),h=!1,v=p("meta"),g=0,y=function(e){l(e,v,{value:{objectID:"O"+g++,weakData:{}}})},m=e.exports={enable:function(){m.enable=function(){},h=!0;var e=s.f,t=o([].splice),r={};r[v]=1,e(r).length&&(s.f=function(r){for(var n=e(r),o=0,a=n.length;o<a;o++)if(n[o]===v){t(n,o,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:c.f}))},fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!u(e,v)){if(!f(e))return"F";if(!t)return"E";y(e)}return e[v].objectID},getWeakData:function(e,t){if(!u(e,v)){if(!f(e))return!0;if(!t)return!1;y(e)}return e[v].weakData},onFreeze:function(e){return d&&h&&f(e)&&!u(e,v)&&y(e),e}};a[v]=!0},9909:(e,t,r)=>{var n,o,a,i=r(8536),u=r(7854),l=r(1702),s=r(111),c=r(8880),f=r(2597),p=r(5465),d=r(6200),h=r(3501),v="Object already initialized",g=u.TypeError,y=u.WeakMap;if(i||p.state){var m=p.state||(p.state=new y),b=l(m.get),w=l(m.has),x=l(m.set);n=function(e,t){if(w(m,e))throw new g(v);return t.facade=e,x(m,e,t),t},o=function(e){return b(m,e)||{}},a=function(e){return w(m,e)}}else{var E=d("state");h[E]=!0,n=function(e,t){if(f(e,E))throw new g(v);return t.facade=e,c(e,E,t),t},o=function(e){return f(e,E)?e[E]:{}},a=function(e){return f(e,E)}}e.exports={set:n,get:o,has:a,enforce:function(e){return a(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!s(t)||(r=o(t)).type!==e)throw g("Incompatible receiver, "+e+" required");return r}}}},7659:(e,t,r)=>{var n=r(5112),o=r(7497),a=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},3157:(e,t,r)=>{var n=r(4326);e.exports=Array.isArray||function(e){return"Array"==n(e)}},614:e=>{e.exports=function(e){return"function"==typeof e}},4411:(e,t,r)=>{var n=r(1702),o=r(7293),a=r(614),i=r(648),u=r(5005),l=r(2788),s=function(){},c=[],f=u("Reflect","construct"),p=/^\s*(?:class|function)\b/,d=n(p.exec),h=!p.exec(s),v=function(e){if(!a(e))return!1;try{return f(s,c,e),!0}catch(e){return!1}},g=function(e){if(!a(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!d(p,l(e))}catch(e){return!0}};g.sham=!0,e.exports=!f||o((function(){var e;return v(v.call)||!v(Object)||!v((function(){e=!0}))||e}))?g:v},5032:(e,t,r)=>{var n=r(2597);e.exports=function(e){return void 0!==e&&(n(e,"value")||n(e,"writable"))}},4705:(e,t,r)=>{var n=r(7293),o=r(614),a=/#|\.prototype\./,i=function(e,t){var r=l[u(e)];return r==c||r!=s&&(o(t)?n(t):!!t)},u=i.normalize=function(e){return String(e).replace(a,".").toLowerCase()},l=i.data={},s=i.NATIVE="N",c=i.POLYFILL="P";e.exports=i},5988:(e,t,r)=>{var n=r(111),o=Math.floor;e.exports=Number.isInteger||function(e){return!n(e)&&isFinite(e)&&o(e)===e}},111:(e,t,r)=>{var n=r(614);e.exports=function(e){return"object"==typeof e?null!==e:n(e)}},1913:e=>{e.exports=!1},7850:(e,t,r)=>{var n=r(111),o=r(4326),a=r(5112)("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[a])?!!t:"RegExp"==o(e))}},2190:(e,t,r)=>{var n=r(7854),o=r(5005),a=r(614),i=r(7976),u=r(3307),l=n.Object;e.exports=u?function(e){return"symbol"==typeof e}:function(e){var t=o("Symbol");return a(t)&&i(t.prototype,l(e))}},408:(e,t,r)=>{var n=r(7854),o=r(9974),a=r(6916),i=r(9670),u=r(6330),l=r(7659),s=r(6244),c=r(7976),f=r(8554),p=r(1246),d=r(9212),h=n.TypeError,v=function(e,t){this.stopped=e,this.result=t},g=v.prototype;e.exports=function(e,t,r){var n,y,m,b,w,x,E,S=r&&r.that,k=!(!r||!r.AS_ENTRIES),O=!(!r||!r.IS_ITERATOR),R=!(!r||!r.INTERRUPTED),T=o(t,S),A=function(e){return n&&d(n,"normal",e),new v(!0,e)},C=function(e){return k?(i(e),R?T(e[0],e[1],A):T(e[0],e[1])):R?T(e,A):T(e)};if(O)n=e;else{if(!(y=p(e)))throw h(u(e)+" is not iterable");if(l(y)){for(m=0,b=s(e);b>m;m++)if((w=C(e[m]))&&c(g,w))return w;return new v(!1)}n=f(e,y)}for(x=n.next;!(E=a(x,n)).done;){try{w=C(E.value)}catch(e){d(n,"throw",e)}if("object"==typeof w&&w&&c(g,w))return w}return new v(!1)}},9212:(e,t,r)=>{var n=r(6916),o=r(9670),a=r(8173);e.exports=function(e,t,r){var i,u;o(e);try{if(!(i=a(e,"return"))){if("throw"===t)throw r;return r}i=n(i,e)}catch(e){u=!0,i=e}if("throw"===t)throw r;if(u)throw i;return o(i),r}},3383:(e,t,r)=>{"use strict";var n,o,a,i=r(7293),u=r(614),l=r(30),s=r(9518),c=r(1320),f=r(5112),p=r(1913),d=f("iterator"),h=!1;[].keys&&("next"in(a=[].keys())?(o=s(s(a)))!==Object.prototype&&(n=o):h=!0),null==n||i((function(){var e={};return n[d].call(e)!==e}))?n={}:p&&(n=l(n)),u(n[d])||c(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:h}},7497:e=>{e.exports={}},6244:(e,t,r)=>{var n=r(7466);e.exports=function(e){return n(e.length)}},6736:e=>{var t=Math.expm1,r=Math.exp;e.exports=!t||t(10)>22025.465794806718||t(10)<22025.465794806718||-2e-17!=t(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:r(e)-1}:t},6130:(e,t,r)=>{var n=r(4310),o=Math.abs,a=Math.pow,i=a(2,-52),u=a(2,-23),l=a(2,127)*(2-u),s=a(2,-126);e.exports=Math.fround||function(e){var t,r,a=o(e),c=n(e);return a<s?c*(a/s/u+1/i-1/i)*s*u:(r=(t=(1+u/i)*a)-(t-a))>l||r!=r?c*(1/0):c*r}},202:e=>{var t=Math.log,r=Math.LOG10E;e.exports=Math.log10||function(e){return t(e)*r}},6513:e=>{var t=Math.log;e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:t(1+e)}},4310:e=>{e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},5948:(e,t,r)=>{var n,o,a,i,u,l,s,c,f=r(7854),p=r(9974),d=r(1236).f,h=r(261).set,v=r(8334),g=r(1528),y=r(1036),m=r(5268),b=f.MutationObserver||f.WebKitMutationObserver,w=f.document,x=f.process,E=f.Promise,S=d(f,"queueMicrotask"),k=S&&S.value;k||(n=function(){var e,t;for(m&&(e=x.domain)&&e.exit();o;){t=o.fn,o=o.next;try{t()}catch(e){throw o?i():a=void 0,e}}a=void 0,e&&e.enter()},v||m||y||!b||!w?!g&&E&&E.resolve?((s=E.resolve(void 0)).constructor=E,c=p(s.then,s),i=function(){c(n)}):m?i=function(){x.nextTick(n)}:(h=p(h,f),i=function(){h(n)}):(u=!0,l=w.createTextNode(""),new b(n).observe(l,{characterData:!0}),i=function(){l.data=u=!u})),e.exports=k||function(e){var t={fn:e,next:void 0};a&&(a.next=t),o||(o=t,i()),a=t}},3366:(e,t,r)=>{var n=r(7854);e.exports=n.Promise},133:(e,t,r)=>{var n=r(7392),o=r(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},590:(e,t,r)=>{var n=r(7293),o=r(5112),a=r(1913),i=o("iterator");e.exports=!n((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,r="";return e.pathname="c%20d",t.forEach((function(e,n){t.delete("b"),r+=n+e})),a&&!e.toJSON||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[i]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},8536:(e,t,r)=>{var n=r(7854),o=r(614),a=r(2788),i=n.WeakMap;e.exports=o(i)&&/native code/.test(a(i))},8523:(e,t,r)=>{"use strict";var n=r(9662),o=function(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)};e.exports.f=function(e){return new o(e)}},6277:(e,t,r)=>{var n=r(1340);e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:n(e)}},3929:(e,t,r)=>{var n=r(7854),o=r(7850),a=n.TypeError;e.exports=function(e){if(o(e))throw a("The method doesn't accept regular expressions");return e}},7023:(e,t,r)=>{var n=r(7854).isFinite;e.exports=Number.isFinite||function(e){return"number"==typeof e&&n(e)}},2814:(e,t,r)=>{var n=r(7854),o=r(7293),a=r(1702),i=r(1340),u=r(3111).trim,l=r(1361),s=a("".charAt),c=n.parseFloat,f=n.Symbol,p=f&&f.iterator,d=1/c(l+"-0")!=-1/0||p&&!o((function(){c(Object(p))}));e.exports=d?function(e){var t=u(i(e)),r=c(t);return 0===r&&"-"==s(t,0)?-0:r}:c},3009:(e,t,r)=>{var n=r(7854),o=r(7293),a=r(1702),i=r(1340),u=r(3111).trim,l=r(1361),s=n.parseInt,c=n.Symbol,f=c&&c.iterator,p=/^[+-]?0x/i,d=a(p.exec),h=8!==s(l+"08")||22!==s(l+"0x16")||f&&!o((function(){s(Object(f))}));e.exports=h?function(e,t){var r=u(i(e));return s(r,t>>>0||(d(p,r)?16:10))}:s},1574:(e,t,r)=>{"use strict";var n=r(9781),o=r(1702),a=r(6916),i=r(7293),u=r(1956),l=r(5181),s=r(5296),c=r(7908),f=r(8361),p=Object.assign,d=Object.defineProperty,h=o([].concat);e.exports=!p||i((function(){if(n&&1!==p({b:1},p(d({},"a",{enumerable:!0,get:function(){d(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol(),o="abcdefghijklmnopqrst";return e[r]=7,o.split("").forEach((function(e){t[e]=e})),7!=p({},e)[r]||u(p({},t)).join("")!=o}))?function(e,t){for(var r=c(e),o=arguments.length,i=1,p=l.f,d=s.f;o>i;)for(var v,g=f(arguments[i++]),y=p?h(u(g),p(g)):u(g),m=y.length,b=0;m>b;)v=y[b++],n&&!a(d,g,v)||(r[v]=g[v]);return r}:p},30:(e,t,r)=>{var n,o=r(9670),a=r(6048),i=r(748),u=r(3501),l=r(490),s=r(317),c=r(6200)("IE_PROTO"),f=function(){},p=function(e){return"<script>"+e+"<\/script>"},d=function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t},h=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t;h="undefined"!=typeof document?document.domain&&n?d(n):((t=s("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F):d(n);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};u[c]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(f.prototype=o(e),r=new f,f.prototype=null,r[c]=e):r=h(),void 0===t?r:a.f(r,t)}},6048:(e,t,r)=>{var n=r(9781),o=r(3353),a=r(3070),i=r(9670),u=r(5656),l=r(1956);t.f=n&&!o?Object.defineProperties:function(e,t){i(e);for(var r,n=u(t),o=l(t),s=o.length,c=0;s>c;)a.f(e,r=o[c++],n[r]);return e}},3070:(e,t,r)=>{var n=r(7854),o=r(9781),a=r(4664),i=r(3353),u=r(9670),l=r(4948),s=n.TypeError,c=Object.defineProperty,f=Object.getOwnPropertyDescriptor;t.f=o?i?function(e,t,r){if(u(e),t=l(t),u(r),"function"==typeof e&&"prototype"===t&&"value"in r&&"writable"in r&&!r.writable){var n=f(e,t);n&&n.writable&&(e[t]=r.value,r={configurable:"configurable"in r?r.configurable:n.configurable,enumerable:"enumerable"in r?r.enumerable:n.enumerable,writable:!1})}return c(e,t,r)}:c:function(e,t,r){if(u(e),t=l(t),u(r),a)try{return c(e,t,r)}catch(e){}if("get"in r||"set"in r)throw s("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},1236:(e,t,r)=>{var n=r(9781),o=r(6916),a=r(5296),i=r(9114),u=r(5656),l=r(4948),s=r(2597),c=r(4664),f=Object.getOwnPropertyDescriptor;t.f=n?f:function(e,t){if(e=u(e),t=l(t),c)try{return f(e,t)}catch(e){}if(s(e,t))return i(!o(a.f,e,t),e[t])}},1156:(e,t,r)=>{var n=r(4326),o=r(5656),a=r(8006).f,i=r(1589),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return u&&"Window"==n(e)?function(e){try{return a(e)}catch(e){return i(u)}}(e):a(o(e))}},8006:(e,t,r)=>{var n=r(6324),o=r(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},5181:(e,t)=>{t.f=Object.getOwnPropertySymbols},9518:(e,t,r)=>{var n=r(7854),o=r(2597),a=r(614),i=r(7908),u=r(6200),l=r(8544),s=u("IE_PROTO"),c=n.Object,f=c.prototype;e.exports=l?c.getPrototypeOf:function(e){var t=i(e);if(o(t,s))return t[s];var r=t.constructor;return a(r)&&t instanceof r?r.prototype:t instanceof c?f:null}},2050:(e,t,r)=>{var n=r(7293),o=r(111),a=r(4326),i=r(7556),u=Object.isExtensible,l=n((function(){u(1)}));e.exports=l||i?function(e){return!!o(e)&&(!i||"ArrayBuffer"!=a(e))&&(!u||u(e))}:u},7976:(e,t,r)=>{var n=r(1702);e.exports=n({}.isPrototypeOf)},6324:(e,t,r)=>{var n=r(1702),o=r(2597),a=r(5656),i=r(1318).indexOf,u=r(3501),l=n([].push);e.exports=function(e,t){var r,n=a(e),s=0,c=[];for(r in n)!o(u,r)&&o(n,r)&&l(c,r);for(;t.length>s;)o(n,r=t[s++])&&(~i(c,r)||l(c,r));return c}},1956:(e,t,r)=>{var n=r(6324),o=r(748);e.exports=Object.keys||function(e){return n(e,o)}},5296:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);t.f=o?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},9026:(e,t,r)=>{"use strict";var n=r(1913),o=r(7854),a=r(7293),i=r(8008);e.exports=n||!a((function(){if(!(i&&i<535)){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete o[e]}}))},7674:(e,t,r)=>{var n=r(1702),o=r(9670),a=r(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return o(r),a(n),t?e(r,n):r.__proto__=n,r}}():void 0)},4699:(e,t,r)=>{var n=r(9781),o=r(1702),a=r(1956),i=r(5656),u=o(r(5296).f),l=o([].push),s=function(e){return function(t){for(var r,o=i(t),s=a(o),c=s.length,f=0,p=[];c>f;)r=s[f++],n&&!u(o,r)||l(p,e?[r,o[r]]:o[r]);return p}};e.exports={entries:s(!0),values:s(!1)}},288:(e,t,r)=>{"use strict";var n=r(1694),o=r(648);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(614),i=r(111),u=n.TypeError;e.exports=function(e,t){var r,n;if("string"===t&&a(r=e.toString)&&!i(n=o(r,e)))return n;if(a(r=e.valueOf)&&!i(n=o(r,e)))return n;if("string"!==t&&a(r=e.toString)&&!i(n=o(r,e)))return n;throw u("Can't convert object to primitive value")}},3887:(e,t,r)=>{var n=r(5005),o=r(1702),a=r(8006),i=r(5181),u=r(9670),l=o([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=a.f(u(e)),r=i.f;return r?l(t,r(e)):t}},857:(e,t,r)=>{var n=r(7854);e.exports=n},2534:e=>{e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},9478:(e,t,r)=>{var n=r(9670),o=r(111),a=r(8523);e.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=a.f(e);return(0,r.resolve)(t),r.promise}},8572:e=>{var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null};this.head?this.tail.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return this.head=e.next,this.tail===e&&(this.tail=null),e.item}},e.exports=t},2248:(e,t,r)=>{var n=r(1320);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},1320:(e,t,r)=>{var n=r(7854),o=r(614),a=r(2597),i=r(8880),u=r(3505),l=r(2788),s=r(9909),c=r(6530).CONFIGURABLE,f=s.get,p=s.enforce,d=String(String).split("String");(e.exports=function(e,t,r,l){var s,f=!!l&&!!l.unsafe,h=!!l&&!!l.enumerable,v=!!l&&!!l.noTargetGet,g=l&&void 0!==l.name?l.name:t;o(r)&&("Symbol("===String(g).slice(0,7)&&(g="["+String(g).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||c&&r.name!==g)&&i(r,"name",g),(s=p(r)).source||(s.source=d.join("string"==typeof g?g:""))),e!==n?(f?!v&&e[t]&&(h=!0):delete e[t],h?e[t]=r:i(e,t,r)):h?e[t]=r:u(t,r)})(Function.prototype,"toString",(function(){return o(this)&&f(this).source||l(this)}))},7651:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(9670),i=r(614),u=r(4326),l=r(2261),s=n.TypeError;e.exports=function(e,t){var r=e.exec;if(i(r)){var n=o(r,e,t);return null!==n&&a(n),n}if("RegExp"===u(e))return o(l,e,t);throw s("RegExp#exec called on incompatible receiver")}},2261:(e,t,r)=>{"use strict";var n,o,a=r(6916),i=r(1702),u=r(1340),l=r(7066),s=r(2999),c=r(2309),f=r(30),p=r(9909).get,d=r(9441),h=r(7168),v=c("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,y=g,m=i("".charAt),b=i("".indexOf),w=i("".replace),x=i("".slice),E=(o=/b*/g,a(g,n=/a/,"a"),a(g,o,"a"),0!==n.lastIndex||0!==o.lastIndex),S=s.BROKEN_CARET,k=void 0!==/()??/.exec("")[1];(E||k||S||d||h)&&(y=function(e){var t,r,n,o,i,s,c,d=this,h=p(d),O=u(e),R=h.raw;if(R)return R.lastIndex=d.lastIndex,t=a(y,R,O),d.lastIndex=R.lastIndex,t;var T=h.groups,A=S&&d.sticky,C=a(l,d),_=d.source,P=0,N=O;if(A&&(C=w(C,"y",""),-1===b(C,"g")&&(C+="g"),N=x(O,d.lastIndex),d.lastIndex>0&&(!d.multiline||d.multiline&&"\n"!==m(O,d.lastIndex-1))&&(_="(?: "+_+")",N=" "+N,P++),r=new RegExp("^(?:"+_+")",C)),k&&(r=new RegExp("^"+_+"$(?!\\s)",C)),E&&(n=d.lastIndex),o=a(g,A?r:d,N),A?o?(o.input=x(o.input,P),o[0]=x(o[0],P),o.index=d.lastIndex,d.lastIndex+=o[0].length):d.lastIndex=0:E&&o&&(d.lastIndex=d.global?o.index+o[0].length:n),k&&o&&o.length>1&&a(v,o[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&T)for(o.groups=s=f(null),i=0;i<T.length;i++)s[(c=T[i])[0]]=o[c[1]];return o}),e.exports=y},7066:(e,t,r)=>{"use strict";var n=r(9670);e.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},2999:(e,t,r)=>{var n=r(7293),o=r(7854).RegExp,a=n((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),i=a||n((function(){return!o("a","y").sticky})),u=a||n((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:u,MISSED_STICKY:i,UNSUPPORTED_Y:a}},9441:(e,t,r)=>{var n=r(7293),o=r(7854).RegExp;e.exports=n((function(){var e=o(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},7168:(e,t,r)=>{var n=r(7293),o=r(7854).RegExp;e.exports=n((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},4488:(e,t,r)=>{var n=r(7854).TypeError;e.exports=function(e){if(null==e)throw n("Can't call method on "+e);return e}},1150:e=>{e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},3505:(e,t,r)=>{var n=r(7854),o=Object.defineProperty;e.exports=function(e,t){try{o(n,e,{value:t,configurable:!0,writable:!0})}catch(r){n[e]=t}return t}},6340:(e,t,r)=>{"use strict";var n=r(5005),o=r(3070),a=r(5112),i=r(9781),u=a("species");e.exports=function(e){var t=n(e),r=o.f;i&&t&&!t[u]&&r(t,u,{configurable:!0,get:function(){return this}})}},8003:(e,t,r)=>{var n=r(3070).f,o=r(2597),a=r(5112)("toStringTag");e.exports=function(e,t,r){e&&!r&&(e=e.prototype),e&&!o(e,a)&&n(e,a,{configurable:!0,value:t})}},6200:(e,t,r)=>{var n=r(2309),o=r(9711),a=n("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},5465:(e,t,r)=>{var n=r(7854),o=r(3505),a="__core-js_shared__",i=n[a]||o(a,{});e.exports=i},2309:(e,t,r)=>{var n=r(1913),o=r(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.21.1",mode:n?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},6707:(e,t,r)=>{var n=r(9670),o=r(9483),a=r(5112)("species");e.exports=function(e,t){var r,i=n(e).constructor;return void 0===i||null==(r=n(i)[a])?t:o(r)}},3429:(e,t,r)=>{var n=r(7293);e.exports=function(e){return n((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))}},8710:(e,t,r)=>{var n=r(1702),o=r(9303),a=r(1340),i=r(4488),u=n("".charAt),l=n("".charCodeAt),s=n("".slice),c=function(e){return function(t,r){var n,c,f=a(i(t)),p=o(r),d=f.length;return p<0||p>=d?e?"":void 0:(n=l(f,p))<55296||n>56319||p+1===d||(c=l(f,p+1))<56320||c>57343?e?u(f,p):n:e?s(f,p,p+2):c-56320+(n-55296<<10)+65536}};e.exports={codeAt:c(!1),charAt:c(!0)}},7061:(e,t,r)=>{var n=r(8113);e.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(n)},6650:(e,t,r)=>{var n=r(1702),o=r(7466),a=r(1340),i=r(8415),u=r(4488),l=n(i),s=n("".slice),c=Math.ceil,f=function(e){return function(t,r,n){var i,f,p=a(u(t)),d=o(r),h=p.length,v=void 0===n?" ":a(n);return d<=h||""==v?p:((f=l(v,c((i=d-h)/v.length))).length>i&&(f=s(f,0,i)),e?p+f:f+p)}};e.exports={start:f(!1),end:f(!0)}},3197:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=2147483647,i=/[^\0-\u007E]/,u=/[.\u3002\uFF0E\uFF61]/g,l="Overflow: input needs wider integers to process",s=n.RangeError,c=o(u.exec),f=Math.floor,p=String.fromCharCode,d=o("".charCodeAt),h=o([].join),v=o([].push),g=o("".replace),y=o("".split),m=o("".toLowerCase),b=function(e){return e+22+75*(e<26)},w=function(e,t,r){var n=0;for(e=r?f(e/700):e>>1,e+=f(e/t);e>455;)e=f(e/35),n+=36;return f(n+36*e/(e+38))},x=function(e){var t=[];e=function(e){for(var t=[],r=0,n=e.length;r<n;){var o=d(e,r++);if(o>=55296&&o<=56319&&r<n){var a=d(e,r++);56320==(64512&a)?v(t,((1023&o)<<10)+(1023&a)+65536):(v(t,o),r--)}else v(t,o)}return t}(e);var r,n,o=e.length,i=128,u=0,c=72;for(r=0;r<e.length;r++)(n=e[r])<128&&v(t,p(n));var g=t.length,y=g;for(g&&v(t,"-");y<o;){var m=a;for(r=0;r<e.length;r++)(n=e[r])>=i&&n<m&&(m=n);var x=y+1;if(m-i>f((a-u)/x))throw s(l);for(u+=(m-i)*x,i=m,r=0;r<e.length;r++){if((n=e[r])<i&&++u>a)throw s(l);if(n==i){for(var E=u,S=36;;){var k=S<=c?1:S>=c+26?26:S-c;if(E<k)break;var O=E-k,R=36-k;v(t,p(b(k+O%R))),E=f(O/R),S+=36}v(t,p(b(E))),c=w(u,x,y==g),u=0,y++}}u++,i++}return h(t,"")};e.exports=function(e){var t,r,n=[],o=y(g(m(e),u,"."),".");for(t=0;t<o.length;t++)r=o[t],v(n,c(i,r)?"xn--"+x(r):r);return h(n,".")}},8415:(e,t,r)=>{"use strict";var n=r(7854),o=r(9303),a=r(1340),i=r(4488),u=n.RangeError;e.exports=function(e){var t=a(i(this)),r="",n=o(e);if(n<0||n==1/0)throw u("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r}},6091:(e,t,r)=>{var n=r(6530).PROPER,o=r(7293),a=r(1361);e.exports=function(e){return o((function(){return!!a[e]()||"​᠎"!=="​᠎"[e]()||n&&a[e].name!==e}))}},3111:(e,t,r)=>{var n=r(1702),o=r(4488),a=r(1340),i=r(1361),u=n("".replace),l="["+i+"]",s=RegExp("^"+l+l+"*"),c=RegExp(l+l+"*$"),f=function(e){return function(t){var r=a(o(t));return 1&e&&(r=u(r,s,"")),2&e&&(r=u(r,c,"")),r}};e.exports={start:f(1),end:f(2),trim:f(3)}},261:(e,t,r)=>{var n,o,a,i,u=r(7854),l=r(2104),s=r(9974),c=r(614),f=r(2597),p=r(7293),d=r(490),h=r(206),v=r(317),g=r(8053),y=r(8334),m=r(5268),b=u.setImmediate,w=u.clearImmediate,x=u.process,E=u.Dispatch,S=u.Function,k=u.MessageChannel,O=u.String,R=0,T={};try{n=u.location}catch(e){}var A=function(e){if(f(T,e)){var t=T[e];delete T[e],t()}},C=function(e){return function(){A(e)}},_=function(e){A(e.data)},P=function(e){u.postMessage(O(e),n.protocol+"//"+n.host)};b&&w||(b=function(e){g(arguments.length,1);var t=c(e)?e:S(e),r=h(arguments,1);return T[++R]=function(){l(t,void 0,r)},o(R),R},w=function(e){delete T[e]},m?o=function(e){x.nextTick(C(e))}:E&&E.now?o=function(e){E.now(C(e))}:k&&!y?(i=(a=new k).port2,a.port1.onmessage=_,o=s(i.postMessage,i)):u.addEventListener&&c(u.postMessage)&&!u.importScripts&&n&&"file:"!==n.protocol&&!p(P)?(o=P,u.addEventListener("message",_,!1)):o="onreadystatechange"in v("script")?function(e){d.appendChild(v("script")).onreadystatechange=function(){d.removeChild(this),A(e)}}:function(e){setTimeout(C(e),0)}),e.exports={set:b,clear:w}},863:(e,t,r)=>{var n=r(1702);e.exports=n(1..valueOf)},1400:(e,t,r)=>{var n=r(9303),o=Math.max,a=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):a(r,t)}},7067:(e,t,r)=>{var n=r(7854),o=r(9303),a=r(7466),i=n.RangeError;e.exports=function(e){if(void 0===e)return 0;var t=o(e),r=a(t);if(t!==r)throw i("Wrong length or index");return r}},5656:(e,t,r)=>{var n=r(8361),o=r(4488);e.exports=function(e){return n(o(e))}},9303:e=>{var t=Math.ceil,r=Math.floor;e.exports=function(e){var n=+e;return n!=n||0===n?0:(n>0?r:t)(n)}},7466:(e,t,r)=>{var n=r(9303),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},7908:(e,t,r)=>{var n=r(7854),o=r(4488),a=n.Object;e.exports=function(e){return a(o(e))}},4590:(e,t,r)=>{var n=r(7854),o=r(3002),a=n.RangeError;e.exports=function(e,t){var r=o(e);if(r%t)throw a("Wrong offset");return r}},3002:(e,t,r)=>{var n=r(7854),o=r(9303),a=n.RangeError;e.exports=function(e){var t=o(e);if(t<0)throw a("The argument can't be less than 0");return t}},7593:(e,t,r)=>{var n=r(7854),o=r(6916),a=r(111),i=r(2190),u=r(8173),l=r(2140),s=r(5112),c=n.TypeError,f=s("toPrimitive");e.exports=function(e,t){if(!a(e)||i(e))return e;var r,n=u(e,f);if(n){if(void 0===t&&(t="default"),r=o(n,e,t),!a(r)||i(r))return r;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),l(e,t)}},4948:(e,t,r)=>{var n=r(7593),o=r(2190);e.exports=function(e){var t=n(e,"string");return o(t)?t:t+""}},1694:(e,t,r)=>{var n={};n[r(5112)("toStringTag")]="z",e.exports="[object z]"===String(n)},1340:(e,t,r)=>{var n=r(7854),o=r(648),a=n.String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return a(e)}},4038:(e,t,r)=>{var n=r(5268);e.exports=function(e){try{if(n)return Function('return require("'+e+'")')()}catch(e){}}},6330:(e,t,r)=>{var n=r(7854).String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},9843:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(6916),i=r(9781),u=r(3832),l=r(260),s=r(3331),c=r(5787),f=r(9114),p=r(8880),d=r(5988),h=r(7466),v=r(7067),g=r(4590),y=r(4948),m=r(2597),b=r(648),w=r(111),x=r(2190),E=r(30),S=r(7976),k=r(7674),O=r(8006).f,R=r(7321),T=r(2092).forEach,A=r(6340),C=r(3070),_=r(1236),P=r(9909),N=r(9587),M=P.get,L=P.set,I=C.f,j=_.f,U=Math.round,D=o.RangeError,F=s.ArrayBuffer,z=F.prototype,B=s.DataView,V=l.NATIVE_ARRAY_BUFFER_VIEWS,$=l.TYPED_ARRAY_CONSTRUCTOR,W=l.TYPED_ARRAY_TAG,H=l.TypedArray,q=l.TypedArrayPrototype,Q=l.aTypedArrayConstructor,Y=l.isTypedArray,G="BYTES_PER_ELEMENT",K="Wrong length",X=function(e,t){Q(e);for(var r=0,n=t.length,o=new e(n);n>r;)o[r]=t[r++];return o},J=function(e,t){I(e,t,{get:function(){return M(this)[t]}})},Z=function(e){var t;return S(z,e)||"ArrayBuffer"==(t=b(e))||"SharedArrayBuffer"==t},ee=function(e,t){return Y(e)&&!x(t)&&t in e&&d(+t)&&t>=0},te=function(e,t){return t=y(t),ee(e,t)?f(2,e[t]):j(e,t)},re=function(e,t,r){return t=y(t),!(ee(e,t)&&w(r)&&m(r,"value"))||m(r,"get")||m(r,"set")||r.configurable||m(r,"writable")&&!r.writable||m(r,"enumerable")&&!r.enumerable?I(e,t,r):(e[t]=r.value,e)};i?(V||(_.f=te,C.f=re,J(q,"buffer"),J(q,"byteOffset"),J(q,"byteLength"),J(q,"length")),n({target:"Object",stat:!0,forced:!V},{getOwnPropertyDescriptor:te,defineProperty:re}),e.exports=function(e,t,r){var i=e.match(/\d+$/)[0]/8,l=e+(r?"Clamped":"")+"Array",s="get"+e,f="set"+e,d=o[l],y=d,m=y&&y.prototype,b={},x=function(e,t){I(e,t,{get:function(){return function(e,t){var r=M(e);return r.view[s](t*i+r.byteOffset,!0)}(this,t)},set:function(e){return function(e,t,n){var o=M(e);r&&(n=(n=U(n))<0?0:n>255?255:255&n),o.view[f](t*i+o.byteOffset,n,!0)}(this,t,e)},enumerable:!0})};V?u&&(y=t((function(e,t,r,n){return c(e,m),N(w(t)?Z(t)?void 0!==n?new d(t,g(r,i),n):void 0!==r?new d(t,g(r,i)):new d(t):Y(t)?X(y,t):a(R,y,t):new d(v(t)),e,y)})),k&&k(y,H),T(O(d),(function(e){e in y||p(y,e,d[e])})),y.prototype=m):(y=t((function(e,t,r,n){c(e,m);var o,u,l,s=0,f=0;if(w(t)){if(!Z(t))return Y(t)?X(y,t):a(R,y,t);o=t,f=g(r,i);var p=t.byteLength;if(void 0===n){if(p%i)throw D(K);if((u=p-f)<0)throw D(K)}else if((u=h(n)*i)+f>p)throw D(K);l=u/i}else l=v(t),o=new F(u=l*i);for(L(e,{buffer:o,byteOffset:f,byteLength:u,length:l,view:new B(o)});s<l;)x(e,s++)})),k&&k(y,H),m=y.prototype=E(q)),m.constructor!==y&&p(m,"constructor",y),p(m,$,y),W&&p(m,W,l),b[l]=y,n({global:!0,forced:y!=d,sham:!V},b),G in y||p(y,G,i),G in m||p(m,G,i),A(l)}):e.exports=function(){}},3832:(e,t,r)=>{var n=r(7854),o=r(7293),a=r(7072),i=r(260).NATIVE_ARRAY_BUFFER_VIEWS,u=n.ArrayBuffer,l=n.Int8Array;e.exports=!i||!o((function(){l(1)}))||!o((function(){new l(-1)}))||!a((function(e){new l,new l(null),new l(1.5),new l(e)}),!0)||o((function(){return 1!==new l(new u(2),1,void 0).length}))},3074:(e,t,r)=>{var n=r(7745),o=r(6304);e.exports=function(e,t){return n(o(e),t)}},7321:(e,t,r)=>{var n=r(9974),o=r(6916),a=r(9483),i=r(7908),u=r(6244),l=r(8554),s=r(1246),c=r(7659),f=r(260).aTypedArrayConstructor;e.exports=function(e){var t,r,p,d,h,v,g=a(this),y=i(e),m=arguments.length,b=m>1?arguments[1]:void 0,w=void 0!==b,x=s(y);if(x&&!c(x))for(v=(h=l(y,x)).next,y=[];!(d=o(v,h)).done;)y.push(d.value);for(w&&m>2&&(b=n(b,arguments[2])),r=u(y),p=new(f(g))(r),t=0;r>t;t++)p[t]=w?b(y[t],t):y[t];return p}},6304:(e,t,r)=>{var n=r(260),o=r(6707),a=n.TYPED_ARRAY_CONSTRUCTOR,i=n.aTypedArrayConstructor;e.exports=function(e){return i(o(e,e[a]))}},9711:(e,t,r)=>{var n=r(1702),o=0,a=Math.random(),i=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++o+a,36)}},3307:(e,t,r)=>{var n=r(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(e,t,r)=>{var n=r(9781),o=r(7293);e.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},8053:(e,t,r)=>{var n=r(7854).TypeError;e.exports=function(e,t){if(e<t)throw n("Not enough arguments");return e}},6061:(e,t,r)=>{var n=r(5112);t.f=n},5112:(e,t,r)=>{var n=r(7854),o=r(2309),a=r(2597),i=r(9711),u=r(133),l=r(3307),s=o("wks"),c=n.Symbol,f=c&&c.for,p=l?c:c&&c.withoutSetter||i;e.exports=function(e){if(!a(s,e)||!u&&"string"!=typeof s[e]){var t="Symbol."+e;u&&a(c,e)?s[e]=c[e]:s[e]=l&&f?f(t):p(t)}return s[e]}},1361:e=>{e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},9191:(e,t,r)=>{"use strict";var n=r(5005),o=r(2597),a=r(8880),i=r(7976),u=r(7674),l=r(9920),s=r(9587),c=r(6277),f=r(8340),p=r(7741),d=r(2914),h=r(1913);e.exports=function(e,t,r,v){var g=v?2:1,y=e.split("."),m=y[y.length-1],b=n.apply(null,y);if(b){var w=b.prototype;if(!h&&o(w,"cause")&&delete w.cause,!r)return b;var x=n("Error"),E=t((function(e,t){var r=c(v?t:e,void 0),n=v?new b(e):new b;return void 0!==r&&a(n,"message",r),d&&a(n,"stack",p(n.stack,2)),this&&i(w,this)&&s(n,this,E),arguments.length>g&&f(n,arguments[g]),n}));if(E.prototype=w,"Error"!==m&&(u?u(E,x):l(E,x,{name:!0})),l(E,b),!h)try{w.name!==m&&a(w,"name",m),w.constructor=E}catch(e){}return E}}},2120:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(2104),i=r(7293),u=r(9191),l="AggregateError",s=o(l),c=!i((function(){return 1!==s([1]).errors[0]}))&&i((function(){return 7!==s([1],l,{cause:7}).cause}));n({global:!0,forced:c},{AggregateError:u(l,(function(e){return function(t,r){return a(e,this,arguments)}}),c,!0)})},9170:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(7976),i=r(9518),u=r(7674),l=r(9920),s=r(30),c=r(8880),f=r(9114),p=r(7741),d=r(8340),h=r(408),v=r(6277),g=r(5112),y=r(2914),m=g("toStringTag"),b=o.Error,w=[].push,x=function(e,t){var r,n=arguments.length>2?arguments[2]:void 0,o=a(E,this);u?r=u(new b,o?i(this):E):(r=o?this:s(E),c(r,m,"Error")),void 0!==t&&c(r,"message",v(t)),y&&c(r,"stack",p(r.stack,1)),d(r,n);var l=[];return h(e,w,{that:l}),c(r,"errors",l),r};u?u(x,b):l(x,b,{name:!0});var E=x.prototype=s(b.prototype,{constructor:f(1,x),message:f(1,""),name:f(1,"AggregateError")});n({global:!0},{AggregateError:x})},8264:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(3331),i=r(6340),u=a.ArrayBuffer;n({global:!0,forced:o.ArrayBuffer!==u},{ArrayBuffer:u}),i("ArrayBuffer")},6938:(e,t,r)=>{var n=r(2109),o=r(260);n({target:"ArrayBuffer",stat:!0,forced:!o.NATIVE_ARRAY_BUFFER_VIEWS},{isView:o.isView})},9575:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(7293),i=r(3331),u=r(9670),l=r(1400),s=r(7466),c=r(6707),f=i.ArrayBuffer,p=i.DataView,d=p.prototype,h=o(f.prototype.slice),v=o(d.getUint8),g=o(d.setUint8);n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:a((function(){return!new f(2).slice(1,void 0).byteLength}))},{slice:function(e,t){if(h&&void 0===t)return h(u(this),e);for(var r=u(this).byteLength,n=l(e,r),o=l(void 0===t?r:t,r),a=new(c(this,f))(s(o-n)),i=new p(this),d=new p(a),y=0;n<o;)g(d,y++,v(i,n++));return a}})},2262:(e,t,r)=>{"use strict";var n=r(2109),o=r(7908),a=r(6244),i=r(9303),u=r(1223);n({target:"Array",proto:!0},{at:function(e){var t=o(this),r=a(t),n=i(e),u=n>=0?n:r+n;return u<0||u>=r?void 0:t[u]}}),u("at")},2222:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(7293),i=r(3157),u=r(111),l=r(7908),s=r(6244),c=r(6135),f=r(5417),p=r(1194),d=r(5112),h=r(7392),v=d("isConcatSpreadable"),g=9007199254740991,y="Maximum allowed index exceeded",m=o.TypeError,b=h>=51||!a((function(){var e=[];return e[v]=!1,e.concat()[0]!==e})),w=p("concat"),x=function(e){if(!u(e))return!1;var t=e[v];return void 0!==t?!!t:i(e)};n({target:"Array",proto:!0,forced:!b||!w},{concat:function(e){var t,r,n,o,a,i=l(this),u=f(i,0),p=0;for(t=-1,n=arguments.length;t<n;t++)if(x(a=-1===t?i:arguments[t])){if(p+(o=s(a))>g)throw m(y);for(r=0;r<o;r++,p++)r in a&&c(u,p,a[r])}else{if(p>=g)throw m(y);c(u,p++,a)}return u.length=p,u}})},545:(e,t,r)=>{var n=r(2109),o=r(1048),a=r(1223);n({target:"Array",proto:!0},{copyWithin:o}),a("copyWithin")},6541:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).every;n({target:"Array",proto:!0,forced:!r(2133)("every")},{every:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},3290:(e,t,r)=>{var n=r(2109),o=r(1285),a=r(1223);n({target:"Array",proto:!0},{fill:o}),a("fill")},7327:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).filter;n({target:"Array",proto:!0,forced:!r(1194)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},4553:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).findIndex,a=r(1223),i="findIndex",u=!0;i in[]&&Array(1).findIndex((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a(i)},9826:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).find,a=r(1223),i="find",u=!0;i in[]&&Array(1).find((function(){u=!1})),n({target:"Array",proto:!0,forced:u},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a(i)},6535:(e,t,r)=>{"use strict";var n=r(2109),o=r(6790),a=r(9662),i=r(7908),u=r(6244),l=r(5417);n({target:"Array",proto:!0},{flatMap:function(e){var t,r=i(this),n=u(r);return a(e),(t=l(r,0)).length=o(t,r,r,n,0,1,e,arguments.length>1?arguments[1]:void 0),t}})},4944:(e,t,r)=>{"use strict";var n=r(2109),o=r(6790),a=r(7908),i=r(6244),u=r(9303),l=r(5417);n({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=a(this),r=i(t),n=l(t,0);return n.length=o(n,t,t,r,0,void 0===e?1:u(e)),n}})},9554:(e,t,r)=>{"use strict";var n=r(2109),o=r(8533);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},1038:(e,t,r)=>{var n=r(2109),o=r(8457);n({target:"Array",stat:!0,forced:!r(7072)((function(e){Array.from(e)}))},{from:o})},6699:(e,t,r)=>{"use strict";var n=r(2109),o=r(1318).includes,a=r(1223);n({target:"Array",proto:!0},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a("includes")},2772:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(1318).indexOf,i=r(2133),u=o([].indexOf),l=!!u&&1/u([1],1,-0)<0,s=i("indexOf");n({target:"Array",proto:!0,forced:l||!s},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return l?u(this,e,t)||0:a(this,e,t)}})},9753:(e,t,r)=>{r(2109)({target:"Array",stat:!0},{isArray:r(3157)})},6992:(e,t,r)=>{"use strict";var n=r(5656),o=r(1223),a=r(7497),i=r(9909),u=r(3070).f,l=r(654),s=r(1913),c=r(9781),f="Array Iterator",p=i.set,d=i.getterFor(f);e.exports=l(Array,"Array",(function(e,t){p(this,{type:f,target:n(e),index:0,kind:t})}),(function(){var e=d(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values");var h=a.Arguments=a.Array;if(o("keys"),o("values"),o("entries"),!s&&c&&"values"!==h.name)try{u(h,"name",{value:"values"})}catch(e){}},9600:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(8361),i=r(5656),u=r(2133),l=o([].join),s=a!=Object,c=u("join",",");n({target:"Array",proto:!0,forced:s||!c},{join:function(e){return l(i(this),void 0===e?",":e)}})},4986:(e,t,r)=>{var n=r(2109),o=r(6583);n({target:"Array",proto:!0,forced:o!==[].lastIndexOf},{lastIndexOf:o})},1249:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).map;n({target:"Array",proto:!0,forced:!r(1194)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},6572:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(7293),i=r(4411),u=r(6135),l=o.Array;n({target:"Array",stat:!0,forced:a((function(){function e(){}return!(l.of.call(e)instanceof e)}))},{of:function(){for(var e=0,t=arguments.length,r=new(i(this)?this:l)(t);t>e;)u(r,e,arguments[e++]);return r.length=t,r}})},6644:(e,t,r)=>{"use strict";var n=r(2109),o=r(3671).right,a=r(2133),i=r(7392),u=r(5268);n({target:"Array",proto:!0,forced:!a("reduceRight")||!u&&i>79&&i<83},{reduceRight:function(e){return o(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:(e,t,r)=>{"use strict";var n=r(2109),o=r(3671).left,a=r(2133),i=r(7392),u=r(5268);n({target:"Array",proto:!0,forced:!a("reduce")||!u&&i>79&&i<83},{reduce:function(e){var t=arguments.length;return o(this,e,t,t>1?arguments[1]:void 0)}})},5069:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(3157),i=o([].reverse),u=[1,2];n({target:"Array",proto:!0,forced:String(u)===String(u.reverse())},{reverse:function(){return a(this)&&(this.length=this.length),i(this)}})},7042:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(3157),i=r(4411),u=r(111),l=r(1400),s=r(6244),c=r(5656),f=r(6135),p=r(5112),d=r(1194),h=r(206),v=d("slice"),g=p("species"),y=o.Array,m=Math.max;n({target:"Array",proto:!0,forced:!v},{slice:function(e,t){var r,n,o,p=c(this),d=s(p),v=l(e,d),b=l(void 0===t?d:t,d);if(a(p)&&(r=p.constructor,(i(r)&&(r===y||a(r.prototype))||u(r)&&null===(r=r[g]))&&(r=void 0),r===y||void 0===r))return h(p,v,b);for(n=new(void 0===r?y:r)(m(b-v,0)),o=0;v<b;v++,o++)v in p&&f(n,o,p[v]);return n.length=o,n}})},5212:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).some;n({target:"Array",proto:!0,forced:!r(2133)("some")},{some:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},2707:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(9662),i=r(7908),u=r(6244),l=r(1340),s=r(7293),c=r(4362),f=r(2133),p=r(8886),d=r(256),h=r(7392),v=r(8008),g=[],y=o(g.sort),m=o(g.push),b=s((function(){g.sort(void 0)})),w=s((function(){g.sort(null)})),x=f("sort"),E=!s((function(){if(h)return h<70;if(!(p&&p>3)){if(d)return!0;if(v)return v<603;var e,t,r,n,o="";for(e=65;e<76;e++){switch(t=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:r=3;break;case 68:case 71:r=4;break;default:r=2}for(n=0;n<47;n++)g.push({k:t+n,v:r})}for(g.sort((function(e,t){return t.v-e.v})),n=0;n<g.length;n++)t=g[n].k.charAt(0),o.charAt(o.length-1)!==t&&(o+=t);return"DGBEFHACIJK"!==o}}));n({target:"Array",proto:!0,forced:b||!w||!x||!E},{sort:function(e){void 0!==e&&a(e);var t=i(this);if(E)return void 0===e?y(t):y(t,e);var r,n,o=[],s=u(t);for(n=0;n<s;n++)n in t&&m(o,t[n]);for(c(o,function(e){return function(t,r){return void 0===r?-1:void 0===t?1:void 0!==e?+e(t,r)||0:l(t)>l(r)?1:-1}}(e)),r=o.length,n=0;n<r;)t[n]=o[n++];for(;n<s;)delete t[n++];return t}})},8706:(e,t,r)=>{r(6340)("Array")},561:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1400),i=r(9303),u=r(6244),l=r(7908),s=r(5417),c=r(6135),f=r(1194)("splice"),p=o.TypeError,d=Math.max,h=Math.min,v=9007199254740991,g="Maximum allowed length exceeded";n({target:"Array",proto:!0,forced:!f},{splice:function(e,t){var r,n,o,f,y,m,b=l(this),w=u(b),x=a(e,w),E=arguments.length;if(0===E?r=n=0:1===E?(r=0,n=w-x):(r=E-2,n=h(d(i(t),0),w-x)),w+r-n>v)throw p(g);for(o=s(b,n),f=0;f<n;f++)(y=x+f)in b&&c(o,f,b[y]);if(o.length=n,r<n){for(f=x;f<w-n;f++)m=f+r,(y=f+n)in b?b[m]=b[y]:delete b[m];for(f=w;f>w-n+r;f--)delete b[f-1]}else if(r>n)for(f=w-n;f>x;f--)m=f+r-1,(y=f+n-1)in b?b[m]=b[y]:delete b[m];for(f=0;f<r;f++)b[f+x]=arguments[f+2];return b.length=w-n+r,o}})},9244:(e,t,r)=>{r(1223)("flatMap")},3792:(e,t,r)=>{r(1223)("flat")},6716:(e,t,r)=>{var n=r(2109),o=r(3331);n({global:!0,forced:!r(4019)},{DataView:o.DataView})},3016:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(7293)((function(){return 120!==new Date(16e11).getYear()})),i=o(Date.prototype.getFullYear);n({target:"Date",proto:!0,forced:a},{getYear:function(){return i(this)-1900}})},3843:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(1702),i=o.Date,u=a(i.prototype.getTime);n({target:"Date",stat:!0},{now:function(){return u(new i)}})},1801:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(9303),i=Date.prototype,u=o(i.getTime),l=o(i.setFullYear);n({target:"Date",proto:!0},{setYear:function(e){u(this);var t=a(e);return l(this,0<=t&&t<=99?t+1900:t)}})},9550:(e,t,r)=>{r(2109)({target:"Date",proto:!0},{toGMTString:Date.prototype.toUTCString})},8733:(e,t,r)=>{var n=r(2109),o=r(5573);n({target:"Date",proto:!0,forced:Date.prototype.toISOString!==o},{toISOString:o})},5735:(e,t,r)=>{"use strict";var n=r(2109),o=r(7293),a=r(7908),i=r(7593);n({target:"Date",proto:!0,forced:o((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(e){var t=a(this),r=i(t,"number");return"number"!=typeof r||isFinite(r)?t.toISOString():null}})},6078:(e,t,r)=>{var n=r(2597),o=r(1320),a=r(8709),i=r(5112)("toPrimitive"),u=Date.prototype;n(u,i)||o(u,i,a)},3710:(e,t,r)=>{var n=r(1702),o=r(1320),a=Date.prototype,i="Invalid Date",u=n(a.toString),l=n(a.getTime);String(new Date(NaN))!=i&&o(a,"toString",(function(){var e=l(this);return e==e?u(this):i}))},1703:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(2104),i=r(9191),u=o.WebAssembly,l=7!==Error("e",{cause:7}).cause,s=function(e,t){var r={};r[e]=i(e,t,l),n({global:!0,forced:l},r)},c=function(e,t){if(u&&u[e]){var r={};r[e]=i("WebAssembly."+e,t,l),n({target:"WebAssembly",stat:!0,forced:l},r)}};s("Error",(function(e){return function(t){return a(e,this,arguments)}})),s("EvalError",(function(e){return function(t){return a(e,this,arguments)}})),s("RangeError",(function(e){return function(t){return a(e,this,arguments)}})),s("ReferenceError",(function(e){return function(t){return a(e,this,arguments)}})),s("SyntaxError",(function(e){return function(t){return a(e,this,arguments)}})),s("TypeError",(function(e){return function(t){return a(e,this,arguments)}})),s("URIError",(function(e){return function(t){return a(e,this,arguments)}})),c("CompileError",(function(e){return function(t){return a(e,this,arguments)}})),c("LinkError",(function(e){return function(t){return a(e,this,arguments)}})),c("RuntimeError",(function(e){return function(t){return a(e,this,arguments)}}))},6647:(e,t,r)=>{var n=r(1320),o=r(7762),a=Error.prototype;a.toString!==o&&n(a,"toString",o)},2130:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(1340),i=o("".charAt),u=o("".charCodeAt),l=o(/./.exec),s=o(1..toString),c=o("".toUpperCase),f=/[\w*+\-./@]/,p=function(e,t){for(var r=s(e,16);r.length<t;)r="0"+r;return r};n({global:!0},{escape:function(e){for(var t,r,n=a(e),o="",s=n.length,d=0;d<s;)t=i(n,d++),l(f,t)?o+=t:o+=(r=u(t,0))<256?"%"+p(r,2):"%u"+c(p(r,4));return o}})},4812:(e,t,r)=>{var n=r(2109),o=r(7065);n({target:"Function",proto:!0,forced:Function.bind!==o},{bind:o})},4855:(e,t,r)=>{"use strict";var n=r(614),o=r(111),a=r(3070),i=r(9518),u=r(5112)("hasInstance"),l=Function.prototype;u in l||a.f(l,u,{value:function(e){if(!n(this)||!o(e))return!1;var t=this.prototype;if(!o(t))return e instanceof this;for(;e=i(e);)if(t===e)return!0;return!1}})},8309:(e,t,r)=>{var n=r(9781),o=r(6530).EXISTS,a=r(1702),i=r(3070).f,u=Function.prototype,l=a(u.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,c=a(s.exec);n&&!o&&i(u,"name",{configurable:!0,get:function(){try{return c(s,l(this))[1]}catch(e){return""}}})},5837:(e,t,r)=>{r(2109)({global:!0},{globalThis:r(7854)})},8862:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(5005),i=r(2104),u=r(1702),l=r(7293),s=o.Array,c=a("JSON","stringify"),f=u(/./.exec),p=u("".charAt),d=u("".charCodeAt),h=u("".replace),v=u(1..toString),g=/[\uD800-\uDFFF]/g,y=/^[\uD800-\uDBFF]$/,m=/^[\uDC00-\uDFFF]$/,b=function(e,t,r){var n=p(r,t-1),o=p(r,t+1);return f(y,e)&&!f(m,o)||f(m,e)&&!f(y,n)?"\\u"+v(d(e,0),16):e},w=l((function(){return'"\\udf06\\ud834"'!==c("\udf06\ud834")||'"\\udead"'!==c("\udead")}));c&&n({target:"JSON",stat:!0,forced:w},{stringify:function(e,t,r){for(var n=0,o=arguments.length,a=s(o);n<o;n++)a[n]=arguments[n];var u=i(c,null,a);return"string"==typeof u?h(u,g,b):u}})},3706:(e,t,r)=>{var n=r(7854);r(8003)(n.JSON,"JSON",!0)},1532:(e,t,r)=>{"use strict";r(7710)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(5631))},9752:(e,t,r)=>{var n=r(2109),o=r(6513),a=Math.acosh,i=Math.log,u=Math.sqrt,l=Math.LN2;n({target:"Math",stat:!0,forced:!a||710!=Math.floor(a(Number.MAX_VALUE))||a(1/0)!=1/0},{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?i(e)+l:o(e-1+u(e-1)*u(e+1))}})},2376:(e,t,r)=>{var n=r(2109),o=Math.asinh,a=Math.log,i=Math.sqrt;n({target:"Math",stat:!0,forced:!(o&&1/o(0)>0)},{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):a(t+i(t*t+1)):t}})},3181:(e,t,r)=>{var n=r(2109),o=Math.atanh,a=Math.log;n({target:"Math",stat:!0,forced:!(o&&1/o(-0)<0)},{atanh:function(e){return 0==(e=+e)?e:a((1+e)/(1-e))/2}})},3484:(e,t,r)=>{var n=r(2109),o=r(4310),a=Math.abs,i=Math.pow;n({target:"Math",stat:!0},{cbrt:function(e){return o(e=+e)*i(a(e),1/3)}})},2388:(e,t,r)=>{var n=r(2109),o=Math.floor,a=Math.log,i=Math.LOG2E;n({target:"Math",stat:!0},{clz32:function(e){return(e>>>=0)?31-o(a(e+.5)*i):32}})},8621:(e,t,r)=>{var n=r(2109),o=r(6736),a=Math.cosh,i=Math.abs,u=Math.E;n({target:"Math",stat:!0,forced:!a||a(710)===1/0},{cosh:function(e){var t=o(i(e)-1)+1;return(t+1/(t*u*u))*(u/2)}})},403:(e,t,r)=>{var n=r(2109),o=r(6736);n({target:"Math",stat:!0,forced:o!=Math.expm1},{expm1:o})},4755:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{fround:r(6130)})},5438:(e,t,r)=>{var n=r(2109),o=Math.hypot,a=Math.abs,i=Math.sqrt;n({target:"Math",stat:!0,forced:!!o&&o(1/0,NaN)!==1/0},{hypot:function(e,t){for(var r,n,o=0,u=0,l=arguments.length,s=0;u<l;)s<(r=a(arguments[u++]))?(o=o*(n=s/r)*n+1,s=r):o+=r>0?(n=r/s)*n:r;return s===1/0?1/0:s*i(o)}})},332:(e,t,r)=>{var n=r(2109),o=r(7293),a=Math.imul;n({target:"Math",stat:!0,forced:o((function(){return-5!=a(4294967295,5)||2!=a.length}))},{imul:function(e,t){var r=65535,n=+e,o=+t,a=r&n,i=r&o;return 0|a*i+((r&n>>>16)*i+a*(r&o>>>16)<<16>>>0)}})},658:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{log10:r(202)})},197:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{log1p:r(6513)})},4914:(e,t,r)=>{var n=r(2109),o=Math.log,a=Math.LN2;n({target:"Math",stat:!0},{log2:function(e){return o(e)/a}})},2420:(e,t,r)=>{r(2109)({target:"Math",stat:!0},{sign:r(4310)})},160:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(6736),i=Math.abs,u=Math.exp,l=Math.E;n({target:"Math",stat:!0,forced:o((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(e){return i(e=+e)<1?(a(e)-a(-e))/2:(u(e-1)-u(-e-1))*(l/2)}})},970:(e,t,r)=>{var n=r(2109),o=r(6736),a=Math.exp;n({target:"Math",stat:!0},{tanh:function(e){var t=o(e=+e),r=o(-e);return t==1/0?1:r==1/0?-1:(t-r)/(a(e)+a(-e))}})},2703:(e,t,r)=>{r(8003)(Math,"Math",!0)},3689:(e,t,r)=>{var n=r(2109),o=Math.ceil,a=Math.floor;n({target:"Math",stat:!0},{trunc:function(e){return(e>0?a:o)(e)}})},9653:(e,t,r)=>{"use strict";var n=r(9781),o=r(7854),a=r(1702),i=r(4705),u=r(1320),l=r(2597),s=r(9587),c=r(7976),f=r(2190),p=r(7593),d=r(7293),h=r(8006).f,v=r(1236).f,g=r(3070).f,y=r(863),m=r(3111).trim,b="Number",w=o.Number,x=w.prototype,E=o.TypeError,S=a("".slice),k=a("".charCodeAt),O=function(e){var t=p(e,"number");return"bigint"==typeof t?t:R(t)},R=function(e){var t,r,n,o,a,i,u,l,s=p(e,"number");if(f(s))throw E("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=m(s),43===(t=k(s,0))||45===t){if(88===(r=k(s,2))||120===r)return NaN}else if(48===t){switch(k(s,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+s}for(i=(a=S(s,2)).length,u=0;u<i;u++)if((l=k(a,u))<48||l>o)return NaN;return parseInt(a,n)}return+s};if(i(b,!w(" 0o1")||!w("0b1")||w("+0x1"))){for(var T,A=function(e){var t=arguments.length<1?0:w(O(e)),r=this;return c(x,r)&&d((function(){y(r)}))?s(Object(t),r,A):t},C=n?h(w):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),_=0;C.length>_;_++)l(w,T=C[_])&&!l(A,T)&&g(A,T,v(w,T));A.prototype=x,x.constructor=A,u(o,b,A)}},3299:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{isFinite:r(7023)})},3161:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{isInteger:r(5988)})},4048:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{isNaN:function(e){return e!=e}})},8285:(e,t,r)=>{var n=r(2109),o=r(5988),a=Math.abs;n({target:"Number",stat:!0},{isSafeInteger:function(e){return o(e)&&a(e)<=9007199254740991}})},4363:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:(e,t,r)=>{r(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:(e,t,r)=>{var n=r(2109),o=r(2814);n({target:"Number",stat:!0,forced:Number.parseFloat!=o},{parseFloat:o})},9494:(e,t,r)=>{var n=r(2109),o=r(3009);n({target:"Number",stat:!0,forced:Number.parseInt!=o},{parseInt:o})},1354:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1702),i=r(9303),u=r(863),l=r(8415),s=r(202),c=r(7293),f=o.RangeError,p=o.String,d=o.isFinite,h=Math.abs,v=Math.floor,g=Math.pow,y=Math.round,m=a(1..toExponential),b=a(l),w=a("".slice),x="-6.9000e-11"===m(-69e-12,4)&&"1.25e+0"===m(1.255,2)&&"1.235e+4"===m(12345,3)&&"3e+1"===m(25,0),E=c((function(){m(1,1/0)}))&&c((function(){m(1,-1/0)})),S=!c((function(){m(1/0,1/0)}))&&!c((function(){m(NaN,1/0)}));n({target:"Number",proto:!0,forced:!x||!E||!S},{toExponential:function(e){var t=u(this);if(void 0===e)return m(t);var r=i(e);if(!d(t))return p(t);if(r<0||r>20)throw f("Incorrect fraction digits");if(x)return m(t,r);var n="",o="",a=0,l="",c="";if(t<0&&(n="-",t=-t),0===t)a=0,o=b("0",r+1);else{var E=s(t);a=v(E);var S=0,k=g(10,a-r);2*t>=(2*(S=y(t/k))+1)*k&&(S+=1),S>=g(10,r+1)&&(S/=10,a+=1),o=p(S)}return 0!==r&&(o=w(o,0,1)+"."+w(o,1)),0===a?(l="+",c="0"):(l=a>0?"+":"-",c=p(h(a))),n+(o+"e")+l+c}})},6977:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(1702),i=r(9303),u=r(863),l=r(8415),s=r(7293),c=o.RangeError,f=o.String,p=Math.floor,d=a(l),h=a("".slice),v=a(1..toFixed),g=function(e,t,r){return 0===t?r:t%2==1?g(e,t-1,r*e):g(e*e,t/2,r)},y=function(e,t,r){for(var n=-1,o=r;++n<6;)o+=t*e[n],e[n]=o%1e7,o=p(o/1e7)},m=function(e,t){for(var r=6,n=0;--r>=0;)n+=e[r],e[r]=p(n/t),n=n%t*1e7},b=function(e){for(var t=6,r="";--t>=0;)if(""!==r||0===t||0!==e[t]){var n=f(e[t]);r=""===r?n:r+d("0",7-n.length)+n}return r};n({target:"Number",proto:!0,forced:s((function(){return"0.000"!==v(8e-5,3)||"1"!==v(.9,0)||"1.25"!==v(1.255,2)||"1000000000000000128"!==v(0xde0b6b3a7640080,0)}))||!s((function(){v({})}))},{toFixed:function(e){var t,r,n,o,a=u(this),l=i(e),s=[0,0,0,0,0,0],p="",v="0";if(l<0||l>20)throw c("Incorrect fraction digits");if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return f(a);if(a<0&&(p="-",a=-a),a>1e-21)if(r=(t=function(e){for(var t=0,r=e;r>=4096;)t+=12,r/=4096;for(;r>=2;)t+=1,r/=2;return t}(a*g(2,69,1))-69)<0?a*g(2,-t,1):a/g(2,t,1),r*=4503599627370496,(t=52-t)>0){for(y(s,0,r),n=l;n>=7;)y(s,1e7,0),n-=7;for(y(s,g(10,n,1),0),n=t-1;n>=23;)m(s,1<<23),n-=23;m(s,1<<n),y(s,1,1),m(s,2),v=b(s)}else y(s,0,r),y(s,1<<-t,0),v=b(s)+d("0",l);return l>0?p+((o=v.length)<=l?"0."+d("0",l-o)+v:h(v,0,o-l)+"."+h(v,o-l)):p+v}})},5147:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(7293),i=r(863),u=o(1..toPrecision);n({target:"Number",proto:!0,forced:a((function(){return"1"!==u(1,void 0)}))||!a((function(){u({})}))},{toPrecision:function(e){return void 0===e?u(i(this)):u(i(this),e)}})},9601:(e,t,r)=>{var n=r(2109),o=r(1574);n({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},8011:(e,t,r)=>{r(2109)({target:"Object",stat:!0,sham:!r(9781)},{create:r(30)})},9595:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(9662),u=r(7908),l=r(3070);o&&n({target:"Object",proto:!0,forced:a},{__defineGetter__:function(e,t){l.f(u(this),e,{get:i(t),enumerable:!0,configurable:!0})}})},3321:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(6048).f;n({target:"Object",stat:!0,forced:Object.defineProperties!==a,sham:!o},{defineProperties:a})},9070:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(3070).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==a,sham:!o},{defineProperty:a})},5500:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(9662),u=r(7908),l=r(3070);o&&n({target:"Object",proto:!0,forced:a},{__defineSetter__:function(e,t){l.f(u(this),e,{set:i(t),enumerable:!0,configurable:!0})}})},9720:(e,t,r)=>{var n=r(2109),o=r(4699).entries;n({target:"Object",stat:!0},{entries:function(e){return o(e)}})},3371:(e,t,r)=>{var n=r(2109),o=r(6677),a=r(7293),i=r(111),u=r(2423).onFreeze,l=Object.freeze;n({target:"Object",stat:!0,forced:a((function(){l(1)})),sham:!o},{freeze:function(e){return l&&i(e)?l(u(e)):e}})},8559:(e,t,r)=>{var n=r(2109),o=r(408),a=r(6135);n({target:"Object",stat:!0},{fromEntries:function(e){var t={};return o(e,(function(e,r){a(t,e,r)}),{AS_ENTRIES:!0}),t}})},5003:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(5656),i=r(1236).f,u=r(9781),l=o((function(){i(1)}));n({target:"Object",stat:!0,forced:!u||l,sham:!u},{getOwnPropertyDescriptor:function(e,t){return i(a(e),t)}})},9337:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(3887),i=r(5656),u=r(1236),l=r(6135);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(e){for(var t,r,n=i(e),o=u.f,s=a(n),c={},f=0;s.length>f;)void 0!==(r=o(n,t=s[f++]))&&l(c,t,r);return c}})},6210:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(1156).f;n({target:"Object",stat:!0,forced:o((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:a})},489:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(7908),i=r(9518),u=r(8544);n({target:"Object",stat:!0,forced:o((function(){i(1)})),sham:!u},{getPrototypeOf:function(e){return i(a(e))}})},6314:(e,t,r)=>{r(2109)({target:"Object",stat:!0},{hasOwn:r(2597)})},1825:(e,t,r)=>{var n=r(2109),o=r(2050);n({target:"Object",stat:!0,forced:Object.isExtensible!==o},{isExtensible:o})},8410:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(111),i=r(4326),u=r(7556),l=Object.isFrozen;n({target:"Object",stat:!0,forced:o((function(){l(1)}))||u},{isFrozen:function(e){return!a(e)||!(!u||"ArrayBuffer"!=i(e))||!!l&&l(e)}})},2200:(e,t,r)=>{var n=r(2109),o=r(7293),a=r(111),i=r(4326),u=r(7556),l=Object.isSealed;n({target:"Object",stat:!0,forced:o((function(){l(1)}))||u},{isSealed:function(e){return!a(e)||!(!u||"ArrayBuffer"!=i(e))||!!l&&l(e)}})},3304:(e,t,r)=>{r(2109)({target:"Object",stat:!0},{is:r(1150)})},7941:(e,t,r)=>{var n=r(2109),o=r(7908),a=r(1956);n({target:"Object",stat:!0,forced:r(7293)((function(){a(1)}))},{keys:function(e){return a(o(e))}})},4869:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(7908),u=r(4948),l=r(9518),s=r(1236).f;o&&n({target:"Object",proto:!0,forced:a},{__lookupGetter__:function(e){var t,r=i(this),n=u(e);do{if(t=s(r,n))return t.get}while(r=l(r))}})},3952:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(9026),i=r(7908),u=r(4948),l=r(9518),s=r(1236).f;o&&n({target:"Object",proto:!0,forced:a},{__lookupSetter__:function(e){var t,r=i(this),n=u(e);do{if(t=s(r,n))return t.set}while(r=l(r))}})},7227:(e,t,r)=>{var n=r(2109),o=r(111),a=r(2423).onFreeze,i=r(6677),u=r(7293),l=Object.preventExtensions;n({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!i},{preventExtensions:function(e){return l&&o(e)?l(a(e)):e}})},514:(e,t,r)=>{var n=r(2109),o=r(111),a=r(2423).onFreeze,i=r(6677),u=r(7293),l=Object.seal;n({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!i},{seal:function(e){return l&&o(e)?l(a(e)):e}})},8304:(e,t,r)=>{r(2109)({target:"Object",stat:!0},{setPrototypeOf:r(7674)})},1539:(e,t,r)=>{var n=r(1694),o=r(1320),a=r(288);n||o(Object.prototype,"toString",a,{unsafe:!0})},6833:(e,t,r)=>{var n=r(2109),o=r(4699).values;n({target:"Object",stat:!0},{values:function(e){return o(e)}})},4678:(e,t,r)=>{var n=r(2109),o=r(2814);n({global:!0,forced:parseFloat!=o},{parseFloat:o})},1058:(e,t,r)=>{var n=r(2109),o=r(3009);n({global:!0,forced:parseInt!=o},{parseInt:o})},7922:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916),a=r(9662),i=r(8523),u=r(2534),l=r(408);n({target:"Promise",stat:!0},{allSettled:function(e){var t=this,r=i.f(t),n=r.resolve,s=r.reject,c=u((function(){var r=a(t.resolve),i=[],u=0,s=1;l(e,(function(e){var a=u++,l=!1;s++,o(r,t,e).then((function(e){l||(l=!0,i[a]={status:"fulfilled",value:e},--s||n(i))}),(function(e){l||(l=!0,i[a]={status:"rejected",reason:e},--s||n(i))}))})),--s||n(i)}));return c.error&&s(c.value),r.promise}})},4668:(e,t,r)=>{"use strict";var n=r(2109),o=r(9662),a=r(5005),i=r(6916),u=r(8523),l=r(2534),s=r(408),c="No one promise resolved";n({target:"Promise",stat:!0},{any:function(e){var t=this,r=a("AggregateError"),n=u.f(t),f=n.resolve,p=n.reject,d=l((function(){var n=o(t.resolve),a=[],u=0,l=1,d=!1;s(e,(function(e){var o=u++,s=!1;l++,i(n,t,e).then((function(e){s||d||(d=!0,f(e))}),(function(e){s||d||(s=!0,a[o]=e,--l||p(new r(a,c)))}))})),--l||p(new r(a,c))}));return d.error&&p(d.value),n.promise}})},7727:(e,t,r)=>{"use strict";var n=r(2109),o=r(1913),a=r(3366),i=r(7293),u=r(5005),l=r(614),s=r(6707),c=r(9478),f=r(1320);if(n({target:"Promise",proto:!0,real:!0,forced:!!a&&i((function(){a.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=s(this,u("Promise")),r=l(e);return this.then(r?function(r){return c(t,e()).then((function(){return r}))}:e,r?function(r){return c(t,e()).then((function(){throw r}))}:e)}}),!o&&l(a)){var p=u("Promise").prototype.finally;a.prototype.finally!==p&&f(a.prototype,"finally",p,{unsafe:!0})}},8674:(e,t,r)=>{"use strict";var n,o,a,i,u=r(2109),l=r(1913),s=r(7854),c=r(5005),f=r(6916),p=r(3366),d=r(1320),h=r(2248),v=r(7674),g=r(8003),y=r(6340),m=r(9662),b=r(614),w=r(111),x=r(5787),E=r(2788),S=r(408),k=r(7072),O=r(6707),R=r(261).set,T=r(5948),A=r(9478),C=r(842),_=r(8523),P=r(2534),N=r(8572),M=r(9909),L=r(4705),I=r(5112),j=r(7871),U=r(5268),D=r(7392),F=I("species"),z="Promise",B=M.getterFor(z),V=M.set,$=M.getterFor(z),W=p&&p.prototype,H=p,q=W,Q=s.TypeError,Y=s.document,G=s.process,K=_.f,X=K,J=!!(Y&&Y.createEvent&&s.dispatchEvent),Z=b(s.PromiseRejectionEvent),ee="unhandledrejection",te=!1,re=L(z,(function(){var e=E(H),t=e!==String(H);if(!t&&66===D)return!0;if(l&&!q.finally)return!0;if(D>=51&&/native code/.test(e))return!1;var r=new H((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(r.constructor={})[F]=n,!(te=r.then((function(){}))instanceof n)||!t&&j&&!Z})),ne=re||!k((function(e){H.all(e).catch((function(){}))})),oe=function(e){var t;return!(!w(e)||!b(t=e.then))&&t},ae=function(e,t){var r,n,o,a=t.value,i=1==t.state,u=i?e.ok:e.fail,l=e.resolve,s=e.reject,c=e.domain;try{u?(i||(2===t.rejection&&ce(t),t.rejection=1),!0===u?r=a:(c&&c.enter(),r=u(a),c&&(c.exit(),o=!0)),r===e.promise?s(Q("Promise-chain cycle")):(n=oe(r))?f(n,r,l,s):l(r)):s(a)}catch(e){c&&!o&&c.exit(),s(e)}},ie=function(e,t){e.notified||(e.notified=!0,T((function(){for(var r,n=e.reactions;r=n.get();)ae(r,e);e.notified=!1,t&&!e.rejection&&le(e)})))},ue=function(e,t,r){var n,o;J?((n=Y.createEvent("Event")).promise=t,n.reason=r,n.initEvent(e,!1,!0),s.dispatchEvent(n)):n={promise:t,reason:r},!Z&&(o=s["on"+e])?o(n):e===ee&&C("Unhandled promise rejection",r)},le=function(e){f(R,s,(function(){var t,r=e.facade,n=e.value;if(se(e)&&(t=P((function(){U?G.emit("unhandledRejection",n,r):ue(ee,r,n)})),e.rejection=U||se(e)?2:1,t.error))throw t.value}))},se=function(e){return 1!==e.rejection&&!e.parent},ce=function(e){f(R,s,(function(){var t=e.facade;U?G.emit("rejectionHandled",t):ue("rejectionhandled",t,e.value)}))},fe=function(e,t,r){return function(n){e(t,n,r)}},pe=function(e,t,r){e.done||(e.done=!0,r&&(e=r),e.value=t,e.state=2,ie(e,!0))},de=function(e,t,r){if(!e.done){e.done=!0,r&&(e=r);try{if(e.facade===t)throw Q("Promise can't be resolved itself");var n=oe(t);n?T((function(){var r={done:!1};try{f(n,t,fe(de,r,e),fe(pe,r,e))}catch(t){pe(r,t,e)}})):(e.value=t,e.state=1,ie(e,!1))}catch(t){pe({done:!1},t,e)}}};if(re&&(q=(H=function(e){x(this,q),m(e),f(n,this);var t=B(this);try{e(fe(de,t),fe(pe,t))}catch(e){pe(t,e)}}).prototype,(n=function(e){V(this,{type:z,done:!1,notified:!1,parent:!1,reactions:new N,rejection:!1,state:0,value:void 0})}).prototype=h(q,{then:function(e,t){var r=$(this),n=K(O(this,H));return r.parent=!0,n.ok=!b(e)||e,n.fail=b(t)&&t,n.domain=U?G.domain:void 0,0==r.state?r.reactions.add(n):T((function(){ae(n,r)})),n.promise},catch:function(e){return this.then(void 0,e)}}),o=function(){var e=new n,t=B(e);this.promise=e,this.resolve=fe(de,t),this.reject=fe(pe,t)},_.f=K=function(e){return e===H||e===a?new o(e):X(e)},!l&&b(p)&&W!==Object.prototype)){i=W.then,te||(d(W,"then",(function(e,t){var r=this;return new H((function(e,t){f(i,r,e,t)})).then(e,t)}),{unsafe:!0}),d(W,"catch",q.catch,{unsafe:!0}));try{delete W.constructor}catch(e){}v&&v(W,q)}u({global:!0,wrap:!0,forced:re},{Promise:H}),g(H,z,!1,!0),y(z),a=c(z),u({target:z,stat:!0,forced:re},{reject:function(e){var t=K(this);return f(t.reject,void 0,e),t.promise}}),u({target:z,stat:!0,forced:l||re},{resolve:function(e){return A(l&&this===a?H:this,e)}}),u({target:z,stat:!0,forced:ne},{all:function(e){var t=this,r=K(t),n=r.resolve,o=r.reject,a=P((function(){var r=m(t.resolve),a=[],i=0,u=1;S(e,(function(e){var l=i++,s=!1;u++,f(r,t,e).then((function(e){s||(s=!0,a[l]=e,--u||n(a))}),o)})),--u||n(a)}));return a.error&&o(a.value),r.promise},race:function(e){var t=this,r=K(t),n=r.reject,o=P((function(){var o=m(t.resolve);S(e,(function(e){f(o,t,e).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},224:(e,t,r)=>{var n=r(2109),o=r(2104),a=r(9662),i=r(9670);n({target:"Reflect",stat:!0,forced:!r(7293)((function(){Reflect.apply((function(){}))}))},{apply:function(e,t,r){return o(a(e),t,i(r))}})},2419:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(2104),i=r(7065),u=r(9483),l=r(9670),s=r(111),c=r(30),f=r(7293),p=o("Reflect","construct"),d=Object.prototype,h=[].push,v=f((function(){function e(){}return!(p((function(){}),[],e)instanceof e)})),g=!f((function(){p((function(){}))})),y=v||g;n({target:"Reflect",stat:!0,forced:y,sham:y},{construct:function(e,t){u(e),l(t);var r=arguments.length<3?e:u(arguments[2]);if(g&&!v)return p(e,t,r);if(e==r){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var n=[null];return a(h,n,t),new(a(i,e,n))}var o=r.prototype,f=c(s(o)?o:d),y=a(e,f,t);return s(y)?y:f}})},9596:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(9670),i=r(4948),u=r(3070);n({target:"Reflect",stat:!0,forced:r(7293)((function(){Reflect.defineProperty(u.f({},1,{value:1}),1,{value:2})})),sham:!o},{defineProperty:function(e,t,r){a(e);var n=i(t);a(r);try{return u.f(e,n,r),!0}catch(e){return!1}}})},2586:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(1236).f;n({target:"Reflect",stat:!0},{deleteProperty:function(e,t){var r=a(o(e),t);return!(r&&!r.configurable)&&delete e[t]}})},5683:(e,t,r)=>{var n=r(2109),o=r(9781),a=r(9670),i=r(1236);n({target:"Reflect",stat:!0,sham:!o},{getOwnPropertyDescriptor:function(e,t){return i.f(a(e),t)}})},9361:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(9518);n({target:"Reflect",stat:!0,sham:!r(8544)},{getPrototypeOf:function(e){return a(o(e))}})},4819:(e,t,r)=>{var n=r(2109),o=r(6916),a=r(111),i=r(9670),u=r(5032),l=r(1236),s=r(9518);n({target:"Reflect",stat:!0},{get:function e(t,r){var n,c,f=arguments.length<3?t:arguments[2];return i(t)===f?t[r]:(n=l.f(t,r))?u(n)?n.value:void 0===n.get?void 0:o(n.get,f):a(c=s(t))?e(c,r,f):void 0}})},1037:(e,t,r)=>{r(2109)({target:"Reflect",stat:!0},{has:function(e,t){return t in e}})},5898:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(2050);n({target:"Reflect",stat:!0},{isExtensible:function(e){return o(e),a(e)}})},7318:(e,t,r)=>{r(2109)({target:"Reflect",stat:!0},{ownKeys:r(3887)})},4361:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(9670);n({target:"Reflect",stat:!0,sham:!r(6677)},{preventExtensions:function(e){a(e);try{var t=o("Object","preventExtensions");return t&&t(e),!0}catch(e){return!1}}})},9532:(e,t,r)=>{var n=r(2109),o=r(9670),a=r(6077),i=r(7674);i&&n({target:"Reflect",stat:!0},{setPrototypeOf:function(e,t){o(e),a(t);try{return i(e,t),!0}catch(e){return!1}}})},3593:(e,t,r)=>{var n=r(2109),o=r(6916),a=r(9670),i=r(111),u=r(5032),l=r(7293),s=r(3070),c=r(1236),f=r(9518),p=r(9114);n({target:"Reflect",stat:!0,forced:l((function(){var e=function(){},t=s.f(new e,"a",{configurable:!0});return!1!==Reflect.set(e.prototype,"a",1,t)}))},{set:function e(t,r,n){var l,d,h,v=arguments.length<4?t:arguments[3],g=c.f(a(t),r);if(!g){if(i(d=f(t)))return e(d,r,n,v);g=p(0)}if(u(g)){if(!1===g.writable||!i(v))return!1;if(l=c.f(v,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=n,s.f(v,r,l)}else s.f(v,r,p(0,n))}else{if(void 0===(h=g.set))return!1;o(h,v,n)}return!0}})},1299:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(8003);n({global:!0},{Reflect:{}}),a(o.Reflect,"Reflect",!0)},4603:(e,t,r)=>{var n=r(9781),o=r(7854),a=r(1702),i=r(4705),u=r(9587),l=r(8880),s=r(3070).f,c=r(8006).f,f=r(7976),p=r(7850),d=r(1340),h=r(7066),v=r(2999),g=r(1320),y=r(7293),m=r(2597),b=r(9909).enforce,w=r(6340),x=r(5112),E=r(9441),S=r(7168),k=x("match"),O=o.RegExp,R=O.prototype,T=o.SyntaxError,A=a(h),C=a(R.exec),_=a("".charAt),P=a("".replace),N=a("".indexOf),M=a("".slice),L=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,I=/a/g,j=/a/g,U=new O(I)!==I,D=v.MISSED_STICKY,F=v.UNSUPPORTED_Y;if(i("RegExp",n&&(!U||D||E||S||y((function(){return j[k]=!1,O(I)!=I||O(j)==j||"/a/i"!=O(I,"i")}))))){for(var z=function(e,t){var r,n,o,a,i,s,c=f(R,this),h=p(e),v=void 0===t,g=[],y=e;if(!c&&h&&v&&e.constructor===z)return e;if((h||f(R,e))&&(e=e.source,v&&(t="flags"in y?y.flags:A(y))),e=void 0===e?"":d(e),t=void 0===t?"":d(t),y=e,E&&"dotAll"in I&&(n=!!t&&N(t,"s")>-1)&&(t=P(t,/s/g,"")),r=t,D&&"sticky"in I&&(o=!!t&&N(t,"y")>-1)&&F&&(t=P(t,/y/g,"")),S&&(a=function(e){for(var t,r=e.length,n=0,o="",a=[],i={},u=!1,l=!1,s=0,c="";n<=r;n++){if("\\"===(t=_(e,n)))t+=_(e,++n);else if("]"===t)u=!1;else if(!u)switch(!0){case"["===t:u=!0;break;case"("===t:C(L,M(e,n+1))&&(n+=2,l=!0),o+=t,s++;continue;case">"===t&&l:if(""===c||m(i,c))throw new T("Invalid capture group name");i[c]=!0,a[a.length]=[c,s],l=!1,c="";continue}l?c+=t:o+=t}return[o,a]}(e),e=a[0],g=a[1]),i=u(O(e,t),c?this:R,z),(n||o||g.length)&&(s=b(i),n&&(s.dotAll=!0,s.raw=z(function(e){for(var t,r=e.length,n=0,o="",a=!1;n<=r;n++)"\\"!==(t=_(e,n))?a||"."!==t?("["===t?a=!0:"]"===t&&(a=!1),o+=t):o+="[\\s\\S]":o+=t+_(e,++n);return o}(e),r)),o&&(s.sticky=!0),g.length&&(s.groups=g)),e!==y)try{l(i,"source",""===y?"(?:)":y)}catch(e){}return i},B=function(e){e in z||s(z,e,{configurable:!0,get:function(){return O[e]},set:function(t){O[e]=t}})},V=c(O),$=0;V.length>$;)B(V[$++]);R.constructor=z,z.prototype=R,g(o,"RegExp",z)}w("RegExp")},8450:(e,t,r)=>{var n=r(7854),o=r(9781),a=r(9441),i=r(4326),u=r(3070).f,l=r(9909).get,s=RegExp.prototype,c=n.TypeError;o&&a&&u(s,"dotAll",{configurable:!0,get:function(){if(this!==s){if("RegExp"===i(this))return!!l(this).dotAll;throw c("Incompatible receiver, RegExp required")}}})},4916:(e,t,r)=>{"use strict";var n=r(2109),o=r(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},2087:(e,t,r)=>{var n=r(9781),o=r(3070),a=r(7066),i=r(7293),u=RegExp.prototype;n&&i((function(){return"sy"!==Object.getOwnPropertyDescriptor(u,"flags").get.call({dotAll:!0,sticky:!0})}))&&o.f(u,"flags",{configurable:!0,get:a})},8386:(e,t,r)=>{var n=r(7854),o=r(9781),a=r(2999).MISSED_STICKY,i=r(4326),u=r(3070).f,l=r(9909).get,s=RegExp.prototype,c=n.TypeError;o&&a&&u(s,"sticky",{configurable:!0,get:function(){if(this!==s){if("RegExp"===i(this))return!!l(this).sticky;throw c("Incompatible receiver, RegExp required")}}})},7601:(e,t,r)=>{"use strict";r(4916);var n,o,a=r(2109),i=r(7854),u=r(6916),l=r(1702),s=r(614),c=r(111),f=(n=!1,(o=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&n),p=i.Error,d=l(/./.test);a({target:"RegExp",proto:!0,forced:!f},{test:function(e){var t=this.exec;if(!s(t))return d(this,e);var r=u(t,this,e);if(null!==r&&!c(r))throw new p("RegExp exec method returned something other than an Object or null");return!!r}})},9714:(e,t,r)=>{"use strict";var n=r(1702),o=r(6530).PROPER,a=r(1320),i=r(9670),u=r(7976),l=r(1340),s=r(7293),c=r(7066),f="toString",p=RegExp.prototype,d=p.toString,h=n(c),v=s((function(){return"/a/b"!=d.call({source:"a",flags:"b"})})),g=o&&d.name!=f;(v||g)&&a(RegExp.prototype,f,(function(){var e=i(this),t=l(e.source),r=e.flags;return"/"+t+"/"+l(void 0===r&&u(p,e)&&!("flags"in p)?h(e):r)}),{unsafe:!0})},189:(e,t,r)=>{"use strict";r(7710)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(5631))},5218:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("anchor")},{anchor:function(e){return o(this,"a","name",e)}})},4506:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(4488),i=r(9303),u=r(1340),l=r(7293),s=o("".charAt);n({target:"String",proto:!0,forced:l((function(){return"\ud842"!=="𠮷".at(-2)}))},{at:function(e){var t=u(a(this)),r=t.length,n=i(e),o=n>=0?n:r+n;return o<0||o>=r?void 0:s(t,o)}})},4475:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("big")},{big:function(){return o(this,"big","","")}})},7929:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("blink")},{blink:function(){return o(this,"blink","","")}})},915:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("bold")},{bold:function(){return o(this,"b","","")}})},9841:(e,t,r)=>{"use strict";var n=r(2109),o=r(8710).codeAt;n({target:"String",proto:!0},{codePointAt:function(e){return o(this,e)}})},7852:(e,t,r)=>{"use strict";var n,o=r(2109),a=r(1702),i=r(1236).f,u=r(7466),l=r(1340),s=r(3929),c=r(4488),f=r(4964),p=r(1913),d=a("".endsWith),h=a("".slice),v=Math.min,g=f("endsWith");o({target:"String",proto:!0,forced:!(!p&&!g&&(n=i(String.prototype,"endsWith"),n&&!n.writable)||g)},{endsWith:function(e){var t=l(c(this));s(e);var r=arguments.length>1?arguments[1]:void 0,n=t.length,o=void 0===r?n:v(u(r),n),a=l(e);return d?d(t,a,o):h(t,o-a.length,o)===a}})},9253:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("fixed")},{fixed:function(){return o(this,"tt","","")}})},2125:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontcolor")},{fontcolor:function(e){return o(this,"font","color",e)}})},8830:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("fontsize")},{fontsize:function(e){return o(this,"font","size",e)}})},4953:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(1702),i=r(1400),u=o.RangeError,l=String.fromCharCode,s=String.fromCodePoint,c=a([].join);n({target:"String",stat:!0,forced:!!s&&1!=s.length},{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,o=0;n>o;){if(t=+arguments[o++],i(t,1114111)!==t)throw u(t+" is not a valid code point");r[o]=t<65536?l(t):l(55296+((t-=65536)>>10),t%1024+56320)}return c(r,"")}})},2023:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(3929),i=r(4488),u=r(1340),l=r(4964),s=o("".indexOf);n({target:"String",proto:!0,forced:!l("includes")},{includes:function(e){return!!~s(u(i(this)),u(a(e)),arguments.length>1?arguments[1]:void 0)}})},8734:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("italics")},{italics:function(){return o(this,"i","","")}})},8783:(e,t,r)=>{"use strict";var n=r(8710).charAt,o=r(1340),a=r(9909),i=r(654),u="String Iterator",l=a.set,s=a.getterFor(u);i(String,"String",(function(e){l(this,{type:u,string:o(e),index:0})}),(function(){var e,t=s(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},9254:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("link")},{link:function(e){return o(this,"a","href",e)}})},6373:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(6916),i=r(1702),u=r(4994),l=r(4488),s=r(7466),c=r(1340),f=r(9670),p=r(4326),d=r(7976),h=r(7850),v=r(7066),g=r(8173),y=r(1320),m=r(7293),b=r(5112),w=r(6707),x=r(1530),E=r(7651),S=r(9909),k=r(1913),O=b("matchAll"),R="RegExp String Iterator",T=S.set,A=S.getterFor(R),C=RegExp.prototype,_=o.TypeError,P=i(v),N=i("".indexOf),M=i("".matchAll),L=!!M&&!m((function(){M("a",/./)})),I=u((function(e,t,r,n){T(this,{type:R,regexp:e,string:t,global:r,unicode:n,done:!1})}),"RegExp String",(function(){var e=A(this);if(e.done)return{value:void 0,done:!0};var t=e.regexp,r=e.string,n=E(t,r);return null===n?{value:void 0,done:e.done=!0}:e.global?(""===c(n[0])&&(t.lastIndex=x(r,s(t.lastIndex),e.unicode)),{value:n,done:!1}):(e.done=!0,{value:n,done:!1})})),j=function(e){var t,r,n,o,a,i,u=f(this),l=c(e);return t=w(u,RegExp),void 0===(r=u.flags)&&d(C,u)&&!("flags"in C)&&(r=P(u)),n=void 0===r?"":c(r),o=new t(t===RegExp?u.source:u,n),a=!!~N(n,"g"),i=!!~N(n,"u"),o.lastIndex=s(u.lastIndex),new I(o,l,a,i)};n({target:"String",proto:!0,forced:L},{matchAll:function(e){var t,r,n,o,i=l(this);if(null!=e){if(h(e)&&(t=c(l("flags"in C?e.flags:P(e))),!~N(t,"g")))throw _("`.matchAll` does not allow non-global regexes");if(L)return M(i,e);if(void 0===(n=g(e,O))&&k&&"RegExp"==p(e)&&(n=j),n)return a(n,e,i)}else if(L)return M(i,e);return r=c(i),o=new RegExp(e,"g"),k?a(j,o,r):o[O](r)}}),k||O in C||y(C,O,j)},4723:(e,t,r)=>{"use strict";var n=r(6916),o=r(7007),a=r(9670),i=r(7466),u=r(1340),l=r(4488),s=r(8173),c=r(1530),f=r(7651);o("match",(function(e,t,r){return[function(t){var r=l(this),o=null==t?void 0:s(t,e);return o?n(o,t,r):new RegExp(t)[e](u(r))},function(e){var n=a(this),o=u(e),l=r(t,n,o);if(l.done)return l.value;if(!n.global)return f(n,o);var s=n.unicode;n.lastIndex=0;for(var p,d=[],h=0;null!==(p=f(n,o));){var v=u(p[0]);d[h]=v,""===v&&(n.lastIndex=c(o,i(n.lastIndex),s)),h++}return 0===h?null:d}]}))},6528:(e,t,r)=>{"use strict";var n=r(2109),o=r(6650).end;n({target:"String",proto:!0,forced:r(7061)},{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},3112:(e,t,r)=>{"use strict";var n=r(2109),o=r(6650).start;n({target:"String",proto:!0,forced:r(7061)},{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},8992:(e,t,r)=>{var n=r(2109),o=r(1702),a=r(5656),i=r(7908),u=r(1340),l=r(6244),s=o([].push),c=o([].join);n({target:"String",stat:!0},{raw:function(e){for(var t=a(i(e).raw),r=l(t),n=arguments.length,o=[],f=0;r>f;){if(s(o,u(t[f++])),f===r)return c(o,"");f<n&&s(o,u(arguments[f]))}}})},2481:(e,t,r)=>{r(2109)({target:"String",proto:!0},{repeat:r(8415)})},8757:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(6916),i=r(1702),u=r(4488),l=r(614),s=r(7850),c=r(1340),f=r(8173),p=r(7066),d=r(647),h=r(5112),v=r(1913),g=h("replace"),y=RegExp.prototype,m=o.TypeError,b=i(p),w=i("".indexOf),x=i("".replace),E=i("".slice),S=Math.max,k=function(e,t,r){return r>e.length?-1:""===t?r:w(e,t,r)};n({target:"String",proto:!0},{replaceAll:function(e,t){var r,n,o,i,p,h,O,R,T,A=u(this),C=0,_=0,P="";if(null!=e){if((r=s(e))&&(n=c(u("flags"in y?e.flags:b(e))),!~w(n,"g")))throw m("`.replaceAll` does not allow non-global regexes");if(o=f(e,g))return a(o,e,A,t);if(v&&r)return x(c(A),e,t)}for(i=c(A),p=c(e),(h=l(t))||(t=c(t)),O=p.length,R=S(1,O),C=k(i,p,0);-1!==C;)T=h?c(t(p,C,i)):d(p,i,C,[],void 0,t),P+=E(i,_,C)+T,_=C+O,C=k(i,p,C+R);return _<i.length&&(P+=E(i,_)),P}})},5306:(e,t,r)=>{"use strict";var n=r(2104),o=r(6916),a=r(1702),i=r(7007),u=r(7293),l=r(9670),s=r(614),c=r(9303),f=r(7466),p=r(1340),d=r(4488),h=r(1530),v=r(8173),g=r(647),y=r(7651),m=r(5112)("replace"),b=Math.max,w=Math.min,x=a([].concat),E=a([].push),S=a("".indexOf),k=a("".slice),O="$0"==="a".replace(/./,"$0"),R=!!/./[m]&&""===/./[m]("a","$0");i("replace",(function(e,t,r){var a=R?"$":"$0";return[function(e,r){var n=d(this),a=null==e?void 0:v(e,m);return a?o(a,e,n,r):o(t,p(n),e,r)},function(e,o){var i=l(this),u=p(e);if("string"==typeof o&&-1===S(o,a)&&-1===S(o,"$<")){var d=r(t,i,u,o);if(d.done)return d.value}var v=s(o);v||(o=p(o));var m=i.global;if(m){var O=i.unicode;i.lastIndex=0}for(var R=[];;){var T=y(i,u);if(null===T)break;if(E(R,T),!m)break;""===p(T[0])&&(i.lastIndex=h(u,f(i.lastIndex),O))}for(var A,C="",_=0,P=0;P<R.length;P++){for(var N=p((T=R[P])[0]),M=b(w(c(T.index),u.length),0),L=[],I=1;I<T.length;I++)E(L,void 0===(A=T[I])?A:String(A));var j=T.groups;if(v){var U=x([N],L,M,u);void 0!==j&&E(U,j);var D=p(n(o,void 0,U))}else D=g(N,u,M,L,j,o);M>=_&&(C+=k(u,_,M)+D,_=M+N.length)}return C+k(u,_)}]}),!!u((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!O||R)},4765:(e,t,r)=>{"use strict";var n=r(6916),o=r(7007),a=r(9670),i=r(4488),u=r(1150),l=r(1340),s=r(8173),c=r(7651);o("search",(function(e,t,r){return[function(t){var r=i(this),o=null==t?void 0:s(t,e);return o?n(o,t,r):new RegExp(t)[e](l(r))},function(e){var n=a(this),o=l(e),i=r(t,n,o);if(i.done)return i.value;var s=n.lastIndex;u(s,0)||(n.lastIndex=0);var f=c(n,o);return u(n.lastIndex,s)||(n.lastIndex=s),null===f?-1:f.index}]}))},7268:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("small")},{small:function(){return o(this,"small","","")}})},3123:(e,t,r)=>{"use strict";var n=r(2104),o=r(6916),a=r(1702),i=r(7007),u=r(7850),l=r(9670),s=r(4488),c=r(6707),f=r(1530),p=r(7466),d=r(1340),h=r(8173),v=r(1589),g=r(7651),y=r(2261),m=r(2999),b=r(7293),w=m.UNSUPPORTED_Y,x=4294967295,E=Math.min,S=[].push,k=a(/./.exec),O=a(S),R=a("".slice);i("split",(function(e,t,r){var a;return a="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,r){var a=d(s(this)),i=void 0===r?x:r>>>0;if(0===i)return[];if(void 0===e)return[a];if(!u(e))return o(t,a,e,i);for(var l,c,f,p=[],h=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),g=0,m=new RegExp(e.source,h+"g");(l=o(y,m,a))&&!((c=m.lastIndex)>g&&(O(p,R(a,g,l.index)),l.length>1&&l.index<a.length&&n(S,p,v(l,1)),f=l[0].length,g=c,p.length>=i));)m.lastIndex===l.index&&m.lastIndex++;return g===a.length?!f&&k(m,"")||O(p,""):O(p,R(a,g)),p.length>i?v(p,0,i):p}:"0".split(void 0,0).length?function(e,r){return void 0===e&&0===r?[]:o(t,this,e,r)}:t,[function(t,r){var n=s(this),i=null==t?void 0:h(t,e);return i?o(i,t,n,r):o(a,d(n),t,r)},function(e,n){var o=l(this),i=d(e),u=r(a,o,i,n,a!==t);if(u.done)return u.value;var s=c(o,RegExp),h=o.unicode,v=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(w?"g":"y"),y=new s(w?"^(?:"+o.source+")":o,v),m=void 0===n?x:n>>>0;if(0===m)return[];if(0===i.length)return null===g(y,i)?[i]:[];for(var b=0,S=0,k=[];S<i.length;){y.lastIndex=w?0:S;var T,A=g(y,w?R(i,S):i);if(null===A||(T=E(p(y.lastIndex+(w?S:0)),i.length))===b)S=f(i,S,h);else{if(O(k,R(i,b,S)),k.length===m)return k;for(var C=1;C<=A.length-1;C++)if(O(k,A[C]),k.length===m)return k;S=b=T}}return O(k,R(i,b)),k}]}),!!b((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),w)},6755:(e,t,r)=>{"use strict";var n,o=r(2109),a=r(1702),i=r(1236).f,u=r(7466),l=r(1340),s=r(3929),c=r(4488),f=r(4964),p=r(1913),d=a("".startsWith),h=a("".slice),v=Math.min,g=f("startsWith");o({target:"String",proto:!0,forced:!(!p&&!g&&(n=i(String.prototype,"startsWith"),n&&!n.writable)||g)},{startsWith:function(e){var t=l(c(this));s(e);var r=u(v(arguments.length>1?arguments[1]:void 0,t.length)),n=l(e);return d?d(t,n,r):h(t,r,r+n.length)===n}})},7397:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("strike")},{strike:function(){return o(this,"strike","","")}})},86:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("sub")},{sub:function(){return o(this,"sub","","")}})},3650:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(4488),i=r(9303),u=r(1340),l=o("".slice),s=Math.max,c=Math.min;n({target:"String",proto:!0,forced:!"".substr||"b"!=="ab".substr(-1)},{substr:function(e,t){var r,n,o=u(a(this)),f=o.length,p=i(e);return p===1/0&&(p=0),p<0&&(p=s(f+p,0)),(r=void 0===t?f:i(t))<=0||r===1/0||p>=(n=c(p+r,f))?"":l(o,p,n)}})},623:(e,t,r)=>{"use strict";var n=r(2109),o=r(4230);n({target:"String",proto:!0,forced:r(3429)("sup")},{sup:function(){return o(this,"sup","","")}})},8702:(e,t,r)=>{"use strict";var n=r(2109),o=r(3111).end,a=r(6091)("trimEnd"),i=a?function(){return o(this)}:"".trimEnd;n({target:"String",proto:!0,name:"trimEnd",forced:a},{trimEnd:i,trimRight:i})},5674:(e,t,r)=>{"use strict";var n=r(2109),o=r(3111).start,a=r(6091)("trimStart"),i=a?function(){return o(this)}:"".trimStart;n({target:"String",proto:!0,name:"trimStart",forced:a},{trimStart:i,trimLeft:i})},3210:(e,t,r)=>{"use strict";var n=r(2109),o=r(3111).trim;n({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return o(this)}})},2443:(e,t,r)=>{r(7235)("asyncIterator")},1817:(e,t,r)=>{"use strict";var n=r(2109),o=r(9781),a=r(7854),i=r(1702),u=r(2597),l=r(614),s=r(7976),c=r(1340),f=r(3070).f,p=r(9920),d=a.Symbol,h=d&&d.prototype;if(o&&l(d)&&(!("description"in h)||void 0!==d().description)){var v={},g=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:c(arguments[0]),t=s(h,this)?new d(e):void 0===e?d():d(e);return""===e&&(v[t]=!0),t};p(g,d),g.prototype=h,h.constructor=g;var y="Symbol(test)"==String(d("test")),m=i(h.toString),b=i(h.valueOf),w=/^Symbol\((.*)\)[^)]+$/,x=i("".replace),E=i("".slice);f(h,"description",{configurable:!0,get:function(){var e=b(this),t=m(e);if(u(v,e))return"";var r=y?E(t,7,-1):x(t,w,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:g})}},2401:(e,t,r)=>{r(7235)("hasInstance")},8722:(e,t,r)=>{r(7235)("isConcatSpreadable")},2165:(e,t,r)=>{r(7235)("iterator")},2526:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),a=r(5005),i=r(2104),u=r(6916),l=r(1702),s=r(1913),c=r(9781),f=r(133),p=r(7293),d=r(2597),h=r(3157),v=r(614),g=r(111),y=r(7976),m=r(2190),b=r(9670),w=r(7908),x=r(5656),E=r(4948),S=r(1340),k=r(9114),O=r(30),R=r(1956),T=r(8006),A=r(1156),C=r(5181),_=r(1236),P=r(3070),N=r(6048),M=r(5296),L=r(206),I=r(1320),j=r(2309),U=r(6200),D=r(3501),F=r(9711),z=r(5112),B=r(6061),V=r(7235),$=r(8003),W=r(9909),H=r(2092).forEach,q=U("hidden"),Q="Symbol",Y=z("toPrimitive"),G=W.set,K=W.getterFor(Q),X=Object.prototype,J=o.Symbol,Z=J&&J.prototype,ee=o.TypeError,te=o.QObject,re=a("JSON","stringify"),ne=_.f,oe=P.f,ae=A.f,ie=M.f,ue=l([].push),le=j("symbols"),se=j("op-symbols"),ce=j("string-to-symbol-registry"),fe=j("symbol-to-string-registry"),pe=j("wks"),de=!te||!te.prototype||!te.prototype.findChild,he=c&&p((function(){return 7!=O(oe({},"a",{get:function(){return oe(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=ne(X,t);n&&delete X[t],oe(e,t,r),n&&e!==X&&oe(X,t,n)}:oe,ve=function(e,t){var r=le[e]=O(Z);return G(r,{type:Q,tag:e,description:t}),c||(r.description=t),r},ge=function(e,t,r){e===X&&ge(se,t,r),b(e);var n=E(t);return b(r),d(le,n)?(r.enumerable?(d(e,q)&&e[q][n]&&(e[q][n]=!1),r=O(r,{enumerable:k(0,!1)})):(d(e,q)||oe(e,q,k(1,{})),e[q][n]=!0),he(e,n,r)):oe(e,n,r)},ye=function(e,t){b(e);var r=x(t),n=R(r).concat(xe(r));return H(n,(function(t){c&&!u(me,r,t)||ge(e,t,r[t])})),e},me=function(e){var t=E(e),r=u(ie,this,t);return!(this===X&&d(le,t)&&!d(se,t))&&(!(r||!d(this,t)||!d(le,t)||d(this,q)&&this[q][t])||r)},be=function(e,t){var r=x(e),n=E(t);if(r!==X||!d(le,n)||d(se,n)){var o=ne(r,n);return!o||!d(le,n)||d(r,q)&&r[q][n]||(o.enumerable=!0),o}},we=function(e){var t=ae(x(e)),r=[];return H(t,(function(e){d(le,e)||d(D,e)||ue(r,e)})),r},xe=function(e){var t=e===X,r=ae(t?se:x(e)),n=[];return H(r,(function(e){!d(le,e)||t&&!d(X,e)||ue(n,le[e])})),n};if(f||(I(Z=(J=function(){if(y(Z,this))throw ee("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?S(arguments[0]):void 0,t=F(e),r=function(e){this===X&&u(r,se,e),d(this,q)&&d(this[q],t)&&(this[q][t]=!1),he(this,t,k(1,e))};return c&&de&&he(X,t,{configurable:!0,set:r}),ve(t,e)}).prototype,"toString",(function(){return K(this).tag})),I(J,"withoutSetter",(function(e){return ve(F(e),e)})),M.f=me,P.f=ge,N.f=ye,_.f=be,T.f=A.f=we,C.f=xe,B.f=function(e){return ve(z(e),e)},c&&(oe(Z,"description",{configurable:!0,get:function(){return K(this).description}}),s||I(X,"propertyIsEnumerable",me,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!f,sham:!f},{Symbol:J}),H(R(pe),(function(e){V(e)})),n({target:Q,stat:!0,forced:!f},{for:function(e){var t=S(e);if(d(ce,t))return ce[t];var r=J(t);return ce[t]=r,fe[r]=t,r},keyFor:function(e){if(!m(e))throw ee(e+" is not a symbol");if(d(fe,e))return fe[e]},useSetter:function(){de=!0},useSimple:function(){de=!1}}),n({target:"Object",stat:!0,forced:!f,sham:!c},{create:function(e,t){return void 0===t?O(e):ye(O(e),t)},defineProperty:ge,defineProperties:ye,getOwnPropertyDescriptor:be}),n({target:"Object",stat:!0,forced:!f},{getOwnPropertyNames:we,getOwnPropertySymbols:xe}),n({target:"Object",stat:!0,forced:p((function(){C.f(1)}))},{getOwnPropertySymbols:function(e){return C.f(w(e))}}),re&&n({target:"JSON",stat:!0,forced:!f||p((function(){var e=J();return"[null]"!=re([e])||"{}"!=re({a:e})||"{}"!=re(Object(e))}))},{stringify:function(e,t,r){var n=L(arguments),o=t;if((g(t)||void 0!==e)&&!m(e))return h(t)||(t=function(e,t){if(v(o)&&(t=u(o,this,e,t)),!m(t))return t}),n[1]=t,i(re,null,n)}}),!Z[Y]){var Ee=Z.valueOf;I(Z,Y,(function(e){return u(Ee,this)}))}$(J,Q),D[q]=!0},6066:(e,t,r)=>{r(7235)("matchAll")},9007:(e,t,r)=>{r(7235)("match")},3510:(e,t,r)=>{r(7235)("replace")},1840:(e,t,r)=>{r(7235)("search")},6982:(e,t,r)=>{r(7235)("species")},2159:(e,t,r)=>{r(7235)("split")},6649:(e,t,r)=>{r(7235)("toPrimitive")},9341:(e,t,r)=>{r(7235)("toStringTag")},543:(e,t,r)=>{r(7235)("unscopables")},8675:(e,t,r)=>{"use strict";var n=r(260),o=r(6244),a=r(9303),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("at",(function(e){var t=i(this),r=o(t),n=a(e),u=n>=0?n:r+n;return u<0||u>=r?void 0:t[u]}))},2990:(e,t,r)=>{"use strict";var n=r(1702),o=r(260),a=n(r(1048)),i=o.aTypedArray;(0,o.exportTypedArrayMethod)("copyWithin",(function(e,t){return a(i(this),e,t,arguments.length>2?arguments[2]:void 0)}))},8927:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).every,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},3105:(e,t,r)=>{"use strict";var n=r(260),o=r(6916),a=r(1285),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(e){var t=arguments.length;return o(a,i(this),e,t>1?arguments[1]:void 0,t>2?arguments[2]:void 0)}))},5035:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).filter,a=r(3074),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("filter",(function(e){var t=o(i(this),e,arguments.length>1?arguments[1]:void 0);return a(this,t)}))},7174:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).findIndex,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},4345:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).find,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},4197:(e,t,r)=>{r(9843)("Float32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},6495:(e,t,r)=>{r(9843)("Float64",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},2846:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).forEach,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(e){o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},8145:(e,t,r)=>{"use strict";var n=r(3832);(0,r(260).exportTypedArrayStaticMethod)("from",r(7321),n)},4731:(e,t,r)=>{"use strict";var n=r(260),o=r(1318).includes,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},7209:(e,t,r)=>{"use strict";var n=r(260),o=r(1318).indexOf,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},5109:(e,t,r)=>{r(9843)("Int16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},5125:(e,t,r)=>{r(9843)("Int32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},7145:(e,t,r)=>{r(9843)("Int8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},6319:(e,t,r)=>{"use strict";var n=r(7854),o=r(7293),a=r(1702),i=r(260),u=r(6992),l=r(5112)("iterator"),s=n.Uint8Array,c=a(u.values),f=a(u.keys),p=a(u.entries),d=i.aTypedArray,h=i.exportTypedArrayMethod,v=s&&s.prototype,g=!o((function(){v[l].call([1])})),y=!!v&&v.values&&v[l]===v.values&&"values"===v.values.name,m=function(){return c(d(this))};h("entries",(function(){return p(d(this))}),g),h("keys",(function(){return f(d(this))}),g),h("values",m,g||!y,{name:"values"}),h(l,m,g||!y,{name:"values"})},8867:(e,t,r)=>{"use strict";var n=r(260),o=r(1702),a=n.aTypedArray,i=n.exportTypedArrayMethod,u=o([].join);i("join",(function(e){return u(a(this),e)}))},7789:(e,t,r)=>{"use strict";var n=r(260),o=r(2104),a=r(6583),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(e){var t=arguments.length;return o(a,i(this),t>1?[e,arguments[1]]:[e])}))},3739:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).map,a=r(6304),i=n.aTypedArray;(0,n.exportTypedArrayMethod)("map",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0,(function(e,t){return new(a(e))(t)}))}))},5206:(e,t,r)=>{"use strict";var n=r(260),o=r(3832),a=n.aTypedArrayConstructor;(0,n.exportTypedArrayStaticMethod)("of",(function(){for(var e=0,t=arguments.length,r=new(a(this))(t);t>e;)r[e]=arguments[e++];return r}),o)},4483:(e,t,r)=>{"use strict";var n=r(260),o=r(3671).right,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(e){var t=arguments.length;return o(a(this),e,t,t>1?arguments[1]:void 0)}))},9368:(e,t,r)=>{"use strict";var n=r(260),o=r(3671).left,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(e){var t=arguments.length;return o(a(this),e,t,t>1?arguments[1]:void 0)}))},2056:(e,t,r)=>{"use strict";var n=r(260),o=n.aTypedArray,a=n.exportTypedArrayMethod,i=Math.floor;a("reverse",(function(){for(var e,t=this,r=o(t).length,n=i(r/2),a=0;a<n;)e=t[a],t[a++]=t[--r],t[r]=e;return t}))},3462:(e,t,r)=>{"use strict";var n=r(7854),o=r(6916),a=r(260),i=r(6244),u=r(4590),l=r(7908),s=r(7293),c=n.RangeError,f=n.Int8Array,p=f&&f.prototype,d=p&&p.set,h=a.aTypedArray,v=a.exportTypedArrayMethod,g=!s((function(){var e=new Uint8ClampedArray(2);return o(d,e,{length:1,0:3},1),3!==e[1]})),y=g&&a.NATIVE_ARRAY_BUFFER_VIEWS&&s((function(){var e=new f(2);return e.set(1),e.set("2",1),0!==e[0]||2!==e[1]}));v("set",(function(e){h(this);var t=u(arguments.length>1?arguments[1]:void 0,1),r=l(e);if(g)return o(d,this,r,t);var n=this.length,a=i(r),s=0;if(a+t>n)throw c("Wrong length");for(;s<a;)this[t+s]=r[s++]}),!g||y)},678:(e,t,r)=>{"use strict";var n=r(260),o=r(6304),a=r(7293),i=r(206),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("slice",(function(e,t){for(var r=i(u(this),e,t),n=o(this),a=0,l=r.length,s=new n(l);l>a;)s[a]=r[a++];return s}),a((function(){new Int8Array(1).slice()})))},7462:(e,t,r)=>{"use strict";var n=r(260),o=r(2092).some,a=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0)}))},3824:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),a=r(7293),i=r(9662),u=r(4362),l=r(260),s=r(8886),c=r(256),f=r(7392),p=r(8008),d=n.Array,h=l.aTypedArray,v=l.exportTypedArrayMethod,g=n.Uint16Array,y=g&&o(g.prototype.sort),m=!(!y||a((function(){y(new g(2),null)}))&&a((function(){y(new g(2),{})}))),b=!!y&&!a((function(){if(f)return f<74;if(s)return s<67;if(c)return!0;if(p)return p<602;var e,t,r=new g(516),n=d(516);for(e=0;e<516;e++)t=e%4,r[e]=515-e,n[e]=e-2*t+3;for(y(r,(function(e,t){return(e/4|0)-(t/4|0)})),e=0;e<516;e++)if(r[e]!==n[e])return!0}));v("sort",(function(e){return void 0!==e&&i(e),b?y(this,e):u(h(this),function(e){return function(t,r){return void 0!==e?+e(t,r)||0:r!=r?-1:t!=t?1:0===t&&0===r?1/t>0&&1/r<0?1:-1:t>r}}(e))}),!b||m)},5021:(e,t,r)=>{"use strict";var n=r(260),o=r(7466),a=r(1400),i=r(6304),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(e,t){var r=u(this),n=r.length,l=a(e,n);return new(i(r))(r.buffer,r.byteOffset+l*r.BYTES_PER_ELEMENT,o((void 0===t?n:a(t,n))-l))}))},2974:(e,t,r)=>{"use strict";var n=r(7854),o=r(2104),a=r(260),i=r(7293),u=r(206),l=n.Int8Array,s=a.aTypedArray,c=a.exportTypedArrayMethod,f=[].toLocaleString,p=!!l&&i((function(){f.call(new l(1))}));c("toLocaleString",(function(){return o(f,p?u(s(this)):s(this),u(arguments))}),i((function(){return[1,2].toLocaleString()!=new l([1,2]).toLocaleString()}))||!i((function(){l.prototype.toLocaleString.call([1,2])})))},5016:(e,t,r)=>{"use strict";var n=r(260).exportTypedArrayMethod,o=r(7293),a=r(7854),i=r(1702),u=a.Uint8Array,l=u&&u.prototype||{},s=[].toString,c=i([].join);o((function(){s.call({})}))&&(s=function(){return c(this)});var f=l.toString!=s;n("toString",s,f)},8255:(e,t,r)=>{r(9843)("Uint16",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},9135:(e,t,r)=>{r(9843)("Uint32",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},2472:(e,t,r)=>{r(9843)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}))},9743:(e,t,r)=>{r(9843)("Uint8",(function(e){return function(t,r,n){return e(this,t,r,n)}}),!0)},8221:(e,t,r)=>{"use strict";var n=r(2109),o=r(1702),a=r(1340),i=String.fromCharCode,u=o("".charAt),l=o(/./.exec),s=o("".slice),c=/^[\da-f]{2}$/i,f=/^[\da-f]{4}$/i;n({global:!0},{unescape:function(e){for(var t,r,n=a(e),o="",p=n.length,d=0;d<p;){if("%"===(t=u(n,d++)))if("u"===u(n,d)){if(r=s(n,d+1,d+5),l(f,r)){o+=i(parseInt(r,16)),d+=5;continue}}else if(r=s(n,d,d+2),l(c,r)){o+=i(parseInt(r,16)),d+=2;continue}o+=t}return o}})},4129:(e,t,r)=>{"use strict";var n,o=r(7854),a=r(1702),i=r(2248),u=r(2423),l=r(7710),s=r(9320),c=r(111),f=r(2050),p=r(9909).enforce,d=r(8536),h=!o.ActiveXObject&&"ActiveXObject"in o,v=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},g=l("WeakMap",v,s);if(d&&h){n=s.getConstructor(v,"WeakMap",!0),u.enable();var y=g.prototype,m=a(y.delete),b=a(y.has),w=a(y.get),x=a(y.set);i(y,{delete:function(e){if(c(e)&&!f(e)){var t=p(this);return t.frozen||(t.frozen=new n),m(this,e)||t.frozen.delete(e)}return m(this,e)},has:function(e){if(c(e)&&!f(e)){var t=p(this);return t.frozen||(t.frozen=new n),b(this,e)||t.frozen.has(e)}return b(this,e)},get:function(e){if(c(e)&&!f(e)){var t=p(this);return t.frozen||(t.frozen=new n),b(this,e)?w(this,e):t.frozen.get(e)}return w(this,e)},set:function(e,t){if(c(e)&&!f(e)){var r=p(this);r.frozen||(r.frozen=new n),b(this,e)?x(this,e,t):r.frozen.set(e,t)}else x(this,e,t);return this}})}},8478:(e,t,r)=>{"use strict";r(7710)("WeakSet",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(9320))},5505:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(1702),i=r(7293),u=r(1340),l=r(2597),s=r(8053),c=r(4170).ctoi,f=/[^\d+/a-z]/i,p=/[\t\n\f\r ]+/g,d=/[=]+$/,h=o("atob"),v=String.fromCharCode,g=a("".charAt),y=a("".replace),m=a(f.exec),b=i((function(){return""!==atob(" ")})),w=!b&&!i((function(){h()}));n({global:!0,enumerable:!0,forced:b||w},{atob:function(e){if(s(arguments.length,1),w)return h(e);var t,r,n=y(u(e),p,""),a="",i=0,b=0;if(n.length%4==0&&(n=y(n,d,"")),n.length%4==1||m(f,n))throw new(o("DOMException"))("The string is not correctly encoded","InvalidCharacterError");for(;t=g(n,i++);)l(c,t)&&(r=b%4?64*r+c[t]:c[t],b++%4&&(a+=v(255&r>>(-2*b&6))));return a}})},7479:(e,t,r)=>{var n=r(2109),o=r(5005),a=r(1702),i=r(7293),u=r(1340),l=r(8053),s=r(4170).itoc,c=o("btoa"),f=a("".charAt),p=a("".charCodeAt),d=!!c&&!i((function(){c()}));n({global:!0,enumerable:!0,forced:d},{btoa:function(e){if(l(arguments.length,1),d)return c(e);for(var t,r,n=u(e),a="",i=0,h=s;f(n,i)||(h="=",i%1);){if((r=p(n,i+=3/4))>255)throw new(o("DOMException"))("The string contains characters outside of the Latin1 range","InvalidCharacterError");a+=f(h,63&(t=t<<8|r)>>8-i%1*8)}return a}})},4747:(e,t,r)=>{var n=r(7854),o=r(8324),a=r(8509),i=r(8533),u=r(8880),l=function(e){if(e&&e.forEach!==i)try{u(e,"forEach",i)}catch(t){e.forEach=i}};for(var s in o)o[s]&&l(n[s]&&n[s].prototype);l(a)},3948:(e,t,r)=>{var n=r(7854),o=r(8324),a=r(8509),i=r(6992),u=r(8880),l=r(5112),s=l("iterator"),c=l("toStringTag"),f=i.values,p=function(e,t){if(e){if(e[s]!==f)try{u(e,s,f)}catch(t){e[s]=f}if(e[c]||u(e,c,t),o[t])for(var r in i)if(e[r]!==i[r])try{u(e,r,i[r])}catch(t){e[r]=i[r]}}};for(var d in o)p(n[d]&&n[d].prototype,d);p(a,"DOMTokenList")},7714:(e,t,r)=>{"use strict";var n=r(2109),o=r(4038),a=r(5005),i=r(7293),u=r(30),l=r(9114),s=r(3070).f,c=r(6048).f,f=r(1320),p=r(2597),d=r(5787),h=r(9670),v=r(7762),g=r(6277),y=r(3678),m=r(7741),b=r(9909),w=r(9781),x=r(1913),E="DOMException",S=a("Error"),k=a(E)||function(){try{(new(a("MessageChannel")||o("worker_threads").MessageChannel)).port1.postMessage(new WeakMap)}catch(e){if("DATA_CLONE_ERR"==e.name&&25==e.code)return e.constructor}}(),O=k&&k.prototype,R=S.prototype,T=b.set,A=b.getterFor(E),C="stack"in S(E),_=function(e){return p(y,e)&&y[e].m?y[e].c:0},P=function(){d(this,N);var e=arguments.length,t=g(e<1?void 0:arguments[0]),r=g(e<2?void 0:arguments[1],"Error"),n=_(r);if(T(this,{type:E,name:r,message:t,code:n}),w||(this.name=r,this.message=t,this.code=n),C){var o=S(t);o.name=E,s(this,"stack",l(1,m(o.stack,1)))}},N=P.prototype=u(R),M=function(e){return{enumerable:!0,configurable:!0,get:e}},L=function(e){return M((function(){return A(this)[e]}))};w&&c(N,{name:L("name"),message:L("message"),code:L("code")}),s(N,"constructor",l(1,P));var I=i((function(){return!(new k instanceof S)})),j=I||i((function(){return R.toString!==v||"2: 1"!==String(new k(1,2))})),U=I||i((function(){return 25!==new k(1,"DataCloneError").code})),D=I||25!==k.DATA_CLONE_ERR||25!==O.DATA_CLONE_ERR,F=x?j||U||D:I;n({global:!0,forced:F},{DOMException:F?P:k});var z=a(E),B=z.prototype;for(var V in j&&(x||k===z)&&f(B,"toString",v),U&&w&&k===z&&s(B,"code",M((function(){return _(h(this).name)}))),y)if(p(y,V)){var $=y[V],W=$.s,H=l(6,$.c);p(z,W)||s(z,W,H),p(B,W)||s(B,W,H)}},2801:(e,t,r)=>{"use strict";var n=r(2109),o=r(5005),a=r(9114),i=r(3070).f,u=r(2597),l=r(5787),s=r(9587),c=r(6277),f=r(3678),p=r(7741),d=r(1913),h="DOMException",v=o("Error"),g=o(h),y=function(){l(this,m);var e=arguments.length,t=c(e<1?void 0:arguments[0]),r=c(e<2?void 0:arguments[1],"Error"),n=new g(t,r),o=v(t);return o.name=h,i(n,"stack",a(1,p(o.stack,1))),s(n,this,y),n},m=y.prototype=g.prototype,b="stack"in v(h),w="stack"in new g(1,2),x=b&&!w;n({global:!0,forced:d||x},{DOMException:x?y:g});var E=o(h),S=E.prototype;if(S.constructor!==E)for(var k in d||i(S,"constructor",a(1,E)),f)if(u(f,k)){var O=f[k],R=O.s;u(E,R)||i(E,R,a(6,O.c))}},1174:(e,t,r)=>{var n=r(5005),o="DOMException";r(8003)(n(o),o)},4633:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(261);n({global:!0,bind:!0,enumerable:!0,forced:!o.setImmediate||!o.clearImmediate},{setImmediate:a.set,clearImmediate:a.clear})},5844:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(5948),i=r(9662),u=r(8053),l=r(5268),s=o.process;n({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(e){u(arguments.length,1),i(e);var t=l&&s.domain;a(t?t.bind(e):e)}})},1295:(e,t,r)=>{var n,o=r(1913),a=r(2109),i=r(7854),u=r(5005),l=r(1702),s=r(7293),c=r(9711),f=r(614),p=r(4411),d=r(111),h=r(2190),v=r(408),g=r(9670),y=r(648),m=r(2597),b=r(6135),w=r(8880),x=r(6244),E=r(8053),S=r(7066),k=r(2914),O=i.Object,R=i.Date,T=i.Error,A=i.EvalError,C=i.RangeError,_=i.ReferenceError,P=i.SyntaxError,N=i.TypeError,M=i.URIError,L=i.PerformanceMark,I=i.WebAssembly,j=I&&I.CompileError||T,U=I&&I.LinkError||T,D=I&&I.RuntimeError||T,F=u("DOMException"),z=u("Set"),B=u("Map"),V=B.prototype,$=l(V.has),W=l(V.get),H=l(V.set),q=l(z.prototype.add),Q=u("Object","keys"),Y=l([].push),G=l((!0).valueOf),K=l(1..valueOf),X=l("".valueOf),J=l(S),Z=l(R.prototype.getTime),ee=c("structuredClone"),te="DataCloneError",re="Transferring",ne=function(e){return!s((function(){var t=new i.Set([7]),r=e(t),n=e(O(7));return r==t||!r.has(7)||"object"!=typeof n||7!=n}))&&e},oe=i.structuredClone,ae=o||(n=oe,!(!s((function(){var e=n(new i.AggregateError([1],ee,{cause:3}));return"AggregateError"!=e.name||1!=e.errors[0]||e.message!=ee||3!=e.cause}))&&n)),ie=!oe&&ne((function(e){return new L(ee,{detail:e}).detail})),ue=ne(oe)||ie,le=function(e){throw new F("Uncloneable type: "+e,te)},se=function(e,t){throw new F((t||"Cloning")+" of "+e+" cannot be properly polyfilled in this engine",te)},ce=function(e,t){if(h(e)&&le("Symbol"),!d(e))return e;if(t){if($(t,e))return W(t,e)}else t=new B;var r,n,o,a,l,s,c,v,g,E,S=y(e),L=!1;switch(S){case"Array":o=[],L=!0;break;case"Object":o={},L=!0;break;case"Map":o=new B,L=!0;break;case"Set":o=new z,L=!0;break;case"RegExp":o=new RegExp(e.source,"flags"in e?e.flags:J(e));break;case"Error":switch(n=e.name){case"AggregateError":o=u("AggregateError")([]);break;case"EvalError":o=A();break;case"RangeError":o=C();break;case"ReferenceError":o=_();break;case"SyntaxError":o=P();break;case"TypeError":o=N();break;case"URIError":o=M();break;case"CompileError":o=j();break;case"LinkError":o=U();break;case"RuntimeError":o=D();break;default:o=T()}L=!0;break;case"DOMException":o=new F(e.message,e.name),L=!0;break;case"DataView":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":r=i[S],d(r)||se(S),o=new r(ce(e.buffer,t),e.byteOffset,"DataView"===S?e.byteLength:e.length);break;case"DOMQuad":try{o=new DOMQuad(ce(e.p1,t),ce(e.p2,t),ce(e.p3,t),ce(e.p4,t))}catch(t){ue?o=ue(e):se(S)}break;case"FileList":if(r=i.DataTransfer,p(r)){for(a=new r,l=0,s=x(e);l<s;l++)a.items.add(ce(e[l],t));o=a.files}else ue?o=ue(e):se(S);break;case"ImageData":try{o=new ImageData(ce(e.data,t),e.width,e.height,{colorSpace:e.colorSpace})}catch(t){ue?o=ue(e):se(S)}break;default:if(ue)o=ue(e);else switch(S){case"BigInt":o=O(e.valueOf());break;case"Boolean":o=O(G(e));break;case"Number":o=O(K(e));break;case"String":o=O(X(e));break;case"Date":o=new R(Z(e));break;case"ArrayBuffer":(r=i.DataView)||"function"==typeof e.slice||se(S);try{if("function"==typeof e.slice)o=e.slice(0);else for(s=e.byteLength,o=new ArrayBuffer(s),g=new r(e),E=new r(o),l=0;l<s;l++)E.setUint8(l,g.getUint8(l))}catch(e){throw new F("ArrayBuffer is detached",te)}break;case"SharedArrayBuffer":o=e;break;case"Blob":try{o=e.slice(0,e.size,e.type)}catch(e){se(S)}break;case"DOMPoint":case"DOMPointReadOnly":r=i[S];try{o=r.fromPoint?r.fromPoint(e):new r(e.x,e.y,e.z,e.w)}catch(e){se(S)}break;case"DOMRect":case"DOMRectReadOnly":r=i[S];try{o=r.fromRect?r.fromRect(e):new r(e.x,e.y,e.width,e.height)}catch(e){se(S)}break;case"DOMMatrix":case"DOMMatrixReadOnly":r=i[S];try{o=r.fromMatrix?r.fromMatrix(e):new r(e)}catch(e){se(S)}break;case"AudioData":case"VideoFrame":f(e.clone)||se(S);try{o=e.clone()}catch(e){le(S)}break;case"File":try{o=new File([e],e.name,e)}catch(e){se(S)}break;case"CryptoKey":case"GPUCompilationMessage":case"GPUCompilationInfo":case"ImageBitmap":case"RTCCertificate":case"WebAssembly.Module":se(S);default:le(S)}}if(H(t,e,o),L)switch(S){case"Array":case"Object":for(c=Q(e),l=0,s=x(c);l<s;l++)v=c[l],b(o,v,ce(e[v],t));break;case"Map":e.forEach((function(e,r){H(o,ce(r,t),ce(e,t))}));break;case"Set":e.forEach((function(e){q(o,ce(e,t))}));break;case"Error":w(o,"message",ce(e.message,t)),m(e,"cause")&&w(o,"cause",ce(e.cause,t)),"AggregateError"==n&&(o.errors=ce(e.errors,t));case"DOMException":k&&w(o,"stack",ce(e.stack,t))}return o},fe=oe&&!s((function(){var e=new ArrayBuffer(8),t=oe(e,{transfer:[e]});return 0!=e.byteLength||8!=t.byteLength})),pe=function(e,t){if(!d(e))throw N("Transfer option cannot be converted to a sequence");var r=[];v(e,(function(e){Y(r,g(e))}));var n,o,a,u,l,s,c=0,h=x(r);if(fe)for(u=oe(r,{transfer:r});c<h;)H(t,r[c],u[c++]);else for(;c<h;){if(n=r[c++],$(t,n))throw new F("Duplicate transferable",te);switch(o=y(n)){case"ImageBitmap":a=i.OffscreenCanvas,p(a)||se(o,re);try{(s=new a(n.width,n.height)).getContext("bitmaprenderer").transferFromImageBitmap(n),l=s.transferToImageBitmap()}catch(e){}break;case"AudioData":case"VideoFrame":f(n.clone)&&f(n.close)||se(o,re);try{l=n.clone(),n.close()}catch(e){}break;case"ArrayBuffer":case"MessagePort":case"OffscreenCanvas":case"ReadableStream":case"TransformStream":case"WritableStream":se(o,re)}if(void 0===l)throw new F("This object cannot be transferred: "+o,te);H(t,n,l)}};a({global:!0,enumerable:!0,sham:!fe,forced:ae},{structuredClone:function(e){var t,r=E(arguments.length,1)>1?g(arguments[1]):void 0,n=r?r.transfer:void 0;return void 0!==n&&(t=new B,pe(n,t)),ce(e,t)}})},2564:(e,t,r)=>{var n=r(2109),o=r(7854),a=r(2104),i=r(614),u=r(8113),l=r(206),s=r(8053),c=/MSIE .\./.test(u),f=o.Function,p=function(e){return function(t,r){var n=s(arguments.length,1)>2,o=i(t)?t:f(t),u=n?l(arguments,2):void 0;return e(n?function(){a(o,this,u)}:o,r)}};n({global:!0,bind:!0,forced:c},{setTimeout:p(o.setTimeout),setInterval:p(o.setInterval)})},1637:(e,t,r)=>{"use strict";r(6992);var n=r(2109),o=r(7854),a=r(5005),i=r(6916),u=r(1702),l=r(590),s=r(1320),c=r(2248),f=r(8003),p=r(4994),d=r(9909),h=r(5787),v=r(614),g=r(2597),y=r(9974),m=r(648),b=r(9670),w=r(111),x=r(1340),E=r(30),S=r(9114),k=r(8554),O=r(1246),R=r(8053),T=r(5112),A=r(4362),C=T("iterator"),_="URLSearchParams",P="URLSearchParamsIterator",N=d.set,M=d.getterFor(_),L=d.getterFor(P),I=a("fetch"),j=a("Request"),U=a("Headers"),D=j&&j.prototype,F=U&&U.prototype,z=o.RegExp,B=o.TypeError,V=o.decodeURIComponent,$=o.encodeURIComponent,W=u("".charAt),H=u([].join),q=u([].push),Q=u("".replace),Y=u([].shift),G=u([].splice),K=u("".split),X=u("".slice),J=/\+/g,Z=Array(4),ee=function(e){return Z[e-1]||(Z[e-1]=z("((?:%[\\da-f]{2}){"+e+"})","gi"))},te=function(e){try{return V(e)}catch(t){return e}},re=function(e){var t=Q(e,J," "),r=4;try{return V(t)}catch(e){for(;r;)t=Q(t,ee(r--),te);return t}},ne=/[!'()~]|%20/g,oe={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},ae=function(e){return oe[e]},ie=function(e){return Q($(e),ne,ae)},ue=p((function(e,t){N(this,{type:P,iterator:k(M(e).entries),kind:t})}),"Iterator",(function(){var e=L(this),t=e.kind,r=e.iterator.next(),n=r.value;return r.done||(r.value="keys"===t?n.key:"values"===t?n.value:[n.key,n.value]),r}),!0),le=function(e){this.entries=[],this.url=null,void 0!==e&&(w(e)?this.parseObject(e):this.parseQuery("string"==typeof e?"?"===W(e,0)?X(e,1):e:x(e)))};le.prototype={type:_,bindURL:function(e){this.url=e,this.update()},parseObject:function(e){var t,r,n,o,a,u,l,s=O(e);if(s)for(r=(t=k(e,s)).next;!(n=i(r,t)).done;){if(a=(o=k(b(n.value))).next,(u=i(a,o)).done||(l=i(a,o)).done||!i(a,o).done)throw B("Expected sequence with length 2");q(this.entries,{key:x(u.value),value:x(l.value)})}else for(var c in e)g(e,c)&&q(this.entries,{key:c,value:x(e[c])})},parseQuery:function(e){if(e)for(var t,r,n=K(e,"&"),o=0;o<n.length;)(t=n[o++]).length&&(r=K(t,"="),q(this.entries,{key:re(Y(r)),value:re(H(r,"="))}))},serialize:function(){for(var e,t=this.entries,r=[],n=0;n<t.length;)e=t[n++],q(r,ie(e.key)+"="+ie(e.value));return H(r,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var se=function(){h(this,ce);var e=arguments.length>0?arguments[0]:void 0;N(this,new le(e))},ce=se.prototype;if(c(ce,{append:function(e,t){R(arguments.length,2);var r=M(this);q(r.entries,{key:x(e),value:x(t)}),r.updateURL()},delete:function(e){R(arguments.length,1);for(var t=M(this),r=t.entries,n=x(e),o=0;o<r.length;)r[o].key===n?G(r,o,1):o++;t.updateURL()},get:function(e){R(arguments.length,1);for(var t=M(this).entries,r=x(e),n=0;n<t.length;n++)if(t[n].key===r)return t[n].value;return null},getAll:function(e){R(arguments.length,1);for(var t=M(this).entries,r=x(e),n=[],o=0;o<t.length;o++)t[o].key===r&&q(n,t[o].value);return n},has:function(e){R(arguments.length,1);for(var t=M(this).entries,r=x(e),n=0;n<t.length;)if(t[n++].key===r)return!0;return!1},set:function(e,t){R(arguments.length,1);for(var r,n=M(this),o=n.entries,a=!1,i=x(e),u=x(t),l=0;l<o.length;l++)(r=o[l]).key===i&&(a?G(o,l--,1):(a=!0,r.value=u));a||q(o,{key:i,value:u}),n.updateURL()},sort:function(){var e=M(this);A(e.entries,(function(e,t){return e.key>t.key?1:-1})),e.updateURL()},forEach:function(e){for(var t,r=M(this).entries,n=y(e,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((t=r[o++]).value,t.key,this)},keys:function(){return new ue(this,"keys")},values:function(){return new ue(this,"values")},entries:function(){return new ue(this,"entries")}},{enumerable:!0}),s(ce,C,ce.entries,{name:"entries"}),s(ce,"toString",(function(){return M(this).serialize()}),{enumerable:!0}),f(se,_),n({global:!0,forced:!l},{URLSearchParams:se}),!l&&v(U)){var fe=u(F.has),pe=u(F.set),de=function(e){if(w(e)){var t,r=e.body;if(m(r)===_)return t=e.headers?new U(e.headers):new U,fe(t,"content-type")||pe(t,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),E(e,{body:S(0,x(r)),headers:S(0,t)})}return e};if(v(I)&&n({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return I(e,arguments.length>1?de(arguments[1]):{})}}),v(j)){var he=function(e){return h(this,D),new j(e,arguments.length>1?de(arguments[1]):{})};D.constructor=he,he.prototype=D,n({global:!0,forced:!0},{Request:he})}}e.exports={URLSearchParams:se,getState:M}},285:(e,t,r)=>{"use strict";r(8783);var n,o=r(2109),a=r(9781),i=r(590),u=r(7854),l=r(9974),s=r(1702),c=r(6048).f,f=r(1320),p=r(5787),d=r(2597),h=r(1574),v=r(8457),g=r(1589),y=r(8710).codeAt,m=r(3197),b=r(1340),w=r(8003),x=r(8053),E=r(1637),S=r(9909),k=S.set,O=S.getterFor("URL"),R=E.URLSearchParams,T=E.getState,A=u.URL,C=u.TypeError,_=u.parseInt,P=Math.floor,N=Math.pow,M=s("".charAt),L=s(/./.exec),I=s([].join),j=s(1..toString),U=s([].pop),D=s([].push),F=s("".replace),z=s([].shift),B=s("".split),V=s("".slice),$=s("".toLowerCase),W=s([].unshift),H="Invalid scheme",q="Invalid host",Q="Invalid port",Y=/[a-z]/i,G=/[\d+-.a-z]/i,K=/\d/,X=/^0x/i,J=/^[0-7]+$/,Z=/^\d+$/,ee=/^[\da-f]+$/i,te=/[\0\t\n\r #%/:<>?@[\\\]^|]/,re=/[\0\t\n\r #/:<>?@[\\\]^|]/,ne=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,oe=/[\t\n\r]/g,ae=function(e){var t,r,n,o;if("number"==typeof e){for(t=[],r=0;r<4;r++)W(t,e%256),e=P(e/256);return I(t,".")}if("object"==typeof e){for(t="",n=function(e){for(var t=null,r=1,n=null,o=0,a=0;a<8;a++)0!==e[a]?(o>r&&(t=n,r=o),n=null,o=0):(null===n&&(n=a),++o);return o>r&&(t=n,r=o),t}(e),r=0;r<8;r++)o&&0===e[r]||(o&&(o=!1),n===r?(t+=r?":":"::",o=!0):(t+=j(e[r],16),r<7&&(t+=":")));return"["+t+"]"}return e},ie={},ue=h({},ie,{" ":1,'"':1,"<":1,">":1,"`":1}),le=h({},ue,{"#":1,"?":1,"{":1,"}":1}),se=h({},le,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),ce=function(e,t){var r=y(e,0);return r>32&&r<127&&!d(t,e)?e:encodeURIComponent(e)},fe={ftp:21,file:null,http:80,https:443,ws:80,wss:443},pe=function(e,t){var r;return 2==e.length&&L(Y,M(e,0))&&(":"==(r=M(e,1))||!t&&"|"==r)},de=function(e){var t;return e.length>1&&pe(V(e,0,2))&&(2==e.length||"/"===(t=M(e,2))||"\\"===t||"?"===t||"#"===t)},he=function(e){return"."===e||"%2e"===$(e)},ve={},ge={},ye={},me={},be={},we={},xe={},Ee={},Se={},ke={},Oe={},Re={},Te={},Ae={},Ce={},_e={},Pe={},Ne={},Me={},Le={},Ie={},je=function(e,t,r){var n,o,a,i=b(e);if(t){if(o=this.parse(i))throw C(o);this.searchParams=null}else{if(void 0!==r&&(n=new je(r,!0)),o=this.parse(i,null,n))throw C(o);(a=T(new R)).bindURL(this),this.searchParams=a}};je.prototype={type:"URL",parse:function(e,t,r){var o,a,i,u,l,s=this,c=t||ve,f=0,p="",h=!1,y=!1,m=!1;for(e=b(e),t||(s.scheme="",s.username="",s.password="",s.host=null,s.port=null,s.path=[],s.query=null,s.fragment=null,s.cannotBeABaseURL=!1,e=F(e,ne,"")),e=F(e,oe,""),o=v(e);f<=o.length;){switch(a=o[f],c){case ve:if(!a||!L(Y,a)){if(t)return H;c=ye;continue}p+=$(a),c=ge;break;case ge:if(a&&(L(G,a)||"+"==a||"-"==a||"."==a))p+=$(a);else{if(":"!=a){if(t)return H;p="",c=ye,f=0;continue}if(t&&(s.isSpecial()!=d(fe,p)||"file"==p&&(s.includesCredentials()||null!==s.port)||"file"==s.scheme&&!s.host))return;if(s.scheme=p,t)return void(s.isSpecial()&&fe[s.scheme]==s.port&&(s.port=null));p="","file"==s.scheme?c=Ae:s.isSpecial()&&r&&r.scheme==s.scheme?c=me:s.isSpecial()?c=Ee:"/"==o[f+1]?(c=be,f++):(s.cannotBeABaseURL=!0,D(s.path,""),c=Me)}break;case ye:if(!r||r.cannotBeABaseURL&&"#"!=a)return H;if(r.cannotBeABaseURL&&"#"==a){s.scheme=r.scheme,s.path=g(r.path),s.query=r.query,s.fragment="",s.cannotBeABaseURL=!0,c=Ie;break}c="file"==r.scheme?Ae:we;continue;case me:if("/"!=a||"/"!=o[f+1]){c=we;continue}c=Se,f++;break;case be:if("/"==a){c=ke;break}c=Ne;continue;case we:if(s.scheme=r.scheme,a==n)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query;else if("/"==a||"\\"==a&&s.isSpecial())c=xe;else if("?"==a)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query="",c=Le;else{if("#"!=a){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.path.length--,c=Ne;continue}s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query,s.fragment="",c=Ie}break;case xe:if(!s.isSpecial()||"/"!=a&&"\\"!=a){if("/"!=a){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,c=Ne;continue}c=ke}else c=Se;break;case Ee:if(c=Se,"/"!=a||"/"!=M(p,f+1))continue;f++;break;case Se:if("/"!=a&&"\\"!=a){c=ke;continue}break;case ke:if("@"==a){h&&(p="%40"+p),h=!0,i=v(p);for(var w=0;w<i.length;w++){var x=i[w];if(":"!=x||m){var E=ce(x,se);m?s.password+=E:s.username+=E}else m=!0}p=""}else if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()){if(h&&""==p)return"Invalid authority";f-=v(p).length+1,p="",c=Oe}else p+=a;break;case Oe:case Re:if(t&&"file"==s.scheme){c=_e;continue}if(":"!=a||y){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()){if(s.isSpecial()&&""==p)return q;if(t&&""==p&&(s.includesCredentials()||null!==s.port))return;if(u=s.parseHost(p))return u;if(p="",c=Pe,t)return;continue}"["==a?y=!0:"]"==a&&(y=!1),p+=a}else{if(""==p)return q;if(u=s.parseHost(p))return u;if(p="",c=Te,t==Re)return}break;case Te:if(!L(K,a)){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&s.isSpecial()||t){if(""!=p){var S=_(p,10);if(S>65535)return Q;s.port=s.isSpecial()&&S===fe[s.scheme]?null:S,p=""}if(t)return;c=Pe;continue}return Q}p+=a;break;case Ae:if(s.scheme="file","/"==a||"\\"==a)c=Ce;else{if(!r||"file"!=r.scheme){c=Ne;continue}if(a==n)s.host=r.host,s.path=g(r.path),s.query=r.query;else if("?"==a)s.host=r.host,s.path=g(r.path),s.query="",c=Le;else{if("#"!=a){de(I(g(o,f),""))||(s.host=r.host,s.path=g(r.path),s.shortenPath()),c=Ne;continue}s.host=r.host,s.path=g(r.path),s.query=r.query,s.fragment="",c=Ie}}break;case Ce:if("/"==a||"\\"==a){c=_e;break}r&&"file"==r.scheme&&!de(I(g(o,f),""))&&(pe(r.path[0],!0)?D(s.path,r.path[0]):s.host=r.host),c=Ne;continue;case _e:if(a==n||"/"==a||"\\"==a||"?"==a||"#"==a){if(!t&&pe(p))c=Ne;else if(""==p){if(s.host="",t)return;c=Pe}else{if(u=s.parseHost(p))return u;if("localhost"==s.host&&(s.host=""),t)return;p="",c=Pe}continue}p+=a;break;case Pe:if(s.isSpecial()){if(c=Ne,"/"!=a&&"\\"!=a)continue}else if(t||"?"!=a)if(t||"#"!=a){if(a!=n&&(c=Ne,"/"!=a))continue}else s.fragment="",c=Ie;else s.query="",c=Le;break;case Ne:if(a==n||"/"==a||"\\"==a&&s.isSpecial()||!t&&("?"==a||"#"==a)){if(".."===(l=$(l=p))||"%2e."===l||".%2e"===l||"%2e%2e"===l?(s.shortenPath(),"/"==a||"\\"==a&&s.isSpecial()||D(s.path,"")):he(p)?"/"==a||"\\"==a&&s.isSpecial()||D(s.path,""):("file"==s.scheme&&!s.path.length&&pe(p)&&(s.host&&(s.host=""),p=M(p,0)+":"),D(s.path,p)),p="","file"==s.scheme&&(a==n||"?"==a||"#"==a))for(;s.path.length>1&&""===s.path[0];)z(s.path);"?"==a?(s.query="",c=Le):"#"==a&&(s.fragment="",c=Ie)}else p+=ce(a,le);break;case Me:"?"==a?(s.query="",c=Le):"#"==a?(s.fragment="",c=Ie):a!=n&&(s.path[0]+=ce(a,ie));break;case Le:t||"#"!=a?a!=n&&("'"==a&&s.isSpecial()?s.query+="%27":s.query+="#"==a?"%23":ce(a,ie)):(s.fragment="",c=Ie);break;case Ie:a!=n&&(s.fragment+=ce(a,ue))}f++}},parseHost:function(e){var t,r,n;if("["==M(e,0)){if("]"!=M(e,e.length-1))return q;if(t=function(e){var t,r,n,o,a,i,u,l=[0,0,0,0,0,0,0,0],s=0,c=null,f=0,p=function(){return M(e,f)};if(":"==p()){if(":"!=M(e,1))return;f+=2,c=++s}for(;p();){if(8==s)return;if(":"!=p()){for(t=r=0;r<4&&L(ee,p());)t=16*t+_(p(),16),f++,r++;if("."==p()){if(0==r)return;if(f-=r,s>6)return;for(n=0;p();){if(o=null,n>0){if(!("."==p()&&n<4))return;f++}if(!L(K,p()))return;for(;L(K,p());){if(a=_(p(),10),null===o)o=a;else{if(0==o)return;o=10*o+a}if(o>255)return;f++}l[s]=256*l[s]+o,2!=++n&&4!=n||s++}if(4!=n)return;break}if(":"==p()){if(f++,!p())return}else if(p())return;l[s++]=t}else{if(null!==c)return;f++,c=++s}}if(null!==c)for(i=s-c,s=7;0!=s&&i>0;)u=l[s],l[s--]=l[c+i-1],l[c+--i]=u;else if(8!=s)return;return l}(V(e,1,-1)),!t)return q;this.host=t}else if(this.isSpecial()){if(e=m(e),L(te,e))return q;if(t=function(e){var t,r,n,o,a,i,u,l=B(e,".");if(l.length&&""==l[l.length-1]&&l.length--,(t=l.length)>4)return e;for(r=[],n=0;n<t;n++){if(""==(o=l[n]))return e;if(a=10,o.length>1&&"0"==M(o,0)&&(a=L(X,o)?16:8,o=V(o,8==a?1:2)),""===o)i=0;else{if(!L(10==a?Z:8==a?J:ee,o))return e;i=_(o,a)}D(r,i)}for(n=0;n<t;n++)if(i=r[n],n==t-1){if(i>=N(256,5-t))return null}else if(i>255)return null;for(u=U(r),n=0;n<r.length;n++)u+=r[n]*N(256,3-n);return u}(e),null===t)return q;this.host=t}else{if(L(re,e))return q;for(t="",r=v(e),n=0;n<r.length;n++)t+=ce(r[n],ie);this.host=t}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return d(fe,this.scheme)},shortenPath:function(){var e=this.path,t=e.length;!t||"file"==this.scheme&&1==t&&pe(e[0],!0)||e.length--},serialize:function(){var e=this,t=e.scheme,r=e.username,n=e.password,o=e.host,a=e.port,i=e.path,u=e.query,l=e.fragment,s=t+":";return null!==o?(s+="//",e.includesCredentials()&&(s+=r+(n?":"+n:"")+"@"),s+=ae(o),null!==a&&(s+=":"+a)):"file"==t&&(s+="//"),s+=e.cannotBeABaseURL?i[0]:i.length?"/"+I(i,"/"):"",null!==u&&(s+="?"+u),null!==l&&(s+="#"+l),s},setHref:function(e){var t=this.parse(e);if(t)throw C(t);this.searchParams.update()},getOrigin:function(){var e=this.scheme,t=this.port;if("blob"==e)try{return new Ue(e.path[0]).origin}catch(e){return"null"}return"file"!=e&&this.isSpecial()?e+"://"+ae(this.host)+(null!==t?":"+t:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(e){this.parse(b(e)+":",ve)},getUsername:function(){return this.username},setUsername:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var r=0;r<t.length;r++)this.username+=ce(t[r],se)}},getPassword:function(){return this.password},setPassword:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var r=0;r<t.length;r++)this.password+=ce(t[r],se)}},getHost:function(){var e=this.host,t=this.port;return null===e?"":null===t?ae(e):ae(e)+":"+t},setHost:function(e){this.cannotBeABaseURL||this.parse(e,Oe)},getHostname:function(){var e=this.host;return null===e?"":ae(e)},setHostname:function(e){this.cannotBeABaseURL||this.parse(e,Re)},getPort:function(){var e=this.port;return null===e?"":b(e)},setPort:function(e){this.cannotHaveUsernamePasswordPort()||(""==(e=b(e))?this.port=null:this.parse(e,Te))},getPathname:function(){var e=this.path;return this.cannotBeABaseURL?e[0]:e.length?"/"+I(e,"/"):""},setPathname:function(e){this.cannotBeABaseURL||(this.path=[],this.parse(e,Pe))},getSearch:function(){var e=this.query;return e?"?"+e:""},setSearch:function(e){""==(e=b(e))?this.query=null:("?"==M(e,0)&&(e=V(e,1)),this.query="",this.parse(e,Le)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var e=this.fragment;return e?"#"+e:""},setHash:function(e){""!=(e=b(e))?("#"==M(e,0)&&(e=V(e,1)),this.fragment="",this.parse(e,Ie)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Ue=function(e){var t=p(this,De),r=x(arguments.length,1)>1?arguments[1]:void 0,n=k(t,new je(e,!1,r));a||(t.href=n.serialize(),t.origin=n.getOrigin(),t.protocol=n.getProtocol(),t.username=n.getUsername(),t.password=n.getPassword(),t.host=n.getHost(),t.hostname=n.getHostname(),t.port=n.getPort(),t.pathname=n.getPathname(),t.search=n.getSearch(),t.searchParams=n.getSearchParams(),t.hash=n.getHash())},De=Ue.prototype,Fe=function(e,t){return{get:function(){return O(this)[e]()},set:t&&function(e){return O(this)[t](e)},configurable:!0,enumerable:!0}};if(a&&c(De,{href:Fe("serialize","setHref"),origin:Fe("getOrigin"),protocol:Fe("getProtocol","setProtocol"),username:Fe("getUsername","setUsername"),password:Fe("getPassword","setPassword"),host:Fe("getHost","setHost"),hostname:Fe("getHostname","setHostname"),port:Fe("getPort","setPort"),pathname:Fe("getPathname","setPathname"),search:Fe("getSearch","setSearch"),searchParams:Fe("getSearchParams"),hash:Fe("getHash","setHash")}),f(De,"toJSON",(function(){return O(this).serialize()}),{enumerable:!0}),f(De,"toString",(function(){return O(this).serialize()}),{enumerable:!0}),A){var ze=A.createObjectURL,Be=A.revokeObjectURL;ze&&f(Ue,"createObjectURL",l(ze,A)),Be&&f(Ue,"revokeObjectURL",l(Be,A))}w(Ue,"URL"),o({global:!0,forced:!i,sham:!a},{URL:Ue})},3753:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916);n({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return o(URL.prototype.toString,this)}})},8594:(e,t,r)=>{r(2526),r(1817),r(2443),r(2401),r(8722),r(2165),r(9007),r(6066),r(3510),r(1840),r(6982),r(2159),r(6649),r(9341),r(543),r(1703),r(6647),r(9170),r(2120),r(2262),r(2222),r(545),r(6541),r(3290),r(7327),r(9826),r(4553),r(4944),r(6535),r(9554),r(1038),r(6699),r(2772),r(9753),r(6992),r(9600),r(4986),r(1249),r(6572),r(5827),r(6644),r(5069),r(7042),r(5212),r(2707),r(8706),r(561),r(3792),r(9244),r(8264),r(6938),r(9575),r(6716),r(3016),r(3843),r(1801),r(9550),r(8733),r(5735),r(6078),r(3710),r(2130),r(4812),r(4855),r(8309),r(5837),r(8862),r(3706),r(1532),r(9752),r(2376),r(3181),r(3484),r(2388),r(8621),r(403),r(4755),r(5438),r(332),r(658),r(197),r(4914),r(2420),r(160),r(970),r(2703),r(3689),r(9653),r(3299),r(5192),r(3161),r(4048),r(8285),r(4363),r(5994),r(1874),r(9494),r(1354),r(6977),r(5147),r(9601),r(8011),r(9595),r(3321),r(9070),r(5500),r(9720),r(3371),r(8559),r(5003),r(9337),r(6210),r(489),r(6314),r(3304),r(1825),r(8410),r(2200),r(7941),r(4869),r(3952),r(7227),r(514),r(8304),r(1539),r(6833),r(4678),r(1058),r(8674),r(7922),r(4668),r(7727),r(224),r(2419),r(9596),r(2586),r(4819),r(5683),r(9361),r(1037),r(5898),r(7318),r(4361),r(3593),r(9532),r(1299),r(4603),r(8450),r(4916),r(2087),r(8386),r(7601),r(9714),r(189),r(4506),r(9841),r(7852),r(4953),r(2023),r(8783),r(4723),r(6373),r(6528),r(3112),r(8992),r(2481),r(5306),r(8757),r(4765),r(3123),r(6755),r(3650),r(3210),r(8702),r(5674),r(5218),r(4475),r(7929),r(915),r(9253),r(2125),r(8830),r(8734),r(9254),r(7268),r(7397),r(86),r(623),r(4197),r(6495),r(7145),r(5109),r(5125),r(2472),r(9743),r(8255),r(9135),r(8675),r(2990),r(8927),r(3105),r(5035),r(4345),r(7174),r(2846),r(8145),r(4731),r(7209),r(6319),r(8867),r(7789),r(3739),r(5206),r(9368),r(4483),r(2056),r(3462),r(678),r(7462),r(3824),r(5021),r(2974),r(5016),r(8221),r(4129),r(8478),r(5505),r(7479),r(4747),r(3948),r(7714),r(2801),r(1174),r(4633),r(5844),r(1295),r(2564),r(285),r(3753),r(1637),r(857)},8679:(e,t,r)=>{"use strict";var n=r(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return n.isMemo(e)?i:u[e.$$typeof]||o}u[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[n.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(h){var o=d(r);o&&o!==h&&e(t,o,n)}var i=c(r);f&&(i=i.concat(f(r)));for(var u=l(t),v=l(r),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||n&&n[y]||v&&v[y]||u&&u[y])){var m=p(r,y);try{s(t,y,m)}catch(e){}}}}return t}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,u,l=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))r.call(i,c)&&(l[c]=i[c]);if(t){u=t(i);for(var f=0;f<u.length;f++)n.call(i,u[f])&&(l[u[f]]=i[u[f]])}}return l}},4779:(e,t,r)=>{var n=r(5826);e.exports=function e(t,r,o){return n(r)||(o=r||o,r=[]),o=o||{},t instanceof RegExp?function(e,t){var r=e.source.match(/\((?!\?)/g);if(r)for(var n=0;n<r.length;n++)t.push({name:n,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,r):n(t)?function(t,r,n){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],r,n).source);return c(new RegExp("(?:"+o.join("|")+")",f(n)),r)}(t,r,o):function(e,t,r){return p(a(e,r),t,r)}(t,r,o)},e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var r,n=[],a=0,i=0,u="",c=t&&t.delimiter||"/";null!=(r=o.exec(e));){var f=r[0],p=r[1],d=r.index;if(u+=e.slice(i,d),i=d+f.length,p)u+=p[1];else{var h=e[i],v=r[2],g=r[3],y=r[4],m=r[5],b=r[6],w=r[7];u&&(n.push(u),u="");var x=null!=v&&null!=h&&h!==v,E="+"===b||"*"===b,S="?"===b||"*"===b,k=r[2]||c,O=y||m;n.push({name:g||a++,prefix:v||"",delimiter:k,optional:S,repeat:E,partial:x,asterisk:!!w,pattern:O?s(O):w?".*":"[^"+l(k)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&n.push(u),n}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var r=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(r[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",u=t||{},l=(o||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,p=u[c.name];if(null==p){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(n(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!r[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!r[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function p(e,t,r){n(t)||(r=t||r,t=[]);for(var o=(r=r||{}).strict,a=!1!==r.end,i="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)i+=l(s);else{var p=l(s.prefix),d="(?:"+s.pattern+")";t.push(s),s.repeat&&(d+="(?:"+p+d+")*"),i+=d=s.optional?s.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(r.delimiter||"/"),v=i.slice(-h.length)===h;return o||(i=(v?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&v?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(r)),t)}},7834:(e,t,r)=>{"use strict";var n=r(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,a,i){if(i!==n){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return r.PropTypes=r,r}},5697:(e,t,r)=>{e.exports=r(7834)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,r)=>{"use strict";var n=r(7294),o=r(7418),a=r(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));var u=new Set,l={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d=Object.prototype.hasOwnProperty,h={},v={};function g(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var m=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!n&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!d.call(v,e)||!d.call(h,e)&&(p.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(m,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,S=60106,k=60107,O=60108,R=60114,T=60109,A=60110,C=60112,_=60113,P=60120,N=60115,M=60116,L=60121,I=60128,j=60129,U=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;E=F("react.element"),S=F("react.portal"),k=F("react.fragment"),O=F("react.strict_mode"),R=F("react.profiler"),T=F("react.provider"),A=F("react.context"),C=F("react.forward_ref"),_=F("react.suspense"),P=F("react.suspense_list"),N=F("react.memo"),M=F("react.lazy"),L=F("react.block"),F("react.scope"),I=F("react.opaque.id"),j=F("react.debug_trace_mode"),U=F("react.offscreen"),D=F("react.legacy_hidden")}var z,B="function"==typeof Symbol&&Symbol.iterator;function V(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function $(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(e){if(e&&n&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=n.stack.split("\n"),i=o.length-1,u=a.length-1;1<=i&&0<=u&&o[i]!==a[u];)u--;for(;1<=i&&0<=u;i--,u--)if(o[i]!==a[u]){if(1!==i||1!==u)do{if(i--,0>--u||o[i]!==a[u])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=u);break}}}finally{W=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?$(e):""}function q(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case R:return"Profiler";case O:return"StrictMode";case _:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case A:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case N:return Q(e.type);case L:return Q(e._render);case M:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=G(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ee(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=Y(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function re(e,t){te(e,t);var r=Y(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,r):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ne(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function oe(e,t,r){"number"===t&&J(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Y(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:Y(r)}}function se(e,t){var r=Y(t.value),n=Y(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function de(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,ge=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var me={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||me.hasOwnProperty(e)&&me[e]?(""+t).trim():t+"px"}function xe(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=we(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(me).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),me[t]=me[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function ke(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Re=null,Te=null,Ae=null;function Ce(e){if(e=to(e)){if("function"!=typeof Re)throw Error(i(280));var t=e.stateNode;t&&(t=no(t),Re(e.stateNode,e.type,t))}}function _e(e){Te?Ae?Ae.push(e):Ae=[e]:Te=e}function Pe(){if(Te){var e=Te,t=Ae;if(Ae=Te=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Ne(e,t){return e(t)}function Me(e,t,r,n,o){return e(t,r,n,o)}function Le(){}var Ie=Ne,je=!1,Ue=!1;function De(){null===Te&&null===Ae||(Le(),Pe())}function Fe(e,t){var r=e.stateNode;if(null===r)return null;var n=no(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(i(231,t,typeof r));return r}var ze=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){ze=!1}function Ve(e,t,r,n,o,a,i,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(r,s)}catch(e){this.onError(e)}}var $e=!1,We=null,He=!1,qe=null,Qe={onError:function(e){$e=!0,We=e}};function Ye(e,t,r,n,o,a,i,u,l){$e=!1,We=null,Ve.apply(Qe,arguments)}function Ge(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ge(e)!==e)throw Error(i(188))}function Je(e,t){for(var r=e.alternate;null!==t;){if(t===e||t===r)return!0;t=t.return}return!1}var Ze,et,tt,rt,nt=!1,ot=[],at=null,it=null,ut=null,lt=new Map,st=new Map,ct=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|r,nativeEvent:o,targetContainers:[n]}}function dt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function ht(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,r,n,o,a),null!==t&&null!==(t=to(t))&&et(t),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=eo(e.target);if(null!==t){var r=Ge(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Ke(r)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){tt(r)}))}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=to(r))&&et(t),e.blockedOn=r,!1;t.shift()}return!0}function yt(e,t,r){gt(e)&&r.delete(t)}function mt(){for(nt=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=to(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var r=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r){e.blockedOn=r;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&gt(at)&&(at=null),null!==it&&gt(it)&&(it=null),null!==ut&&gt(ut)&&(ut=null),lt.forEach(yt),st.forEach(yt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,nt||(nt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,mt)))}function wt(e){function t(t){return bt(t,e)}if(0<ot.length){bt(ot[0],e);for(var r=1;r<ot.length;r++){var n=ot[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==at&&bt(at,e),null!==it&&bt(it,e),null!==ut&&bt(ut,e),lt.forEach(t),st.forEach(t),r=0;r<ct.length;r++)(n=ct[r]).blockedOn===e&&(n.blockedOn=null);for(;0<ct.length&&null===(r=ct[0]).blockedOn;)vt(r),null===r.blockedOn&&ct.shift()}function xt(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var Et={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},St={},kt={};function Ot(e){if(St[e])return St[e];if(!Et[e])return e;var t,r=Et[e];for(t in r)if(r.hasOwnProperty(t)&&t in kt)return St[e]=r[t];return e}f&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Rt=Ot("animationend"),Tt=Ot("animationiteration"),At=Ot("animationstart"),Ct=Ot("transitionend"),_t=new Map,Pt=new Map,Nt=["abort","abort",Rt,"animationEnd",Tt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ct,"transitionEnd","waiting","waiting"];function Mt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(n,t),_t.set(n,o),s(o,[n])}}(0,a.unstable_now)();var Lt=8;function It(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function jt(e,t){var r=e.pendingLanes;if(0===r)return Lt=0;var n=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,u=e.pingedLanes;if(0!==a)n=a,o=Lt=15;else if(0!=(a=134217727&r)){var l=a&~i;0!==l?(n=It(l),o=Lt):0!=(u&=a)&&(n=It(u),o=Lt)}else 0!=(a=r&~i)?(n=It(a),o=Lt):0!==u&&(n=It(u),o=Lt);if(0===n)return 0;if(n=r&((0>(n=31-Vt(n))?0:1<<n)<<1)-1,0!==t&&t!==n&&0==(t&i)){if(It(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-Vt(t)),n|=e[r],t&=~o;return n}function Ut(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Dt(10,t):e;case 10:return 0===(e=Ft(192&~t))?Dt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function zt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Bt(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,(e=e.eventTimes)[t=31-Vt(t)]=r}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Wt|0)|0},$t=Math.log,Wt=Math.LN2,Ht=a.unstable_UserBlockingPriority,qt=a.unstable_runWithPriority,Qt=!0;function Yt(e,t,r,n){je||Le();var o=Kt,a=je;je=!0;try{Me(o,e,t,r,n)}finally{(je=a)||De()}}function Gt(e,t,r,n){qt(Ht,Kt.bind(null,e,t,r,n))}function Kt(e,t,r,n){var o;if(Qt)if((o=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=pt(null,e,t,r,n),ot.push(e);else{var a=Xt(e,t,r,n);if(null===a)o&&dt(e,n);else{if(o){if(-1<ft.indexOf(e))return e=pt(a,e,t,r,n),void ot.push(e);if(function(e,t,r,n,o){switch(t){case"focusin":return at=ht(at,e,t,r,n,o),!0;case"dragenter":return it=ht(it,e,t,r,n,o),!0;case"mouseover":return ut=ht(ut,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return lt.set(a,ht(lt.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,st.set(a,ht(st.get(a)||null,e,t,r,n,o)),!0}return!1}(a,e,t,r,n))return;dt(e,n)}Mn(e,t,n,null,r)}}}function Xt(e,t,r,n){var o=Oe(n);if(null!==(o=eo(o))){var a=Ge(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ke(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Mn(e,t,n,o,r),null}var Jt=null,Zt=null,er=null;function tr(){if(er)return er;var e,t,r=Zt,n=r.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return er=o.slice(e,1<t?1-t:void 0)}function rr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nr(){return!0}function or(){return!1}function ar(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nr:or,this.isPropagationStopped=or,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nr)},persist:function(){},isPersistent:nr}),t}var ir,ur,lr,sr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cr=ar(sr),fr=o({},sr,{view:0,detail:0}),pr=ar(fr),dr=o({},fr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Or,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lr&&(lr&&"mousemove"===e.type?(ir=e.screenX-lr.screenX,ur=e.screenY-lr.screenY):ur=ir=0,lr=e),ir)},movementY:function(e){return"movementY"in e?e.movementY:ur}}),hr=ar(dr),vr=ar(o({},dr,{dataTransfer:0})),gr=ar(o({},fr,{relatedTarget:0})),yr=ar(o({},sr,{animationName:0,elapsedTime:0,pseudoElement:0})),mr=o({},sr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),br=ar(mr),wr=ar(o({},sr,{data:0})),xr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Er={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Or(){return kr}var Rr=o({},fr,{key:function(e){if(e.key){var t=xr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Er[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Or,charCode:function(e){return"keypress"===e.type?rr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tr=ar(Rr),Ar=ar(o({},dr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cr=ar(o({},fr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Or})),_r=ar(o({},sr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pr=o({},dr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nr=ar(Pr),Mr=[9,13,27,32],Lr=f&&"CompositionEvent"in window,Ir=null;f&&"documentMode"in document&&(Ir=document.documentMode);var jr=f&&"TextEvent"in window&&!Ir,Ur=f&&(!Lr||Ir&&8<Ir&&11>=Ir),Dr=String.fromCharCode(32),Fr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Mr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Br(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vr=!1,$r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$r[e.type]:"textarea"===t}function Hr(e,t,r,n){_e(n),0<(t=In(t,"onChange")).length&&(r=new cr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var qr=null,Qr=null;function Yr(e){Tn(e,0)}function Gr(e){if(X(ro(e)))return e}function Kr(e,t){if("change"===e)return t}var Xr=!1;if(f){var Jr;if(f){var Zr="oninput"in document;if(!Zr){var en=document.createElement("div");en.setAttribute("oninput","return;"),Zr="function"==typeof en.oninput}Jr=Zr}else Jr=!1;Xr=Jr&&(!document.documentMode||9<document.documentMode)}function tn(){qr&&(qr.detachEvent("onpropertychange",rn),Qr=qr=null)}function rn(e){if("value"===e.propertyName&&Gr(Qr)){var t=[];if(Hr(t,Qr,e,Oe(e)),e=Yr,je)e(t);else{je=!0;try{Ne(e,t)}finally{je=!1,De()}}}}function nn(e,t,r){"focusin"===e?(tn(),Qr=r,(qr=t).attachEvent("onpropertychange",rn)):"focusout"===e&&tn()}function on(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gr(Qr)}function an(e,t){if("click"===e)return Gr(t)}function un(e,t){if("input"===e||"change"===e)return Gr(t)}var ln="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sn=Object.prototype.hasOwnProperty;function cn(e,t){if(ln(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!sn.call(t,r[n])||!ln(e[r[n]],t[r[n]]))return!1;return!0}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pn(e,t){var r,n=fn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=fn(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hn(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=J((e=t.contentWindow).document)}return t}function vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=f&&"documentMode"in document&&11>=document.documentMode,yn=null,mn=null,bn=null,wn=!1;function xn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;wn||null==yn||yn!==J(n)||(n="selectionStart"in(n=yn)&&vn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},bn&&cn(bn,n)||(bn=n,0<(n=In(mn,"onSelect")).length&&(t=new cr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=yn)))}Mt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Mt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Mt(Nt,2);for(var En="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sn=0;Sn<En.length;Sn++)Pt.set(En[Sn],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),On=new Set("cancel close invalid load scroll toggle".split(" ").concat(kn));function Rn(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,a,u,l,s){if(Ye.apply(this,arguments),$e){if(!$e)throw Error(i(198));var c=We;$e=!1,We=null,He||(He=!0,qe=c)}}(n,t,void 0,e),e.currentTarget=null}function Tn(e,t){t=0!=(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var u=n[i],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==a&&o.isPropagationStopped())break e;Rn(o,u,s),a=l}else for(i=0;i<n.length;i++){if(l=(u=n[i]).instance,s=u.currentTarget,u=u.listener,l!==a&&o.isPropagationStopped())break e;Rn(o,u,s),a=l}}}if(He)throw e=qe,He=!1,qe=null,e}function An(e,t){var r=oo(t),n=e+"__bubble";r.has(n)||(Nn(t,e,2,!1),r.add(n))}var Cn="_reactListening"+Math.random().toString(36).slice(2);function _n(e){e[Cn]||(e[Cn]=!0,u.forEach((function(t){On.has(t)||Pn(t,!1,e,null),Pn(t,!0,e,null)})))}function Pn(e,t,r,n){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=r;if("selectionchange"===e&&9!==r.nodeType&&(a=r.ownerDocument),null!==n&&!t&&On.has(e)){if("scroll"!==e)return;o|=2,a=n}var i=oo(a),u=e+"__"+(t?"capture":"bubble");i.has(u)||(t&&(o|=4),Nn(a,e,o,t),i.add(u))}function Nn(e,t,r,n){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Gt;break;default:o=Kt}r=o.bind(null,t,r,e),o=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Mn(e,t,r,n,o){var a=n;if(0==(1&t)&&0==(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var u=n.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=eo(u)))return;if(5===(l=i.tag)||6===l){n=a=i;continue e}u=u.parentNode}}n=n.return}!function(e,t,r){if(Ue)return e();Ue=!0;try{Ie(e,t,r)}finally{Ue=!1,De()}}((function(){var n=a,o=Oe(r),i=[];e:{var u=_t.get(e);if(void 0!==u){var l=cr,s=e;switch(e){case"keypress":if(0===rr(r))break e;case"keydown":case"keyup":l=Tr;break;case"focusin":s="focus",l=gr;break;case"focusout":s="blur",l=gr;break;case"beforeblur":case"afterblur":l=gr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Cr;break;case Rt:case Tt:case At:l=yr;break;case Ct:l=_r;break;case"scroll":l=pr;break;case"wheel":l=Nr;break;case"copy":case"cut":case"paste":l=br;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Ar}var c=0!=(4&t),f=!c&&"scroll"===e,p=c?null!==u?u+"Capture":null:u;c=[];for(var d,h=n;null!==h;){var v=(d=h).stateNode;if(5===d.tag&&null!==v&&(d=v,null!==p&&null!=(v=Fe(h,p))&&c.push(Ln(h,v,d))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,r,o),i.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=r.relatedTarget||r.fromElement)||!eo(s)&&!s[Jn])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=n,null!==(s=(s=r.relatedTarget||r.toElement)?eo(s):null)&&(s!==(f=Ge(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=n),l!==s)){if(c=hr,v="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Ar,v="onPointerLeave",p="onPointerEnter",h="pointer"),f=null==l?u:ro(l),d=null==s?u:ro(s),(u=new c(v,h+"leave",l,r,o)).target=f,u.relatedTarget=d,v=null,eo(o)===n&&((c=new c(p,h+"enter",s,r,o)).target=d,c.relatedTarget=f,v=c),f=v,l&&s)e:{for(p=s,h=0,d=c=l;d;d=jn(d))h++;for(d=0,v=p;v;v=jn(v))d++;for(;0<h-d;)c=jn(c),h--;for(;0<d-h;)p=jn(p),d--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=jn(c),p=jn(p)}c=null}else c=null;null!==l&&Un(i,u,l,c,!1),null!==s&&null!==f&&Un(i,f,s,c,!0)}if("select"===(l=(u=n?ro(n):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var g=Kr;else if(Wr(u))if(Xr)g=un;else{g=on;var y=nn}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(g=an);switch(g&&(g=g(e,n))?Hr(i,g,r,o):(y&&y(e,u,n),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&oe(u,"number",u.value)),y=n?ro(n):window,e){case"focusin":(Wr(y)||"true"===y.contentEditable)&&(yn=y,mn=n,bn=null);break;case"focusout":bn=mn=yn=null;break;case"mousedown":wn=!0;break;case"contextmenu":case"mouseup":case"dragend":wn=!1,xn(i,r,o);break;case"selectionchange":if(gn)break;case"keydown":case"keyup":xn(i,r,o)}var m;if(Lr)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vr?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Ur&&"ko"!==r.locale&&(Vr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vr&&(m=tr()):(Zt="value"in(Jt=o)?Jt.value:Jt.textContent,Vr=!0)),0<(y=In(n,b)).length&&(b=new wr(b,e,null,r,o),i.push({event:b,listeners:y}),(m||null!==(m=Br(r)))&&(b.data=m))),(m=jr?function(e,t){switch(e){case"compositionend":return Br(t);case"keypress":return 32!==t.which?null:(Fr=!0,Dr);case"textInput":return(e=t.data)===Dr&&Fr?null:e;default:return null}}(e,r):function(e,t){if(Vr)return"compositionend"===e||!Lr&&zr(e,t)?(e=tr(),er=Zt=Jt=null,Vr=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ur&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=In(n,"onBeforeInput")).length&&(o=new wr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=m)}Tn(i,t)}))}function Ln(e,t,r){return{instance:e,listener:t,currentTarget:r}}function In(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,r))&&n.unshift(Ln(e,a,o)),null!=(a=Fe(e,t))&&n.push(Ln(e,a,o))),e=e.return}return n}function jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Un(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var u=r,l=u.alternate,s=u.stateNode;if(null!==l&&l===n)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=Fe(r,a))&&i.unshift(Ln(r,l,u)):o||null!=(l=Fe(r,a))&&i.push(Ln(r,l,u))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}function Dn(){}var Fn=null,zn=null;function Bn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $n="function"==typeof setTimeout?setTimeout:void 0,Wn="function"==typeof clearTimeout?clearTimeout:void 0;function Hn(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Yn=0,Gn=Math.random().toString(36).slice(2),Kn="__reactFiber$"+Gn,Xn="__reactProps$"+Gn,Jn="__reactContainer$"+Gn,Zn="__reactEvents$"+Gn;function eo(e){var t=e[Kn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Jn]||r[Kn]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=Qn(e);null!==e;){if(r=e[Kn])return r;e=Qn(e)}return t}r=(e=r).parentNode}return null}function to(e){return!(e=e[Kn]||e[Jn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function no(e){return e[Xn]||null}function oo(e){var t=e[Zn];return void 0===t&&(t=e[Zn]=new Set),t}var ao=[],io=-1;function uo(e){return{current:e}}function lo(e){0>io||(e.current=ao[io],ao[io]=null,io--)}function so(e,t){io++,ao[io]=e.current,e.current=t}var co={},fo=uo(co),po=uo(!1),ho=co;function vo(e,t){var r=e.type.contextTypes;if(!r)return co;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!=e.childContextTypes}function yo(){lo(po),lo(fo)}function mo(e,t,r){if(fo.current!==co)throw Error(i(168));so(fo,t),so(po,r)}function bo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},r,n)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,ho=fo.current,so(fo,e),so(po,po.current),!0}function xo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=bo(e,t,ho),n.__reactInternalMemoizedMergedChildContext=e,lo(po),lo(fo),so(fo,e)):lo(po),so(po,r)}var Eo=null,So=null,ko=a.unstable_runWithPriority,Oo=a.unstable_scheduleCallback,Ro=a.unstable_cancelCallback,To=a.unstable_shouldYield,Ao=a.unstable_requestPaint,Co=a.unstable_now,_o=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Mo=a.unstable_NormalPriority,Lo=a.unstable_LowPriority,Io=a.unstable_IdlePriority,jo={},Uo=void 0!==Ao?Ao:function(){},Do=null,Fo=null,zo=!1,Bo=Co(),Vo=1e4>Bo?Co:function(){return Co()-Bo};function $o(){switch(_o()){case Po:return 99;case No:return 98;case Mo:return 97;case Lo:return 96;case Io:return 95;default:throw Error(i(332))}}function Wo(e){switch(e){case 99:return Po;case 98:return No;case 97:return Mo;case 96:return Lo;case 95:return Io;default:throw Error(i(332))}}function Ho(e,t){return e=Wo(e),ko(e,t)}function qo(e,t,r){return e=Wo(e),Oo(e,t,r)}function Qo(){if(null!==Fo){var e=Fo;Fo=null,Ro(e)}Yo()}function Yo(){if(!zo&&null!==Do){zo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Oo(Po,Qo),t}finally{zo=!1}}}var Go=x.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var Xo=uo(null),Jo=null,Zo=null,ea=null;function ta(){ea=Zo=Jo=null}function ra(e){var t=Xo.current;lo(Xo),e.type._context._currentValue=t}function na(e,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)===t){if(null===r||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,null!==r&&(r.childLanes|=t);e=e.return}}function oa(e,t){Jo=e,ea=Zo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function aa(e,t){if(ea!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ea=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zo){if(null===Jo)throw Error(i(308));Zo=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else Zo=Zo.next=t;return e._currentValue}var ia=!1;function ua(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function sa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function fa(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function pa(e,t,r,n){var a=e.updateQueue;ia=!1;var i=a.firstBaseUpdate,u=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var s=l,c=s.next;s.next=null,null===u?i=c:u.next=c,u=s;var f=e.alternate;if(null!==f){var p=(f=f.updateQueue).lastBaseUpdate;p!==u&&(null===p?f.firstBaseUpdate=c:p.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(p=a.baseState,u=0,f=c=s=null;;){l=i.lane;var d=i.eventTime;if((n&l)===l){null!==f&&(f=f.next={eventTime:d,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,v=i;switch(l=t,d=r,v.tag){case 1:if("function"==typeof(h=v.payload)){p=h.call(d,p,l);break e}p=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(d,p,l):h))break e;p=o({},p,l);break e;case 2:ia=!0}}null!==i.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[i]:l.push(i))}else d={eventTime:d,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=d,s=p):f=f.next=d,u|=l;if(null===(i=i.next)){if(null===(l=a.shared.pending))break;i=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===f&&(s=p),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Uu|=u,e.lanes=u,e.memoizedState=p}}function da(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!=typeof o)throw Error(i(191,o));o.call(n)}}}var ha=(new n.Component).refs;function va(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:o({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=ll(),o=sl(e),a=sa(n,o);a.payload=t,null!=r&&(a.callback=r),ca(e,a),cl(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=ll(),o=sl(e),a=sa(n,o);a.tag=1,a.payload=t,null!=r&&(a.callback=r),ca(e,a),cl(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=ll(),n=sl(e),o=sa(r,n);o.tag=2,null!=t&&(o.callback=t),ca(e,o),cl(e,n,r)}};function ya(e,t,r,n,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&cn(r,n)&&cn(o,a))}function ma(e,t,r){var n=!1,o=co,a=t.contextType;return"object"==typeof a&&null!==a?a=aa(a):(o=go(t)?ho:fo.current,a=(n=null!=(n=t.contextTypes))?vo(e,o):co),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ba(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function wa(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=ha,ua(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=aa(a):(a=go(t)?ho:fo.current,o.context=vo(e,a)),pa(e,r,o,n),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(va(e,t,a,r),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),pa(e,r,o,n),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var xa=Array.isArray;function Ea(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=n.refs;t===ha&&(t=n.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Sa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ka(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.flags=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags=2,r):n:(t.flags=2,r):r}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,r,n){return null===t||6!==t.tag?((t=Wl(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function s(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=Ea(e,t,r),n.return=e,n):((n=Bl(r.type,r.key,r.props,null,e.mode,n)).ref=Ea(e,t,r),n.return=e,n)}function c(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Hl(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Vl(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function p(e,t,r){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Bl(t.type,t.key,t.props,null,e.mode,r)).ref=Ea(e,null,t),r.return=e,r;case S:return(t=Hl(t,e.mode,r)).return=e,t}if(xa(t)||V(t))return(t=Vl(t,e.mode,r,null)).return=e,t;Sa(e,t)}return null}function d(e,t,r,n){var o=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==o?null:l(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?r.type===k?f(e,t,r.props.children,n,o):s(e,t,r,n):null;case S:return r.key===o?c(e,t,r,n):null}if(xa(r)||V(r))return null!==o?null:f(e,t,r,n,null);Sa(e,r)}return null}function h(e,t,r,n,o){if("string"==typeof n||"number"==typeof n)return l(t,e=e.get(r)||null,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return e=e.get(null===n.key?r:n.key)||null,n.type===k?f(t,e,n.props.children,o,n.key):s(t,e,n,o);case S:return c(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(xa(n)||V(n))return f(t,e=e.get(r)||null,n,o,null);Sa(t,n)}return null}function v(o,i,u,l){for(var s=null,c=null,f=i,v=i=0,g=null;null!==f&&v<u.length;v++){f.index>v?(g=f,f=null):g=f.sibling;var y=d(o,f,u[v],l);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,v),null===c?s=y:c.sibling=y,c=y,f=g}if(v===u.length)return r(o,f),s;if(null===f){for(;v<u.length;v++)null!==(f=p(o,u[v],l))&&(i=a(f,i,v),null===c?s=f:c.sibling=f,c=f);return s}for(f=n(o,f);v<u.length;v++)null!==(g=h(f,o,v,u[v],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?v:g.key),i=a(g,i,v),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),s}function g(o,u,l,s){var c=V(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,v=u,g=u=0,y=null,m=l.next();null!==v&&!m.done;g++,m=l.next()){v.index>g?(y=v,v=null):y=v.sibling;var b=d(o,v,m.value,s);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(o,v),u=a(b,u,g),null===f?c=b:f.sibling=b,f=b,v=y}if(m.done)return r(o,v),c;if(null===v){for(;!m.done;g++,m=l.next())null!==(m=p(o,m.value,s))&&(u=a(m,u,g),null===f?c=m:f.sibling=m,f=m);return c}for(v=n(o,v);!m.done;g++,m=l.next())null!==(m=h(v,o,g,m.value,s))&&(e&&null!==m.alternate&&v.delete(null===m.key?g:m.key),u=a(m,u,g),null===f?c=m:f.sibling=m,f=m);return e&&v.forEach((function(e){return t(o,e)})),c}return function(e,n,a,l){var s="object"==typeof a&&null!==a&&a.type===k&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case E:e:{for(c=a.key,s=n;null!==s;){if(s.key===c){if(7===s.tag){if(a.type===k){r(e,s.sibling),(n=o(s,a.props.children)).return=e,e=n;break e}}else if(s.elementType===a.type){r(e,s.sibling),(n=o(s,a.props)).ref=Ea(e,s,a),n.return=e,e=n;break e}r(e,s);break}t(e,s),s=s.sibling}a.type===k?((n=Vl(a.props.children,e.mode,l,a.key)).return=e,e=n):((l=Bl(a.type,a.key,a.props,null,e.mode,l)).ref=Ea(e,n,a),l.return=e,e=l)}return u(e);case S:e:{for(s=a.key;null!==n;){if(n.key===s){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Hl(a,e.mode,l)).return=e,e=n}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Wl(a,e.mode,l)).return=e,e=n),u(e);if(xa(a))return v(e,n,a,l);if(V(a))return g(e,n,a,l);if(c&&Sa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return r(e,n)}}var Oa=ka(!0),Ra=ka(!1),Ta={},Aa=uo(Ta),Ca=uo(Ta),_a=uo(Ta);function Pa(e){if(e===Ta)throw Error(i(174));return e}function Na(e,t){switch(so(_a,t),so(Ca,e),so(Aa,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:de(null,"");break;default:t=de(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Aa),so(Aa,t)}function Ma(){lo(Aa),lo(Ca),lo(_a)}function La(e){Pa(_a.current);var t=Pa(Aa.current),r=de(t,e.type);t!==r&&(so(Ca,e),so(Aa,r))}function Ia(e){Ca.current===e&&(lo(Aa),lo(Ca))}var ja=uo(0);function Ua(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,Fa=null,za=!1;function Ba(e,t){var r=Dl(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Va(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function $a(e){if(za){var t=Fa;if(t){var r=t;if(!Va(e,t)){if(!(t=qn(r.nextSibling))||!Va(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Da=e);Ba(Da,r)}Da=e,Fa=qn(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Da=e}}function Wa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!za)return Wa(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vn(t,e.memoizedProps))for(t=Fa;t;)Ba(e,t),t=qn(t.nextSibling);if(Wa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){Fa=qn(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}Fa=null}}else Fa=Da?qn(e.stateNode.nextSibling):null;return!0}function qa(){Fa=Da=null,za=!1}var Qa=[];function Ya(){for(var e=0;e<Qa.length;e++)Qa[e]._workInProgressVersionPrimary=null;Qa.length=0}var Ga=x.ReactCurrentDispatcher,Ka=x.ReactCurrentBatchConfig,Xa=0,Ja=null,Za=null,ei=null,ti=!1,ri=!1;function ni(){throw Error(i(321))}function oi(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function ai(e,t,r,n,o,a){if(Xa=a,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ga.current=null===e||null===e.memoizedState?Pi:Ni,e=r(n,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ei=Za=null,t.updateQueue=null,Ga.current=Mi,e=r(n,o)}while(ri)}if(Ga.current=_i,t=null!==Za&&null!==Za.next,Xa=0,ei=Za=Ja=null,ti=!1,t)throw Error(i(300));return e}function ii(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ei?Ja.memoizedState=ei=e:ei=ei.next=e,ei}function ui(){if(null===Za){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=Za.next;var t=null===ei?Ja.memoizedState:ei.next;if(null!==t)ei=t,Za=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Za=e).memoizedState,baseState:Za.baseState,baseQueue:Za.baseQueue,queue:Za.queue,next:null},null===ei?Ja.memoizedState=ei=e:ei=ei.next=e}return ei}function li(e,t){return"function"==typeof t?t(e):t}function si(e){var t=ui(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=Za,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var l=u=a=null,s=o;do{var c=s.lane;if((Xa&c)===c)null!==l&&(l=l.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),n=s.eagerReducer===e?s.eagerState:e(n,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===l?(u=l=f,a=n):l=l.next=f,Ja.lanes|=c,Uu|=c}s=s.next}while(null!==s&&s!==o);null===l?a=n:l.next=u,ln(n,t.memoizedState)||(Ii=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=l,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ci(e){var t=ui(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ln(a,t.memoizedState)||(Ii=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function fi(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===n:(e=e.mutableReadLanes,(e=(Xa&e)===e)&&(t._workInProgressVersionPrimary=n,Qa.push(t))),e)return r(t._source);throw Qa.push(t),Error(i(350))}function pi(e,t,r,n){var o=Cu;if(null===o)throw Error(i(349));var a=t._getVersion,u=a(t._source),l=Ga.current,s=l.useState((function(){return fi(o,t,r)})),c=s[1],f=s[0];s=ei;var p=e.memoizedState,d=p.refs,h=d.getSnapshot,v=p.source;p=p.subscribe;var g=Ja;return e.memoizedState={refs:d,source:t,subscribe:n},l.useEffect((function(){d.getSnapshot=r,d.setSnapshot=c;var e=a(t._source);if(!ln(u,e)){e=r(t._source),ln(f,e)||(c(e),e=sl(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var n=o.entanglements,i=e;0<i;){var l=31-Vt(i),s=1<<l;n[l]|=e,i&=~s}}}),[r,t,n]),l.useEffect((function(){return n(t._source,(function(){var e=d.getSnapshot,r=d.setSnapshot;try{r(e(t._source));var n=sl(g);o.mutableReadLanes|=n&o.pendingLanes}catch(e){r((function(){throw e}))}}))}),[t,n]),ln(h,r)&&ln(v,t)&&ln(p,n)||((e={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:f}).dispatch=c=Ci.bind(null,Ja,e),s.queue=e,s.baseQueue=null,f=fi(o,t,r),s.memoizedState=s.baseState=f),f}function di(e,t,r){return pi(ui(),e,t,r)}function hi(e){var t=ii();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:e}).dispatch=Ci.bind(null,Ja,e),[t.memoizedState,e]}function vi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=Ja.updateQueue)?(t={lastEffect:null},Ja.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function gi(e){return e={current:e},ii().memoizedState=e}function yi(){return ui().memoizedState}function mi(e,t,r,n){var o=ii();Ja.flags|=e,o.memoizedState=vi(1|t,r,void 0,void 0===n?null:n)}function bi(e,t,r,n){var o=ui();n=void 0===n?null:n;var a=void 0;if(null!==Za){var i=Za.memoizedState;if(a=i.destroy,null!==n&&oi(n,i.deps))return void vi(t,r,a,n)}Ja.flags|=e,o.memoizedState=vi(1|t,r,a,n)}function wi(e,t){return mi(516,4,e,t)}function xi(e,t){return bi(516,4,e,t)}function Ei(e,t){return bi(4,2,e,t)}function Si(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ki(e,t,r){return r=null!=r?r.concat([e]):null,bi(4,2,Si.bind(null,t,e),r)}function Oi(){}function Ri(e,t){var r=ui();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&oi(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ti(e,t){var r=ui();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&oi(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ai(e,t){var r=$o();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ka.transition;Ka.transition=1;try{e(!1),t()}finally{Ka.transition=r}}))}function Ci(e,t,r){var n=ll(),o=sl(e),a={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ja||null!==i&&i===Ja)ri=ti=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=i(u,r);if(a.eagerReducer=i,a.eagerState=l,ln(l,u))return}catch(e){}cl(e,o,n)}}var _i={readContext:aa,useCallback:ni,useContext:ni,useEffect:ni,useImperativeHandle:ni,useLayoutEffect:ni,useMemo:ni,useReducer:ni,useRef:ni,useState:ni,useDebugValue:ni,useDeferredValue:ni,useTransition:ni,useMutableSource:ni,useOpaqueIdentifier:ni,unstable_isNewReconciler:!1},Pi={readContext:aa,useCallback:function(e,t){return ii().memoizedState=[e,void 0===t?null:t],e},useContext:aa,useEffect:wi,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,mi(4,2,Si.bind(null,t,e),r)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var r=ii();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=ii();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ci.bind(null,Ja,e),[n.memoizedState,e]},useRef:gi,useState:hi,useDebugValue:Oi,useDeferredValue:function(e){var t=hi(e),r=t[0],n=t[1];return wi((function(){var t=Ka.transition;Ka.transition=1;try{n(e)}finally{Ka.transition=t}}),[e]),r},useTransition:function(){var e=hi(!1),t=e[0];return gi(e=Ai.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,r){var n=ii();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},pi(n,e,t,r)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,r("r:"+(Yn++).toString(36))),Error(i(355))})),r=hi(t)[1];return 0==(2&Ja.mode)&&(Ja.flags|=516,vi(5,(function(){r("r:"+(Yn++).toString(36))}),void 0,null)),t}return hi(t="r:"+(Yn++).toString(36)),t},unstable_isNewReconciler:!1},Ni={readContext:aa,useCallback:Ri,useContext:aa,useEffect:xi,useImperativeHandle:ki,useLayoutEffect:Ei,useMemo:Ti,useReducer:si,useRef:yi,useState:function(){return si(li)},useDebugValue:Oi,useDeferredValue:function(e){var t=si(li),r=t[0],n=t[1];return xi((function(){var t=Ka.transition;Ka.transition=1;try{n(e)}finally{Ka.transition=t}}),[e]),r},useTransition:function(){var e=si(li)[0];return[yi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return si(li)[0]},unstable_isNewReconciler:!1},Mi={readContext:aa,useCallback:Ri,useContext:aa,useEffect:xi,useImperativeHandle:ki,useLayoutEffect:Ei,useMemo:Ti,useReducer:ci,useRef:yi,useState:function(){return ci(li)},useDebugValue:Oi,useDeferredValue:function(e){var t=ci(li),r=t[0],n=t[1];return xi((function(){var t=Ka.transition;Ka.transition=1;try{n(e)}finally{Ka.transition=t}}),[e]),r},useTransition:function(){var e=ci(li)[0];return[yi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ci(li)[0]},unstable_isNewReconciler:!1},Li=x.ReactCurrentOwner,Ii=!1;function ji(e,t,r,n){t.child=null===e?Ra(t,null,r,n):Oa(t,e.child,r,n)}function Ui(e,t,r,n,o){r=r.render;var a=t.ref;return oa(t,o),n=ai(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,tu(e,t,o))}function Di(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!=typeof i||Fl(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Bl(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,n,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:cn)(o,n)&&e.ref===t.ref)?tu(e,t,a):(t.flags|=1,(e=zl(i,n)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,r,n,o,a){if(null!==e&&cn(e.memoizedProps,n)&&e.ref===t.ref){if(Ii=!1,0==(a&o))return t.lanes=e.lanes,tu(e,t,a);0!=(16384&e.flags)&&(Ii=!0)}return Vi(e,t,r,n,a)}function zi(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gl(0,r);else{if(0==(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gl(0,e),null;t.memoizedState={baseLanes:0},gl(0,null!==a?a.baseLanes:r)}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,gl(0,n);return ji(e,t,o,r),t.child}function Bi(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=128)}function Vi(e,t,r,n,o){var a=go(r)?ho:fo.current;return a=vo(t,a),oa(t,o),r=ai(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,tu(e,t,o))}function $i(e,t,r,n,o){if(go(r)){var a=!0;wo(t)}else a=!1;if(oa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,r,n),wa(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,s=r.contextType;s="object"==typeof s&&null!==s?aa(s):vo(t,s=go(r)?ho:fo.current);var c=r.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==n||l!==s)&&ba(t,i,n,s),ia=!1;var p=t.memoizedState;i.state=p,pa(t,n,i,o),l=t.memoizedState,u!==n||p!==l||po.current||ia?("function"==typeof c&&(va(t,r,c,n),l=t.memoizedState),(u=ia||ya(t,r,u,n,p,l,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=l),i.props=n,i.state=l,i.context=s,n=u):("function"==typeof i.componentDidMount&&(t.flags|=4),n=!1)}else{i=t.stateNode,la(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:Ko(t.type,u),i.props=s,f=t.pendingProps,p=i.context,l="object"==typeof(l=r.contextType)&&null!==l?aa(l):vo(t,l=go(r)?ho:fo.current);var d=r.getDerivedStateFromProps;(c="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==f||p!==l)&&ba(t,i,n,l),ia=!1,p=t.memoizedState,i.state=p,pa(t,n,i,o);var h=t.memoizedState;u!==f||p!==h||po.current||ia?("function"==typeof d&&(va(t,r,d,n),h=t.memoizedState),(s=ia||ya(t,r,s,n,p,h,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=l,n=s):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),n=!1)}return Wi(e,t,r,n,a,o)}function Wi(e,t,r,n,o,a){Bi(e,t);var i=0!=(64&t.flags);if(!n&&!i)return o&&xo(t,r,!1),tu(e,t,a);n=t.stateNode,Li.current=t;var u=i&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Oa(t,e.child,null,a),t.child=Oa(t,null,u,a)):ji(e,t,u,a),t.memoizedState=n.state,o&&xo(t,r,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Na(e,t.containerInfo)}var qi,Qi,Yi,Gi={dehydrated:null,retryLane:0};function Ki(e,t,r){var n,o=t.pendingProps,a=ja.current,i=!1;return(n=0!=(64&t.flags))||(n=(null===e||null!==e.memoizedState)&&0!=(2&a)),n?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),so(ja,1&a),null===e?(void 0!==o.fallback&&$a(t),e=o.children,a=o.fallback,i?(e=Xi(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Gi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Xi(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Gi,t.lanes=33554432,e):((r=$l({mode:"visible",children:e},t.mode,r,null)).return=t,t.child=r)):(e.memoizedState,i?(o=function(e,t,r,n,o){var a=t.mode,i=e.child;e=i.sibling;var u={mode:"hidden",children:r};return 0==(2&a)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=u,null!==(i=r.lastEffect)?(t.firstEffect=r.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):r=zl(i,u),null!==e?n=zl(e,n):(n=Vl(n,a,o,null)).flags|=2,n.return=t,r.return=t,r.sibling=n,t.child=r,n}(e,t,o.children,o.fallback,r),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:r}:{baseLanes:a.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=Gi,o):(r=function(e,t,r,n){var o=e.child;return e=o.sibling,r=zl(o,{mode:"visible",children:r}),0==(2&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}(e,t,o.children,r),t.memoizedState=null,r))}function Xi(e,t,r,n){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$l(t,o,0,null),r=Vl(r,o,n,null),a.return=e,r.return=e,a.sibling=r,e.child=a,r}function Ji(e,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),na(e.return,t)}function Zi(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=o,i.lastEffect=a)}function eu(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(ji(e,t,n.children,r),0!=(2&(n=ja.current)))n=1&n|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,r);else if(19===e.tag)Ji(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(so(ja,n),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Ua(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),Zi(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ua(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}Zi(t,!0,r,null,a,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function tu(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),Uu|=t.lanes,0!=(r&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=zl(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=zl(e,e.pendingProps)).return=t;r.sibling=null}return t.child}return null}function ru(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function nu(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&yo(),null;case 3:return Ma(),lo(po),lo(fo),Ya(),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:n.hydrate||(t.flags|=256)),null;case 5:Ia(t);var a=Pa(_a.current);if(r=t.type,null!==e&&null!=t.stateNode)Qi(e,t,r,n),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=Pa(Aa.current),Ha(t)){n=t.stateNode,r=t.type;var u=t.memoizedProps;switch(n[Kn]=t,n[Xn]=u,r){case"dialog":An("cancel",n),An("close",n);break;case"iframe":case"object":case"embed":An("load",n);break;case"video":case"audio":for(e=0;e<kn.length;e++)An(kn[e],n);break;case"source":An("error",n);break;case"img":case"image":case"link":An("error",n),An("load",n);break;case"details":An("toggle",n);break;case"input":ee(n,u),An("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!u.multiple},An("invalid",n);break;case"textarea":le(n,u),An("invalid",n)}for(var s in Se(r,u),e=null,u)u.hasOwnProperty(s)&&(a=u[s],"children"===s?"string"==typeof a?n.textContent!==a&&(e=["children",a]):"number"==typeof a&&n.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&An("scroll",n));switch(r){case"input":K(n),ne(n,u,!0);break;case"textarea":K(n),ce(n);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(n.onclick=Dn)}n=e,t.updateQueue=n,null!==n&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(r)),e===fe?"script"===r?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=s.createElement(r,{is:n.is}):(e=s.createElement(r),"select"===r&&(s=e,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):e=s.createElementNS(e,r),e[Kn]=t,e[Xn]=n,qi(e,t),t.stateNode=e,s=ke(r,n),r){case"dialog":An("cancel",e),An("close",e),a=n;break;case"iframe":case"object":case"embed":An("load",e),a=n;break;case"video":case"audio":for(a=0;a<kn.length;a++)An(kn[a],e);a=n;break;case"source":An("error",e),a=n;break;case"img":case"image":case"link":An("error",e),An("load",e),a=n;break;case"details":An("toggle",e),a=n;break;case"input":ee(e,n),a=Z(e,n),An("invalid",e);break;case"option":a=ae(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=o({},n,{value:void 0}),An("invalid",e);break;case"textarea":le(e,n),a=ue(e,n),An("invalid",e);break;default:a=n}Se(r,a);var c=a;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?xe(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&ge(e,f):"children"===u?"string"==typeof f?("textarea"!==r||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(l.hasOwnProperty(u)?null!=f&&"onScroll"===u&&An("scroll",e):null!=f&&w(e,u,f,s))}switch(r){case"input":K(e),ne(e,n,!1);break;case"textarea":K(e),ce(e);break;case"option":null!=n.value&&e.setAttribute("value",""+Y(n.value));break;case"select":e.multiple=!!n.multiple,null!=(u=n.value)?ie(e,!!n.multiple,u,!1):null!=n.defaultValue&&ie(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dn)}Bn(r,n)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Yi(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(i(166));r=Pa(_a.current),Pa(Aa.current),Ha(t)?(n=t.stateNode,r=t.memoizedProps,n[Kn]=t,n.nodeValue!==r&&(t.flags|=4)):((n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Kn]=t,t.stateNode=n)}return null;case 13:return lo(ja),n=t.memoizedState,0!=(64&t.flags)?(t.lanes=r,t):(n=null!==n,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):r=null!==e.memoizedState,n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&ja.current)?0===Lu&&(Lu=3):(0!==Lu&&3!==Lu||(Lu=4),null===Cu||0==(134217727&Uu)&&0==(134217727&Du)||hl(Cu,Pu))),(n||r)&&(t.flags|=4),null);case 4:return Ma(),null===e&&_n(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(lo(ja),null===(n=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(s=n.rendering))if(u)ru(n,!1);else{if(0!==Lu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Ua(e))){for(t.flags|=64,ru(n,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;null!==r;)e=n,(u=r).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(s=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=s.childLanes,u.lanes=s.lanes,u.child=s.child,u.memoizedProps=s.memoizedProps,u.memoizedState=s.memoizedState,u.updateQueue=s.updateQueue,u.type=s.type,e=s.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return so(ja,1&ja.current|2),t.child}e=e.sibling}null!==n.tail&&Vo()>Vu&&(t.flags|=64,u=!0,ru(n,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=Ua(s))){if(t.flags|=64,u=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),ru(n,!0),null===n.tail&&"hidden"===n.tailMode&&!s.alternate&&!za)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Vo()-n.renderingStartTime>Vu&&1073741824!==r&&(t.flags|=64,u=!0,ru(n,!1),t.lanes=33554432);n.isBackwards?(s.sibling=t.child,t.child=s):(null!==(r=n.last)?r.sibling=s:t.child=s,n.last=s)}return null!==n.tail?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Vo(),r.sibling=null,t=ja.current,so(ja,u?1&t|2:1&t),r):null;case 23:case 24:return yl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ou(e){switch(e.tag){case 1:go(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ma(),lo(po),lo(fo),Ya(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ia(e),null;case 13:return lo(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(ja),null;case 4:return Ma(),null;case 10:return ra(e),null;case 23:case 24:return yl(),null;default:return null}}function au(e,t){try{var r="",n=t;do{r+=q(n),n=n.return}while(n);var o=r}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function iu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qi=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Qi=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,Pa(Aa.current);var i,u=null;switch(r){case"input":a=Z(e,a),n=Z(e,n),u=[];break;case"option":a=ae(e,a),n=ae(e,n),u=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),u=[];break;case"textarea":a=ue(e,a),n=ue(e,n),u=[];break;default:"function"!=typeof a.onClick&&"function"==typeof n.onClick&&(e.onclick=Dn)}for(f in Se(r,n),r=null,a)if(!n.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in n){var c=n[f];if(s=null!=a?a[f]:void 0,n.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(r||(r={}),r[i]=c[i])}else r||(u||(u=[]),u.push(f,r)),r=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(u=u||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(u=u||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&An("scroll",e),u||s===c||(u=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(u=u||[]).push(f,c))}r&&(u=u||[]).push("style",r);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},Yi=function(e,t,r,n){r!==n&&(t.flags|=4)};var uu="function"==typeof WeakMap?WeakMap:Map;function lu(e,t,r){(r=sa(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){qu||(qu=!0,Qu=n),iu(0,t)},r}function su(e,t,r){(r=sa(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var o=t.value;r.payload=function(){return iu(0,t),n(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(r.callback=function(){"function"!=typeof n&&(null===Yu?Yu=new Set([this]):Yu.add(this),iu(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}var cu="function"==typeof WeakSet?WeakSet:Set;function fu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ll(e,t)}else t.current=null}function pu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Ko(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hn(t.stateNode.containerInfo))}throw Error(i(163))}function du(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;n=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Pl(r,e),_l(r,e)),e=n}while(e!==t)}return;case 1:return e=r.stateNode,4&r.flags&&(null===t?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:Ko(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=r.updateQueue)&&da(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:case 1:e=r.child.stateNode}da(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.flags&&Bn(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&wt(r)))))}throw Error(i(163))}function hu(e,t){for(var r=e;;){if(5===r.tag){var n=r.stateNode;if(t)"function"==typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,n.style.display=we("display",o)}}else if(6===r.tag)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((23!==r.tag&&24!==r.tag||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function vu(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(Eo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,void 0!==o)if(0!=(4&n))Pl(t,r);else{n=t;try{o()}catch(e){Ll(n,e)}}r=r.next}while(r!==e)}break;case 1:if(fu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ll(t,e)}break;case 5:fu(t);break;case 4:xu(e,t)}}function gu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yu(e){return 5===e.tag||3===e.tag||4===e.tag}function mu(e){e:{for(var t=e.return;null!==t;){if(yu(t))break e;t=t.return}throw Error(i(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.flags&&(ye(t,""),r.flags&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||yu(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.flags)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.flags)){r=r.stateNode;break e}}n?bu(e,r,t):wu(e,r,t)}function bu(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=Dn));else if(4!==n&&null!==(e=e.child))for(bu(e,t,r),e=e.sibling;null!==e;)bu(e,t,r),e=e.sibling}function wu(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(wu(e,t,r),e=e.sibling;null!==e;)wu(e,t,r),e=e.sibling}function xu(e,t){for(var r,n,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:n=!1;break e;case 3:case 4:r=r.containerInfo,n=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,s=l;;)if(vu(u,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===l)break e;for(;null===s.sibling;){if(null===s.return||s.return===l)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}n?(u=r,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,n=!0,o.child.return=o,o=o.child;continue}}else if(vu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function Eu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var n=r=r.next;do{3==(3&n.tag)&&(e=n.destroy,n.destroy=void 0,void 0!==e&&e()),n=n.next}while(n!==r)}return;case 1:case 12:case 17:return;case 5:if(null!=(r=t.stateNode)){n=t.memoizedProps;var o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Xn]=n,"input"===e&&"radio"===n.type&&null!=n.name&&te(r,n),ke(e,o),t=ke(e,n),o=0;o<a.length;o+=2){var u=a[o],l=a[o+1];"style"===u?xe(r,l):"dangerouslySetInnerHTML"===u?ge(r,l):"children"===u?ye(r,l):w(r,u,l,t)}switch(e){case"input":re(r,n);break;case"textarea":se(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(a=n.value)?ie(r,!!n.multiple,a,!1):e!==!!n.multiple&&(null!=n.defaultValue?ie(r,!!n.multiple,n.defaultValue,!0):ie(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((r=t.stateNode).hydrate&&(r.hydrate=!1,wt(r.containerInfo)));case 13:return null!==t.memoizedState&&(Bu=Vo(),hu(t.child,!0)),void Su(t);case 19:return void Su(t);case 23:case 24:return void hu(t,null!==t.memoizedState)}throw Error(i(163))}function Su(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new cu),t.forEach((function(t){var n=jl.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function ku(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ou=Math.ceil,Ru=x.ReactCurrentDispatcher,Tu=x.ReactCurrentOwner,Au=0,Cu=null,_u=null,Pu=0,Nu=0,Mu=uo(0),Lu=0,Iu=null,ju=0,Uu=0,Du=0,Fu=0,zu=null,Bu=0,Vu=1/0;function $u(){Vu=Vo()+500}var Wu,Hu=null,qu=!1,Qu=null,Yu=null,Gu=!1,Ku=null,Xu=90,Ju=[],Zu=[],el=null,tl=0,rl=null,nl=-1,ol=0,al=0,il=null,ul=!1;function ll(){return 0!=(48&Au)?Vo():-1!==nl?nl:nl=Vo()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===$o()?1:2;if(0===ol&&(ol=ju),0!==Go.transition){0!==al&&(al=null!==zu?zu.pendingLanes:0),e=ol;var t=4186112&~al;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=$o(),e=Dt(0!=(4&Au)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ol)}function cl(e,t,r){if(50<tl)throw tl=0,rl=null,Error(i(185));if(null===(e=fl(e,t)))return null;Bt(e,t,r),e===Cu&&(Du|=t,4===Lu&&hl(e,Pu));var n=$o();1===t?0!=(8&Au)&&0==(48&Au)?vl(e):(pl(e,r),0===Au&&($u(),Qo())):(0==(4&Au)||98!==n&&99!==n||(null===el?el=new Set([e]):el.add(e)),pl(e,r)),zu=e}function fl(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}function pl(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,u=e.pendingLanes;0<u;){var l=31-Vt(u),s=1<<l,c=a[l];if(-1===c){if(0==(s&n)||0!=(s&o)){c=t,It(s);var f=Lt;a[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);u&=~s}if(n=jt(e,e===Cu?Pu:0),t=Lt,0===n)null!==r&&(r!==jo&&Ro(r),e.callbackNode=null,e.callbackPriority=0);else{if(null!==r){if(e.callbackPriority===t)return;r!==jo&&Ro(r)}15===t?(r=vl.bind(null,e),null===Do?(Do=[r],Fo=Oo(Po,Yo)):Do.push(r),r=jo):14===t?r=qo(99,vl.bind(null,e)):(r=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),r=qo(r,dl.bind(null,e))),e.callbackPriority=t,e.callbackNode=r}}function dl(e){if(nl=-1,al=ol=0,0!=(48&Au))throw Error(i(327));var t=e.callbackNode;if(Cl()&&e.callbackNode!==t)return null;var r=jt(e,e===Cu?Pu:0);if(0===r)return null;var n=r,o=Au;Au|=16;var a=wl();for(Cu===e&&Pu===n||($u(),ml(e,n));;)try{Sl();break}catch(t){bl(e,t)}if(ta(),Ru.current=a,Au=o,null!==_u?n=0:(Cu=null,Pu=0,n=Lu),0!=(ju&Du))ml(e,0);else if(0!==n){if(2===n&&(Au|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(r=Ut(e))&&(n=xl(e,r))),1===n)throw t=Iu,ml(e,0),hl(e,r),pl(e,Vo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:case 5:Rl(e);break;case 3:if(hl(e,r),(62914560&r)===r&&10<(n=Bu+500-Vo())){if(0!==jt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ll(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=$n(Rl.bind(null,e),n);break}Rl(e);break;case 4:if(hl(e,r),(4186112&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var u=31-Vt(r);a=1<<u,(u=n[u])>o&&(o=u),r&=~a}if(r=o,10<(r=(120>(r=Vo()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ou(r/1960))-r)){e.timeoutHandle=$n(Rl.bind(null,e),r);break}Rl(e);break;default:throw Error(i(329))}}return pl(e,Vo()),e.callbackNode===t?dl.bind(null,e):null}function hl(e,t){for(t&=~Fu,t&=~Du,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Vt(t),n=1<<r;e[r]=-1,t&=~n}}function vl(e){if(0!=(48&Au))throw Error(i(327));if(Cl(),e===Cu&&0!=(e.expiredLanes&Pu)){var t=Pu,r=xl(e,t);0!=(ju&Du)&&(r=xl(e,t=jt(e,t)))}else r=xl(e,t=jt(e,0));if(0!==e.tag&&2===r&&(Au|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(t=Ut(e))&&(r=xl(e,t))),1===r)throw r=Iu,ml(e,0),hl(e,t),pl(e,Vo()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Rl(e),pl(e,Vo()),null}function gl(e,t){so(Mu,Nu),Nu|=t,ju|=t}function yl(){Nu=Mu.current,lo(Mu)}function ml(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,Wn(r)),null!==_u)for(r=_u.return;null!==r;){var n=r;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&yo();break;case 3:Ma(),lo(po),lo(fo),Ya();break;case 5:Ia(n);break;case 4:Ma();break;case 13:case 19:lo(ja);break;case 10:ra(n);break;case 23:case 24:yl()}r=r.return}Cu=e,_u=zl(e.current,null),Pu=Nu=ju=t,Lu=0,Iu=null,Fu=Du=Uu=0}function bl(e,t){for(;;){var r=_u;try{if(ta(),Ga.current=_i,ti){for(var n=Ja.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}ti=!1}if(Xa=0,ei=Za=Ja=null,ri=!1,Tu.current=null,null===r||null===r.return){Lu=1,Iu=t,_u=null;break}e:{var a=e,i=r.return,u=r,l=t;if(t=Pu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&u.mode)){var c=u.alternate;c?(u.updateQueue=c.updateQueue,u.memoizedState=c.memoizedState,u.lanes=c.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&ja.current),p=i;do{var d;if(d=13===p.tag){var h=p.memoizedState;if(null!==h)d=null!==h.dehydrated;else{var v=p.memoizedProps;d=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(d){var g=p.updateQueue;if(null===g){var y=new Set;y.add(s),p.updateQueue=y}else g.add(s);if(0==(2&p.mode)){if(p.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var m=sa(-1,1);m.tag=2,ca(u,m)}u.lanes|=1;break e}l=void 0,u=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new uu,l=new Set,b.set(s,l)):void 0===(l=b.get(s))&&(l=new Set,b.set(s,l)),!l.has(u)){l.add(u);var w=Il.bind(null,a,s,u);s.then(w,w)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);l=Error((Q(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Lu&&(Lu=2),l=au(l,u),p=i;do{switch(p.tag){case 3:a=l,p.flags|=4096,t&=-t,p.lanes|=t,fa(p,lu(0,a,t));break e;case 1:a=l;var x=p.type,E=p.stateNode;if(0==(64&p.flags)&&("function"==typeof x.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Yu||!Yu.has(E)))){p.flags|=4096,t&=-t,p.lanes|=t,fa(p,su(p,a,t));break e}}p=p.return}while(null!==p)}Ol(r)}catch(e){t=e,_u===r&&null!==r&&(_u=r=r.return);continue}break}}function wl(){var e=Ru.current;return Ru.current=_i,null===e?_i:e}function xl(e,t){var r=Au;Au|=16;var n=wl();for(Cu===e&&Pu===t||ml(e,t);;)try{El();break}catch(t){bl(e,t)}if(ta(),Au=r,Ru.current=n,null!==_u)throw Error(i(261));return Cu=null,Pu=0,Lu}function El(){for(;null!==_u;)kl(_u)}function Sl(){for(;null!==_u&&!To();)kl(_u)}function kl(e){var t=Wu(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?Ol(e):_u=t,Tu.current=null}function Ol(e){var t=e;do{var r=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(r=nu(r,t,Nu)))return void(_u=r);if(24!==(r=t).tag&&23!==r.tag||null===r.memoizedState||0!=(1073741824&Nu)||0==(4&r.mode)){for(var n=0,o=r.child;null!==o;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(r=ou(t)))return r.flags&=2047,void(_u=r);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(_u=t);_u=t=e}while(null!==t);0===Lu&&(Lu=5)}function Rl(e){var t=$o();return Ho(99,Tl.bind(null,e,t)),null}function Tl(e,t){do{Cl()}while(null!==Ku);if(0!=(48&Au))throw Error(i(327));var r=e.finishedWork;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,l=e.expirationTimes;0<a;){var s=31-Vt(a),c=1<<s;o[s]=0,u[s]=-1,l[s]=-1,a&=~c}if(null!==el&&0==(24&n)&&el.has(e)&&el.delete(e),e===Cu&&(_u=Cu=null,Pu=0),1<r.flags?null!==r.lastEffect?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,null!==n){if(o=Au,Au|=32,Tu.current=null,Fn=Qt,vn(u=hn())){if("selectionStart"in u)l={start:u.selectionStart,end:u.selectionEnd};else e:if(l=(l=u.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{l.nodeType,s.nodeType}catch(e){l=null;break e}var f=0,p=-1,d=-1,h=0,v=0,g=u,y=null;t:for(;;){for(var m;g!==l||0!==a&&3!==g.nodeType||(p=f+a),g!==s||0!==c&&3!==g.nodeType||(d=f+c),3===g.nodeType&&(f+=g.nodeValue.length),null!==(m=g.firstChild);)y=g,g=m;for(;;){if(g===u)break t;if(y===l&&++h===a&&(p=f),y===s&&++v===c&&(d=f),null!==(m=g.nextSibling))break;y=(g=y).parentNode}g=m}l=-1===p||-1===d?null:{start:p,end:d}}else l=null;l=l||{start:0,end:0}}else l=null;zn={focusedElem:u,selectionRange:l},Qt=!1,il=null,ul=!1,Hu=n;do{try{Al()}catch(e){if(null===Hu)throw Error(i(330));Ll(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);il=null,Hu=n;do{try{for(u=e;null!==Hu;){var b=Hu.flags;if(16&b&&ye(Hu.stateNode,""),128&b){var w=Hu.alternate;if(null!==w){var x=w.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:mu(Hu),Hu.flags&=-3;break;case 6:mu(Hu),Hu.flags&=-3,Eu(Hu.alternate,Hu);break;case 1024:Hu.flags&=-1025;break;case 1028:Hu.flags&=-1025,Eu(Hu.alternate,Hu);break;case 4:Eu(Hu.alternate,Hu);break;case 8:xu(u,l=Hu);var E=l.alternate;gu(l),null!==E&&gu(E)}Hu=Hu.nextEffect}}catch(e){if(null===Hu)throw Error(i(330));Ll(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);if(x=zn,w=hn(),b=x.focusedElem,u=x.selectionRange,w!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==u&&vn(b)&&(w=u.start,void 0===(x=u.end)&&(x=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(x,b.value.length)):(x=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(x=x.getSelection(),l=b.textContent.length,E=Math.min(u.start,l),u=void 0===u.end?E:Math.min(u.end,l),!x.extend&&E>u&&(l=u,u=E,E=l),l=pn(b,E),a=pn(b,u),l&&a&&(1!==x.rangeCount||x.anchorNode!==l.node||x.anchorOffset!==l.offset||x.focusNode!==a.node||x.focusOffset!==a.offset)&&((w=w.createRange()).setStart(l.node,l.offset),x.removeAllRanges(),E>u?(x.addRange(w),x.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),x.addRange(w))))),w=[];for(x=b;x=x.parentNode;)1===x.nodeType&&w.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(x=w[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Qt=!!Fn,zn=Fn=null,e.current=r,Hu=n;do{try{for(b=e;null!==Hu;){var S=Hu.flags;if(36&S&&du(b,Hu.alternate,Hu),128&S){w=void 0;var k=Hu.ref;if(null!==k){var O=Hu.stateNode;Hu.tag,w=O,"function"==typeof k?k(w):k.current=w}}Hu=Hu.nextEffect}}catch(e){if(null===Hu)throw Error(i(330));Ll(Hu,e),Hu=Hu.nextEffect}}while(null!==Hu);Hu=null,Uo(),Au=o}else e.current=r;if(Gu)Gu=!1,Ku=e,Xu=t;else for(Hu=n;null!==Hu;)t=Hu.nextEffect,Hu.nextEffect=null,8&Hu.flags&&((S=Hu).sibling=null,S.stateNode=null),Hu=t;if(0===(n=e.pendingLanes)&&(Yu=null),1===n?e===rl?tl++:(tl=0,rl=e):tl=0,r=r.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(Eo,r,void 0,64==(64&r.current.flags))}catch(e){}if(pl(e,Vo()),qu)throw qu=!1,e=Qu,Qu=null,e;return 0!=(8&Au)||Qo(),null}function Al(){for(;null!==Hu;){var e=Hu.alternate;ul||null===il||(0!=(8&Hu.flags)?Je(Hu,il)&&(ul=!0):13===Hu.tag&&ku(e,Hu)&&Je(Hu,il)&&(ul=!0));var t=Hu.flags;0!=(256&t)&&pu(e,Hu),0==(512&t)||Gu||(Gu=!0,qo(97,(function(){return Cl(),null}))),Hu=Hu.nextEffect}}function Cl(){if(90!==Xu){var e=97<Xu?97:Xu;return Xu=90,Ho(e,Nl)}return!1}function _l(e,t){Ju.push(t,e),Gu||(Gu=!0,qo(97,(function(){return Cl(),null})))}function Pl(e,t){Zu.push(t,e),Gu||(Gu=!0,qo(97,(function(){return Cl(),null})))}function Nl(){if(null===Ku)return!1;var e=Ku;if(Ku=null,0!=(48&Au))throw Error(i(331));var t=Au;Au|=32;var r=Zu;Zu=[];for(var n=0;n<r.length;n+=2){var o=r[n],a=r[n+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===a)throw Error(i(330));Ll(a,e)}}for(r=Ju,Ju=[],n=0;n<r.length;n+=2){o=r[n],a=r[n+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(i(330));Ll(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Au=t,Qo(),!0}function Ml(e,t,r){ca(e,t=lu(0,t=au(r,t),1)),t=ll(),null!==(e=fl(e,1))&&(Bt(e,1,t),pl(e,t))}function Ll(e,t){if(3===e.tag)Ml(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){Ml(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"==typeof r.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Yu||!Yu.has(n))){var o=su(r,e=au(t,e),1);if(ca(r,o),o=ll(),null!==(r=fl(r,1)))Bt(r,1,o),pl(r,o);else if("function"==typeof n.componentDidCatch&&(null===Yu||!Yu.has(n)))try{n.componentDidCatch(t,e)}catch(e){}break}}r=r.return}}function Il(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=ll(),e.pingedLanes|=e.suspendedLanes&r,Cu===e&&(Pu&r)===r&&(4===Lu||3===Lu&&(62914560&Pu)===Pu&&500>Vo()-Bu?ml(e,0):Fu|=r),pl(e,t)}function jl(e,t){var r=e.stateNode;null!==r&&r.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===$o()?1:2:(0===ol&&(ol=ju),0===(t=Ft(62914560&~ol))&&(t=4194304))),r=ll(),null!==(e=fl(e,t))&&(Bt(e,t,r),pl(e,r))}function Ul(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Dl(e,t,r,n){return new Ul(e,t,r,n)}function Fl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var r=e.alternate;return null===r?((r=Dl(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Bl(e,t,r,n,o,a){var u=2;if(n=e,"function"==typeof e)Fl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case k:return Vl(r.children,o,a,t);case j:u=8,o|=16;break;case O:u=8,o|=1;break;case R:return(e=Dl(12,r,t,8|o)).elementType=R,e.type=R,e.lanes=a,e;case _:return(e=Dl(13,r,t,o)).type=_,e.elementType=_,e.lanes=a,e;case P:return(e=Dl(19,r,t,o)).elementType=P,e.lanes=a,e;case U:return $l(r,o,a,t);case D:return(e=Dl(24,r,t,o)).elementType=D,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:u=10;break e;case A:u=9;break e;case C:u=11;break e;case N:u=14;break e;case M:u=16,n=null;break e;case L:u=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Dl(u,r,t,o)).elementType=e,t.type=n,t.lanes=a,t}function Vl(e,t,r,n){return(e=Dl(7,e,n,t)).lanes=r,e}function $l(e,t,r,n){return(e=Dl(23,e,n,t)).elementType=U,e.lanes=r,e}function Wl(e,t,r){return(e=Dl(6,e,null,t)).lanes=r,e}function Hl(e,t,r){return(t=Dl(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ql(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Ql(e,t,r,n){var o=t.current,a=ll(),u=sl(o);e:if(r){t:{if(Ge(r=r._reactInternals)!==r||1!==r.tag)throw Error(i(170));var l=r;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(go(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===r.tag){var s=r.type;if(go(s)){r=bo(r,s,l);break e}}r=l}else r=co;return null===t.context?t.context=r:t.pendingContext=r,(t=sa(a,u)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),ca(o,t),cl(o,u,a),u}function Yl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function Kl(e,t){Gl(e,t),(e=e.alternate)&&Gl(e,t)}function Xl(e,t,r){var n=null!=r&&null!=r.hydrationOptions&&r.hydrationOptions.mutableSources||null;if(r=new ql(e,t,null!=r&&!0===r.hydrate),t=Dl(3,null,null,2===t?7:1===t?3:0),r.current=t,t.stateNode=r,ua(t),e[Jn]=r.current,_n(8===e.nodeType?e.parentNode:e),n)for(e=0;e<n.length;e++){var o=(t=n[e])._getVersion;o=o(t._source),null==r.mutableSourceEagerHydrationData?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zl(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Yl(i);u.call(e)}}Ql(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new Xl(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Yl(i);l.call(e)}}!function(e,t){var r=Au;Au&=-2,Au|=8;try{e(t)}finally{0===(Au=r)&&($u(),Qo())}}((function(){Ql(t,i,e,o)}))}return Yl(i)}Wu=function(e,t,r){var n=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||po.current)Ii=!0;else{if(0==(r&n)){switch(Ii=!1,t.tag){case 3:Hi(t),qa();break;case 5:La(t);break;case 1:go(t.type)&&wo(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;so(Xo,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!=(r&t.child.childLanes)?Ki(e,t,r):(so(ja,1&ja.current),null!==(t=tu(e,t,r))?t.sibling:null);so(ja,1&ja.current);break;case 19:if(n=0!=(r&t.childLanes),0!=(64&e.flags)){if(n)return eu(e,t,r);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),so(ja,ja.current),n)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,r)}return tu(e,t,r)}Ii=0!=(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,fo.current),oa(t,r),o=ai(null,t,n,e,o,r),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(n)){var a=!0;wo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ua(t);var u=n.getDerivedStateFromProps;"function"==typeof u&&va(t,n,u,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,wa(t,n,e,r),t=Wi(null,t,n,!0,a,r)}else t.tag=0,ji(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Fl(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===N)return 14}return 2}(o),e=Ko(o,e),a){case 0:t=Vi(null,t,o,e,r);break e;case 1:t=$i(null,t,o,e,r);break e;case 11:t=Ui(null,t,o,e,r);break e;case 14:t=Di(null,t,o,Ko(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,Vi(e,t,n,o=t.elementType===n?o:Ko(n,o),r);case 1:return n=t.type,o=t.pendingProps,$i(e,t,n,o=t.elementType===n?o:Ko(n,o),r);case 3:if(Hi(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),pa(t,n,null,r),(n=t.memoizedState.element)===o)qa(),t=tu(e,t,r);else{if((a=(o=t.stateNode).hydrate)&&(Fa=qn(t.stateNode.containerInfo.firstChild),Da=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Qa.push(a);for(r=Ra(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|1024,r=r.sibling}else ji(e,t,n,r),qa();t=t.child}return t;case 5:return La(t),null===e&&$a(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,Vn(n,o)?u=null:null!==a&&Vn(n,a)&&(t.flags|=16),Bi(e,t),ji(e,t,u,r),t.child;case 6:return null===e&&$a(t),null;case 13:return Ki(e,t,r);case 4:return Na(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Oa(t,null,n,r):ji(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Ui(e,t,n,o=t.elementType===n?o:Ko(n,o),r);case 7:return ji(e,t,t.pendingProps,r),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,u=t.memoizedProps,a=o.value;var l=t.type._context;if(so(Xo,l._currentValue),l._currentValue=a,null!==u)if(l=u.value,0==(a=ln(l,a)?0:0|("function"==typeof n._calculateChangedBits?n._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!po.current){t=tu(e,t,r);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===n&&0!=(c.observedBits&a)){1===l.tag&&((c=sa(-1,r&-r)).tag=2,ca(l,c)),l.lanes|=r,null!==(c=l.alternate)&&(c.lanes|=r),na(l.return,r),s.lanes|=r;break}c=c.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}ji(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,oa(t,r),n=n(o=aa(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,n,r),t.child;case 14:return a=Ko(o=t.type,t.pendingProps),Di(e,t,o,a=Ko(o.type,a),n,r);case 15:return Fi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Ko(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(n)?(e=!0,wo(t)):e=!1,oa(t,r),ma(t,n,o),wa(t,n,o,r),Wi(null,t,n,!0,e,r);case 19:return eu(e,t,r);case 23:case 24:return zi(e,t,r)}throw Error(i(156,t.tag))},Xl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Xl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Jn]=null}))},Ze=function(e){13===e.tag&&(cl(e,4,ll()),Kl(e,4))},et=function(e){13===e.tag&&(cl(e,67108864,ll()),Kl(e,67108864))},tt=function(e){if(13===e.tag){var t=ll(),r=sl(e);cl(e,r,t),Kl(e,r)}},rt=function(e,t){return t()},Re=function(e,t,r){switch(t){case"input":if(re(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=no(n);if(!o)throw Error(i(90));X(n),re(n,o)}}}break;case"textarea":se(e,r);break;case"select":null!=(t=r.value)&&ie(e,!!r.multiple,t,!1)}},Ne=function(e,t){var r=Au;Au|=1;try{return e(t)}finally{0===(Au=r)&&($u(),Qo())}},Me=function(e,t,r,n,o){var a=Au;Au|=4;try{return Ho(98,e.bind(null,t,r,n,o))}finally{0===(Au=a)&&($u(),Qo())}},Le=function(){0==(49&Au)&&(function(){if(null!==el){var e=el;el=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pl(e,Vo())}))}Qo()}(),Cl())},Ie=function(e,t){var r=Au;Au|=2;try{return e(t)}finally{0===(Au=r)&&($u(),Qo())}};var es={findFiberByHostInstance:eo,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ts={bundleType:es.bundleType,version:es.version,rendererPackageName:es.rendererPackageName,rendererConfig:es.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return Xe(o),e;if(a===n)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var u=!1,l=o.child;l;){if(l===r){u=!0,r=o,n=a;break}if(l===n){u=!0,n=o,r=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===r){u=!0,r=a,n=o;break}if(l===n){u=!0,n=a,r=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:es.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rs.isDisabled&&rs.supportsFiber)try{Eo=rs.inject(ts),So=rs}catch(ve){}}t.render=function(e,t,r){if(!Jl(t))throw Error(i(200));return Zl(null,e,t,!1,r)}},3935:(e,t,r)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(4448)},9921:(e,t)=>{"use strict";var r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,i=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,m=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case c:case f:case a:case u:case i:case d:return e;default:switch(e=e&&e.$$typeof){case s:case p:case g:case v:case l:return e;default:return t}}case o:return t}}}function E(e){return x(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=l,t.Element=n,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=o,t.Profiler=u,t.StrictMode=i,t.Suspense=d,t.isAsyncMode=function(e){return E(e)||x(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===u},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===u||e===i||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===l||e.$$typeof===s||e.$$typeof===p||e.$$typeof===m||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=x},9864:(e,t,r)=>{"use strict";e.exports=r(9921)},2408:(e,t,r)=>{"use strict";var n=r(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,u=60110,l=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),u=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function g(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||h}function y(){}function m(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(d(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=m.prototype=new y;b.constructor=m,n(b,g.prototype),b.isPureReactComponent=!0;var w={current:null},x=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var n,a={},i=null,u=null;if(null!=t)for(n in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,n)&&!E.hasOwnProperty(n)&&(a[n]=t[n]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(n in l=e.defaultProps)void 0===a[n]&&(a[n]=l[n]);return{$$typeof:o,type:e,key:i,ref:u,props:a,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,r,n,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return i=i(l=e),e=""===n?"."+R(l,0):n,Array.isArray(i)?(r="",null!=e&&(r=e.replace(O,"$&/")+"/"),T(i,t,r,"",(function(e){return e}))):null!=i&&(k(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(l=0,n=""===n?".":n+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=n+R(u=e[s],s);l+=T(u,t,r,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)l+=T(u=u.value,t,r,c=n+R(u,s++),i);else if("object"===u)throw t=""+e,Error(d(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function A(e,t,r){if(null==e)return e;var n=[],o=0;return T(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function C(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var _={current:null};function P(){var e=_.current;if(null===e)throw Error(d(321));return e}var N={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:A,forEach:function(e,t,r){A(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error(d(143));return e}},t.Component=g,t.PureComponent=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error(d(267,e));var a=n({},e.props),i=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)x.call(t,c)&&!E.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:u,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return P().useCallback(e,t)},t.useContext=function(e,t){return P().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return P().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return P().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return P().useLayoutEffect(e,t)},t.useMemo=function(e,t){return P().useMemo(e,t)},t.useReducer=function(e,t,r){return P().useReducer(e,t,r)},t.useRef=function(e){return P().useRef(e)},t.useState=function(e){return P().useState(e)},t.version="17.0.2"},7294:(e,t,r)=>{"use strict";e.exports=r(2408)},5666:e=>{var t=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function s(e,t,r,n){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new A(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===d)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return _()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var u=O(i,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var l=c(e,t,r);if("normal"===l.type){if(n=r.done?h:p,l.arg===v)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(n=h,r.method="throw",r.arg=l.arg)}}}(e,r,i),a}function c(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",v={};function g(){}function y(){}function m(){}var b={};l(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(C([])));x&&x!==r&&n.call(x,a)&&(b=x);var E=m.prototype=g.prototype=Object.create(b);function S(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function r(o,a,i,u){var l=c(e[o],e,a);if("throw"!==l.type){var s=l.arg,f=s.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,u)}),(function(e){r("throw",e,i,u)})):t.resolve(f).then((function(e){s.value=e,i(s)}),(function(e){return r("throw",e,i,u)}))}u(l.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function O(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,O(e,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=c(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function R(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(R,this),this.reset(!0)}function C(e){if(e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:_}}function _(){return{value:t,done:!0}}return y.prototype=m,l(E,"constructor",m),l(m,"constructor",y),y.displayName=l(m,u,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,l(e,u,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},S(k.prototype),l(k.prototype,i,(function(){return this})),e.AsyncIterator=k,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new k(s(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(E),l(E,u,"Generator"),l(E,a,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=C,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return u.type="throw",u.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],u=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(l&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),T(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;T(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:C(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var r,n,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(f,0))},n=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,d=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,g=null,y=-1,m=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):m=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,x=w.port2;w.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+m;try{g(!0,e)?x.postMessage(null):(v=!1,g=null)}catch(e){throw x.postMessage(null),e}}else v=!1},r=function(e){g=e,v||(v=!0,x.postMessage(null))},n=function(e,r){y=p((function(){e(t.unstable_now())}),r)},o=function(){d(y),y=-1}}function E(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<O(o,t)))break e;e[n]=t,e[r]=o,r=n}}function S(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],u=a+1,l=e[u];if(void 0!==i&&0>O(i,r))void 0!==l&&0>O(l,i)?(e[n]=l,e[u]=r,n=u):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==l&&0>O(l,r)))break e;e[n]=l,e[u]=r,n=u}}}return t}return null}function O(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var R=[],T=[],A=1,C=null,_=3,P=!1,N=!1,M=!1;function L(e){for(var t=S(T);null!==t;){if(null===t.callback)k(T);else{if(!(t.startTime<=e))break;k(T),t.sortIndex=t.expirationTime,E(R,t)}t=S(T)}}function I(e){if(M=!1,L(e),!N)if(null!==S(R))N=!0,r(j);else{var t=S(T);null!==t&&n(I,t.startTime-e)}}function j(e,r){N=!1,M&&(M=!1,o()),P=!0;var a=_;try{for(L(r),C=S(R);null!==C&&(!(C.expirationTime>r)||e&&!t.unstable_shouldYield());){var i=C.callback;if("function"==typeof i){C.callback=null,_=C.priorityLevel;var u=i(C.expirationTime<=r);r=t.unstable_now(),"function"==typeof u?C.callback=u:C===S(R)&&k(R),L(r)}else k(R);C=S(R)}if(null!==C)var l=!0;else{var s=S(T);null!==s&&n(I,s.startTime-r),l=!1}return l}finally{C=null,_=a,P=!1}}var U=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||P||(N=!0,r(j))},t.unstable_getCurrentPriorityLevel=function(){return _},t.unstable_getFirstCallbackNode=function(){return S(R)},t.unstable_next=function(e){switch(_){case 1:case 2:case 3:var t=3;break;default:t=_}var r=_;_=t;try{return e()}finally{_=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=_;_=e;try{return t()}finally{_=r}},t.unstable_scheduleCallback=function(e,a,i){var u=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?u+i:u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:A++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>u?(e.sortIndex=i,E(T,e),null===S(R)&&e===S(T)&&(M?o():M=!0,n(I,i-u))):(e.sortIndex=l,E(R,e),N||P||(N=!0,r(j))),e},t.unstable_wrapCallback=function(e){var t=_;return function(){var r=_;_=t;try{return e.apply(this,arguments)}finally{_=r}}}},3840:(e,t,r)=>{"use strict";e.exports=r(53)}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(8594),r(5666);var e=r(7294),t=r(3935);function n(e,t){return n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n(e,t)}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function i(e){return"/"===e.charAt(0)}function u(e,t){for(var r=t,n=r+1,o=e.length;n<o;r+=1,n+=1)e[r]=e[n];e.pop()}function l(e,t){if(!e)throw new Error("Invariant failed")}function s(e){return"/"===e.charAt(0)?e:"/"+e}function c(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function f(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,r=e.search,n=e.hash,o=t||"/";return r&&"?"!==r&&(o+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(o+="#"===n.charAt(0)?n:"#"+n),o}function d(e,t,r,n){var o;"string"==typeof e?(o=function(e){var t=e||"/",r="",n="",o=t.indexOf("#");-1!==o&&(n=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(r=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===r?"":r,hash:"#"===n?"":n}}(e),o.state=t):(void 0===(o=a({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return r&&(o.key=r),n?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var r,n=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&i(e),l=t&&i(t),s=a||l;if(e&&i(e)?o=n:n.length&&(o.pop(),o=o.concat(n)),!o.length)return"/";if(o.length){var c=o[o.length-1];r="."===c||".."===c||""===c}else r=!1;for(var f=0,p=o.length;p>=0;p--){var d=o[p];"."===d?u(o,p):".."===d?(u(o,p),f++):f&&(u(o,p),f--)}if(!s)for(;f--;f)o.unshift("..");!s||""===o[0]||o[0]&&i(o[0])||o.unshift("");var h=o.join("/");return r&&"/"!==h.substr(-1)&&(h+="/"),h}(o.pathname,n.pathname)):o.pathname=n.pathname:o.pathname||(o.pathname="/"),o}function h(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,r,n,o){if(null!=e){var a="function"==typeof e?e(t,r):e;"string"==typeof a?"function"==typeof n?n(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var r=!0;function n(){r&&e.apply(void 0,arguments)}return t.push(n),function(){r=!1,t=t.filter((function(e){return e!==n}))}},notifyListeners:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];t.forEach((function(e){return e.apply(void 0,r)}))}}}var v=!("undefined"==typeof window||!window.document||!window.document.createElement);function g(e,t){t(window.confirm(e))}var y="popstate",m="hashchange";function b(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),v||l(!1);var t,r=window.history,n=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,u=i.forceRefresh,w=void 0!==u&&u,x=i.getUserConfirmation,E=void 0===x?g:x,S=i.keyLength,k=void 0===S?6:S,O=e.basename?f(s(e.basename)):"";function R(e){var t=e||{},r=t.key,n=t.state,o=window.location,a=o.pathname+o.search+o.hash;return O&&(a=c(a,O)),d(a,n,r)}function T(){return Math.random().toString(36).substr(2,k)}var A=h();function C(e){a(B,e),B.length=r.length,A.notifyListeners(B.location,B.action)}function _(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||M(R(e.state))}function P(){M(R(b()))}var N=!1;function M(e){N?(N=!1,C()):A.confirmTransitionTo(e,"POP",E,(function(t){t?C({action:"POP",location:e}):function(e){var t=B.location,r=I.indexOf(t.key);-1===r&&(r=0);var n=I.indexOf(e.key);-1===n&&(n=0);var o=r-n;o&&(N=!0,U(o))}(e)}))}var L=R(b()),I=[L.key];function j(e){return O+p(e)}function U(e){r.go(e)}var D=0;function F(e){1===(D+=e)&&1===e?(window.addEventListener(y,_),o&&window.addEventListener(m,P)):0===D&&(window.removeEventListener(y,_),o&&window.removeEventListener(m,P))}var z=!1,B={length:r.length,action:"POP",location:L,createHref:j,push:function(e,t){var o="PUSH",a=d(e,t,T(),B.location);A.confirmTransitionTo(a,o,E,(function(e){if(e){var t=j(a),i=a.key,u=a.state;if(n)if(r.pushState({key:i,state:u},null,t),w)window.location.href=t;else{var l=I.indexOf(B.location.key),s=I.slice(0,l+1);s.push(a.key),I=s,C({action:o,location:a})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",a=d(e,t,T(),B.location);A.confirmTransitionTo(a,o,E,(function(e){if(e){var t=j(a),i=a.key,u=a.state;if(n)if(r.replaceState({key:i,state:u},null,t),w)window.location.replace(t);else{var l=I.indexOf(B.location.key);-1!==l&&(I[l]=a.key),C({action:o,location:a})}else window.location.replace(t)}}))},go:U,goBack:function(){U(-1)},goForward:function(){U(1)},block:function(e){void 0===e&&(e=!1);var t=A.setPrompt(e);return z||(F(1),z=!0),function(){return z&&(z=!1,F(-1)),t()}},listen:function(e){var t=A.appendListener(e);return F(1),function(){F(-1),t()}}};return B}var x=r(5697),E=r.n(x),S=1073741823,k="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:{};function O(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(r,n){e=r,t.forEach((function(t){return t(e,n)}))}}}const R=e.createContext||function(t,r){var n,a,i,u="__create-react-context-"+((k[i="__global_unique_id__"]=(k[i]||0)+1)+"__"),l=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=O(t.props.value),t}o(t,e);var n=t.prototype;return n.getChildContext=function(){var e;return(e={})[u]=this.emitter,e},n.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,n=this.props.value,o=e.value;((a=n)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?t=0:(t="function"==typeof r?r(n,o):S,0!=(t|=0)&&this.emitter.set(e.value,t))}var a,i},n.render=function(){return this.props.children},t}(e.Component);l.childContextTypes=((n={})[u]=E().object.isRequired,n);var s=function(e){function r(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,r){0!=((0|t.observedBits)&r)&&t.setState({value:t.getValue()})},t}o(r,e);var n=r.prototype;return n.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?S:t},n.componentDidMount=function(){this.context[u]&&this.context[u].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?S:e},n.componentWillUnmount=function(){this.context[u]&&this.context[u].off(this.onUpdate)},n.getValue=function(){return this.context[u]?this.context[u].get():t},n.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},r}(e.Component);return s.contextTypes=((a={})[u]=E().object,a),{Provider:l,Consumer:s}};var T=r(4779),A=r.n(T);function C(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}r(9864),r(8679);var _=function(e){var t=R();return t.displayName=e,t},P=_("Router-History"),N=_("Router"),M=function(t){function r(e){var r;return(r=t.call(this,e)||this).state={location:e.history.location},r._isMounted=!1,r._pendingLocation=null,e.staticContext||(r.unlisten=e.history.listen((function(e){r._isMounted?r.setState({location:e}):r._pendingLocation=e}))),r}o(r,t),r.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=r.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},n.render=function(){return e.createElement(N.Provider,{value:{history:this.props.history,location:this.state.location,match:r.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(P.Provider,{children:this.props.children||null,value:this.props.history}))},r}(e.Component);e.Component,e.Component;var L={},I=0;e.Component,e.Component,e.Component,e.useContext;var j=function(t){function r(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=t.call.apply(t,[this].concat(n))||this).history=w(e.props),e}return o(r,t),r.prototype.render=function(){return e.createElement(M,{history:this.history,children:this.props.children})},r}(e.Component);e.Component;var U=function(e,t){return"function"==typeof e?e(t):e},D=function(e,t){return"string"==typeof e?d(e,null,null,t):e},F=function(e){return e},z=e.forwardRef;void 0===z&&(z=F);var B=z((function(t,r){var n=t.innerRef,o=t.navigate,i=t.onClick,u=C(t,["innerRef","navigate","onClick"]),l=u.target,s=a({},u,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return s.ref=F!==z&&r||n,e.createElement("a",s)})),V=z((function(t,r){var n=t.component,o=void 0===n?B:n,i=t.replace,u=t.to,s=t.innerRef,c=C(t,["component","replace","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||l(!1);var n=t.history,f=D(U(u,t.location),t.location),d=f?n.createHref(f):"",h=a({},c,{href:d,navigate:function(){var e=U(u,t.location),r=p(t.location)===p(D(e));(i||r?n.replace:n.push)(e)}});return F!==z?h.ref=r||s:h.innerRef=s,e.createElement(o,h)}))})),$=function(e){return e},W=e.forwardRef;void 0===W&&(W=$),W((function(t,r){var n=t["aria-current"],o=void 0===n?"page":n,i=t.activeClassName,u=void 0===i?"active":i,s=t.activeStyle,c=t.className,f=t.exact,p=t.isActive,d=t.location,h=t.sensitive,v=t.strict,g=t.style,y=t.to,m=t.innerRef,b=C(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||l(!1);var n=d||t.location,i=D(U(y,n),n),w=i.pathname,x=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),E=x?function(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var r=t,n=r.path,o=r.exact,a=void 0!==o&&o,i=r.strict,u=void 0!==i&&i,l=r.sensitive,s=void 0!==l&&l;return[].concat(n).reduce((function(t,r){if(!r&&""!==r)return null;if(t)return t;var n=function(e,t){var r=""+t.end+t.strict+t.sensitive,n=L[r]||(L[r]={});if(n[e])return n[e];var o=[],a={regexp:A()(e,o,t),keys:o};return I<1e4&&(n[e]=a,I++),a}(r,{end:a,strict:u,sensitive:s}),o=n.regexp,i=n.keys,l=o.exec(e);if(!l)return null;var c=l[0],f=l.slice(1),p=e===c;return a&&!p?null:{path:r,url:"/"===r&&""===c?"/":c,isExact:p,params:i.reduce((function(e,t,r){return e[t.name]=f[r],e}),{})}}),null)}(n.pathname,{path:x,exact:f,sensitive:h,strict:v}):null,S=!!(p?p(E,n):E),k="function"==typeof c?c(S):c,O="function"==typeof g?g(S):g;S&&(k=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter((function(e){return e})).join(" ")}(k,u),O=a({},O,s));var R=a({"aria-current":S&&o||null,className:k,style:O,to:i},b);return $!==W?R.ref=r||m:R.innerRef=m,e.createElement(V,R)}))}));var H=r(9669),q=r.n(H);const Q=function(){return e.createElement("div",null,"초기 세팅입니다.")};q().defaults.withCredentials=!0,q().defaults.baseURL="https://sleact.nodebird.com",(0,t.render)(e.createElement(j,null,e.createElement(Q,null)),document.querySelector("#app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsSUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUVSLG9DQy9PQSxJQUFJd3lELEVBQVUsRUFBUSxNQU1sQkMsRUFBZ0IsQ0FDbEJDLG1CQUFtQixFQUNuQkMsYUFBYSxFQUNiQyxjQUFjLEVBQ2RDLGNBQWMsRUFDZEMsYUFBYSxFQUNiQyxpQkFBaUIsRUFDakJDLDBCQUEwQixFQUMxQkMsMEJBQTBCLEVBQzFCQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWDUwRCxNQUFNLEdBRUo2MEQsRUFBZ0IsQ0FDbEJ4dUQsTUFBTSxFQUNOaEUsUUFBUSxFQUNSeEIsV0FBVyxFQUNYaTBELFFBQVEsRUFDUmoyQyxRQUFRLEVBQ1JuVixXQUFXLEVBQ1hxckQsT0FBTyxHQVNMQyxFQUFlLENBQ2pCLFVBQVksRUFDWkMsU0FBUyxFQUNUWCxjQUFjLEVBQ2RDLGFBQWEsRUFDYkssV0FBVyxFQUNYNTBELE1BQU0sR0FFSmsxRCxFQUFlLEdBSW5CLFNBQVNDLEVBQVdDLEdBRWxCLE9BQUluQixFQUFRb0IsT0FBT0QsR0FDVkosRUFJRkUsRUFBYUUsRUFBb0IsV0FBTWxCLEVBVmhEZ0IsRUFBYWpCLEVBQVFxQixZQWhCSyxDQUN4QixVQUFZLEVBQ1pDLFFBQVEsRUFDUmpCLGNBQWMsRUFDZEMsYUFBYSxFQUNiSyxXQUFXLEdBWWJNLEVBQWFqQixFQUFRdUIsTUFBUVIsRUFZN0IsSUFBSS9rRCxFQUFpQnhJLE9BQU93SSxlQUN4QjBELEVBQXNCbE0sT0FBT2tNLG9CQUM3Qm9pQixFQUF3QnR1QixPQUFPc3VCLHNCQUMvQmxULEVBQTJCcGIsT0FBT29iLHlCQUNsQ2hWLEVBQWlCcEcsT0FBT29HLGVBQ3hCNG5ELEVBQWtCaHVELE9BQU81RyxVQXNDN0JqRyxFQUFPQyxRQXJDUCxTQUFTNjZELEVBQXFCQyxFQUFpQkMsRUFBaUJDLEdBQzlELEdBQStCLGlCQUFwQkQsRUFBOEIsQ0FFdkMsR0FBSUgsRUFBaUIsQ0FDbkIsSUFBSUssRUFBcUJqb0QsRUFBZStuRCxHQUVwQ0UsR0FBc0JBLElBQXVCTCxHQUMvQ0MsRUFBcUJDLEVBQWlCRyxFQUFvQkQsR0FJOUQsSUFBSW51RCxFQUFPaU0sRUFBb0JpaUQsR0FFM0I3L0IsSUFDRnJ1QixFQUFPQSxFQUFLbkQsT0FBT3d4QixFQUFzQjYvQixLQU0zQyxJQUhBLElBQUlHLEVBQWdCWixFQUFXUSxHQUMzQkssRUFBZ0JiLEVBQVdTLEdBRXRCenpELEVBQUksRUFBR0EsRUFBSXVGLEVBQUtyRixTQUFVRixFQUFHLENBQ3BDLElBQUk1QyxFQUFNbUksRUFBS3ZGLEdBRWYsS0FBSzB5RCxFQUFjdDFELElBQVVzMkQsR0FBYUEsRUFBVXQyRCxJQUFXeTJELEdBQWlCQSxFQUFjejJELElBQVd3MkQsR0FBaUJBLEVBQWN4MkQsSUFBTyxDQUM3SSxJQUFJaXNCLEVBQWEzSSxFQUF5Qit5QyxFQUFpQnIyRCxHQUUzRCxJQUVFMFEsRUFBZTBsRCxFQUFpQnAyRCxFQUFLaXNCLEdBQ3JDLE1BQU90aUIsT0FLZixPQUFPeXNELGFDbkdULzZELEVBQU9DLFFBQVV3SixNQUFNNEMsU0FBVyxTQUFVK0YsR0FDMUMsTUFBOEMsa0JBQXZDdkYsT0FBTzVHLFVBQVVhLFNBQVNvRSxLQUFLa0gsMkJDT3hDLElBQUkrb0IsRUFBd0J0dUIsT0FBT3N1QixzQkFDL0IvbkIsRUFBaUJ2RyxPQUFPNUcsVUFBVW1OLGVBQ2xDaW9ELEVBQW1CeHVELE9BQU81RyxVQUFVbXZCLHFCQUV4QyxTQUFTbFksRUFBU3hZLEdBQ2pCLEdBQUlBLE1BQUFBLEVBQ0gsTUFBTSxJQUFJdUMsVUFBVSx5REFHckIsT0FBTzRGLE9BQU9uSSxHQStDZjFFLEVBQU9DLFFBNUNQLFdBQ0MsSUFDQyxJQUFLNE0sT0FBTzZ2QixPQUNYLE9BQU8sRUFNUixJQUFJNCtCLEVBQVEsSUFBSWhuRCxPQUFPLE9BRXZCLEdBREFnbkQsRUFBTSxHQUFLLEtBQ2tDLE1BQXpDenVELE9BQU9rTSxvQkFBb0J1aUQsR0FBTyxHQUNyQyxPQUFPLEVBS1IsSUFEQSxJQUFJQyxFQUFRLEdBQ0hoMEQsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3ZCZzBELEVBQU0sSUFBTWpuRCxPQUFPNnZCLGFBQWE1OEIsSUFBTUEsRUFLdkMsR0FBd0IsZUFIWHNGLE9BQU9rTSxvQkFBb0J3aUQsR0FBT2g3QyxLQUFJLFNBQVUwQixHQUM1RCxPQUFPczVDLEVBQU10NUMsTUFFSDVTLEtBQUssSUFDZixPQUFPLEVBSVIsSUFBSW1zRCxFQUFRLEdBSVosTUFIQSx1QkFBdUJ4cEQsTUFBTSxJQUFJdk4sU0FBUSxTQUFVZzNELEdBQ2xERCxFQUFNQyxHQUFVQSxLQUdmLHlCQURFNXVELE9BQU9DLEtBQUtELE9BQU82dkIsT0FBTyxHQUFJOCtCLElBQVFuc0QsS0FBSyxJQU05QyxNQUFPck0sR0FFUixPQUFPLEdBSVEwNEQsR0FBb0I3dUQsT0FBTzZ2QixPQUFTLFNBQVV2d0IsRUFBUWpFLEdBS3RFLElBSkEsSUFBSXlWLEVBRUF1VyxFQURBeFcsRUFBS1IsRUFBUy9RLEdBR1Q4ZixFQUFJLEVBQUdBLEVBQUluZCxVQUFVckgsT0FBUXdrQixJQUFLLENBRzFDLElBQUssSUFBSXRuQixLQUZUZ1osRUFBTzlRLE9BQU9pQyxVQUFVbWQsSUFHbkI3WSxFQUFlbEksS0FBS3lTLEVBQU1oWixLQUM3QitZLEVBQUcvWSxHQUFPZ1osRUFBS2haLElBSWpCLEdBQUl3MkIsRUFBdUIsQ0FDMUJqSCxFQUFVaUgsRUFBc0J4ZCxHQUNoQyxJQUFLLElBQUlwVyxFQUFJLEVBQUdBLEVBQUkyc0IsRUFBUXpzQixPQUFRRixJQUMvQjh6RCxFQUFpQm53RCxLQUFLeVMsRUFBTXVXLEVBQVEzc0IsTUFDdkNtVyxFQUFHd1csRUFBUTNzQixJQUFNb1csRUFBS3VXLEVBQVEzc0IsTUFNbEMsT0FBT21XLG1CQ3hGUixJQUFJaStDLEVBQVUsRUFBUSxNQUt0QjM3RCxFQUFPQyxRQW1aUCxTQUFTMjdELEVBQWNsc0QsRUFBTTVDLEVBQU16QyxHQVFqQyxPQVBLc3hELEVBQVE3dUQsS0FDWHpDLEVBQWtDeUMsR0FBUXpDLEVBQzFDeUMsRUFBTyxJQUdUekMsRUFBVUEsR0FBVyxHQUVqQnFGLGFBQWdCUyxPQWxKdEIsU0FBeUJULEVBQU01QyxHQUU3QixJQUFJZzFCLEVBQVNweUIsRUFBS3hILE9BQU9nSSxNQUFNLGFBRS9CLEdBQUk0eEIsRUFDRixJQUFLLElBQUl2NkIsRUFBSSxFQUFHQSxFQUFJdTZCLEVBQU9yNkIsT0FBUUYsSUFDakN1RixFQUFLL0UsS0FBSyxDQUNSMEQsS0FBTWxFLEVBQ05zMEQsT0FBUSxLQUNSQyxVQUFXLEtBQ1hDLFVBQVUsRUFDVjE0QixRQUFRLEVBQ1IyNEIsU0FBUyxFQUNUQyxVQUFVLEVBQ1Z2Z0IsUUFBUyxPQUtmLE9BQU93Z0IsRUFBV3hzRCxFQUFNNUMsR0FnSWZxdkQsQ0FBZXpzRCxFQUE0QixHQUdoRGlzRCxFQUFRanNELEdBeEhkLFNBQXdCQSxFQUFNNUMsRUFBTXpDLEdBR2xDLElBRkEsSUFBSTRFLEVBQVEsR0FFSDFILEVBQUksRUFBR0EsRUFBSW1JLEVBQUtqSSxPQUFRRixJQUMvQjBILEVBQU1sSCxLQUFLNnpELEVBQWFsc0QsRUFBS25JLEdBQUl1RixFQUFNekMsR0FBU25DLFFBS2xELE9BQU9nMEQsRUFGTSxJQUFJL3JELE9BQU8sTUFBUWxCLEVBQU1JLEtBQUssS0FBTyxJQUFLc2lCLEVBQU10bkIsSUFFbkN5QyxHQWdIakJzdkQsQ0FBb0MsRUFBOEIsRUFBUS94RCxHQXJHckYsU0FBeUJxRixFQUFNNUMsRUFBTXpDLEdBQ25DLE9BQU9neUQsRUFBZWp1RCxFQUFNc0IsRUFBTXJGLEdBQVV5QyxFQUFNekMsR0F1RzNDaXlELENBQXFDLEVBQThCLEVBQVFqeUQsSUFsYXBGckssRUFBT0MsUUFBUW1PLE1BQVFBLEVBQ3ZCcE8sRUFBT0MsUUFBUXM4RCxRQXNHZixTQUFrQjFvRCxFQUFLeEosR0FDckIsT0FBT215RCxFQUFpQnB1RCxFQUFNeUYsRUFBS3hKLEdBQVVBLElBdEcvQ3JLLEVBQU9DLFFBQVF1OEQsaUJBQW1CQSxFQUNsQ3g4RCxFQUFPQyxRQUFRbzhELGVBQWlCQSxFQU9oQyxJQUFJSSxFQUFjLElBQUl0c0QsT0FBTyxDQUczQixVQU9BLDBHQUNBZCxLQUFLLEtBQU0sS0FTYixTQUFTakIsRUFBT3lGLEVBQUt4SixHQVFuQixJQVBBLElBS0l1MUMsRUFMQThjLEVBQVMsR0FDVC8zRCxFQUFNLEVBQ05xRCxFQUFRLEVBQ1IwSCxFQUFPLEdBQ1BpdEQsRUFBbUJ0eUQsR0FBV0EsRUFBUXl4RCxXQUFhLElBR2YsT0FBaENsYyxFQUFNNmMsRUFBWWw1QyxLQUFLMVAsS0FBZSxDQUM1QyxJQUFJcVksRUFBSTB6QixFQUFJLEdBQ1JnZCxFQUFVaGQsRUFBSSxHQUNkeGpDLEVBQVN3akMsRUFBSTUzQyxNQUtqQixHQUpBMEgsR0FBUW1FLEVBQUl2SCxNQUFNdEUsRUFBT29VLEdBQ3pCcFUsRUFBUW9VLEVBQVM4UCxFQUFFemtCLE9BR2ZtMUQsRUFDRmx0RCxHQUFRa3RELEVBQVEsT0FEbEIsQ0FLQSxJQUFJNTlDLEVBQU9uTCxFQUFJN0wsR0FDWDZ6RCxFQUFTamMsRUFBSSxHQUNibjBDLEVBQU9tMEMsRUFBSSxHQUNYeHJCLEVBQVV3ckIsRUFBSSxHQUNkaGUsRUFBUWdlLEVBQUksR0FDWmlkLEVBQVdqZCxFQUFJLEdBQ2ZxYyxFQUFXcmMsRUFBSSxHQUdmbHdDLElBQ0ZndEQsRUFBTzMwRCxLQUFLMkgsR0FDWkEsRUFBTyxJQUdULElBQUlzc0QsRUFBb0IsTUFBVkgsR0FBMEIsTUFBUjc4QyxHQUFnQkEsSUFBUzY4QyxFQUNyRHg0QixFQUFzQixNQUFidzVCLEdBQWlDLE1BQWJBLEVBQzdCZCxFQUF3QixNQUFiYyxHQUFpQyxNQUFiQSxFQUMvQmYsRUFBWWxjLEVBQUksSUFBTStjLEVBQ3RCamhCLEVBQVV0bkIsR0FBV3dOLEVBRXpCODZCLEVBQU8zMEQsS0FBSyxDQUNWMEQsS0FBTUEsR0FBUTlHLElBQ2RrM0QsT0FBUUEsR0FBVSxHQUNsQkMsVUFBV0EsRUFDWEMsU0FBVUEsRUFDVjE0QixPQUFRQSxFQUNSMjRCLFFBQVNBLEVBQ1RDLFdBQVlBLEVBQ1p2Z0IsUUFBU0EsRUFBVW9oQixFQUFZcGhCLEdBQVl1Z0IsRUFBVyxLQUFPLEtBQU9jLEVBQWFqQixHQUFhLFNBY2xHLE9BVEk5ekQsRUFBUTZMLEVBQUlwTSxTQUNkaUksR0FBUW1FLEVBQUkzQixPQUFPbEssSUFJakIwSCxHQUNGZ3RELEVBQU8zMEQsS0FBSzJILEdBR1BndEQsRUFvQlQsU0FBU00sRUFBMEJucEQsR0FDakMsT0FBT29wRCxVQUFVcHBELEdBQUszSixRQUFRLFdBQVcsU0FBVS9CLEdBQ2pELE1BQU8sSUFBTUEsRUFBRTZMLFdBQVcsR0FBR2xOLFNBQVMsSUFBSTNELGlCQW1COUMsU0FBU3E1RCxFQUFrQkUsRUFBUXJ5RCxHQUtqQyxJQUhBLElBQUk2eUQsRUFBVSxJQUFJenpELE1BQU1pekQsRUFBT2oxRCxRQUd0QkYsRUFBSSxFQUFHQSxFQUFJbTFELEVBQU9qMUQsT0FBUUYsSUFDUixpQkFBZG0xRCxFQUFPbjFELEtBQ2hCMjFELEVBQVEzMUQsR0FBSyxJQUFJNEksT0FBTyxPQUFTdXNELEVBQU9uMUQsR0FBR20wQyxRQUFVLEtBQU0vcEIsRUFBTXRuQixLQUlyRSxPQUFPLFNBQVU4SSxFQUFLUixHQU1wQixJQUxBLElBQUlqRCxFQUFPLEdBQ1B4TyxFQUFPaVMsR0FBTyxHQUVkcEUsR0FEVTRELEdBQVEsSUFDRHdxRCxPQUFTSCxFQUEyQjk2RCxtQkFFaERxRixFQUFJLEVBQUdBLEVBQUltMUQsRUFBT2oxRCxPQUFRRixJQUFLLENBQ3RDLElBQUlILEVBQVFzMUQsRUFBT24xRCxHQUVuQixHQUFxQixpQkFBVkgsRUFBWCxDQU1BLElBQ0k0c0QsRUFEQWp4RCxFQUFRN0IsRUFBS2tHLEVBQU1xRSxNQUd2QixHQUFhLE1BQVQxSSxFQUFlLENBQ2pCLEdBQUlxRSxFQUFNMjBELFNBQVUsQ0FFZDMwRCxFQUFNNDBELFVBQ1J0c0QsR0FBUXRJLEVBQU15MEQsUUFHaEIsU0FFQSxNQUFNLElBQUk1MEQsVUFBVSxhQUFlRyxFQUFNcUUsS0FBTyxtQkFJcEQsR0FBSWt3RCxFQUFRNTRELEdBQVosQ0FDRSxJQUFLcUUsRUFBTWk4QixPQUNULE1BQU0sSUFBSXA4QixVQUFVLGFBQWVHLEVBQU1xRSxLQUFPLGtDQUFvQzBDLEtBQUtJLFVBQVV4TCxHQUFTLEtBRzlHLEdBQXFCLElBQWpCQSxFQUFNMEUsT0FBYyxDQUN0QixHQUFJTCxFQUFNMjBELFNBQ1IsU0FFQSxNQUFNLElBQUk5MEQsVUFBVSxhQUFlRyxFQUFNcUUsS0FBTyxxQkFJcEQsSUFBSyxJQUFJbVEsRUFBSSxFQUFHQSxFQUFJN1ksRUFBTTBFLE9BQVFtVSxJQUFLLENBR3JDLEdBRkFvNEMsRUFBVWpsRCxFQUFPaE0sRUFBTTZZLEtBRWxCc2hELEVBQVEzMUQsR0FBR2dKLEtBQUt5akQsR0FDbkIsTUFBTSxJQUFJL3NELFVBQVUsaUJBQW1CRyxFQUFNcUUsS0FBTyxlQUFpQnJFLEVBQU1zMEMsUUFBVSxvQkFBc0J2dEMsS0FBS0ksVUFBVXlsRCxHQUFXLEtBR3ZJdGtELElBQWUsSUFBTmtNLEVBQVV4VSxFQUFNeTBELE9BQVN6MEQsRUFBTTAwRCxXQUFhOUgsT0FwQnpELENBNEJBLEdBRkFBLEVBQVU1c0QsRUFBTTYwRCxTQTVFYmdCLFVBNEV1Q2w2RCxHQTVFeEJtSCxRQUFRLFNBQVMsU0FBVS9CLEdBQy9DLE1BQU8sSUFBTUEsRUFBRTZMLFdBQVcsR0FBR2xOLFNBQVMsSUFBSTNELGlCQTJFVzRMLEVBQU9oTSxJQUVyRG02RCxFQUFRMzFELEdBQUdnSixLQUFLeWpELEdBQ25CLE1BQU0sSUFBSS9zRCxVQUFVLGFBQWVHLEVBQU1xRSxLQUFPLGVBQWlCckUsRUFBTXMwQyxRQUFVLG9CQUFzQnNZLEVBQVUsS0FHbkh0a0QsR0FBUXRJLEVBQU15MEQsT0FBUzdILFFBckRyQnRrRCxHQUFRdEksRUF3RFosT0FBT3NJLEdBVVgsU0FBU3F0RCxFQUFjbHBELEdBQ3JCLE9BQU9BLEVBQUkzSixRQUFRLDZCQUE4QixRQVNuRCxTQUFTNHlELEVBQWFsN0IsR0FDcEIsT0FBT0EsRUFBTTEzQixRQUFRLGdCQUFpQixRQVV4QyxTQUFTZ3lELEVBQVl4cUMsRUFBSTVrQixHQUV2QixPQURBNGtCLEVBQUc1a0IsS0FBT0EsRUFDSDRrQixFQVNULFNBQVNDLEVBQU90bkIsR0FDZCxPQUFPQSxHQUFXQSxFQUFRK3lELFVBQVksR0FBSyxJQXdFN0MsU0FBU2YsRUFBZ0JLLEVBQVE1dkQsRUFBTXpDLEdBQ2hDc3hELEVBQVE3dUQsS0FDWHpDLEVBQWtDeUMsR0FBUXpDLEVBQzFDeUMsRUFBTyxJQVVULElBTEEsSUFBSXV3RCxHQUZKaHpELEVBQVVBLEdBQVcsSUFFQWd6RCxPQUNqQnovQyxHQUFzQixJQUFoQnZULEVBQVF1VCxJQUNkMC9DLEVBQVEsR0FHSC8xRCxFQUFJLEVBQUdBLEVBQUltMUQsRUFBT2oxRCxPQUFRRixJQUFLLENBQ3RDLElBQUlILEVBQVFzMUQsRUFBT24xRCxHQUVuQixHQUFxQixpQkFBVkgsRUFDVGsyRCxHQUFTUCxFQUFhMzFELE9BQ2pCLENBQ0wsSUFBSXkwRCxFQUFTa0IsRUFBYTMxRCxFQUFNeTBELFFBQzVCem5DLEVBQVUsTUFBUWh0QixFQUFNczBDLFFBQVUsSUFFdEM1dUMsRUFBSy9FLEtBQUtYLEdBRU5BLEVBQU1pOEIsU0FDUmpQLEdBQVcsTUFBUXluQyxFQUFTem5DLEVBQVUsTUFheENrcEMsR0FOSWxwQyxFQUpBaHRCLEVBQU0yMEQsU0FDSDMwRCxFQUFNNDBELFFBR0NILEVBQVMsSUFBTXpuQyxFQUFVLEtBRnpCLE1BQVF5bkMsRUFBUyxJQUFNem5DLEVBQVUsTUFLbkN5bkMsRUFBUyxJQUFNem5DLEVBQVUsS0FPekMsSUFBSTBuQyxFQUFZaUIsRUFBYTF5RCxFQUFReXhELFdBQWEsS0FDOUN5QixFQUFvQkQsRUFBTWh4RCxPQUFPd3ZELEVBQVVyMEQsVUFBWXEwRCxFQWtCM0QsT0FaS3VCLElBQ0hDLEdBQVNDLEVBQW9CRCxFQUFNaHhELE1BQU0sR0FBSXd2RCxFQUFVcjBELFFBQVU2MUQsR0FBUyxNQUFReEIsRUFBWSxXQUk5RndCLEdBREUxL0MsRUFDTyxJQUlBeS9DLEdBQVVFLEVBQW9CLEdBQUssTUFBUXpCLEVBQVksTUFHM0RJLEVBQVcsSUFBSS9yRCxPQUFPLElBQU1tdEQsRUFBTzNyQyxFQUFNdG5CLElBQVd5QyxpQ0NoWTdELElBQUkwd0QsRUFBdUIsRUFBUSxLQUVuQyxTQUFTQyxLQUNULFNBQVNDLEtBQ1RBLEVBQXVCQyxrQkFBb0JGLEVBRTNDejlELEVBQU9DLFFBQVUsV0FDZixTQUFTMjlELEVBQUtwL0IsRUFBT3EvQixFQUFVQyxFQUFlbnNELEVBQVVvc0QsRUFBY0MsR0FDcEUsR0FBSUEsSUFBV1IsRUFBZixDQUlBLElBQUl4NkQsRUFBTSxJQUFJK0gsTUFDWixtTEFLRixNQURBL0gsRUFBSXlJLEtBQU8sc0JBQ0x6SSxHQUdSLFNBQVNpN0QsSUFDUCxPQUFPTCxFQUZUQSxFQUFLTSxXQUFhTixFQU1sQixJQUFJTyxFQUFpQixDQUNuQjc4QyxNQUFPczhDLEVBQ1BRLE9BQVFSLEVBQ1JTLEtBQU1ULEVBQ05ucUMsS0FBTW1xQyxFQUNOanlELE9BQVFpeUQsRUFDUmw2QyxPQUFRazZDLEVBQ1JwMUMsT0FBUW8xQyxFQUNSeGlDLE9BQVF3aUMsRUFFUi9tQixJQUFLK21CLEVBQ0xVLFFBQVNMLEVBQ1QxN0MsUUFBU3E3QyxFQUNUVyxZQUFhWCxFQUNiWSxXQUFZUCxFQUNaaGtDLEtBQU0yakMsRUFDTmEsU0FBVVIsRUFDVlMsTUFBT1QsRUFDUFUsVUFBV1YsRUFDWFcsTUFBT1gsRUFDUFksTUFBT1osRUFFUGEsZUFBZ0JwQixFQUNoQkMsa0JBQW1CRixHQUtyQixPQUZBVSxFQUFlWSxVQUFZWixFQUVwQkEsbUJDOUNQbitELEVBQU9DLFFBQVUsRUFBUSxLQUFSLHlCQ05uQkQsRUFBT0MsUUFGb0IsZ0ZDRVYrK0QsRUFBRyxFQUFRLE1BQVM5eUMsRUFBRSxFQUFRLE1BQWlCNHRCLEVBQUUsRUFBUSxNQUFhLFNBQVN0WCxFQUFFN3VCLEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRXhMLEVBQUUsRUFBRUEsRUFBRTJHLFVBQVVySCxPQUFPVSxJQUFJeUwsR0FBRyxXQUFXMVIsbUJBQW1CNE0sVUFBVTNHLElBQUksTUFBTSx5QkFBeUJ3TCxFQUFFLFdBQVdDLEVBQUUsaUhBQWlILElBQUlvckQsRUFBRyxNQUFNajBELE1BQU15M0IsRUFBRSxNQUFNLElBQUl5OEIsRUFBRyxJQUFJbFUsSUFBSW1VLEVBQUcsR0FBRyxTQUFTQyxFQUFHeHJELEVBQUVDLEdBQUd3ckQsRUFBR3pyRCxFQUFFQyxHQUFHd3JELEVBQUd6ckQsRUFBRSxVQUFVQyxHQUMzZSxTQUFTd3JELEVBQUd6ckQsRUFBRUMsR0FBVyxJQUFSc3JELEVBQUd2ckQsR0FBR0MsRUFBTUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFbk0sT0FBT2tNLElBQUlzckQsRUFBR241QyxJQUFJbFMsRUFBRUQsSUFDekQsSUFBSTByRCxJQUFLLG9CQUFxQjN0RCxhQUFRLElBQXFCQSxPQUFPekIsZUFBVSxJQUFxQnlCLE9BQU96QixTQUFTYSxlQUFld3VELEVBQUcsOFZBQThWQyxFQUFHMXlELE9BQU81RyxVQUFVbU4sZUFDcmZvc0QsRUFBRyxHQUFHQyxFQUFHLEdBQytNLFNBQVM3aUMsRUFBRWpwQixFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEVBQUVxRyxFQUFFNGYsR0FBRzF0QixLQUFLNjRELGdCQUFnQixJQUFJOXJELEdBQUcsSUFBSUEsR0FBRyxJQUFJQSxFQUFFL00sS0FBSzg0RCxjQUFjeHJCLEVBQUV0dEMsS0FBSys0RCxtQkFBbUJ0eEQsRUFBRXpILEtBQUtnNUQsZ0JBQWdCMTNELEVBQUV0QixLQUFLaTVELGFBQWFuc0QsRUFBRTlNLEtBQUt6QixLQUFLd08sRUFBRS9NLEtBQUtrNUQsWUFBWXByRCxFQUFFOU4sS0FBS201RCxrQkFBa0J6ckMsRUFBRSxJQUFJMHJDLEVBQUUsR0FDbmIsdUlBQXVJanVELE1BQU0sS0FBS3ZOLFNBQVEsU0FBU2tQLEdBQUdzc0QsRUFBRXRzRCxHQUFHLElBQUlpcEIsRUFBRWpwQixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLGtCQUFrQixDQUFDLFlBQVksU0FBUyxDQUFDLFVBQVUsT0FBTyxDQUFDLFlBQVksZUFBZWxQLFNBQVEsU0FBU2tQLEdBQUcsSUFBSUMsRUFBRUQsRUFBRSxHQUFHc3NELEVBQUVyc0QsR0FBRyxJQUFJZ3BCLEVBQUVocEIsRUFBRSxHQUFFLEVBQUdELEVBQUUsR0FBRyxNQUFLLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixZQUFZLGFBQWEsU0FBU2xQLFNBQVEsU0FBU2tQLEdBQUdzc0QsRUFBRXRzRCxHQUFHLElBQUlpcEIsRUFBRWpwQixFQUFFLEdBQUUsRUFBR0EsRUFBRS9PLGNBQWMsTUFBSyxHQUFHLE1BQ3ZlLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUJILFNBQVEsU0FBU2tQLEdBQUdzc0QsRUFBRXRzRCxHQUFHLElBQUlpcEIsRUFBRWpwQixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSw4T0FBOE8zQixNQUFNLEtBQUt2TixTQUFRLFNBQVNrUCxHQUFHc3NELEVBQUV0c0QsR0FBRyxJQUFJaXBCLEVBQUVqcEIsRUFBRSxHQUFFLEVBQUdBLEVBQUUvTyxjQUFjLE1BQUssR0FBRyxNQUNyYixDQUFDLFVBQVUsV0FBVyxRQUFRLFlBQVlILFNBQVEsU0FBU2tQLEdBQUdzc0QsRUFBRXRzRCxHQUFHLElBQUlpcEIsRUFBRWpwQixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsWUFBWWxQLFNBQVEsU0FBU2tQLEdBQUdzc0QsRUFBRXRzRCxHQUFHLElBQUlpcEIsRUFBRWpwQixFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sT0FBTyxPQUFPLFFBQVFsUCxTQUFRLFNBQVNrUCxHQUFHc3NELEVBQUV0c0QsR0FBRyxJQUFJaXBCLEVBQUVqcEIsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLFNBQVNsUCxTQUFRLFNBQVNrUCxHQUFHc3NELEVBQUV0c0QsR0FBRyxJQUFJaXBCLEVBQUVqcEIsRUFBRSxHQUFFLEVBQUdBLEVBQUUvTyxjQUFjLE1BQUssR0FBRyxNQUFNLElBQUlzN0QsRUFBRyxnQkFBZ0IsU0FBU0MsRUFBR3hzRCxHQUFHLE9BQU9BLEVBQUUsR0FBR3hRLGNBSTNZLFNBQVNpOUQsRUFBR3pzRCxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHLElBQUk3bEMsRUFBRTJ4RCxFQUFFN3NELGVBQWVRLEdBQUdxc0QsRUFBRXJzRCxHQUFHLE1BQVcsT0FBT3RGLEVBQUUsSUFBSUEsRUFBRWxKLE1BQUsrdUMsR0FBTyxFQUFFdmdDLEVBQUVuTSxTQUFTLE1BQU1tTSxFQUFFLElBQUksTUFBTUEsRUFBRSxNQUFJLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLE9BUG5KLFNBQVlELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsR0FBRyxNQUFPdmdDLEdBRGdHLFNBQVlELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsR0FBRyxPQUFPaHNDLEdBQUcsSUFBSUEsRUFBRS9DLEtBQUssT0FBTSxFQUFHLGNBQWN3TyxHQUFHLElBQUssV0FBVyxJQUFLLFNBQVMsT0FBTSxFQUFHLElBQUssVUFBVSxPQUFHdWdDLElBQWMsT0FBT2hzQyxHQUFTQSxFQUFFdTNELGdCQUFtRCxXQUFuQy9yRCxFQUFFQSxFQUFFL08sY0FBYzBILE1BQU0sRUFBRSxLQUFzQixVQUFVcUgsR0FBRSxRQUFRLE9BQU0sR0FDL1Qwc0QsQ0FBRzFzRCxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHLE9BQU0sRUFBRyxHQUFHQSxFQUFFLE9BQU0sRUFBRyxHQUFHLE9BQU9oc0MsRUFBRSxPQUFPQSxFQUFFL0MsTUFBTSxLQUFLLEVBQUUsT0FBT3dPLEVBQUUsS0FBSyxFQUFFLE9BQU0sSUFBS0EsRUFBRSxLQUFLLEVBQUUsT0FBTzgvQixNQUFNOS9CLEdBQUcsS0FBSyxFQUFFLE9BQU84L0IsTUFBTTkvQixJQUFJLEVBQUVBLEVBQUUsT0FBTSxFQU9yRDBzRCxDQUFHMXNELEVBQUV6TCxFQUFFbUcsRUFBRTZsQyxLQUFLaHNDLEVBQUUsTUFBTWdzQyxHQUFHLE9BQU83bEMsRUFScEwsU0FBWXFGLEdBQUcsUUFBRzRyRCxFQUFHcjBELEtBQUt1MEQsRUFBRzlyRCxLQUFlNHJELEVBQUdyMEQsS0FBS3MwRCxFQUFHN3JELEtBQWUyckQsRUFBRy91RCxLQUFLb0QsR0FBVThyRCxFQUFHOXJELElBQUcsR0FBRzZyRCxFQUFHN3JELElBQUcsR0FBUyxJQVFzRTRzRCxDQUFHM3NELEtBQUssT0FBT3pMLEVBQUV3TCxFQUFFNnNELGdCQUFnQjVzRCxHQUFHRCxFQUFFMUMsYUFBYTJDLEVBQUUsR0FBR3pMLElBQUltRyxFQUFFdXhELGdCQUFnQmxzRCxFQUFFckYsRUFBRXd4RCxjQUFjLE9BQU8zM0QsRUFBRSxJQUFJbUcsRUFBRWxKLE1BQVEsR0FBRytDLEdBQUd5TCxFQUFFdEYsRUFBRXF4RCxjQUFjeHJCLEVBQUU3bEMsRUFBRXN4RCxtQkFBbUIsT0FBT3ozRCxFQUFFd0wsRUFBRTZzRCxnQkFBZ0I1c0QsSUFBYXpMLEVBQUUsS0FBWG1HLEVBQUVBLEVBQUVsSixPQUFjLElBQUlrSixJQUFHLElBQUtuRyxFQUFFLEdBQUcsR0FBR0EsRUFBRWdzQyxFQUFFeGdDLEVBQUU4c0QsZUFBZXRzQixFQUFFdmdDLEVBQUV6TCxHQUFHd0wsRUFBRTFDLGFBQWEyQyxFQUFFekwsTUFINWQsMGpDQUEwakM2SixNQUFNLEtBQUt2TixTQUFRLFNBQVNrUCxHQUFHLElBQUlDLEVBQUVELEVBQUV6SixRQUFRZzJELEVBQ3ptQ0MsR0FBSUYsRUFBRXJzRCxHQUFHLElBQUlncEIsRUFBRWhwQixFQUFFLEdBQUUsRUFBR0QsRUFBRSxNQUFLLEdBQUcsTUFBTSwyRUFBMkUzQixNQUFNLEtBQUt2TixTQUFRLFNBQVNrUCxHQUFHLElBQUlDLEVBQUVELEVBQUV6SixRQUFRZzJELEVBQUdDLEdBQUlGLEVBQUVyc0QsR0FBRyxJQUFJZ3BCLEVBQUVocEIsRUFBRSxHQUFFLEVBQUdELEVBQUUsZ0NBQStCLEdBQUcsTUFBTSxDQUFDLFdBQVcsV0FBVyxhQUFhbFAsU0FBUSxTQUFTa1AsR0FBRyxJQUFJQyxFQUFFRCxFQUFFekosUUFBUWcyRCxFQUFHQyxHQUFJRixFQUFFcnNELEdBQUcsSUFBSWdwQixFQUFFaHBCLEVBQUUsR0FBRSxFQUFHRCxFQUFFLHdDQUF1QyxHQUFHLE1BQU0sQ0FBQyxXQUFXLGVBQWVsUCxTQUFRLFNBQVNrUCxHQUFHc3NELEVBQUV0c0QsR0FBRyxJQUFJaXBCLEVBQUVqcEIsRUFBRSxHQUFFLEVBQUdBLEVBQUUvTyxjQUFjLE1BQUssR0FBRyxNQUMvY3E3RCxFQUFFUyxVQUFVLElBQUk5akMsRUFBRSxZQUFZLEdBQUUsRUFBRyxhQUFhLGdDQUErQixHQUFHLEdBQUksQ0FBQyxNQUFNLE9BQU8sU0FBUyxjQUFjbjRCLFNBQVEsU0FBU2tQLEdBQUdzc0QsRUFBRXRzRCxHQUFHLElBQUlpcEIsRUFBRWpwQixFQUFFLEdBQUUsRUFBR0EsRUFBRS9PLGNBQWMsTUFBSyxHQUFHLE1BRXpMLElBQUkrN0QsRUFBRzNCLEVBQUc0QixtREFBbURDLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUFNQyxFQUFHLE1BQU1DLEVBQUcsTUFBTUMsRUFBRyxNQUNoTixHQUFHLG1CQUFvQi8xQyxRQUFRQSxPQUFPZzJDLElBQUksQ0FBQyxJQUFJNTFCLEVBQUVwZ0IsT0FBT2cyQyxJQUFJakIsRUFBRzMwQixFQUFFLGlCQUFpQjQwQixFQUFHNTBCLEVBQUUsZ0JBQWdCNjBCLEVBQUc3MEIsRUFBRSxrQkFBa0I4MEIsRUFBRzkwQixFQUFFLHFCQUFxQiswQixFQUFHLzBCLEVBQUUsa0JBQWtCZzFCLEVBQUdoMUIsRUFBRSxrQkFBa0JpMUIsRUFBR2oxQixFQUFFLGlCQUFpQmsxQixFQUFHbDFCLEVBQUUscUJBQXFCbTFCLEVBQUduMUIsRUFBRSxrQkFBa0JvMUIsRUFBR3AxQixFQUFFLHVCQUF1QnExQixFQUFHcjFCLEVBQUUsY0FBY3MxQixFQUFHdDFCLEVBQUUsY0FBY3UxQixFQUFHdjFCLEVBQUUsZUFBZUEsRUFBRSxlQUFldzFCLEVBQUd4MUIsRUFBRSxtQkFBbUJ5MUIsRUFBR3oxQixFQUFFLDBCQUEwQjAxQixFQUFHMTFCLEVBQUUsbUJBQW1CMjFCLEVBQUczMUIsRUFBRSx1QkFDeGMsSUFBbUw2MUIsRUFBL0tDLEVBQUcsbUJBQW9CbDJDLFFBQVFBLE9BQU8vTSxTQUFTLFNBQVNrakQsRUFBR3R1RCxHQUFHLE9BQUcsT0FBT0EsR0FBRyxpQkFBa0JBLEVBQVMsS0FBd0MsbUJBQW5DQSxFQUFFcXVELEdBQUlydUQsRUFBRXF1RCxJQUFLcnVELEVBQUUsZUFBMENBLEVBQUUsS0FBWSxTQUFTdXVELEVBQUd2dUQsR0FBRyxRQUFHLElBQVNvdUQsRUFBRyxJQUFJLE1BQU1oM0QsUUFBUyxNQUFNNUMsR0FBRyxJQUFJeUwsRUFBRXpMLEVBQUU0RCxNQUFNc0MsT0FBTzZCLE1BQU0sZ0JBQWdCNnhELEVBQUdudUQsR0FBR0EsRUFBRSxJQUFJLEdBQUcsTUFBTSxLQUFLbXVELEVBQUdwdUQsRUFBRSxJQUFJd3VELEdBQUcsRUFDalUsU0FBU0MsRUFBR3p1RCxFQUFFQyxHQUFHLElBQUlELEdBQUd3dUQsRUFBRyxNQUFNLEdBQUdBLEdBQUcsRUFBRyxJQUFJaDZELEVBQUU0QyxNQUFNczNELGtCQUFrQnQzRCxNQUFNczNELHVCQUFrQixFQUFPLElBQUksR0FBR3p1RCxFQUFFLEdBQUdBLEVBQUUsV0FBVyxNQUFNN0ksU0FBVThCLE9BQU93SSxlQUFlekIsRUFBRTNOLFVBQVUsUUFBUSxDQUFDeVQsSUFBSSxXQUFXLE1BQU0zTyxXQUFZLGlCQUFrQjhuQixTQUFTQSxRQUFRRSxVQUFVLENBQUMsSUFBSUYsUUFBUUUsVUFBVW5mLEVBQUUsSUFBSSxNQUFNbU8sR0FBRyxJQUFJb3lCLEVBQUVweUIsRUFBRThRLFFBQVFFLFVBQVVwZixFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJQSxFQUFFMUksT0FBTyxNQUFNNlcsR0FBR295QixFQUFFcHlCLEVBQUVwTyxFQUFFekksS0FBSzBJLEVBQUUzTixlQUFlLENBQUMsSUFBSSxNQUFNOEUsUUFBUyxNQUFNZ1gsR0FBR295QixFQUFFcHlCLEVBQUVwTyxLQUFLLE1BQU1vTyxHQUFHLEdBQUdBLEdBQUdveUIsR0FBRyxpQkFBa0JweUIsRUFBRWhXLE1BQU0sQ0FBQyxJQUFJLElBQUl1QyxFQUFFeVQsRUFBRWhXLE1BQU1pRyxNQUFNLE1BQ25mMkMsRUFBRXcvQixFQUFFcG9DLE1BQU1pRyxNQUFNLE1BQU11aUIsRUFBRWptQixFQUFFN0csT0FBTyxFQUFFZ0QsRUFBRWtLLEVBQUVsTixPQUFPLEVBQUUsR0FBRzhzQixHQUFHLEdBQUc5cEIsR0FBRzZELEVBQUVpbUIsS0FBSzVmLEVBQUVsSyxJQUFJQSxJQUFJLEtBQUssR0FBRzhwQixHQUFHLEdBQUc5cEIsRUFBRThwQixJQUFJOXBCLElBQUksR0FBRzZELEVBQUVpbUIsS0FBSzVmLEVBQUVsSyxHQUFHLENBQUMsR0FBRyxJQUFJOHBCLEdBQUcsSUFBSTlwQixFQUFHLE1BQU04cEIsSUFBUSxJQUFKOXBCLEdBQVM2RCxFQUFFaW1CLEtBQUs1ZixFQUFFbEssR0FBRyxNQUFNLEtBQUs2RCxFQUFFaW1CLEdBQUdycUIsUUFBUSxXQUFXLGNBQWMsR0FBR3FxQixHQUFHLEdBQUc5cEIsR0FBRyxRQUFRLFFBQVEwM0QsR0FBRyxFQUFHcDNELE1BQU1zM0Qsa0JBQWtCbDZELEVBQUUsT0FBT3dMLEVBQUVBLEVBQUVBLEVBQUVnbUQsYUFBYWhtRCxFQUFFbEksS0FBSyxJQUFJeTJELEVBQUd2dUQsR0FBRyxHQUM3VCxTQUFTMnVELEVBQUczdUQsR0FBRyxPQUFPQSxFQUFFb1EsS0FBSyxLQUFLLEVBQUUsT0FBT20rQyxFQUFHdnVELEVBQUV2TyxNQUFNLEtBQUssR0FBRyxPQUFPODhELEVBQUcsUUFBUSxLQUFLLEdBQUcsT0FBT0EsRUFBRyxZQUFZLEtBQUssR0FBRyxPQUFPQSxFQUFHLGdCQUFnQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFTRSxFQUFHenVELEVBQUV2TyxNQUFLLEdBQU0sS0FBSyxHQUFHLE9BQVNnOUQsRUFBR3p1RCxFQUFFdk8sS0FBS3UxRCxRQUFPLEdBQU0sS0FBSyxHQUFHLE9BQVN5SCxFQUFHenVELEVBQUV2TyxLQUFLbTlELFNBQVEsR0FBTSxLQUFLLEVBQUUsT0FBU0gsRUFBR3p1RCxFQUFFdk8sTUFBSyxHQUFNLFFBQVEsTUFBTSxJQUM5VCxTQUFTbzlELEVBQUc3dUQsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9BLEVBQUVnbUQsYUFBYWhtRCxFQUFFbEksTUFBTSxLQUFLLEdBQUcsaUJBQWtCa0ksRUFBRSxPQUFPQSxFQUFFLE9BQU9BLEdBQUcsS0FBS290RCxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sU0FBUyxLQUFLRyxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sYUFBYSxLQUFLSyxFQUFHLE1BQU0sV0FBVyxLQUFLQyxFQUFHLE1BQU0sZUFBZSxHQUFHLGlCQUFrQjN0RCxFQUFFLE9BQU9BLEVBQUU4dUQsVUFBVSxLQUFLdEIsRUFBRyxPQUFPeHRELEVBQUVnbUQsYUFBYSxXQUFXLFlBQVksS0FBS3VILEVBQUcsT0FBT3Z0RCxFQUFFK3VELFNBQVMvSSxhQUFhLFdBQVcsWUFBWSxLQUFLeUgsRUFBRyxJQUFJeHRELEVBQUVELEVBQUVnbkQsT0FDbmQsT0FEMGQvbUQsRUFBRUEsRUFBRStsRCxhQUFhL2xELEVBQUVuSSxNQUFNLEdBQzVla0ksRUFBRWdtRCxjQUFjLEtBQUsvbEQsRUFBRSxjQUFjQSxFQUFFLElBQUksY0FBYyxLQUFLMnRELEVBQUcsT0FBT2lCLEVBQUc3dUQsRUFBRXZPLE1BQU0sS0FBS3E4RCxFQUFHLE9BQU9lLEVBQUc3dUQsRUFBRTR1RCxTQUFTLEtBQUtmLEVBQUc1dEQsRUFBRUQsRUFBRWd2RCxTQUFTaHZELEVBQUVBLEVBQUVpdkQsTUFBTSxJQUFJLE9BQU9KLEVBQUc3dUQsRUFBRUMsSUFBSSxNQUFNekwsS0FBSyxPQUFPLEtBQUssU0FBUzA2RCxFQUFHbHZELEdBQUcsY0FBY0EsR0FBRyxJQUFLLFVBQVUsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxZQUFZLE9BQU9BLEVBQUUsUUFBUSxNQUFNLElBQUksU0FBU212RCxFQUFHbnZELEdBQUcsSUFBSUMsRUFBRUQsRUFBRXZPLEtBQUssT0FBT3VPLEVBQUVBLEVBQUVvdkQsV0FBVyxVQUFVcHZELEVBQUUvTyxnQkFBZ0IsYUFBYWdQLEdBQUcsVUFBVUEsR0FFMVosU0FBU292RCxFQUFHcnZELEdBQUdBLEVBQUVzdkQsZ0JBQWdCdHZELEVBQUVzdkQsY0FEdkQsU0FBWXR2RCxHQUFHLElBQUlDLEVBQUVrdkQsRUFBR252RCxHQUFHLFVBQVUsUUFBUXhMLEVBQUUwRSxPQUFPb2IseUJBQXlCdFUsRUFBRU4sWUFBWXBOLFVBQVUyTixHQUFHdWdDLEVBQUUsR0FBR3hnQyxFQUFFQyxHQUFHLElBQUlELEVBQUVQLGVBQWVRLFNBQUksSUFBcUJ6TCxHQUFHLG1CQUFvQkEsRUFBRXdQLEtBQUssbUJBQW9CeFAsRUFBRXVSLElBQUksQ0FBQyxJQUFJcEwsRUFBRW5HLEVBQUV3UCxJQUFJaEQsRUFBRXhNLEVBQUV1UixJQUFpTCxPQUE3SzdNLE9BQU93SSxlQUFlMUIsRUFBRUMsRUFBRSxDQUFDZ0IsY0FBYSxFQUFHK0MsSUFBSSxXQUFXLE9BQU9ySixFQUFFcEQsS0FBS3JFLE9BQU82UyxJQUFJLFNBQVMvRixHQUFHd2dDLEVBQUUsR0FBR3hnQyxFQUFFZ0IsRUFBRXpKLEtBQUtyRSxLQUFLOE0sTUFBTTlHLE9BQU93SSxlQUFlMUIsRUFBRUMsRUFBRSxDQUFDc1YsV0FBVy9nQixFQUFFK2dCLGFBQW1CLENBQUNnNkMsU0FBUyxXQUFXLE9BQU8vdUIsR0FBR2d2QixTQUFTLFNBQVN4dkQsR0FBR3dnQyxFQUFFLEdBQUd4Z0MsR0FBR3l2RCxhQUFhLFdBQVd6dkQsRUFBRXN2RCxjQUN4ZixZQUFZdHZELEVBQUVDLE1BQXVEeXZELENBQUcxdkQsSUFBSSxTQUFTMnZELEVBQUczdkQsR0FBRyxJQUFJQSxFQUFFLE9BQU0sRUFBRyxJQUFJQyxFQUFFRCxFQUFFc3ZELGNBQWMsSUFBSXJ2RCxFQUFFLE9BQU0sRUFBRyxJQUFJekwsRUFBRXlMLEVBQUVzdkQsV0FBZS91QixFQUFFLEdBQXFELE9BQWxEeGdDLElBQUl3Z0MsRUFBRTJ1QixFQUFHbnZELEdBQUdBLEVBQUU0dkQsUUFBUSxPQUFPLFFBQVE1dkQsRUFBRTVRLFFBQU80USxFQUFFd2dDLEtBQWFoc0MsSUFBR3lMLEVBQUV1dkQsU0FBU3h2RCxJQUFHLEdBQU8sU0FBUzZ2RCxFQUFHN3ZELEdBQXdELFFBQUcsS0FBeERBLEVBQUVBLElBQUksb0JBQXFCMUQsU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPMEQsRUFBRTh2RCxlQUFlOXZELEVBQUVrOUMsS0FBSyxNQUFNajlDLEdBQUcsT0FBT0QsRUFBRWs5QyxNQUMvWixTQUFTNlMsRUFBRy92RCxFQUFFQyxHQUFHLElBQUl6TCxFQUFFeUwsRUFBRTJ2RCxRQUFRLE9BQU9yM0MsRUFBRSxHQUFHdFksRUFBRSxDQUFDK3ZELG9CQUFlLEVBQU9DLGtCQUFhLEVBQU83Z0UsV0FBTSxFQUFPd2dFLFFBQVEsTUFBTXA3RCxFQUFFQSxFQUFFd0wsRUFBRWt3RCxjQUFjQyxpQkFBaUIsU0FBU0MsR0FBR3B3RCxFQUFFQyxHQUFHLElBQUl6TCxFQUFFLE1BQU15TCxFQUFFZ3dELGFBQWEsR0FBR2h3RCxFQUFFZ3dELGFBQWF6dkIsRUFBRSxNQUFNdmdDLEVBQUUydkQsUUFBUTN2RCxFQUFFMnZELFFBQVEzdkQsRUFBRSt2RCxlQUFleDdELEVBQUUwNkQsRUFBRyxNQUFNanZELEVBQUU3USxNQUFNNlEsRUFBRTdRLE1BQU1vRixHQUFHd0wsRUFBRWt3RCxjQUFjLENBQUNDLGVBQWUzdkIsRUFBRTZ2QixhQUFhNzdELEVBQUU4N0QsV0FBVyxhQUFhcndELEVBQUV4TyxNQUFNLFVBQVV3TyxFQUFFeE8sS0FBSyxNQUFNd08sRUFBRTJ2RCxRQUFRLE1BQU0zdkQsRUFBRTdRLE9BQU8sU0FBU21oRSxHQUFHdndELEVBQUVDLEdBQWUsT0FBWkEsRUFBRUEsRUFBRTJ2RCxVQUFpQm5ELEVBQUd6c0QsRUFBRSxVQUFVQyxHQUFFLEdBQzNkLFNBQVN1d0QsR0FBR3h3RCxFQUFFQyxHQUFHc3dELEdBQUd2d0QsRUFBRUMsR0FBRyxJQUFJekwsRUFBRTA2RCxFQUFHanZELEVBQUU3USxPQUFPb3hDLEVBQUV2Z0MsRUFBRXhPLEtBQUssR0FBRyxNQUFNK0MsRUFBSyxXQUFXZ3NDLEdBQU0sSUFBSWhzQyxHQUFHLEtBQUt3TCxFQUFFNVEsT0FBTzRRLEVBQUU1USxPQUFPb0YsS0FBRXdMLEVBQUU1USxNQUFNLEdBQUdvRixHQUFPd0wsRUFBRTVRLFFBQVEsR0FBR29GLElBQUl3TCxFQUFFNVEsTUFBTSxHQUFHb0YsUUFBUSxHQUFHLFdBQVdnc0MsR0FBRyxVQUFVQSxFQUE4QixZQUEzQnhnQyxFQUFFNnNELGdCQUFnQixTQUFnQjVzRCxFQUFFUixlQUFlLFNBQVNneEQsR0FBR3p3RCxFQUFFQyxFQUFFeE8sS0FBSytDLEdBQUd5TCxFQUFFUixlQUFlLGlCQUFpQmd4RCxHQUFHendELEVBQUVDLEVBQUV4TyxLQUFLeTlELEVBQUdqdkQsRUFBRWd3RCxlQUFlLE1BQU1od0QsRUFBRTJ2RCxTQUFTLE1BQU0zdkQsRUFBRSt2RCxpQkFBaUJod0QsRUFBRWd3RCxpQkFBaUIvdkQsRUFBRSt2RCxnQkFDblosU0FBU1UsR0FBRzF3RCxFQUFFQyxFQUFFekwsR0FBRyxHQUFHeUwsRUFBRVIsZUFBZSxVQUFVUSxFQUFFUixlQUFlLGdCQUFnQixDQUFDLElBQUkrZ0MsRUFBRXZnQyxFQUFFeE8sS0FBSyxLQUFLLFdBQVcrdUMsR0FBRyxVQUFVQSxRQUFHLElBQVN2Z0MsRUFBRTdRLE9BQU8sT0FBTzZRLEVBQUU3USxPQUFPLE9BQU82USxFQUFFLEdBQUdELEVBQUVrd0QsY0FBY0csYUFBYTc3RCxHQUFHeUwsSUFBSUQsRUFBRTVRLFFBQVE0USxFQUFFNVEsTUFBTTZRLEdBQUdELEVBQUVpd0QsYUFBYWh3RCxFQUFXLE1BQVR6TCxFQUFFd0wsRUFBRWxJLFFBQWNrSSxFQUFFbEksS0FBSyxJQUFJa0ksRUFBRWd3RCxpQkFBaUJod0QsRUFBRWt3RCxjQUFjQyxlQUFlLEtBQUszN0QsSUFBSXdMLEVBQUVsSSxLQUFLdEQsR0FDdlYsU0FBU2k4RCxHQUFHendELEVBQUVDLEVBQUV6TCxHQUFNLFdBQVd5TCxHQUFHNHZELEVBQUc3dkQsRUFBRTJ3RCxpQkFBaUIzd0QsSUFBRSxNQUFNeEwsRUFBRXdMLEVBQUVpd0QsYUFBYSxHQUFHandELEVBQUVrd0QsY0FBY0csYUFBYXJ3RCxFQUFFaXdELGVBQWUsR0FBR3o3RCxJQUFJd0wsRUFBRWl3RCxhQUFhLEdBQUd6N0QsSUFBd0YsU0FBU284RCxHQUFHNXdELEVBQUVDLEdBQTZELE9BQTFERCxFQUFFdVksRUFBRSxDQUFDczRDLGNBQVMsR0FBUTV3RCxJQUFNQSxFQUFsSSxTQUFZRCxHQUFHLElBQUlDLEVBQUUsR0FBdUQsT0FBcERvckQsRUFBR3lGLFNBQVNoZ0UsUUFBUWtQLEdBQUUsU0FBU0EsR0FBRyxNQUFNQSxJQUFJQyxHQUFHRCxNQUFZQyxFQUFpRDh3RCxDQUFHOXdELEVBQUU0d0QsYUFBVTd3RCxFQUFFNndELFNBQVM1d0QsR0FBU0QsRUFDdlUsU0FBU2d4RCxHQUFHaHhELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQWUsR0FBWnhnQyxFQUFFQSxFQUFFdEosUUFBV3VKLEVBQUUsQ0FBQ0EsRUFBRSxHQUFHLElBQUksSUFBSXRGLEVBQUUsRUFBRUEsRUFBRW5HLEVBQUVWLE9BQU82RyxJQUFJc0YsRUFBRSxJQUFJekwsRUFBRW1HLEtBQUksRUFBRyxJQUFJbkcsRUFBRSxFQUFFQSxFQUFFd0wsRUFBRWxNLE9BQU9VLElBQUltRyxFQUFFc0YsRUFBRVIsZUFBZSxJQUFJTyxFQUFFeEwsR0FBR3BGLE9BQU80USxFQUFFeEwsR0FBR3k4RCxXQUFXdDJELElBQUlxRixFQUFFeEwsR0FBR3k4RCxTQUFTdDJELEdBQUdBLEdBQUc2bEMsSUFBSXhnQyxFQUFFeEwsR0FBRzA4RCxpQkFBZ0IsT0FBUSxDQUFtQixJQUFsQjE4RCxFQUFFLEdBQUcwNkQsRUFBRzE2RCxHQUFHeUwsRUFBRSxLQUFTdEYsRUFBRSxFQUFFQSxFQUFFcUYsRUFBRWxNLE9BQU82RyxJQUFJLENBQUMsR0FBR3FGLEVBQUVyRixHQUFHdkwsUUFBUW9GLEVBQWlELE9BQTlDd0wsRUFBRXJGLEdBQUdzMkQsVUFBUyxPQUFHendCLElBQUl4Z0MsRUFBRXJGLEdBQUd1MkQsaUJBQWdCLElBQVcsT0FBT2p4RCxHQUFHRCxFQUFFckYsR0FBR3cyRCxXQUFXbHhELEVBQUVELEVBQUVyRixJQUFJLE9BQU9zRixJQUFJQSxFQUFFZ3hELFVBQVMsSUFDcFksU0FBU0csR0FBR3B4RCxFQUFFQyxHQUFHLEdBQUcsTUFBTUEsRUFBRW94RCx3QkFBd0IsTUFBTWo2RCxNQUFNeTNCLEVBQUUsS0FBSyxPQUFPdFcsRUFBRSxHQUFHdFksRUFBRSxDQUFDN1EsV0FBTSxFQUFPNmdFLGtCQUFhLEVBQU9ZLFNBQVMsR0FBRzd3RCxFQUFFa3dELGNBQWNHLGVBQWUsU0FBU2lCLEdBQUd0eEQsRUFBRUMsR0FBRyxJQUFJekwsRUFBRXlMLEVBQUU3USxNQUFNLEdBQUcsTUFBTW9GLEVBQUUsQ0FBK0IsR0FBOUJBLEVBQUV5TCxFQUFFNHdELFNBQVM1d0QsRUFBRUEsRUFBRWd3RCxhQUFnQixNQUFNejdELEVBQUUsQ0FBQyxHQUFHLE1BQU15TCxFQUFFLE1BQU03SSxNQUFNeTNCLEVBQUUsS0FBSyxHQUFHLzRCLE1BQU00QyxRQUFRbEUsR0FBRyxDQUFDLEtBQUssR0FBR0EsRUFBRVYsUUFBUSxNQUFNc0QsTUFBTXkzQixFQUFFLEtBQUtyNkIsRUFBRUEsRUFBRSxHQUFHeUwsRUFBRXpMLEVBQUUsTUFBTXlMLElBQUlBLEVBQUUsSUFBSXpMLEVBQUV5TCxFQUFFRCxFQUFFa3dELGNBQWMsQ0FBQ0csYUFBYW5CLEVBQUcxNkQsSUFDL1ksU0FBUys4RCxHQUFHdnhELEVBQUVDLEdBQUcsSUFBSXpMLEVBQUUwNkQsRUFBR2p2RCxFQUFFN1EsT0FBT294QyxFQUFFMHVCLEVBQUdqdkQsRUFBRWd3RCxjQUFjLE1BQU16N0QsS0FBSUEsRUFBRSxHQUFHQSxLQUFNd0wsRUFBRTVRLFFBQVE0USxFQUFFNVEsTUFBTW9GLEdBQUcsTUFBTXlMLEVBQUVnd0QsY0FBY2p3RCxFQUFFaXdELGVBQWV6N0QsSUFBSXdMLEVBQUVpd0QsYUFBYXo3RCxJQUFJLE1BQU1nc0MsSUFBSXhnQyxFQUFFaXdELGFBQWEsR0FBR3p2QixHQUFHLFNBQVNneEIsR0FBR3h4RCxHQUFHLElBQUlDLEVBQUVELEVBQUV5eEQsWUFBWXh4RCxJQUFJRCxFQUFFa3dELGNBQWNHLGNBQWMsS0FBS3B3RCxHQUFHLE9BQU9BLElBQUlELEVBQUU1USxNQUFNNlEsR0FBRyxJQUFJeXhELEdBQVMsK0JBQy9TLFNBQVNDLEdBQUczeEQsR0FBRyxPQUFPQSxHQUFHLElBQUssTUFBTSxNQUFNLDZCQUE2QixJQUFLLE9BQU8sTUFBTSxxQ0FBcUMsUUFBUSxNQUFNLGdDQUFnQyxTQUFTNHhELEdBQUc1eEQsRUFBRUMsR0FBRyxPQUFPLE1BQU1ELEdBQUcsaUNBQWlDQSxFQUFFMnhELEdBQUcxeEQsR0FBRywrQkFBK0JELEdBQUcsa0JBQWtCQyxFQUFFLCtCQUErQkQsRUFDM1UsSUFBSTZ4RCxHQUFlN3hELEdBQVo4eEQsSUFBWTl4RCxHQUFzSixTQUFTQSxFQUFFQyxHQUFHLEdBRnVNLCtCQUVwTUQsRUFBRSt4RCxjQUF1QixjQUFjL3hELEVBQUVBLEVBQUVneUQsVUFBVS94RCxNQUFNLENBQTJGLEtBQTFGNHhELEdBQUdBLElBQUl2MUQsU0FBU2EsY0FBYyxRQUFVNjBELFVBQVUsUUFBUS94RCxFQUFFdXNCLFVBQVVyNUIsV0FBVyxTQUFhOE0sRUFBRTR4RCxHQUFHSSxXQUFXanlELEVBQUVpeUQsWUFBWWp5RCxFQUFFdXpCLFlBQVl2ekIsRUFBRWl5RCxZQUFZLEtBQUtoeUQsRUFBRWd5RCxZQUFZanlELEVBQUV1cUIsWUFBWXRxQixFQUFFZ3lELGNBQXJaLG9CQUFxQkMsT0FBT0EsTUFBTUMsd0JBQXdCLFNBQVNseUQsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxHQUFHdTNELE1BQU1DLHlCQUF3QixXQUFXLE9BQU9ueUQsR0FBRUMsRUFBRXpMLE9BQVV3TCxJQUN0SyxTQUFTb3lELEdBQUdweUQsRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSXpMLEVBQUV3TCxFQUFFaXlELFdBQVcsR0FBR3o5RCxHQUFHQSxJQUFJd0wsRUFBRXF5RCxXQUFXLElBQUk3OUQsRUFBRTg5RCxTQUF3QixZQUFkOTlELEVBQUUrOUQsVUFBVXR5RCxHQUFVRCxFQUFFeXhELFlBQVl4eEQsRUFDckgsSUFBSXV5RCxHQUFHLENBQUNDLHlCQUF3QixFQUFHQyxtQkFBa0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxTQUFRLEVBQUdDLGNBQWEsRUFBR0MsaUJBQWdCLEVBQUdDLGFBQVksRUFBR0MsU0FBUSxFQUFHQyxNQUFLLEVBQUdDLFVBQVMsRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGNBQWEsRUFBR0MsV0FBVSxFQUFHQyxVQUFTLEVBQUdDLFNBQVEsRUFBR0MsWUFBVyxFQUFHQyxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxlQUFjLEVBQUdDLGdCQUFlLEVBQUdDLGlCQUFnQixFQUFHQyxZQUFXLEVBQUdDLFdBQVUsRUFBR0MsWUFBVyxFQUFHQyxTQUFRLEVBQUdDLE9BQU0sRUFBR0MsU0FBUSxFQUFHQyxTQUFRLEVBQUdDLFFBQU8sRUFBR0MsUUFBTyxFQUFHQyxNQUFLLEVBQUdDLGFBQVksRUFDMWZDLGNBQWEsRUFBR0MsYUFBWSxFQUFHQyxpQkFBZ0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxlQUFjLEVBQUdDLGFBQVksR0FBSUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNLEtBQTZILFNBQVNDLEdBQUdwMUQsRUFBRUMsRUFBRXpMLEdBQUcsT0FBTyxNQUFNeUwsR0FBRyxrQkFBbUJBLEdBQUcsS0FBS0EsRUFBRSxHQUFHekwsR0FBRyxpQkFBa0J5TCxHQUFHLElBQUlBLEdBQUd1eUQsR0FBRy95RCxlQUFlTyxJQUFJd3lELEdBQUd4eUQsSUFBSSxHQUFHQyxHQUFHdkYsT0FBT3VGLEVBQUUsS0FDOVosU0FBU28xRCxHQUFHcjFELEVBQUVDLEdBQWEsSUFBSSxJQUFJekwsS0FBbEJ3TCxFQUFFQSxFQUFFcXFCLE1BQW1CcHFCLEVBQUUsR0FBR0EsRUFBRVIsZUFBZWpMLEdBQUcsQ0FBQyxJQUFJZ3NDLEVBQUUsSUFBSWhzQyxFQUFFekUsUUFBUSxNQUFNNEssRUFBRXk2RCxHQUFHNWdFLEVBQUV5TCxFQUFFekwsR0FBR2dzQyxHQUFHLFVBQVVoc0MsSUFBSUEsRUFBRSxZQUFZZ3NDLEVBQUV4Z0MsRUFBRXMxRCxZQUFZOWdFLEVBQUVtRyxHQUFHcUYsRUFBRXhMLEdBQUdtRyxHQURUekIsT0FBT0MsS0FBS3E1RCxJQUFJMWhFLFNBQVEsU0FBU2tQLEdBQUdtMUQsR0FBR3JrRSxTQUFRLFNBQVNtUCxHQUFHQSxFQUFFQSxFQUFFRCxFQUFFbEMsT0FBTyxHQUFHdE8sY0FBY3dRLEVBQUV1MUQsVUFBVSxHQUFHL0MsR0FBR3Z5RCxHQUFHdXlELEdBQUd4eUQsU0FDckcsSUFBSXcxRCxHQUFHajlDLEVBQUUsQ0FBQ2s5QyxVQUFTLEdBQUksQ0FBQ0MsTUFBSyxFQUFHMWtDLE1BQUssRUFBRzJrQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR3pwQyxPQUFNLEVBQUcwcEMsUUFBTyxFQUFHanJCLE1BQUssRUFBR3RvQixNQUFLLEVBQUd3ekMsT0FBTSxFQUFHMWhFLFFBQU8sRUFBRzJoRSxPQUFNLEVBQUdDLEtBQUksSUFDbFQsU0FBU0MsR0FBR3AyRCxFQUFFQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxHQUFHdTFELEdBQUd4MUQsS0FBSyxNQUFNQyxFQUFFNHdELFVBQVUsTUFBTTV3RCxFQUFFb3hELHlCQUF5QixNQUFNajZELE1BQU15M0IsRUFBRSxJQUFJN3VCLElBQUksR0FBRyxNQUFNQyxFQUFFb3hELHdCQUF3QixDQUFDLEdBQUcsTUFBTXB4RCxFQUFFNHdELFNBQVMsTUFBTXo1RCxNQUFNeTNCLEVBQUUsS0FBSyxHQUFLLGlCQUFrQjV1QixFQUFFb3hELDJCQUF5QixXQUFXcHhELEVBQUVveEQseUJBQXlCLE1BQU1qNkQsTUFBTXkzQixFQUFFLEtBQU0sR0FBRyxNQUFNNXVCLEVBQUVvcUIsT0FBTyxpQkFBa0JwcUIsRUFBRW9xQixNQUFNLE1BQU1qekIsTUFBTXkzQixFQUFFLE1BQzVWLFNBQVN3bkMsR0FBR3IyRCxFQUFFQyxHQUFHLElBQUksSUFBSUQsRUFBRWpRLFFBQVEsS0FBSyxNQUFNLGlCQUFrQmtRLEVBQUUydUIsR0FBRyxPQUFPNXVCLEdBQUcsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyxZQUFZLElBQUssZ0JBQWdCLElBQUssZ0JBQWdCLElBQUssbUJBQW1CLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLE9BQU0sRUFBRyxRQUFRLE9BQU0sR0FBSSxTQUFTczJELEdBQUd0MkQsR0FBNkYsT0FBMUZBLEVBQUVBLEVBQUV4SCxRQUFRd0gsRUFBRXUyRCxZQUFZeDRELFFBQVN5NEQsMEJBQTBCeDJELEVBQUVBLEVBQUV3MkQseUJBQWdDLElBQUl4MkQsRUFBRXN5RCxTQUFTdHlELEVBQUV5MkQsV0FBV3oyRCxFQUFFLElBQUkwMkQsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FDeGIsU0FBU0MsR0FBRzcyRCxHQUFHLEdBQUdBLEVBQUU4MkQsR0FBRzkyRCxHQUFHLENBQUMsR0FBRyxtQkFBb0IwMkQsR0FBRyxNQUFNdC9ELE1BQU15M0IsRUFBRSxNQUFNLElBQUk1dUIsRUFBRUQsRUFBRSsyRCxVQUFVOTJELElBQUlBLEVBQUUrMkQsR0FBRy8yRCxHQUFHeTJELEdBQUcxMkQsRUFBRSsyRCxVQUFVLzJELEVBQUV2TyxLQUFLd08sS0FBSyxTQUFTZzNELEdBQUdqM0QsR0FBRzIyRCxHQUFHQyxHQUFHQSxHQUFHeGlFLEtBQUs0TCxHQUFHNDJELEdBQUcsQ0FBQzUyRCxHQUFHMjJELEdBQUczMkQsRUFBRSxTQUFTazNELEtBQUssR0FBR1AsR0FBRyxDQUFDLElBQUkzMkQsRUFBRTIyRCxHQUFHMTJELEVBQUUyMkQsR0FBb0IsR0FBakJBLEdBQUdELEdBQUcsS0FBS0UsR0FBRzcyRCxHQUFNQyxFQUFFLElBQUlELEVBQUUsRUFBRUEsRUFBRUMsRUFBRW5NLE9BQU9rTSxJQUFJNjJELEdBQUc1MkQsRUFBRUQsS0FBSyxTQUFTbTNELEdBQUduM0QsRUFBRUMsR0FBRyxPQUFPRCxFQUFFQyxHQUFHLFNBQVNtM0QsR0FBR3AzRCxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEdBQUcsT0FBT3FGLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEVBQUU3bEMsR0FBRyxTQUFTMDhELE1BQU0sSUFBSUMsR0FBR0gsR0FBR0ksSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsS0FBUSxPQUFPZCxJQUFJLE9BQU9DLEtBQUdTLEtBQUtILE1BRTlaLFNBQVNRLEdBQUcxM0QsRUFBRUMsR0FBRyxJQUFJekwsRUFBRXdMLEVBQUUrMkQsVUFBVSxHQUFHLE9BQU92aUUsRUFBRSxPQUFPLEtBQUssSUFBSWdzQyxFQUFFdzJCLEdBQUd4aUUsR0FBRyxHQUFHLE9BQU9nc0MsRUFBRSxPQUFPLEtBQUtoc0MsRUFBRWdzQyxFQUFFdmdDLEdBQUdELEVBQUUsT0FBT0MsR0FBRyxJQUFLLFVBQVUsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyx1QkFBdUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLFlBQVksSUFBSyxtQkFBbUIsSUFBSyxnQkFBZ0J1Z0MsR0FBR0EsRUFBRTJ3QixZQUFxQjN3QixJQUFJLFlBQWJ4Z0MsRUFBRUEsRUFBRXZPLE9BQXVCLFVBQVV1TyxHQUFHLFdBQVdBLEdBQUcsYUFBYUEsSUFBSUEsR0FBR3dnQyxFQUFFLE1BQU14Z0MsRUFBRSxRQUFRQSxHQUFFLEVBQUcsR0FBR0EsRUFBRSxPQUFPLEtBQUssR0FBR3hMLEdBQUcsbUJBQ2xlQSxFQUFFLE1BQU00QyxNQUFNeTNCLEVBQUUsSUFBSTV1QixTQUFTekwsSUFBSSxPQUFPQSxFQUFFLElBQUltakUsSUFBRyxFQUFHLEdBQUdqTSxFQUFHLElBQUksSUFBSWtNLEdBQUcsR0FBRzErRCxPQUFPd0ksZUFBZWsyRCxHQUFHLFVBQVUsQ0FBQzV6RCxJQUFJLFdBQVcyekQsSUFBRyxLQUFNNTVELE9BQU8xTSxpQkFBaUIsT0FBT3VtRSxHQUFHQSxJQUFJNzVELE9BQU9oUSxvQkFBb0IsT0FBTzZwRSxHQUFHQSxJQUFJLE1BQU01M0QsSUFBRzIzRCxJQUFHLEVBQUcsU0FBU0UsR0FBRzczRCxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEVBQUVxRyxFQUFFNGYsRUFBRTlwQixFQUFFc1gsR0FBRyxJQUFJdmEsRUFBRWlDLE1BQU14RCxVQUFVcUcsTUFBTXBCLEtBQUs0RCxVQUFVLEdBQUcsSUFBSThFLEVBQUVsSyxNQUFNdkIsRUFBRVgsR0FBRyxNQUFNeWEsR0FBR3BiLEtBQUs0a0UsUUFBUXhwRCxJQUFJLElBQUl5cEQsSUFBRyxFQUFHQyxHQUFHLEtBQUtDLElBQUcsRUFBR0MsR0FBRyxLQUFLQyxHQUFHLENBQUNMLFFBQVEsU0FBUzkzRCxHQUFHKzNELElBQUcsRUFBR0MsR0FBR2g0RCxJQUFJLFNBQVNvNEQsR0FBR3A0RCxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEVBQUVxRyxFQUFFNGYsRUFBRTlwQixFQUFFc1gsR0FBRzJwRCxJQUFHLEVBQUdDLEdBQUcsS0FBS0gsR0FBRzloRSxNQUFNb2lFLEdBQUdoOUQsV0FDdlYsU0FBU2s5RCxHQUFHcjRELEdBQUcsSUFBSUMsRUFBRUQsRUFBRXhMLEVBQUV3TCxFQUFFLEdBQUdBLEVBQUVzNEQsVUFBVSxLQUFLcjRELEVBQUVzNEQsUUFBUXQ0RCxFQUFFQSxFQUFFczRELFdBQVcsQ0FBQ3Y0RCxFQUFFQyxFQUFFLEdBQU8sSUFBYSxNQUFqQkEsRUFBRUQsR0FBU2dlLFNBQWN4cEIsRUFBRXlMLEVBQUVzNEQsUUFBUXY0RCxFQUFFQyxFQUFFczRELGFBQWF2NEQsR0FBRyxPQUFPLElBQUlDLEVBQUVtUSxJQUFJNWIsRUFBRSxLQUFLLFNBQVNna0UsR0FBR3g0RCxHQUFHLEdBQUcsS0FBS0EsRUFBRW9RLElBQUksQ0FBQyxJQUFJblEsRUFBRUQsRUFBRXk0RCxjQUFzRSxHQUF4RCxPQUFPeDRELEdBQWtCLFFBQWRELEVBQUVBLEVBQUVzNEQsYUFBcUJyNEQsRUFBRUQsRUFBRXk0RCxlQUFtQixPQUFPeDRELEVBQUUsT0FBT0EsRUFBRXk0RCxXQUFXLE9BQU8sS0FBSyxTQUFTQyxHQUFHMzRELEdBQUcsR0FBR3E0RCxHQUFHcjRELEtBQUtBLEVBQUUsTUFBTTVJLE1BQU15M0IsRUFBRSxNQUczZSxTQUFTK3BDLEdBQUc1NEQsRUFBRUMsR0FBRyxJQUFJLElBQUl6TCxFQUFFd0wsRUFBRXM0RCxVQUFVLE9BQU9yNEQsR0FBRyxDQUFDLEdBQUdBLElBQUlELEdBQUdDLElBQUl6TCxFQUFFLE9BQU0sRUFBR3lMLEVBQUVBLEVBQUVzNEQsT0FBTyxPQUFNLEVBQUcsSUFBSU0sR0FBR0MsR0FBR0MsR0FBR0MsR0FBR0MsSUFBRyxFQUFHQyxHQUFHLEdBQUdDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsSUFBSWppQixJQUFJa2lCLEdBQUcsSUFBSWxpQixJQUFJbWlCLEdBQUcsR0FBR0MsR0FBRyw2UEFBNlBwN0QsTUFBTSxLQUNyYixTQUFTcTdELEdBQUcxNUQsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxHQUFHLE1BQU0sQ0FBQ2cvRCxVQUFVMzVELEVBQUU0NUQsYUFBYTM1RCxFQUFFNDVELGlCQUFtQixHQUFGcmxFLEVBQUtzbEUsWUFBWW4vRCxFQUFFby9ELGlCQUFpQixDQUFDdjVCLElBQUksU0FBU3c1QixHQUFHaDZELEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFVBQVUsSUFBSyxXQUFXbTVELEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFlBQVlDLEdBQUcsS0FBSyxNQUFNLElBQUssWUFBWSxJQUFLLFdBQVdDLEdBQUcsS0FBSyxNQUFNLElBQUssY0FBYyxJQUFLLGFBQWFDLEdBQUdXLE9BQU9oNkQsRUFBRWk2RCxXQUFXLE1BQU0sSUFBSyxvQkFBb0IsSUFBSyxxQkFBcUJYLEdBQUdVLE9BQU9oNkQsRUFBRWk2RCxZQUMzWixTQUFTQyxHQUFHbjZELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEVBQUU3bEMsRUFBRXFHLEdBQUcsT0FBRyxPQUFPaEIsR0FBR0EsRUFBRTg1RCxjQUFjOTRELEdBQVNoQixFQUFFMDVELEdBQUd6NUQsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxFQUFFcUcsR0FBRyxPQUFPZixHQUFZLFFBQVJBLEVBQUU2MkQsR0FBRzcyRCxLQUFhNjRELEdBQUc3NEQsR0FBSUQsSUFBRUEsRUFBRTY1RCxrQkFBa0JyNUIsRUFBRXZnQyxFQUFFRCxFQUFFKzVELGlCQUFpQixPQUFPcC9ELElBQUksSUFBSXNGLEVBQUVsUSxRQUFRNEssSUFBSXNGLEVBQUU3TCxLQUFLdUcsR0FBVXFGLEdBRTlNLFNBQVNvNkQsR0FBR3A2RCxHQUFHLElBQUlDLEVBQUVvNkQsR0FBR3I2RCxFQUFFeEgsUUFBUSxHQUFHLE9BQU95SCxFQUFFLENBQUMsSUFBSXpMLEVBQUU2akUsR0FBR3A0RCxHQUFHLEdBQUcsT0FBT3pMLEVBQUUsR0FBVyxNQUFSeUwsRUFBRXpMLEVBQUU0YixNQUFZLEdBQVcsUUFBUm5RLEVBQUV1NEQsR0FBR2hrRSxJQUFtSCxPQUF0R3dMLEVBQUUyNUQsVUFBVTE1RCxPQUFFKzRELEdBQUdoNUQsRUFBRXM2RCxjQUFhLFdBQVduMEIsRUFBRW8wQix5QkFBeUJ2NkQsRUFBRXc2RCxVQUFTLFdBQVd6QixHQUFHdmtFLGNBQW9CLEdBQUcsSUFBSXlMLEdBQUd6TCxFQUFFdWlFLFVBQVUwRCxRQUE4RCxZQUFyRHo2RCxFQUFFMjVELFVBQVUsSUFBSW5sRSxFQUFFNGIsSUFBSTViLEVBQUV1aUUsVUFBVTJELGNBQWMsTUFBYTE2RCxFQUFFMjVELFVBQVUsS0FDMVUsU0FBU2dCLEdBQUczNkQsR0FBRyxHQUFHLE9BQU9BLEVBQUUyNUQsVUFBVSxPQUFNLEVBQUcsSUFBSSxJQUFJMTVELEVBQUVELEVBQUUrNUQsaUJBQWlCLEVBQUU5NUQsRUFBRW5NLFFBQVEsQ0FBQyxJQUFJVSxFQUFFb21FLEdBQUc1NkQsRUFBRTQ1RCxhQUFhNTVELEVBQUU2NUQsaUJBQWlCNTVELEVBQUUsR0FBR0QsRUFBRTg1RCxhQUFhLEdBQUcsT0FBT3RsRSxFQUFFLE9BQWUsUUFBUnlMLEVBQUU2MkQsR0FBR3RpRSxLQUFhc2tFLEdBQUc3NEQsR0FBR0QsRUFBRTI1RCxVQUFVbmxFLEdBQUUsRUFBR3lMLEVBQUVoSyxRQUFRLE9BQU0sRUFBRyxTQUFTNGtFLEdBQUc3NkQsRUFBRUMsRUFBRXpMLEdBQUdtbUUsR0FBRzM2RCxJQUFJeEwsRUFBRXlsRSxPQUFPaDZELEdBQ3pRLFNBQVM2NkQsS0FBSyxJQUFJN0IsSUFBRyxFQUFHLEVBQUVDLEdBQUdwbEUsUUFBUSxDQUFDLElBQUlrTSxFQUFFazVELEdBQUcsR0FBRyxHQUFHLE9BQU9sNUQsRUFBRTI1RCxVQUFVLENBQW1CLFFBQWxCMzVELEVBQUU4MkQsR0FBRzkyRCxFQUFFMjVELGFBQXFCZCxHQUFHNzRELEdBQUcsTUFBTSxJQUFJLElBQUlDLEVBQUVELEVBQUUrNUQsaUJBQWlCLEVBQUU5NUQsRUFBRW5NLFFBQVEsQ0FBQyxJQUFJVSxFQUFFb21FLEdBQUc1NkQsRUFBRTQ1RCxhQUFhNTVELEVBQUU2NUQsaUJBQWlCNTVELEVBQUUsR0FBR0QsRUFBRTg1RCxhQUFhLEdBQUcsT0FBT3RsRSxFQUFFLENBQUN3TCxFQUFFMjVELFVBQVVubEUsRUFBRSxNQUFNeUwsRUFBRWhLLFFBQVEsT0FBTytKLEVBQUUyNUQsV0FBV1QsR0FBR2pqRSxRQUFRLE9BQU9rakUsSUFBSXdCLEdBQUd4QixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSXVCLEdBQUd2QixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSXNCLEdBQUd0QixNQUFNQSxHQUFHLE1BQU1DLEdBQUd4b0UsUUFBUStwRSxJQUFJdEIsR0FBR3pvRSxRQUFRK3BFLElBQ3JaLFNBQVNFLEdBQUcvNkQsRUFBRUMsR0FBR0QsRUFBRTI1RCxZQUFZMTVELElBQUlELEVBQUUyNUQsVUFBVSxLQUFLVixLQUFLQSxJQUFHLEVBQUc5eUIsRUFBRTYwQiwwQkFBMEI3MEIsRUFBRTgwQix3QkFBd0JILE1BQ3JILFNBQVNJLEdBQUdsN0QsR0FBRyxTQUFTQyxFQUFFQSxHQUFHLE9BQU84NkQsR0FBRzk2RCxFQUFFRCxHQUFHLEdBQUcsRUFBRWs1RCxHQUFHcGxFLE9BQU8sQ0FBQ2luRSxHQUFHN0IsR0FBRyxHQUFHbDVELEdBQUcsSUFBSSxJQUFJeEwsRUFBRSxFQUFFQSxFQUFFMGtFLEdBQUdwbEUsT0FBT1UsSUFBSSxDQUFDLElBQUlnc0MsRUFBRTA0QixHQUFHMWtFLEdBQUdnc0MsRUFBRW01QixZQUFZMzVELElBQUl3Z0MsRUFBRW01QixVQUFVLE9BQStGLElBQXhGLE9BQU9SLElBQUk0QixHQUFHNUIsR0FBR241RCxHQUFHLE9BQU9vNUQsSUFBSTJCLEdBQUczQixHQUFHcDVELEdBQUcsT0FBT3E1RCxJQUFJMEIsR0FBRzFCLEdBQUdyNUQsR0FBR3M1RCxHQUFHeG9FLFFBQVFtUCxHQUFHczVELEdBQUd6b0UsUUFBUW1QLEdBQU96TCxFQUFFLEVBQUVBLEVBQUVnbEUsR0FBRzFsRSxPQUFPVSxLQUFJZ3NDLEVBQUVnNUIsR0FBR2hsRSxJQUFLbWxFLFlBQVkzNUQsSUFBSXdnQyxFQUFFbTVCLFVBQVUsTUFBTSxLQUFLLEVBQUVILEdBQUcxbEUsUUFBaUIsUUFBUlUsRUFBRWdsRSxHQUFHLElBQVlHLFdBQVlTLEdBQUc1bEUsR0FBRyxPQUFPQSxFQUFFbWxFLFdBQVdILEdBQUd2akUsUUFDL1gsU0FBU2tsRSxHQUFHbjdELEVBQUVDLEdBQUcsSUFBSXpMLEVBQUUsR0FBa0YsT0FBL0VBLEVBQUV3TCxFQUFFL08sZUFBZWdQLEVBQUVoUCxjQUFjdUQsRUFBRSxTQUFTd0wsR0FBRyxTQUFTQyxFQUFFekwsRUFBRSxNQUFNd0wsR0FBRyxNQUFNQyxFQUFTekwsRUFBRSxJQUFJNG1FLEdBQUcsQ0FBQ0MsYUFBYUYsR0FBRyxZQUFZLGdCQUFnQkcsbUJBQW1CSCxHQUFHLFlBQVksc0JBQXNCSSxlQUFlSixHQUFHLFlBQVksa0JBQWtCSyxjQUFjTCxHQUFHLGFBQWEsa0JBQWtCTSxHQUFHLEdBQUdDLEdBQUcsR0FDbkYsU0FBU0MsR0FBRzM3RCxHQUFHLEdBQUd5N0QsR0FBR3o3RCxHQUFHLE9BQU95N0QsR0FBR3o3RCxHQUFHLElBQUlvN0QsR0FBR3A3RCxHQUFHLE9BQU9BLEVBQUUsSUFBWXhMLEVBQVJ5TCxFQUFFbTdELEdBQUdwN0QsR0FBSyxJQUFJeEwsS0FBS3lMLEVBQUUsR0FBR0EsRUFBRVIsZUFBZWpMLElBQUlBLEtBQUtrbkUsR0FBRyxPQUFPRCxHQUFHejdELEdBQUdDLEVBQUV6TCxHQUFHLE9BQU93TCxFQUE5WDByRCxJQUFLZ1EsR0FBR3AvRCxTQUFTYSxjQUFjLE9BQU9rdEIsTUFBTSxtQkFBbUJ0c0IsZ0JBQWdCcTlELEdBQUdDLGFBQWFPLGlCQUFpQlIsR0FBR0UsbUJBQW1CTSxpQkFBaUJSLEdBQUdHLGVBQWVLLFdBQVcsb0JBQW9CNzlELGVBQWVxOUQsR0FBR0ksY0FBY0ssWUFDeE8sSUFBSUMsR0FBR0gsR0FBRyxnQkFBZ0JJLEdBQUdKLEdBQUcsc0JBQXNCSyxHQUFHTCxHQUFHLGtCQUFrQk0sR0FBR04sR0FBRyxpQkFBaUJPLEdBQUcsSUFBSTdrQixJQUFJOGtCLEdBQUcsSUFBSTlrQixJQUFJK2tCLEdBQUcsQ0FBQyxRQUFRLFFBQVFOLEdBQUcsZUFBZUMsR0FBRyxxQkFBcUJDLEdBQUcsaUJBQWlCLFVBQVUsVUFBVSxpQkFBaUIsaUJBQWlCLGlCQUFpQixpQkFBaUIsVUFBVSxVQUFVLFlBQVksWUFBWSxRQUFRLFFBQVEsUUFBUSxRQUFRLG9CQUFvQixvQkFBb0IsT0FBTyxPQUFPLGFBQWEsYUFBYSxpQkFBaUIsaUJBQWlCLFlBQVksWUFDL2UscUJBQXFCLHFCQUFxQixVQUFVLFVBQVUsV0FBVyxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLGFBQWEsYUFBYUMsR0FBRyxnQkFBZ0IsVUFBVSxXQUFXLFNBQVNJLEdBQUdyOEQsRUFBRUMsR0FBRyxJQUFJLElBQUl6TCxFQUFFLEVBQUVBLEVBQUV3TCxFQUFFbE0sT0FBT1UsR0FBRyxFQUFFLENBQUMsSUFBSWdzQyxFQUFFeGdDLEVBQUV4TCxHQUFHbUcsRUFBRXFGLEVBQUV4TCxFQUFFLEdBQUdtRyxFQUFFLE1BQU1BLEVBQUUsR0FBR25MLGNBQWNtTCxFQUFFaEMsTUFBTSxJQUFJd2pFLEdBQUdwMkQsSUFBSXk2QixFQUFFdmdDLEdBQUdpOEQsR0FBR24yRCxJQUFJeTZCLEVBQUU3bEMsR0FBRzZ3RCxFQUFHN3dELEVBQUUsQ0FBQzZsQyxNQUEyQjg3QixFQUFmbjJCLEVBQUVvMkIsZ0JBQWtCLElBQUk3bkQsR0FBRSxFQUMvWCxTQUFTOG5ELEdBQUd4OEQsR0FBRyxHQUFHLElBQUssRUFBRUEsR0FBRyxPQUFPMFUsR0FBRSxHQUFHLEVBQUUsR0FBRyxJQUFLLEVBQUUxVSxHQUFHLE9BQU8wVSxHQUFFLEdBQUcsRUFBRSxHQUFHLElBQUssRUFBRTFVLEdBQUcsT0FBTzBVLEdBQUUsR0FBRyxFQUFFLElBQUl6VSxFQUFFLEdBQUdELEVBQUUsT0FBRyxJQUFJQyxHQUFTeVUsR0FBRSxHQUFHelUsR0FBSyxJQUFPLEdBQUZELElBQWEwVSxHQUFFLEdBQUcsSUFBYyxJQUFYelUsRUFBRSxJQUFJRCxJQUFrQjBVLEdBQUUsR0FBR3pVLEdBQUssSUFBTyxJQUFGRCxJQUFjMFUsR0FBRSxFQUFFLEtBQWdCLElBQVp6VSxFQUFFLEtBQUtELElBQWtCMFUsR0FBRSxFQUFFelUsR0FBSyxJQUFPLEtBQUZELElBQWUwVSxHQUFFLEVBQUUsTUFBb0IsSUFBZnpVLEVBQUUsUUFBUUQsSUFBa0IwVSxHQUFFLEVBQUV6VSxHQUFrQixJQUFoQkEsRUFBRSxTQUFTRCxJQUFrQjBVLEdBQUUsRUFBRXpVLEdBQU8sU0FBRkQsR0FBa0IwVSxHQUFFLEVBQUUsVUFBWSxJQUFPLFVBQUYxVSxJQUFvQjBVLEdBQUUsRUFBRSxXQUEyQixJQUFqQnpVLEVBQUUsVUFBVUQsSUFBa0IwVSxHQUFFLEVBQUV6VSxHQUFLLElBQUssV0FBV0QsSUFBVTBVLEdBQUUsRUFBRSxhQUNqZkEsR0FBRSxFQUFTMVUsR0FDWCxTQUFTeThELEdBQUd6OEQsRUFBRUMsR0FBRyxJQUFJekwsRUFBRXdMLEVBQUUwOEQsYUFBYSxHQUFHLElBQUlsb0UsRUFBRSxPQUFPa2dCLEdBQUUsRUFBRSxJQUFJOHJCLEVBQUUsRUFBRTdsQyxFQUFFLEVBQUVxRyxFQUFFaEIsRUFBRTI4RCxhQUFhLzdDLEVBQUU1Z0IsRUFBRTQ4RCxlQUFlOWxFLEVBQUVrSixFQUFFNjhELFlBQVksR0FBRyxJQUFJNzdELEVBQUV3L0IsRUFBRXgvQixFQUFFckcsRUFBRStaLEdBQUUsUUFBUSxHQUFpQixJQUFkMVQsRUFBSSxVQUFGeE0sR0FBa0IsQ0FBQyxJQUFJNFosRUFBRXBOLEdBQUc0ZixFQUFFLElBQUl4UyxHQUFHb3lCLEVBQUVnOEIsR0FBR3B1RCxHQUFHelQsRUFBRStaLElBQVMsSUFBTDVkLEdBQUdrSyxLQUFVdy9CLEVBQUVnOEIsR0FBRzFsRSxHQUFHNkQsRUFBRStaLFNBQWdCLElBQVAxVCxFQUFFeE0sR0FBR29zQixJQUFTNGYsRUFBRWc4QixHQUFHeDdELEdBQUdyRyxFQUFFK1osSUFBRyxJQUFJNWQsSUFBSTBwQyxFQUFFZzhCLEdBQUcxbEUsR0FBRzZELEVBQUUrWixJQUFHLEdBQUcsSUFBSThyQixFQUFFLE9BQU8sRUFBcUMsR0FBeEJBLEVBQUVoc0MsSUFBSSxHQUFqQmdzQyxFQUFFLEdBQUdzOEIsR0FBR3Q4QixJQUFhLEVBQUUsR0FBR0EsSUFBSSxHQUFHLEVBQUssSUFBSXZnQyxHQUFHQSxJQUFJdWdDLEdBQUcsSUFBS3ZnQyxFQUFFMmdCLEdBQUcsQ0FBTyxHQUFONDdDLEdBQUd2OEQsR0FBTXRGLEdBQUcrWixHQUFFLE9BQU96VSxFQUFFeVUsR0FBRS9aLEVBQXFCLEdBQUcsS0FBdEJzRixFQUFFRCxFQUFFKzhELGdCQUF3QixJQUFJLzhELEVBQUVBLEVBQUVnOUQsY0FBYy84RCxHQUFHdWdDLEVBQUUsRUFBRXZnQyxHQUFjdEYsRUFBRSxJQUFibkcsRUFBRSxHQUFHc29FLEdBQUc3OEQsSUFBVXVnQyxHQUFHeGdDLEVBQUV4TCxHQUFHeUwsSUFBSXRGLEVBQUUsT0FBTzZsQyxFQUMxZSxTQUFTeThCLEdBQUdqOUQsR0FBZ0MsT0FBTyxJQUFwQ0EsR0FBa0IsV0FBaEJBLEVBQUUwOEQsY0FBc0MxOEQsRUFBSSxXQUFGQSxFQUFhLFdBQVcsRUFBRSxTQUFTazlELEdBQUdsOUQsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLEtBQUssR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE9BQU8sRUFBRSxLQUFLLEdBQUcsT0FBbUIsS0FBWkEsRUFBRW05RCxHQUFHLElBQUlsOUQsSUFBU2k5RCxHQUFHLEdBQUdqOUQsR0FBR0QsRUFBRSxLQUFLLEdBQUcsT0FBb0IsS0FBYkEsRUFBRW05RCxHQUFHLEtBQUtsOUQsSUFBU2k5RCxHQUFHLEVBQUVqOUQsR0FBR0QsRUFBRSxLQUFLLEVBQUUsT0FBcUIsS0FBZEEsRUFBRW05RCxHQUFHLE1BQU1sOUQsS0FBNEIsS0FBakJELEVBQUVtOUQsR0FBRyxTQUFTbDlELE1BQVdELEVBQUUsS0FBTUEsRUFBRSxLQUFLLEVBQUUsT0FBMEIsS0FBbkJDLEVBQUVrOUQsR0FBRyxXQUFXbDlELE1BQVdBLEVBQUUsV0FBV0EsRUFBRSxNQUFNN0ksTUFBTXkzQixFQUFFLElBQUk3dUIsSUFBSyxTQUFTbTlELEdBQUduOUQsR0FBRyxPQUFPQSxHQUFHQSxFQUFFLFNBQVNvOUQsR0FBR3A5RCxHQUFHLElBQUksSUFBSUMsRUFBRSxHQUFHekwsRUFBRSxFQUFFLEdBQUdBLEVBQUVBLElBQUl5TCxFQUFFN0wsS0FBSzRMLEdBQUcsT0FBT0MsRUFDcmQsU0FBU285RCxHQUFHcjlELEVBQUVDLEVBQUV6TCxHQUFHd0wsRUFBRTA4RCxjQUFjejhELEVBQUUsSUFBSXVnQyxFQUFFdmdDLEVBQUUsRUFBRUQsRUFBRTQ4RCxnQkFBZ0JwOEIsRUFBRXhnQyxFQUFFNjhELGFBQWFyOEIsR0FBRXhnQyxFQUFFQSxFQUFFczlELFlBQVdyOUQsRUFBRSxHQUFHNjhELEdBQUc3OEQsSUFBUXpMLEVBQUUsSUFBSXNvRSxHQUFHbnpELEtBQUttMEIsTUFBTW4wQixLQUFLbTBCLE1BQWlDLFNBQVk5OUIsR0FBRyxPQUFPLElBQUlBLEVBQUUsR0FBRyxJQUFJdTlELEdBQUd2OUQsR0FBR3c5RCxHQUFHLEdBQUcsR0FBdkVELEdBQUc1ekQsS0FBS21YLElBQUkwOEMsR0FBRzd6RCxLQUFLb1gsSUFBeUQwOEMsR0FBR3QzQixFQUFFdTNCLDhCQUE4QkMsR0FBR3gzQixFQUFFbzBCLHlCQUF5QnFELElBQUcsRUFBRyxTQUFTQyxHQUFHNzlELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcrMkIsSUFBSUYsS0FBSyxJQUFJMThELEVBQUVtakUsR0FBRzk4RCxFQUFFdTJELEdBQUdBLElBQUcsRUFBRyxJQUFJSCxHQUFHejhELEVBQUVxRixFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHLFNBQVMrMkIsR0FBR3YyRCxJQUFJeTJELE1BQU0sU0FBUzdnRSxHQUFHb0osRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBR205QixHQUFHRixHQUFHSyxHQUFHaHNFLEtBQUssS0FBS2tPLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLElBQ2piLFNBQVNzOUIsR0FBRzk5RCxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFVLElBQUk3bEMsRUFBWCxHQUFHaWpFLEdBQVUsSUFBSWpqRSxFQUFFLElBQU8sRUFBRnNGLEtBQU8sRUFBRWk1RCxHQUFHcGxFLFNBQVMsRUFBRTJsRSxHQUFHMXBFLFFBQVFpUSxHQUFHQSxFQUFFMDVELEdBQUcsS0FBSzE1RCxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHMDRCLEdBQUc5a0UsS0FBSzRMLE9BQU8sQ0FBQyxJQUFJZ0IsRUFBRTQ1RCxHQUFHNTZELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsR0FBRyxPQUFPeC9CLEVBQUVyRyxHQUFHcS9ELEdBQUdoNkQsRUFBRXdnQyxPQUFPLENBQUMsR0FBRzdsQyxFQUFFLENBQUMsSUFBSSxFQUFFOCtELEdBQUcxcEUsUUFBUWlRLEdBQStCLE9BQTNCQSxFQUFFMDVELEdBQUcxNEQsRUFBRWhCLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLFFBQUcwNEIsR0FBRzlrRSxLQUFLNEwsR0FBVSxHQWZoTyxTQUFZQSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEdBQUcsT0FBT3NGLEdBQUcsSUFBSyxVQUFVLE9BQU9rNUQsR0FBR2dCLEdBQUdoQixHQUFHbjVELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEVBQUU3bEMsSUFBRyxFQUFHLElBQUssWUFBWSxPQUFPeStELEdBQUdlLEdBQUdmLEdBQUdwNUQsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU8wK0QsR0FBR2MsR0FBR2QsR0FBR3I1RCxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLElBQUcsRUFBRyxJQUFLLGNBQWMsSUFBSXFHLEVBQUVyRyxFQUFFdS9ELFVBQWtELE9BQXhDWixHQUFHdnpELElBQUkvRSxFQUFFbTVELEdBQUdiLEdBQUd0MUQsSUFBSWhELElBQUksS0FBS2hCLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEVBQUU3bEMsS0FBVSxFQUFHLElBQUssb0JBQW9CLE9BQU9xRyxFQUFFckcsRUFBRXUvRCxVQUFVWCxHQUFHeHpELElBQUkvRSxFQUFFbTVELEdBQUdaLEdBQUd2MUQsSUFBSWhELElBQUksS0FBS2hCLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEVBQUU3bEMsS0FBSSxFQUFHLE9BQU0sRUFlOUhvakUsQ0FBRy84RCxFQUFFaEIsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxPQUFPdzVCLEdBQUdoNkQsRUFBRXdnQyxHQUFHdzlCLEdBQUdoK0QsRUFBRUMsRUFBRXVnQyxFQUFFLEtBQUtoc0MsS0FDOVEsU0FBU29tRSxHQUFHNTZELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsSUFBSTdsQyxFQUFFMjdELEdBQUc5MUIsR0FBVyxHQUFHLFFBQVg3bEMsRUFBRTAvRCxHQUFHMS9ELElBQWUsQ0FBQyxJQUFJcUcsRUFBRXEzRCxHQUFHMTlELEdBQUcsR0FBRyxPQUFPcUcsRUFBRXJHLEVBQUUsU0FBUyxDQUFDLElBQUlpbUIsRUFBRTVmLEVBQUVvUCxJQUFJLEdBQUcsS0FBS3dRLEVBQUUsQ0FBUyxHQUFHLFFBQVhqbUIsRUFBRTY5RCxHQUFHeDNELElBQWUsT0FBT3JHLEVBQUVBLEVBQUUsVUFBVSxHQUFHLElBQUlpbUIsRUFBRSxDQUFDLEdBQUc1ZixFQUFFKzFELFVBQVUwRCxRQUFRLE9BQU8sSUFBSXo1RCxFQUFFb1AsSUFBSXBQLEVBQUUrMUQsVUFBVTJELGNBQWMsS0FBSy8vRCxFQUFFLFVBQVVxRyxJQUFJckcsSUFBSUEsRUFBRSxPQUFxQixPQUFkcWpFLEdBQUdoK0QsRUFBRUMsRUFBRXVnQyxFQUFFN2xDLEVBQUVuRyxHQUFVLEtBQUssSUFBSXlwRSxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUN6VCxTQUFTQyxLQUFLLEdBQUdELEdBQUcsT0FBT0EsR0FBRyxJQUFJbitELEVBQWtCd2dDLEVBQWhCdmdDLEVBQUVpK0QsR0FBRzFwRSxFQUFFeUwsRUFBRW5NLE9BQVM2RyxFQUFFLFVBQVVzakUsR0FBR0EsR0FBRzd1RSxNQUFNNnVFLEdBQUd4TSxZQUFZendELEVBQUVyRyxFQUFFN0csT0FBTyxJQUFJa00sRUFBRSxFQUFFQSxFQUFFeEwsR0FBR3lMLEVBQUVELEtBQUtyRixFQUFFcUYsR0FBR0EsS0FBSyxJQUFJNGdCLEVBQUVwc0IsRUFBRXdMLEVBQUUsSUFBSXdnQyxFQUFFLEVBQUVBLEdBQUc1ZixHQUFHM2dCLEVBQUV6TCxFQUFFZ3NDLEtBQUs3bEMsRUFBRXFHLEVBQUV3L0IsR0FBR0EsS0FBSyxPQUFPMjlCLEdBQUd4akUsRUFBRWhDLE1BQU1xSCxFQUFFLEVBQUV3Z0MsRUFBRSxFQUFFQSxPQUFFLEdBQVEsU0FBUzY5QixHQUFHcitELEdBQUcsSUFBSUMsRUFBRUQsRUFBRXMrRCxRQUErRSxNQUF2RSxhQUFhdCtELEVBQWdCLEtBQWJBLEVBQUVBLEVBQUUrMEMsV0FBZ0IsS0FBSzkwQyxJQUFJRCxFQUFFLElBQUtBLEVBQUVDLEVBQUUsS0FBS0QsSUFBSUEsRUFBRSxJQUFXLElBQUlBLEdBQUcsS0FBS0EsRUFBRUEsRUFBRSxFQUFFLFNBQVN1K0QsS0FBSyxPQUFNLEVBQUcsU0FBU0MsS0FBSyxPQUFNLEVBQ2pZLFNBQVNDLEdBQUd6K0QsR0FBRyxTQUFTQyxFQUFFQSxFQUFFdWdDLEVBQUU3bEMsRUFBRXFHLEVBQUU0ZixHQUE2RyxJQUFJLElBQUlwc0IsS0FBbEh0QixLQUFLd3JFLFdBQVd6K0QsRUFBRS9NLEtBQUt5ckUsWUFBWWhrRSxFQUFFekgsS0FBS3pCLEtBQUsrdUMsRUFBRXR0QyxLQUFLNG1FLFlBQVk5NEQsRUFBRTlOLEtBQUtzRixPQUFPb29CLEVBQUUxdEIsS0FBSzByRSxjQUFjLEtBQWtCNStELEVBQUVBLEVBQUVQLGVBQWVqTCxLQUFLeUwsRUFBRUQsRUFBRXhMLEdBQUd0QixLQUFLc0IsR0FBR3lMLEVBQUVBLEVBQUVlLEdBQUdBLEVBQUV4TSxJQUFnSSxPQUE1SHRCLEtBQUsyckUsb0JBQW9CLE1BQU03OUQsRUFBRTg5RCxpQkFBaUI5OUQsRUFBRTg5RCxrQkFBaUIsSUFBSzk5RCxFQUFFKzlELGFBQWFSLEdBQUdDLEdBQUd0ckUsS0FBSzhyRSxxQkFBcUJSLEdBQVV0ckUsS0FDMUUsT0FEK0VxbEIsRUFBRXRZLEVBQUUzTixVQUFVLENBQUMyc0UsZUFBZSxXQUFXL3JFLEtBQUs0ckUsa0JBQWlCLEVBQUcsSUFBSTkrRCxFQUFFOU0sS0FBSzRtRSxZQUFZOTVELElBQUlBLEVBQUVpL0QsZUFBZWovRCxFQUFFaS9ELGlCQUFpQixrQkFBbUJqL0QsRUFBRSsrRCxjQUM3ZS8rRCxFQUFFKytELGFBQVksR0FBSTdyRSxLQUFLMnJFLG1CQUFtQk4sS0FBS1csZ0JBQWdCLFdBQVcsSUFBSWwvRCxFQUFFOU0sS0FBSzRtRSxZQUFZOTVELElBQUlBLEVBQUVrL0QsZ0JBQWdCbC9ELEVBQUVrL0Qsa0JBQWtCLGtCQUFtQmwvRCxFQUFFbS9ELGVBQWVuL0QsRUFBRW0vRCxjQUFhLEdBQUlqc0UsS0FBSzhyRSxxQkFBcUJULEtBQUthLFFBQVEsYUFBYUMsYUFBYWQsS0FBWXQrRCxFQUNoUixJQUFvTHEvRCxHQUFHQyxHQUFHQyxHQUF0TEMsR0FBRyxDQUFDQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLFNBQVM3L0QsR0FBRyxPQUFPQSxFQUFFNi9ELFdBQVd6akUsS0FBS08sT0FBT21pRSxpQkFBaUIsRUFBRWdCLFVBQVUsR0FBR0MsR0FBR3RCLEdBQUdnQixJQUFJTyxHQUFHem5ELEVBQUUsR0FBR2tuRCxHQUFHLENBQUNwNEQsS0FBSyxFQUFFbXhDLE9BQU8sSUFBSXluQixHQUFHeEIsR0FBR3VCLElBQWFFLEdBQUczbkQsRUFBRSxHQUFHeW5ELEdBQUcsQ0FBQ0csUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxpQkFBaUJDLEdBQUdDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxjQUFjLFNBQVNqaEUsR0FBRyxZQUFPLElBQVNBLEVBQUVpaEUsY0FBY2poRSxFQUFFa2hFLGNBQWNsaEUsRUFBRXUyRCxXQUFXdjJELEVBQUVtaEUsVUFBVW5oRSxFQUFFa2hFLFlBQVlsaEUsRUFBRWloRSxlQUFlRyxVQUFVLFNBQVNwaEUsR0FBRyxNQUFHLGNBQzNlQSxFQUFTQSxFQUFFb2hFLFdBQVVwaEUsSUFBSXcvRCxLQUFLQSxJQUFJLGNBQWN4L0QsRUFBRXZPLE1BQU02dEUsR0FBR3QvRCxFQUFFbWdFLFFBQVFYLEdBQUdXLFFBQVFaLEdBQUd2L0QsRUFBRW9nRSxRQUFRWixHQUFHWSxTQUFTYixHQUFHRCxHQUFHLEVBQUVFLEdBQUd4L0QsR0FBVXMvRCxLQUFJK0IsVUFBVSxTQUFTcmhFLEdBQUcsTUFBTSxjQUFjQSxFQUFFQSxFQUFFcWhFLFVBQVU5QixNQUFNK0IsR0FBRzdDLEdBQUd5QixJQUFpQ3FCLEdBQUc5QyxHQUE3QmxtRCxFQUFFLEdBQUcybkQsR0FBRyxDQUFDcG5CLGFBQWEsS0FBNEMwb0IsR0FBRy9DLEdBQTlCbG1ELEVBQUUsR0FBR3luRCxHQUFHLENBQUNpQixjQUFjLEtBQTBFUSxHQUFHaEQsR0FBNURsbUQsRUFBRSxHQUFHa25ELEdBQUcsQ0FBQ2lDLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxjQUFjLEtBQWNDLEdBQUd0cEQsRUFBRSxHQUFHa25ELEdBQUcsQ0FBQ3FDLGNBQWMsU0FBUzloRSxHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFOGhFLGNBQWMvakUsT0FBTytqRSxpQkFBaUJDLEdBQUd0RCxHQUFHb0QsSUFBeUJHLEdBQUd2RCxHQUFyQmxtRCxFQUFFLEdBQUdrbkQsR0FBRyxDQUFDbHlFLEtBQUssS0FBYzAwRSxHQUFHLENBQUNDLElBQUksU0FDeGZDLFNBQVMsSUFBSUMsS0FBSyxZQUFZQyxHQUFHLFVBQVVDLE1BQU0sYUFBYUMsS0FBSyxZQUFZQyxJQUFJLFNBQVNDLElBQUksS0FBS0MsS0FBSyxjQUFjQyxLQUFLLGNBQWNDLE9BQU8sYUFBYUMsZ0JBQWdCLGdCQUFnQkMsR0FBRyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sR0FBRyxRQUFRLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLFFBQVEsR0FBRyxXQUFXLEdBQUcsU0FBUyxHQUFHLElBQUksR0FBRyxTQUFTLEdBQUcsV0FBVyxHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsWUFBWSxHQUFHLFVBQVUsR0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLFNBQVMsR0FBRyxTQUFTLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FDdGYsSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLFVBQVUsSUFBSSxhQUFhLElBQUksUUFBUUMsR0FBRyxDQUFDQyxJQUFJLFNBQVNDLFFBQVEsVUFBVUMsS0FBSyxVQUFVQyxNQUFNLFlBQVksU0FBU0MsR0FBR3BqRSxHQUFHLElBQUlDLEVBQUUvTSxLQUFLNG1FLFlBQVksT0FBTzc1RCxFQUFFNGdFLGlCQUFpQjVnRSxFQUFFNGdFLGlCQUFpQjdnRSxNQUFJQSxFQUFFK2lFLEdBQUcvaUUsT0FBTUMsRUFBRUQsR0FBTSxTQUFTOGdFLEtBQUssT0FBT3NDLEdBQzlSLElBQUlDLEdBQUc5cUQsRUFBRSxHQUFHeW5ELEdBQUcsQ0FBQ2h2RSxJQUFJLFNBQVNnUCxHQUFHLEdBQUdBLEVBQUVoUCxJQUFJLENBQUMsSUFBSWlQLEVBQUVnaUUsR0FBR2ppRSxFQUFFaFAsTUFBTWdQLEVBQUVoUCxJQUFJLEdBQUcsaUJBQWlCaVAsRUFBRSxPQUFPQSxFQUFFLE1BQU0sYUFBYUQsRUFBRXZPLEtBQWMsTUFBUnVPLEVBQUVxK0QsR0FBR3IrRCxJQUFVLFFBQVFXLE9BQU82dkIsYUFBYXh3QixHQUFJLFlBQVlBLEVBQUV2TyxNQUFNLFVBQVV1TyxFQUFFdk8sS0FBS3F4RSxHQUFHOWlFLEVBQUVzK0QsVUFBVSxlQUFlLElBQUlubkUsS0FBSyxFQUFFNkcsU0FBUyxFQUFFeWlFLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRWx4QyxPQUFPLEVBQUU0ekMsT0FBTyxFQUFFekMsaUJBQWlCQyxHQUFHL3JCLFNBQVMsU0FBUy8wQyxHQUFHLE1BQU0sYUFBYUEsRUFBRXZPLEtBQUs0c0UsR0FBR3IrRCxHQUFHLEdBQUdzK0QsUUFBUSxTQUFTdCtELEdBQUcsTUFBTSxZQUFZQSxFQUFFdk8sTUFBTSxVQUFVdU8sRUFBRXZPLEtBQUt1TyxFQUFFcytELFFBQVEsR0FBR2lGLE1BQU0sU0FBU3ZqRSxHQUFHLE1BQU0sYUFDN2VBLEVBQUV2TyxLQUFLNHNFLEdBQUdyK0QsR0FBRyxZQUFZQSxFQUFFdk8sTUFBTSxVQUFVdU8sRUFBRXZPLEtBQUt1TyxFQUFFcytELFFBQVEsS0FBS2tGLEdBQUcvRSxHQUFHNEUsSUFBaUlJLEdBQUdoRixHQUE3SGxtRCxFQUFFLEdBQUcybkQsR0FBRyxDQUFDaEcsVUFBVSxFQUFFM2dCLE1BQU0sRUFBRUMsT0FBTyxFQUFFa3FCLFNBQVMsRUFBRUMsbUJBQW1CLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsVUFBVSxLQUFtSUMsR0FBR3hGLEdBQXJIbG1ELEVBQUUsR0FBR3luRCxHQUFHLENBQUNrRSxRQUFRLEVBQUVDLGNBQWMsRUFBRUMsZUFBZSxFQUFFekQsT0FBTyxFQUFFQyxRQUFRLEVBQUVILFFBQVEsRUFBRUMsU0FBUyxFQUFFRyxpQkFBaUJDLE1BQTBFdUQsR0FBRzVGLEdBQTNEbG1ELEVBQUUsR0FBR2tuRCxHQUFHLENBQUN0VCxhQUFhLEVBQUV3VixZQUFZLEVBQUVDLGNBQWMsS0FBYzBDLEdBQUcvckQsRUFBRSxHQUFHMm5ELEdBQUcsQ0FBQ3FFLE9BQU8sU0FBU3ZrRSxHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRXVrRSxPQUFPLGdCQUFnQnZrRSxHQUFHQSxFQUFFd2tFLFlBQVksR0FDbGZDLE9BQU8sU0FBU3prRSxHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRXlrRSxPQUFPLGdCQUFnQnprRSxHQUFHQSxFQUFFMGtFLFlBQVksZUFBZTFrRSxHQUFHQSxFQUFFMmtFLFdBQVcsR0FBR0MsT0FBTyxFQUFFQyxVQUFVLElBQUlDLEdBQUdyRyxHQUFHNkYsSUFBSVMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUlDLEdBQUd0WixHQUFJLHFCQUFxQjN0RCxPQUFPa25FLEdBQUcsS0FBS3ZaLEdBQUksaUJBQWlCcHZELFdBQVcyb0UsR0FBRzNvRSxTQUFTNG9FLGNBQWMsSUFBSUMsR0FBR3paLEdBQUksY0FBYzN0RCxTQUFTa25FLEdBQUdHLEdBQUcxWixLQUFNc1osSUFBSUMsSUFBSSxFQUFFQSxJQUFJLElBQUlBLElBQUlJLEdBQUcxa0UsT0FBTzZ2QixhQUFhLElBQUk4MEMsSUFBRyxFQUMxVyxTQUFTQyxHQUFHdmxFLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVEsT0FBTyxJQUFJK2tFLEdBQUdoMUUsUUFBUWtRLEVBQUVxK0QsU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNcitELEVBQUVxK0QsUUFBUSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxPQUFNLEVBQUcsUUFBUSxPQUFNLEdBQUksU0FBU2tILEdBQUd4bEUsR0FBYyxNQUFNLGlCQUFqQkEsRUFBRUEsRUFBRXc0QyxTQUFrQyxTQUFTeDRDLEVBQUVBLEVBQUV6UyxLQUFLLEtBQUssSUFBSWs0RSxJQUFHLEVBRTFRQyxHQUFHLENBQUNuN0IsT0FBTSxFQUFHL3pCLE1BQUssRUFBR212RCxVQUFTLEVBQUcsa0JBQWlCLEVBQUdDLE9BQU0sRUFBR0MsT0FBTSxFQUFHN3RFLFFBQU8sRUFBRzNKLFVBQVMsRUFBR3kzRSxPQUFNLEVBQUdyb0UsUUFBTyxFQUFHc29FLEtBQUksRUFBR0MsTUFBSyxFQUFHQyxNQUFLLEVBQUdyM0UsS0FBSSxFQUFHczNFLE1BQUssR0FBSSxTQUFTQyxHQUFHbm1FLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRW92RCxVQUFVcHZELEVBQUVvdkQsU0FBU24rRCxjQUFjLE1BQU0sVUFBVWdQLElBQUl5bEUsR0FBRzFsRSxFQUFFdk8sTUFBTSxhQUFhd08sRUFBUSxTQUFTbW1FLEdBQUdwbUUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBR3kyQixHQUFHejJCLEdBQXNCLEdBQW5CdmdDLEVBQUVvbUUsR0FBR3BtRSxFQUFFLGFBQWdCbk0sU0FBU1UsRUFBRSxJQUFJdXJFLEdBQUcsV0FBVyxTQUFTLEtBQUt2ckUsRUFBRWdzQyxHQUFHeGdDLEVBQUU1TCxLQUFLLENBQUMyK0IsTUFBTXYrQixFQUFFOHhFLFVBQVVybUUsS0FBSyxJQUFJc21FLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVN6b0QsR0FBRy9kLEdBQUd5bUUsR0FBR3ptRSxFQUFFLEdBQUcsU0FBUzBtRSxHQUFHMW1FLEdBQWUsR0FBRzJ2RCxFQUFUZ1gsR0FBRzNtRSxJQUFZLE9BQU9BLEVBQ25lLFNBQVM0bUUsR0FBRzVtRSxFQUFFQyxHQUFHLEdBQUcsV0FBV0QsRUFBRSxPQUFPQyxFQUFFLElBQUk0bUUsSUFBRyxFQUFHLEdBQUduYixFQUFHLENBQUMsSUFBSW9iLEdBQUcsR0FBR3BiLEVBQUcsQ0FBQyxJQUFJcWIsR0FBRyxZQUFZenFFLFNBQVMsSUFBSXlxRSxHQUFHLENBQUMsSUFBSUMsR0FBRzFxRSxTQUFTYSxjQUFjLE9BQU82cEUsR0FBRzFwRSxhQUFhLFVBQVUsV0FBV3lwRSxHQUFHLG1CQUFvQkMsR0FBR0MsUUFBUUgsR0FBR0MsUUFBUUQsSUFBRyxFQUFHRCxHQUFHQyxNQUFNeHFFLFNBQVM0b0UsY0FBYyxFQUFFNW9FLFNBQVM0b0UsY0FBYyxTQUFTZ0MsS0FBS1gsS0FBS0EsR0FBR1ksWUFBWSxtQkFBbUJDLElBQUlaLEdBQUdELEdBQUcsTUFBTSxTQUFTYSxHQUFHcG5FLEdBQUcsR0FBRyxVQUFVQSxFQUFFbXNELGNBQWN1YSxHQUFHRixJQUFJLENBQUMsSUFBSXZtRSxFQUFFLEdBQXlCLEdBQXRCbW1FLEdBQUdubUUsRUFBRXVtRSxHQUFHeG1FLEVBQUVzMkQsR0FBR3QyRCxJQUFJQSxFQUFFK2QsR0FBTXc1QyxHQUFHdjNELEVBQUVDLE9BQU8sQ0FBQ3MzRCxJQUFHLEVBQUcsSUFBSUosR0FBR24zRCxFQUFFQyxHQUFHLFFBQVFzM0QsSUFBRyxFQUFHRSxRQUMzZSxTQUFTNFAsR0FBR3JuRSxFQUFFQyxFQUFFekwsR0FBRyxZQUFZd0wsR0FBR2tuRSxLQUFVVixHQUFHaHlFLEdBQVIreEUsR0FBR3RtRSxHQUFVcW5FLFlBQVksbUJBQW1CRixLQUFLLGFBQWFwbkUsR0FBR2tuRSxLQUFLLFNBQVNLLEdBQUd2bkUsR0FBRyxHQUFHLG9CQUFvQkEsR0FBRyxVQUFVQSxHQUFHLFlBQVlBLEVBQUUsT0FBTzBtRSxHQUFHRixJQUFJLFNBQVNnQixHQUFHeG5FLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxFQUFFLE9BQU8wbUUsR0FBR3ptRSxHQUFHLFNBQVN3bkUsR0FBR3puRSxFQUFFQyxHQUFHLEdBQUcsVUFBVUQsR0FBRyxXQUFXQSxFQUFFLE9BQU8wbUUsR0FBR3ptRSxHQUFtRSxJQUFJeW5FLEdBQUcsbUJBQW9CeHVFLE9BQU8wMUIsR0FBRzExQixPQUFPMDFCLEdBQTVHLFNBQVk1dUIsRUFBRUMsR0FBRyxPQUFPRCxJQUFJQyxJQUFJLElBQUlELEdBQUcsRUFBRUEsR0FBSSxFQUFFQyxJQUFJRCxHQUFJQSxHQUFHQyxHQUFJQSxHQUFvRDBuRSxHQUFHenVFLE9BQU81RyxVQUFVbU4sZUFDN2EsU0FBU21vRSxHQUFHNW5FLEVBQUVDLEdBQUcsR0FBR3luRSxHQUFHMW5FLEVBQUVDLEdBQUcsT0FBTSxFQUFHLEdBQUcsaUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsaUJBQWtCQyxHQUFHLE9BQU9BLEVBQUUsT0FBTSxFQUFHLElBQUl6TCxFQUFFMEUsT0FBT0MsS0FBSzZHLEdBQUd3Z0MsRUFBRXRuQyxPQUFPQyxLQUFLOEcsR0FBRyxHQUFHekwsRUFBRVYsU0FBUzBzQyxFQUFFMXNDLE9BQU8sT0FBTSxFQUFHLElBQUkwc0MsRUFBRSxFQUFFQSxFQUFFaHNDLEVBQUVWLE9BQU8wc0MsSUFBSSxJQUFJbW5DLEdBQUdwd0UsS0FBSzBJLEVBQUV6TCxFQUFFZ3NDLE1BQU1rbkMsR0FBRzFuRSxFQUFFeEwsRUFBRWdzQyxJQUFJdmdDLEVBQUV6TCxFQUFFZ3NDLEtBQUssT0FBTSxFQUFHLE9BQU0sRUFBRyxTQUFTcW5DLEdBQUc3bkUsR0FBRyxLQUFLQSxHQUFHQSxFQUFFaXlELFlBQVlqeUQsRUFBRUEsRUFBRWl5RCxXQUFXLE9BQU9qeUQsRUFDbFUsU0FBUzhuRSxHQUFHOW5FLEVBQUVDLEdBQUcsSUFBd0J1Z0MsRUFBcEJoc0MsRUFBRXF6RSxHQUFHN25FLEdBQU8sSUFBSkEsRUFBRSxFQUFZeEwsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRTg5RCxTQUFTLENBQTBCLEdBQXpCOXhCLEVBQUV4Z0MsRUFBRXhMLEVBQUVpOUQsWUFBWTM5RCxPQUFVa00sR0FBR0MsR0FBR3VnQyxHQUFHdmdDLEVBQUUsTUFBTSxDQUFDcW1CLEtBQUs5eEIsRUFBRWlVLE9BQU94SSxFQUFFRCxHQUFHQSxFQUFFd2dDLEVBQUV4Z0MsRUFBRSxDQUFDLEtBQUt4TCxHQUFHLENBQUMsR0FBR0EsRUFBRXV6RSxZQUFZLENBQUN2ekUsRUFBRUEsRUFBRXV6RSxZQUFZLE1BQU0vbkUsRUFBRXhMLEVBQUVBLEVBQUVpaUUsV0FBV2ppRSxPQUFFLEVBQU9BLEVBQUVxekUsR0FBR3J6RSxJQUFJLFNBQVN3ekUsR0FBR2hvRSxFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRXN5RCxZQUFZcnlELEdBQUcsSUFBSUEsRUFBRXF5RCxTQUFTMFYsR0FBR2hvRSxFQUFFQyxFQUFFdzJELFlBQVksYUFBYXoyRCxFQUFFQSxFQUFFaW9FLFNBQVNob0UsS0FBR0QsRUFBRWtvRSw0QkFBd0QsR0FBN0Jsb0UsRUFBRWtvRSx3QkFBd0Jqb0UsTUFDbFosU0FBU2tvRSxLQUFLLElBQUksSUFBSW5vRSxFQUFFakMsT0FBT2tDLEVBQUU0dkQsSUFBSzV2RCxhQUFhRCxFQUFFb29FLG1CQUFtQixDQUFDLElBQUksSUFBSTV6RSxFQUFFLGlCQUFrQnlMLEVBQUV3cUIsY0FBY3pzQixTQUFTWCxLQUFLLE1BQU1takMsR0FBR2hzQyxHQUFFLEVBQUcsSUFBR0EsRUFBeUIsTUFBTXlMLEVBQUU0dkQsR0FBL0I3dkQsRUFBRUMsRUFBRXdxQixlQUFnQ251QixVQUFVLE9BQU8yRCxFQUFFLFNBQVNvb0UsR0FBR3JvRSxHQUFHLElBQUlDLEVBQUVELEdBQUdBLEVBQUVvdkQsVUFBVXB2RCxFQUFFb3ZELFNBQVNuK0QsY0FBYyxPQUFPZ1AsSUFBSSxVQUFVQSxJQUFJLFNBQVNELEVBQUV2TyxNQUFNLFdBQVd1TyxFQUFFdk8sTUFBTSxRQUFRdU8sRUFBRXZPLE1BQU0sUUFBUXVPLEVBQUV2TyxNQUFNLGFBQWF1TyxFQUFFdk8sT0FBTyxhQUFhd08sR0FBRyxTQUFTRCxFQUFFc29FLGlCQUN4WixJQUFJQyxHQUFHN2MsR0FBSSxpQkFBaUJwdkQsVUFBVSxJQUFJQSxTQUFTNG9FLGFBQWFzRCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQzNGLFNBQVNDLEdBQUc1b0UsRUFBRUMsRUFBRXpMLEdBQUcsSUFBSWdzQyxFQUFFaHNDLEVBQUV1SixTQUFTdkosRUFBRUEsRUFBRThILFNBQVMsSUFBSTlILEVBQUU4OUQsU0FBUzk5RCxFQUFFQSxFQUFFbThELGNBQWNnWSxJQUFJLE1BQU1ILElBQUlBLEtBQUszWSxFQUFHcnZCLEtBQXNDQSxFQUE1QixtQkFBTEEsRUFBRWdvQyxLQUF5QkgsR0FBRzduQyxHQUFLLENBQUM1NEIsTUFBTTQ0QixFQUFFcW9DLGVBQWU1K0QsSUFBSXUyQixFQUFFc29DLGNBQXlGLENBQUNDLFlBQTNFdm9DLEdBQUdBLEVBQUVtd0IsZUFBZW53QixFQUFFbXdCLGNBQWNxWSxhQUFhanJFLFFBQVFrckUsZ0JBQStCRixXQUFXRyxhQUFhMW9DLEVBQUUwb0MsYUFBYUMsVUFBVTNvQyxFQUFFMm9DLFVBQVVDLFlBQVk1b0MsRUFBRTRvQyxhQUFjVixJQUFJZCxHQUFHYyxHQUFHbG9DLEtBQUtrb0MsR0FBR2xvQyxFQUFzQixHQUFwQkEsRUFBRTZsQyxHQUFHb0MsR0FBRyxhQUFnQjMwRSxTQUFTbU0sRUFBRSxJQUFJOC9ELEdBQUcsV0FBVyxTQUFTLEtBQUs5L0QsRUFBRXpMLEdBQUd3TCxFQUFFNUwsS0FBSyxDQUFDMitCLE1BQU05eUIsRUFBRXFtRSxVQUFVOWxDLElBQUl2Z0MsRUFBRXpILE9BQU9nd0UsTUFDamZuTSxHQUFHLG1qQkFBbWpCaCtELE1BQU0sS0FDNWpCLEdBQUdnK0QsR0FBRyxvUkFBb1JoK0QsTUFBTSxLQUFLLEdBQUdnK0QsR0FBR0QsR0FBRyxHQUFHLElBQUksSUFBSWlOLEdBQUcscUZBQXFGaHJFLE1BQU0sS0FBS2lyRSxHQUFHLEVBQUVBLEdBQUdELEdBQUd2MUUsT0FBT3cxRSxLQUFLbk4sR0FBR3AyRCxJQUFJc2pFLEdBQUdDLElBQUksR0FBRzdkLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FDbGVBLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FBY0EsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQkEsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQkQsRUFBRyxXQUFXLG9FQUFvRW50RCxNQUFNLE1BQU1tdEQsRUFBRyxXQUFXLHVGQUF1Rm50RCxNQUFNLE1BQU1tdEQsRUFBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsV0FBVyxZQUFZLFVBQVVBLEVBQUcsbUJBQW1CLDJEQUEyRG50RCxNQUFNLE1BQzVmbXRELEVBQUcscUJBQXFCLDZEQUE2RG50RCxNQUFNLE1BQU1tdEQsRUFBRyxzQkFBc0IsOERBQThEbnRELE1BQU0sTUFBTSxJQUFJa3JFLEdBQUcsc05BQXNObHJFLE1BQU0sS0FBS21yRSxHQUFHLElBQUlweUIsSUFBSSwwQ0FBMEMvNEMsTUFBTSxLQUFLckksT0FBT3V6RSxLQUNuZixTQUFTRSxHQUFHenBFLEVBQUVDLEVBQUV6TCxHQUFHLElBQUlnc0MsRUFBRXhnQyxFQUFFdk8sTUFBTSxnQkFBZ0J1TyxFQUFFNCtELGNBQWNwcUUsRUEvQ2pFLFNBQVl3TCxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEVBQUVxRyxFQUFFNGYsRUFBRTlwQixFQUFFc1gsR0FBNEIsR0FBekJncUQsR0FBR3JpRSxNQUFNN0MsS0FBS2lJLFdBQWM0OEQsR0FBRyxDQUFDLElBQUdBLEdBQWdDLE1BQU0zZ0UsTUFBTXkzQixFQUFFLE1BQTFDLElBQUloN0IsRUFBRW1rRSxHQUFHRCxJQUFHLEVBQUdDLEdBQUcsS0FBOEJDLEtBQUtBLElBQUcsRUFBR0MsR0FBR3JrRSxJQStDakU2MUUsQ0FBR2xwQyxFQUFFdmdDLE9BQUUsRUFBT0QsR0FBR0EsRUFBRTQrRCxjQUFjLEtBQ3BHLFNBQVM2SCxHQUFHem1FLEVBQUVDLEdBQUdBLEVBQUUsSUFBTyxFQUFGQSxHQUFLLElBQUksSUFBSXpMLEVBQUUsRUFBRUEsRUFBRXdMLEVBQUVsTSxPQUFPVSxJQUFJLENBQUMsSUFBSWdzQyxFQUFFeGdDLEVBQUV4TCxHQUFHbUcsRUFBRTZsQyxFQUFFek4sTUFBTXlOLEVBQUVBLEVBQUU4bEMsVUFBVXRtRSxFQUFFLENBQUMsSUFBSWdCLE9BQUUsRUFBTyxHQUFHZixFQUFFLElBQUksSUFBSTJnQixFQUFFNGYsRUFBRTFzQyxPQUFPLEVBQUUsR0FBRzhzQixFQUFFQSxJQUFJLENBQUMsSUFBSTlwQixFQUFFMHBDLEVBQUU1ZixHQUFHeFMsRUFBRXRYLEVBQUV6RSxTQUFTd0IsRUFBRWlELEVBQUU4bkUsY0FBMkIsR0FBYjluRSxFQUFFQSxFQUFFM0MsU0FBWWlhLElBQUlwTixHQUFHckcsRUFBRXFrRSx1QkFBdUIsTUFBTWgvRCxFQUFFeXBFLEdBQUc5dUUsRUFBRTdELEVBQUVqRCxHQUFHbU4sRUFBRW9OLE9BQU8sSUFBSXdTLEVBQUUsRUFBRUEsRUFBRTRmLEVBQUUxc0MsT0FBTzhzQixJQUFJLENBQW9ELEdBQTVDeFMsR0FBUHRYLEVBQUUwcEMsRUFBRTVmLElBQU92dUIsU0FBU3dCLEVBQUVpRCxFQUFFOG5FLGNBQWM5bkUsRUFBRUEsRUFBRTNDLFNBQVlpYSxJQUFJcE4sR0FBR3JHLEVBQUVxa0UsdUJBQXVCLE1BQU1oL0QsRUFBRXlwRSxHQUFHOXVFLEVBQUU3RCxFQUFFakQsR0FBR21OLEVBQUVvTixJQUFJLEdBQUc2cEQsR0FBRyxNQUFNajRELEVBQUVrNEQsR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQUtsNEQsRUFDMWEsU0FBUzJwRSxHQUFFM3BFLEVBQUVDLEdBQUcsSUFBSXpMLEVBQUVvMUUsR0FBRzNwRSxHQUFHdWdDLEVBQUV4Z0MsRUFBRSxXQUFXeEwsRUFBRTBkLElBQUlzdUIsS0FBS3FwQyxHQUFHNXBFLEVBQUVELEVBQUUsR0FBRSxHQUFJeEwsRUFBRTJkLElBQUlxdUIsSUFBSSxJQUFJc3BDLEdBQUcsa0JBQWtCbmdFLEtBQUtvaUIsU0FBUzU0QixTQUFTLElBQUl3RixNQUFNLEdBQUcsU0FBU294RSxHQUFHL3BFLEdBQUdBLEVBQUU4cEUsTUFBTTlwRSxFQUFFOHBFLEtBQUksRUFBR3hlLEVBQUd4NkQsU0FBUSxTQUFTbVAsR0FBR3VwRSxHQUFHdDNELElBQUlqUyxJQUFJK3BFLEdBQUcvcEUsR0FBRSxFQUFHRCxFQUFFLE1BQU1ncUUsR0FBRy9wRSxHQUFFLEVBQUdELEVBQUUsVUFDdE8sU0FBU2dxRSxHQUFHaHFFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsSUFBSTdsQyxFQUFFLEVBQUVRLFVBQVVySCxhQUFRLElBQVNxSCxVQUFVLEdBQUdBLFVBQVUsR0FBRyxFQUFFNkYsRUFBRXhNLEVBQTZELEdBQTNELG9CQUFvQndMLEdBQUcsSUFBSXhMLEVBQUU4OUQsV0FBV3R4RCxFQUFFeE0sRUFBRW04RCxlQUFrQixPQUFPbndCLElBQUl2Z0MsR0FBR3VwRSxHQUFHdDNELElBQUlsUyxHQUFHLENBQUMsR0FBRyxXQUFXQSxFQUFFLE9BQU9yRixHQUFHLEVBQUVxRyxFQUFFdy9CLEVBQUUsSUFBSTVmLEVBQUVncEQsR0FBRzVvRSxHQUFHbEssRUFBRWtKLEVBQUUsTUFBTUMsRUFBRSxVQUFVLFVBQVUyZ0IsRUFBRTFPLElBQUlwYixLQUFLbUosSUFBSXRGLEdBQUcsR0FBR2t2RSxHQUFHN29FLEVBQUVoQixFQUFFckYsRUFBRXNGLEdBQUcyZ0IsRUFBRXpPLElBQUlyYixJQUNsUyxTQUFTK3lFLEdBQUc3cEUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxJQUFJN2xDLEVBQUV3aEUsR0FBR240RCxJQUFJL0QsR0FBRyxZQUFPLElBQVN0RixFQUFFLEVBQUVBLEdBQUcsS0FBSyxFQUFFQSxFQUFFa2pFLEdBQUcsTUFBTSxLQUFLLEVBQUVsakUsRUFBRS9ELEdBQUcsTUFBTSxRQUFRK0QsRUFBRW1qRSxHQUFHdHBFLEVBQUVtRyxFQUFFN0ksS0FBSyxLQUFLbU8sRUFBRXpMLEVBQUV3TCxHQUFHckYsT0FBRSxHQUFRZzlELElBQUksZUFBZTEzRCxHQUFHLGNBQWNBLEdBQUcsVUFBVUEsSUFBSXRGLEdBQUUsR0FBSTZsQyxPQUFFLElBQVM3bEMsRUFBRXFGLEVBQUUzTyxpQkFBaUI0TyxFQUFFekwsRUFBRSxDQUFDaXNCLFNBQVEsRUFBR3dwRCxRQUFRdHZFLElBQUlxRixFQUFFM08saUJBQWlCNE8sRUFBRXpMLEdBQUUsUUFBSSxJQUFTbUcsRUFBRXFGLEVBQUUzTyxpQkFBaUI0TyxFQUFFekwsRUFBRSxDQUFDeTFFLFFBQVF0dkUsSUFBSXFGLEVBQUUzTyxpQkFBaUI0TyxFQUFFekwsR0FBRSxHQUNwVyxTQUFTd3BFLEdBQUdoK0QsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxHQUFHLElBQUlxRyxFQUFFdy9CLEVBQUUsR0FBRyxJQUFPLEVBQUZ2Z0MsSUFBTSxJQUFPLEVBQUZBLElBQU0sT0FBT3VnQyxFQUFFeGdDLEVBQUUsT0FBTyxDQUFDLEdBQUcsT0FBT3dnQyxFQUFFLE9BQU8sSUFBSTVmLEVBQUU0ZixFQUFFcHdCLElBQUksR0FBRyxJQUFJd1EsR0FBRyxJQUFJQSxFQUFFLENBQUMsSUFBSTlwQixFQUFFMHBDLEVBQUV1MkIsVUFBVTJELGNBQWMsR0FBRzVqRSxJQUFJNkQsR0FBRyxJQUFJN0QsRUFBRXc3RCxVQUFVeDdELEVBQUUyL0QsYUFBYTk3RCxFQUFFLE1BQU0sR0FBRyxJQUFJaW1CLEVBQUUsSUFBSUEsRUFBRTRmLEVBQUUrM0IsT0FBTyxPQUFPMzNDLEdBQUcsQ0FBQyxJQUFJeFMsRUFBRXdTLEVBQUV4USxJQUFJLElBQUcsSUFBSWhDLEdBQUcsSUFBSUEsTUFBS0EsRUFBRXdTLEVBQUVtMkMsVUFBVTJELGlCQUFrQi8vRCxHQUFHLElBQUl5VCxFQUFFa2tELFVBQVVsa0QsRUFBRXFvRCxhQUFhOTdELEdBQUUsT0FBT2ltQixFQUFFQSxFQUFFMjNDLE9BQU8sS0FBSyxPQUFPemhFLEdBQUcsQ0FBUyxHQUFHLFFBQVg4cEIsRUFBRXk1QyxHQUFHdmpFLElBQWUsT0FBZSxHQUFHLEtBQVhzWCxFQUFFd1MsRUFBRXhRLE1BQWMsSUFBSWhDLEVBQUUsQ0FBQ295QixFQUFFeC9CLEVBQUU0ZixFQUFFLFNBQVM1Z0IsRUFBRWxKLEVBQUVBLEVBQUUyL0QsWUFBWWoyQixFQUFFQSxFQUFFKzNCLFFBdkQ3YyxTQUFZdjRELEVBQUVDLEVBQUV6TCxHQUFHLEdBQUdnakUsR0FBRyxPQUFPeDNELElBQU93M0QsSUFBRyxFQUFHLElBQVdGLEdBQUd0M0QsRUFBRUMsRUFBRXpMLEdBQUcsUUFBUWdqRSxJQUFHLEVBQUdDLE1BdURvWXlTLEVBQUcsV0FBVyxJQUFJMXBDLEVBQUV4L0IsRUFBRXJHLEVBQUUyN0QsR0FBRzloRSxHQUFHb3NCLEVBQUUsR0FDcGY1Z0IsRUFBRSxDQUFDLElBQUlsSixFQUFFb2xFLEdBQUdsNEQsSUFBSWhFLEdBQUcsUUFBRyxJQUFTbEosRUFBRSxDQUFDLElBQUlzWCxFQUFFMnhELEdBQUd4NkMsRUFBRXZsQixFQUFFLE9BQU9BLEdBQUcsSUFBSyxXQUFXLEdBQUcsSUFBSXErRCxHQUFHN3BFLEdBQUcsTUFBTXdMLEVBQUUsSUFBSyxVQUFVLElBQUssUUFBUW9PLEVBQUVvMUQsR0FBRyxNQUFNLElBQUssVUFBVWorQyxFQUFFLFFBQVFuWCxFQUFFb3pELEdBQUcsTUFBTSxJQUFLLFdBQVdqOEMsRUFBRSxPQUFPblgsRUFBRW96RCxHQUFHLE1BQU0sSUFBSyxhQUFhLElBQUssWUFBWXB6RCxFQUFFb3pELEdBQUcsTUFBTSxJQUFLLFFBQVEsR0FBRyxJQUFJaHRFLEVBQUV1c0UsT0FBTyxNQUFNL2dFLEVBQUUsSUFBSyxXQUFXLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxZQUFZLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssY0FBY29PLEVBQUVrekQsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU9sekQsRUFDMWlCbXpELEdBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGFBQWFuekQsRUFBRTYxRCxHQUFHLE1BQU0sS0FBS25JLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHNXRELEVBQUVxekQsR0FBRyxNQUFNLEtBQUt4RixHQUFHN3RELEVBQUVpMkQsR0FBRyxNQUFNLElBQUssU0FBU2oyRCxFQUFFNnhELEdBQUcsTUFBTSxJQUFLLFFBQVE3eEQsRUFBRTAyRCxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssTUFBTSxJQUFLLFFBQVExMkQsRUFBRTJ6RCxHQUFHLE1BQU0sSUFBSyxvQkFBb0IsSUFBSyxxQkFBcUIsSUFBSyxnQkFBZ0IsSUFBSyxjQUFjLElBQUssY0FBYyxJQUFLLGFBQWEsSUFBSyxjQUFjLElBQUssWUFBWTN6RCxFQUFFcTFELEdBQUcsSUFBSWhqQyxFQUFFLElBQU8sRUFBRnhnQyxHQUFLZ2hDLEdBQUdSLEdBQUcsV0FBV3pnQyxFQUFFbXFFLEVBQUUxcEMsRUFBRSxPQUFPM3BDLEVBQUVBLEVBQUUsVUFBVSxLQUFLQSxFQUFFMnBDLEVBQUUsR0FBRyxJQUFJLElBQVE5TyxFQUFKQyxFQUFFNE8sRUFBSSxPQUMvZTVPLEdBQUcsQ0FBSyxJQUFJcjJCLEdBQVJvMkIsRUFBRUMsR0FBVW1sQyxVQUFzRixHQUE1RSxJQUFJcGxDLEVBQUV2aEIsS0FBSyxPQUFPN1UsSUFBSW8yQixFQUFFcDJCLEVBQUUsT0FBTzR1RSxHQUFjLE9BQVY1dUUsRUFBRW04RCxHQUFHOWxDLEVBQUV1NEMsS0FBWTFwQyxFQUFFcnNDLEtBQUtnMkUsR0FBR3g0QyxFQUFFcjJCLEVBQUVvMkIsS0FBU3NQLEVBQUUsTUFBTXJQLEVBQUVBLEVBQUUybUMsT0FBTyxFQUFFOTNCLEVBQUUzc0MsU0FBU2dELEVBQUUsSUFBSXNYLEVBQUV0WCxFQUFFeXVCLEVBQUUsS0FBSy93QixFQUFFbUcsR0FBR2ltQixFQUFFeHNCLEtBQUssQ0FBQzIrQixNQUFNajhCLEVBQUV3dkUsVUFBVTdsQyxNQUFNLEdBQUcsSUFBTyxFQUFGeGdDLEdBQUssQ0FBNEUsR0FBbkNtTyxFQUFFLGFBQWFwTyxHQUFHLGVBQWVBLEtBQXRFbEosRUFBRSxjQUFja0osR0FBRyxnQkFBZ0JBLElBQTJDLElBQU8sR0FBRkMsTUFBUXNsQixFQUFFL3dCLEVBQUV5c0UsZUFBZXpzRSxFQUFFMHNFLGVBQWU3RyxHQUFHOTBDLEtBQUlBLEVBQUU4a0QsT0FBZ0JqOEQsR0FBR3RYLEtBQUdBLEVBQUU2RCxFQUFFb0QsU0FBU3BELEVBQUVBLEdBQUc3RCxFQUFFNkQsRUFBRWcyRCxlQUFlNzVELEVBQUVreUUsYUFBYWx5RSxFQUFFa3pCLGFBQWFqc0IsT0FBVXFRLEdBQXFDQSxFQUFFb3lCLEVBQWlCLFFBQWZqYixHQUFuQ0EsRUFBRS93QixFQUFFeXNFLGVBQWV6c0UsRUFBRTJzRSxXQUFrQjlHLEdBQUc5MEMsR0FBRyxRQUNsZUEsS0FBUjBiLEVBQUVvM0IsR0FBRzl5QyxLQUFVLElBQUlBLEVBQUVuVixLQUFLLElBQUltVixFQUFFblYsT0FBS21WLEVBQUUsUUFBVW5YLEVBQUUsS0FBS21YLEVBQUVpYixHQUFLcHlCLElBQUltWCxHQUFFLENBQWdVLEdBQS9Ua2IsRUFBRTZnQyxHQUFHL2xFLEVBQUUsZUFBZTR1RSxFQUFFLGVBQWV2NEMsRUFBRSxRQUFXLGVBQWU1eEIsR0FBRyxnQkFBZ0JBLElBQUV5Z0MsRUFBRWdqQyxHQUFHbG9FLEVBQUUsaUJBQWlCNHVFLEVBQUUsaUJBQWlCdjRDLEVBQUUsV0FBVXFQLEVBQUUsTUFBTTd5QixFQUFFdFgsRUFBRTZ2RSxHQUFHdjRELEdBQUd1akIsRUFBRSxNQUFNcE0sRUFBRXp1QixFQUFFNnZFLEdBQUdwaEQsSUFBR3p1QixFQUFFLElBQUkycEMsRUFBRWxsQyxFQUFFcTJCLEVBQUUsUUFBUXhqQixFQUFFNVosRUFBRW1HLElBQUtuQyxPQUFPeW9DLEVBQUVucUMsRUFBRW1xRSxjQUFjdHZDLEVBQUVwMkIsRUFBRSxLQUFLOCtELEdBQUcxL0QsS0FBSzZsQyxLQUFJQyxFQUFFLElBQUlBLEVBQUUwcEMsRUFBRXY0QyxFQUFFLFFBQVFyTSxFQUFFL3dCLEVBQUVtRyxJQUFLbkMsT0FBT201QixFQUFFOE8sRUFBRXdnQyxjQUFjaGdDLEVBQUUxbEMsRUFBRWtsQyxHQUFHUSxFQUFFMWxDLEVBQUs2UyxHQUFHbVgsRUFBRXRsQixFQUFFLENBQWEsSUFBUmtxRSxFQUFFNWtELEVBQUVxTSxFQUFFLEVBQU1ELEVBQWhCOE8sRUFBRXJ5QixFQUFrQnVqQixFQUFFQSxFQUFFMjRDLEdBQUczNEMsR0FBR0MsSUFBUSxJQUFKRCxFQUFFLEVBQU1wMkIsRUFBRTR1RSxFQUFFNXVFLEVBQUVBLEVBQUUrdUUsR0FBRy91RSxHQUFHbzJCLElBQUksS0FBSyxFQUFFQyxFQUFFRCxHQUFHOE8sRUFBRTZwQyxHQUFHN3BDLEdBQUc3TyxJQUFJLEtBQUssRUFBRUQsRUFBRUMsR0FBR3U0QyxFQUNwZkcsR0FBR0gsR0FBR3g0QyxJQUFJLEtBQUtDLEtBQUssQ0FBQyxHQUFHNk8sSUFBSTBwQyxHQUFHLE9BQU9BLEdBQUcxcEMsSUFBSTBwQyxFQUFFN1IsVUFBVSxNQUFNcjRELEVBQUV3Z0MsRUFBRTZwQyxHQUFHN3BDLEdBQUcwcEMsRUFBRUcsR0FBR0gsR0FBRzFwQyxFQUFFLFVBQVVBLEVBQUUsS0FBSyxPQUFPcnlCLEdBQUdtOEQsR0FBRzNwRCxFQUFFOXBCLEVBQUVzWCxFQUFFcXlCLEdBQUUsR0FBSSxPQUFPbGIsR0FBRyxPQUFPMGIsR0FBR3NwQyxHQUFHM3BELEVBQUVxZ0IsRUFBRTFiLEVBQUVrYixHQUFFLEdBQWlFLEdBQUcsWUFBMUNyeUIsR0FBakJ0WCxFQUFFMHBDLEVBQUVtbUMsR0FBR25tQyxHQUFHemlDLFFBQVdxeEQsVUFBVXQ0RCxFQUFFczRELFNBQVNuK0QsZ0JBQStCLFVBQVVtZCxHQUFHLFNBQVN0WCxFQUFFckYsS0FBSyxJQUFJKzRFLEVBQUU1RCxRQUFRLEdBQUdULEdBQUdydkUsR0FBRyxHQUFHK3ZFLEdBQUcyRCxFQUFFL0MsT0FBTyxDQUFDK0MsRUFBRWpELEdBQUcsSUFBSWtELEVBQUVwRCxRQUFRajVELEVBQUV0WCxFQUFFczRELFdBQVcsVUFBVWhoRCxFQUFFbmQsZ0JBQWdCLGFBQWE2RixFQUFFckYsTUFBTSxVQUFVcUYsRUFBRXJGLFFBQVErNEUsRUFBRWhELElBQ2xWLE9BRHlWZ0QsSUFBSUEsRUFBRUEsRUFBRXhxRSxFQUFFd2dDLElBQUs0bEMsR0FBR3hsRCxFQUFFNHBELEVBQUVoMkUsRUFBRW1HLElBQVc4dkUsR0FBR0EsRUFBRXpxRSxFQUFFbEosRUFBRTBwQyxHQUFHLGFBQWF4Z0MsSUFBSXlxRSxFQUFFM3pFLEVBQUVvNUQsZ0JBQ3RldWEsRUFBRW5hLFlBQVksV0FBV3g1RCxFQUFFckYsTUFBTWcvRCxHQUFHMzVELEVBQUUsU0FBU0EsRUFBRTFILFFBQU9xN0UsRUFBRWpxQyxFQUFFbW1DLEdBQUdubUMsR0FBR3ppQyxPQUFjaUMsR0FBRyxJQUFLLFdBQWFtbUUsR0FBR3NFLElBQUksU0FBU0EsRUFBRW5DLG1CQUFnQkUsR0FBR2lDLEVBQUVoQyxHQUFHam9DLEVBQUVrb0MsR0FBRyxNQUFLLE1BQU0sSUFBSyxXQUFXQSxHQUFHRCxHQUFHRCxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVlHLElBQUcsRUFBRyxNQUFNLElBQUssY0FBYyxJQUFLLFVBQVUsSUFBSyxVQUFVQSxJQUFHLEVBQUdDLEdBQUdob0QsRUFBRXBzQixFQUFFbUcsR0FBRyxNQUFNLElBQUssa0JBQWtCLEdBQUc0dEUsR0FBRyxNQUFNLElBQUssVUFBVSxJQUFLLFFBQVFLLEdBQUdob0QsRUFBRXBzQixFQUFFbUcsR0FBRyxJQUFJK3ZFLEVBQUUsR0FBRzFGLEdBQUcva0UsRUFBRSxDQUFDLE9BQU9ELEdBQUcsSUFBSyxtQkFBbUIsSUFBSTJxRSxFQUFFLHFCQUFxQixNQUFNMXFFLEVBQUUsSUFBSyxpQkFBaUIwcUUsRUFBRSxtQkFBbUIsTUFBTTFxRSxFQUNyZixJQUFLLG9CQUFvQjBxRSxFQUFFLHNCQUFzQixNQUFNMXFFLEVBQUUwcUUsT0FBRSxPQUFZbEYsR0FBR0YsR0FBR3ZsRSxFQUFFeEwsS0FBS20yRSxFQUFFLG9CQUFvQixZQUFZM3FFLEdBQUcsTUFBTXhMLEVBQUU4cEUsVUFBVXFNLEVBQUUsc0JBQXNCQSxJQUFJdkYsSUFBSSxPQUFPNXdFLEVBQUU4dUUsU0FBU21DLElBQUksdUJBQXVCa0YsRUFBRSxxQkFBcUJBLEdBQUdsRixLQUFLaUYsRUFBRXRNLE9BQVlGLEdBQUcsVUFBUkQsR0FBR3RqRSxHQUFrQnNqRSxHQUFHN3VFLE1BQU02dUUsR0FBR3hNLFlBQVlnVSxJQUFHLElBQWUsR0FBVmdGLEVBQUVwRSxHQUFHN2xDLEVBQUVtcUMsSUFBTzcyRSxTQUFTNjJFLEVBQUUsSUFBSTNJLEdBQUcySSxFQUFFM3FFLEVBQUUsS0FBS3hMLEVBQUVtRyxHQUFHaW1CLEVBQUV4c0IsS0FBSyxDQUFDMitCLE1BQU00M0MsRUFBRXJFLFVBQVVtRSxLQUFJQyxHQUFvQixRQUFSQSxFQUFFbEYsR0FBR2h4RSxPQUFmbTJFLEVBQUVwOUUsS0FBS205RSxNQUFzQ0EsRUFBRXZGLEdBMUJqSyxTQUFZbmxFLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLGlCQUFpQixPQUFPd2xFLEdBQUd2bEUsR0FBRyxJQUFLLFdBQVcsT0FBRyxLQUFLQSxFQUFFc2pFLE1BQWEsTUFBSytCLElBQUcsRUFBVUQsSUFBRyxJQUFLLFlBQVksT0FBT3JsRSxFQUFFQyxFQUFFMVMsUUFBUzgzRSxJQUFJQyxHQUFHLEtBQUt0bEUsRUFBRSxRQUFRLE9BQU8sTUEwQnhCNHFFLENBQUc1cUUsRUFBRXhMLEdBekIxYixTQUFZd0wsRUFBRUMsR0FBRyxHQUFHd2xFLEdBQUcsTUFBTSxtQkFBbUJ6bEUsSUFBSWdsRSxJQUFJTyxHQUFHdmxFLEVBQUVDLElBQUlELEVBQUVvK0QsS0FBS0QsR0FBR0QsR0FBR0QsR0FBRyxLQUFLd0gsSUFBRyxFQUFHemxFLEdBQUcsS0FBSyxPQUFPQSxHQUFHLElBQUssUUFBZ1EsUUFBUSxPQUFPLEtBQTNQLElBQUssV0FBVyxLQUFLQyxFQUFFd2dFLFNBQVN4Z0UsRUFBRTBnRSxRQUFRMWdFLEVBQUUyZ0UsVUFBVTNnRSxFQUFFd2dFLFNBQVN4Z0UsRUFBRTBnRSxPQUFPLENBQUMsR0FBRzFnRSxFQUFFNHFFLE1BQU0sRUFBRTVxRSxFQUFFNHFFLEtBQUsvMkUsT0FBTyxPQUFPbU0sRUFBRTRxRSxLQUFLLEdBQUc1cUUsRUFBRXNqRSxNQUFNLE9BQU81aUUsT0FBTzZ2QixhQUFhdndCLEVBQUVzakUsT0FBTyxPQUFPLEtBQUssSUFBSyxpQkFBaUIsT0FBTzZCLElBQUksT0FBT25sRSxFQUFFcWpFLE9BQU8sS0FBS3JqRSxFQUFFMVMsTUF5QitFdTlFLENBQUc5cUUsRUFBRXhMLEtBQTJCLEdBQXhCZ3NDLEVBQUU2bEMsR0FBRzdsQyxFQUFFLGtCQUFxQjFzQyxTQUFTNkcsRUFBRSxJQUFJcW5FLEdBQUcsZ0JBQ25mLGNBQWMsS0FBS3h0RSxFQUFFbUcsR0FBR2ltQixFQUFFeHNCLEtBQUssQ0FBQzIrQixNQUFNcDRCLEVBQUUyckUsVUFBVTlsQyxJQUFJN2xDLEVBQUVwTixLQUFLbTlFLEdBQUdqRSxHQUFHN2xELEVBQUUzZ0IsTUFBSyxTQUFTbXFFLEdBQUdwcUUsRUFBRUMsRUFBRXpMLEdBQUcsTUFBTSxDQUFDbkMsU0FBUzJOLEVBQUU3TCxTQUFTOEwsRUFBRTIrRCxjQUFjcHFFLEdBQUcsU0FBUzZ4RSxHQUFHcm1FLEVBQUVDLEdBQUcsSUFBSSxJQUFJekwsRUFBRXlMLEVBQUUsVUFBVXVnQyxFQUFFLEdBQUcsT0FBT3hnQyxHQUFHLENBQUMsSUFBSXJGLEVBQUVxRixFQUFFZ0IsRUFBRXJHLEVBQUVvOEQsVUFBVSxJQUFJcDhELEVBQUV5VixLQUFLLE9BQU9wUCxJQUFJckcsRUFBRXFHLEVBQVksT0FBVkEsRUFBRTAyRCxHQUFHMTNELEVBQUV4TCxLQUFZZ3NDLEVBQUUvcUMsUUFBUTIwRSxHQUFHcHFFLEVBQUVnQixFQUFFckcsSUFBYyxPQUFWcUcsRUFBRTAyRCxHQUFHMTNELEVBQUVDLEtBQVl1Z0MsRUFBRXBzQyxLQUFLZzJFLEdBQUdwcUUsRUFBRWdCLEVBQUVyRyxLQUFLcUYsRUFBRUEsRUFBRXU0RCxPQUFPLE9BQU8vM0IsRUFBRSxTQUFTOHBDLEdBQUd0cUUsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTyxLQUFLLEdBQUdBLEVBQUVBLEVBQUV1NEQsYUFBYXY0RCxHQUFHLElBQUlBLEVBQUVvUSxLQUFLLE9BQU9wUSxHQUFJLEtBQ3hhLFNBQVN1cUUsR0FBR3ZxRSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEdBQUcsSUFBSSxJQUFJcUcsRUFBRWYsRUFBRXkrRCxXQUFXOTlDLEVBQUUsR0FBRyxPQUFPcHNCLEdBQUdBLElBQUlnc0MsR0FBRyxDQUFDLElBQUkxcEMsRUFBRXRDLEVBQUU0WixFQUFFdFgsRUFBRXdoRSxVQUFVemtFLEVBQUVpRCxFQUFFaWdFLFVBQVUsR0FBRyxPQUFPM29ELEdBQUdBLElBQUlveUIsRUFBRSxNQUFNLElBQUkxcEMsRUFBRXNaLEtBQUssT0FBT3ZjLElBQUlpRCxFQUFFakQsRUFBRThHLEVBQWEsT0FBVnlULEVBQUVzcEQsR0FBR2xqRSxFQUFFd00sS0FBWTRmLEVBQUVuckIsUUFBUTIwRSxHQUFHNTFFLEVBQUU0WixFQUFFdFgsSUFBSzZELEdBQWMsT0FBVnlULEVBQUVzcEQsR0FBR2xqRSxFQUFFd00sS0FBWTRmLEVBQUV4c0IsS0FBS2cyRSxHQUFHNTFFLEVBQUU0WixFQUFFdFgsS0FBTXRDLEVBQUVBLEVBQUUrakUsT0FBTyxJQUFJMzNDLEVBQUU5c0IsUUFBUWtNLEVBQUU1TCxLQUFLLENBQUMyK0IsTUFBTTl5QixFQUFFcW1FLFVBQVUxbEQsSUFBSSxTQUFTbXFELE1BQU0sSUFBSUMsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsR0FBR2xyRSxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxTQUFTLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxXQUFXLFFBQVFDLEVBQUVrckUsVUFBVSxPQUFNLEVBQzNiLFNBQVNDLEdBQUdwckUsRUFBRUMsR0FBRyxNQUFNLGFBQWFELEdBQUcsV0FBV0EsR0FBRyxhQUFhQSxHQUFHLGlCQUFrQkMsRUFBRTR3RCxVQUFVLGlCQUFrQjV3RCxFQUFFNHdELFVBQVUsaUJBQWtCNXdELEVBQUVveEQseUJBQXlCLE9BQU9weEQsRUFBRW94RCx5QkFBeUIsTUFBTXB4RCxFQUFFb3hELHdCQUF3QmdhLE9BQU8sSUFBSTF4QyxHQUFHLG1CQUFvQjNwQyxXQUFXQSxnQkFBVyxFQUFPczdFLEdBQUcsbUJBQW9CQyxhQUFhQSxrQkFBYSxFQUFPLFNBQVNDLEdBQUd4ckUsSUFBRyxJQUFJQSxFQUFFc3lELFVBQTBCLElBQUl0eUQsRUFBRXN5RCxVQUFvQixPQUFUdHlELEVBQUVBLEVBQUVrOUMsU0FBdENsOUMsRUFBRXl4RCxZQUFZLElBQ25aLFNBQVNub0IsR0FBR3RwQyxHQUFHLEtBQUssTUFBTUEsRUFBRUEsRUFBRUEsRUFBRStuRSxZQUFZLENBQUMsSUFBSTluRSxFQUFFRCxFQUFFc3lELFNBQVMsR0FBRyxJQUFJcnlELEdBQUcsSUFBSUEsRUFBRSxNQUFNLE9BQU9ELEVBQUUsU0FBU3lyRSxHQUFHenJFLEdBQUdBLEVBQUVBLEVBQUUwckUsZ0JBQWdCLElBQUksSUFBSXpyRSxFQUFFLEVBQUVELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUVzeUQsU0FBUyxDQUFDLElBQUk5OUQsRUFBRXdMLEVBQUV6UyxLQUFLLEdBQUcsTUFBTWlILEdBQUcsT0FBT0EsR0FBRyxPQUFPQSxFQUFFLENBQUMsR0FBRyxJQUFJeUwsRUFBRSxPQUFPRCxFQUFFQyxRQUFRLE9BQU96TCxHQUFHeUwsSUFBSUQsRUFBRUEsRUFBRTByRSxnQkFBZ0IsT0FBTyxLQUFLLElBQUlDLEdBQUcsRUFBOERDLEdBQUdqaUUsS0FBS29pQixTQUFTNTRCLFNBQVMsSUFBSXdGLE1BQU0sR0FBR2t6RSxHQUFHLGdCQUFnQkQsR0FBR0UsR0FBRyxnQkFBZ0JGLEdBQUd2QixHQUFHLG9CQUFvQnVCLEdBQUdHLEdBQUcsaUJBQWlCSCxHQUM5ZCxTQUFTdlIsR0FBR3I2RCxHQUFHLElBQUlDLEVBQUVELEVBQUU2ckUsSUFBSSxHQUFHNXJFLEVBQUUsT0FBT0EsRUFBRSxJQUFJLElBQUl6TCxFQUFFd0wsRUFBRXkyRCxXQUFXamlFLEdBQUcsQ0FBQyxHQUFHeUwsRUFBRXpMLEVBQUU2MUUsS0FBSzcxRSxFQUFFcTNFLElBQUksQ0FBZSxHQUFkcjNFLEVBQUV5TCxFQUFFcTRELFVBQWEsT0FBT3I0RCxFQUFFK3JFLE9BQU8sT0FBT3gzRSxHQUFHLE9BQU9BLEVBQUV3M0UsTUFBTSxJQUFJaHNFLEVBQUV5ckUsR0FBR3pyRSxHQUFHLE9BQU9BLEdBQUcsQ0FBQyxHQUFHeEwsRUFBRXdMLEVBQUU2ckUsSUFBSSxPQUFPcjNFLEVBQUV3TCxFQUFFeXJFLEdBQUd6ckUsR0FBRyxPQUFPQyxFQUFNekwsR0FBSndMLEVBQUV4TCxHQUFNaWlFLFdBQVcsT0FBTyxLQUFLLFNBQVNLLEdBQUc5MkQsR0FBa0IsUUFBZkEsRUFBRUEsRUFBRTZyRSxLQUFLN3JFLEVBQUVxcUUsTUFBYyxJQUFJcnFFLEVBQUVvUSxLQUFLLElBQUlwUSxFQUFFb1EsS0FBSyxLQUFLcFEsRUFBRW9RLEtBQUssSUFBSXBRLEVBQUVvUSxJQUFJLEtBQUtwUSxFQUFFLFNBQVMybUUsR0FBRzNtRSxHQUFHLEdBQUcsSUFBSUEsRUFBRW9RLEtBQUssSUFBSXBRLEVBQUVvUSxJQUFJLE9BQU9wUSxFQUFFKzJELFVBQVUsTUFBTTMvRCxNQUFNeTNCLEVBQUUsS0FBTSxTQUFTbW9DLEdBQUdoM0QsR0FBRyxPQUFPQSxFQUFFOHJFLEtBQUssS0FDbGIsU0FBU2xDLEdBQUc1cEUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFK3JFLElBQWtDLFlBQTlCLElBQVM5ckUsSUFBSUEsRUFBRUQsRUFBRStyRSxJQUFJLElBQUkzMEIsS0FBWW4zQyxFQUFFLElBQUlnc0UsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU0MsR0FBR25zRSxHQUFHLE1BQU0sQ0FBQ2tyQixRQUFRbHJCLEdBQUcsU0FBU29zRSxHQUFFcHNFLEdBQUcsRUFBRWtzRSxLQUFLbHNFLEVBQUVrckIsUUFBUStnRCxHQUFHQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtBLE1BQU0sU0FBU0csR0FBRXJzRSxFQUFFQyxHQUFHaXNFLEtBQUtELEdBQUdDLElBQUlsc0UsRUFBRWtyQixRQUFRbHJCLEVBQUVrckIsUUFBUWpyQixFQUFFLElBQUlxc0UsR0FBRyxHQUFHQyxHQUFFSixHQUFHRyxJQUFJRSxHQUFFTCxJQUFHLEdBQUlNLEdBQUdILEdBQzVQLFNBQVNJLEdBQUcxc0UsRUFBRUMsR0FBRyxJQUFJekwsRUFBRXdMLEVBQUV2TyxLQUFLcTBELGFBQWEsSUFBSXR4RCxFQUFFLE9BQU84M0UsR0FBRyxJQUFJOXJDLEVBQUV4Z0MsRUFBRSsyRCxVQUFVLEdBQUd2MkIsR0FBR0EsRUFBRW1zQyw4Q0FBOEMxc0UsRUFBRSxPQUFPdWdDLEVBQUVvc0MsMENBQTBDLElBQVM1ckUsRUFBTHJHLEVBQUUsR0FBSyxJQUFJcUcsS0FBS3hNLEVBQUVtRyxFQUFFcUcsR0FBR2YsRUFBRWUsR0FBb0gsT0FBakh3L0IsS0FBSXhnQyxFQUFFQSxFQUFFKzJELFdBQVk0Viw0Q0FBNEMxc0UsRUFBRUQsRUFBRTRzRSwwQ0FBMENqeUUsR0FBVUEsRUFBRSxTQUFTa3lFLEdBQUc3c0UsR0FBeUIsT0FBTyxNQUEzQkEsRUFBRTRsRCxrQkFBOEMsU0FBU2tuQixLQUFLVixHQUFFSSxJQUFHSixHQUFFRyxJQUFHLFNBQVNRLEdBQUcvc0UsRUFBRUMsRUFBRXpMLEdBQUcsR0FBRyszRSxHQUFFcmhELFVBQVVvaEQsR0FBRyxNQUFNbDFFLE1BQU15M0IsRUFBRSxNQUFNdzlDLEdBQUVFLEdBQUV0c0UsR0FBR29zRSxHQUFFRyxHQUFFaDRFLEdBQy9lLFNBQVN3NEUsR0FBR2h0RSxFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEVBQUV4Z0MsRUFBRSsyRCxVQUFnQyxHQUF0Qi8yRCxFQUFFQyxFQUFFMmxELGtCQUFxQixtQkFBb0JwbEIsRUFBRXlzQyxnQkFBZ0IsT0FBT3o0RSxFQUF3QixJQUFJLElBQUltRyxLQUE5QjZsQyxFQUFFQSxFQUFFeXNDLGtCQUFpQyxLQUFLdHlFLEtBQUtxRixHQUFHLE1BQU01SSxNQUFNeTNCLEVBQUUsSUFBSWdnQyxFQUFHNXVELElBQUksVUFBVXRGLElBQUksT0FBTzRkLEVBQUUsR0FBRy9qQixFQUFFZ3NDLEdBQUcsU0FBUzBzQyxHQUFHbHRFLEdBQXlHLE9BQXRHQSxHQUFHQSxFQUFFQSxFQUFFKzJELFlBQVkvMkQsRUFBRW10RSwyQ0FBMkNiLEdBQUdHLEdBQUdGLEdBQUVyaEQsUUFBUW1oRCxHQUFFRSxHQUFFdnNFLEdBQUdxc0UsR0FBRUcsR0FBRUEsR0FBRXRoRCxVQUFlLEVBQUcsU0FBU2tpRCxHQUFHcHRFLEVBQUVDLEVBQUV6TCxHQUFHLElBQUlnc0MsRUFBRXhnQyxFQUFFKzJELFVBQVUsSUFBSXYyQixFQUFFLE1BQU1wcEMsTUFBTXkzQixFQUFFLE1BQU1yNkIsR0FBR3dMLEVBQUVndEUsR0FBR2h0RSxFQUFFQyxFQUFFd3NFLElBQUlqc0MsRUFBRTJzQywwQ0FBMENudEUsRUFBRW9zRSxHQUFFSSxJQUFHSixHQUFFRyxJQUFHRixHQUFFRSxHQUFFdnNFLElBQUlvc0UsR0FBRUksSUFBR0gsR0FBRUcsR0FBRWg0RSxHQUM3ZSxJQUFJNjRFLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHcG5DLEVBQUVvMEIseUJBQXlCaVQsR0FBR3JuQyxFQUFFNjBCLDBCQUEwQnlTLEdBQUd0bkMsRUFBRXVuQyx3QkFBd0JDLEdBQUd4bkMsRUFBRXluQyxxQkFBcUJDLEdBQUcxbkMsRUFBRTJuQyxzQkFBc0JDLEdBQUc1bkMsRUFBRW8yQixhQUFheVIsR0FBRzduQyxFQUFFOG5DLGlDQUFpQ0MsR0FBRy9uQyxFQUFFZ29DLDJCQUEyQkMsR0FBR2pvQyxFQUFFdTNCLDhCQUE4QjJRLEdBQUdsb0MsRUFBRTgwQix3QkFBd0JxVCxHQUFHbm9DLEVBQUVvb0MscUJBQXFCQyxHQUFHcm9DLEVBQUVzb0Msc0JBQXNCQyxHQUFHLEdBQUdDLFFBQUcsSUFBU2QsR0FBR0EsR0FBRyxhQUFhZSxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxHQUFHaEIsS0FBS2xrRSxHQUFFLElBQUlrbEUsR0FBR2hCLEdBQUcsV0FBVyxPQUFPQSxLQUFLZ0IsSUFDdGQsU0FBU0MsS0FBSyxPQUFPaEIsTUFBTSxLQUFLRSxHQUFHLE9BQU8sR0FBRyxLQUFLRSxHQUFHLE9BQU8sR0FBRyxLQUFLQyxHQUFHLE9BQU8sR0FBRyxLQUFLQyxHQUFHLE9BQU8sR0FBRyxLQUFLRSxHQUFHLE9BQU8sR0FBRyxRQUFRLE1BQU1wM0UsTUFBTXkzQixFQUFFLE9BQVEsU0FBU29nRCxHQUFHanZFLEdBQUcsT0FBT0EsR0FBRyxLQUFLLEdBQUcsT0FBT2t1RSxHQUFHLEtBQUssR0FBRyxPQUFPRSxHQUFHLEtBQUssR0FBRyxPQUFPQyxHQUFHLEtBQUssR0FBRyxPQUFPQyxHQUFHLEtBQUssR0FBRyxPQUFPRSxHQUFHLFFBQVEsTUFBTXAzRSxNQUFNeTNCLEVBQUUsT0FBUSxTQUFTcWdELEdBQUdsdkUsRUFBRUMsR0FBVyxPQUFSRCxFQUFFaXZFLEdBQUdqdkUsR0FBVXV0RSxHQUFHdnRFLEVBQUVDLEdBQUcsU0FBU2t2RSxHQUFHbnZFLEVBQUVDLEVBQUV6TCxHQUFXLE9BQVJ3TCxFQUFFaXZFLEdBQUdqdkUsR0FBVXd0RSxHQUFHeHRFLEVBQUVDLEVBQUV6TCxHQUFHLFNBQVM0NkUsS0FBSyxHQUFHLE9BQU9QLEdBQUcsQ0FBQyxJQUFJN3VFLEVBQUU2dUUsR0FBR0EsR0FBRyxLQUFLcEIsR0FBR3p0RSxHQUFHcXZFLEtBQzNhLFNBQVNBLEtBQUssSUFBSVAsSUFBSSxPQUFPRixHQUFHLENBQUNFLElBQUcsRUFBRyxJQUFJOXVFLEVBQUUsRUFBRSxJQUFJLElBQUlDLEVBQUUydUUsR0FBR00sR0FBRyxJQUFHLFdBQVcsS0FBS2x2RSxFQUFFQyxFQUFFbk0sT0FBT2tNLElBQUksQ0FBQyxJQUFJeEwsRUFBRXlMLEVBQUVELEdBQUcsR0FBR3hMLEVBQUVBLEdBQUUsU0FBVSxPQUFPQSxPQUFNbzZFLEdBQUcsS0FBSyxNQUFNcDZFLEdBQUcsTUFBTSxPQUFPbzZFLEtBQUtBLEdBQUdBLEdBQUdqMkUsTUFBTXFILEVBQUUsSUFBSXd0RSxHQUFHVSxHQUFHa0IsSUFBSTU2RSxFQUFHLFFBQVFzNkUsSUFBRyxJQUFLLElBQUlRLEdBQUd0aUIsRUFBR3VpQix3QkFBd0IsU0FBU0MsR0FBR3h2RSxFQUFFQyxHQUFHLEdBQUdELEdBQUdBLEVBQUUrbEQsYUFBYSxDQUE0QixJQUFJLElBQUl2eEQsS0FBbkN5TCxFQUFFc1ksRUFBRSxHQUFHdFksR0FBR0QsRUFBRUEsRUFBRStsRCxrQkFBNEIsSUFBUzlsRCxFQUFFekwsS0FBS3lMLEVBQUV6TCxHQUFHd0wsRUFBRXhMLElBQUksT0FBT3lMLEVBQUUsT0FBT0EsRUFBRSxJQUFJd3ZFLEdBQUd0RCxHQUFHLE1BQU11RCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEtBQUtELEdBQUdELEdBQUdELEdBQUcsS0FDNWIsU0FBU0ksR0FBRzl2RSxHQUFHLElBQUlDLEVBQUV3dkUsR0FBR3ZrRCxRQUFRa2hELEdBQUVxRCxJQUFJenZFLEVBQUV2TyxLQUFLczlELFNBQVNnaEIsY0FBYzl2RSxFQUFFLFNBQVMrdkUsR0FBR2h3RSxFQUFFQyxHQUFHLEtBQUssT0FBT0QsR0FBRyxDQUFDLElBQUl4TCxFQUFFd0wsRUFBRXM0RCxVQUFVLElBQUl0NEQsRUFBRWl3RSxXQUFXaHdFLEtBQUtBLEVBQUUsSUFBRyxPQUFPekwsSUFBSUEsRUFBRXk3RSxXQUFXaHdFLEtBQUtBLEVBQUUsTUFBV3pMLEVBQUV5N0UsWUFBWWh3RSxPQUFPRCxFQUFFaXdFLFlBQVlod0UsRUFBRSxPQUFPekwsSUFBSUEsRUFBRXk3RSxZQUFZaHdFLEdBQUdELEVBQUVBLEVBQUV1NEQsUUFBUSxTQUFTMlgsR0FBR2x3RSxFQUFFQyxHQUFHeXZFLEdBQUcxdkUsRUFBRTR2RSxHQUFHRCxHQUFHLEtBQXNCLFFBQWpCM3ZFLEVBQUVBLEVBQUVtd0UsZUFBdUIsT0FBT253RSxFQUFFb3dFLGVBQWUsSUFBS3B3RSxFQUFFcXdFLE1BQU1wd0UsS0FBS3F3RSxJQUFHLEdBQUl0d0UsRUFBRW93RSxhQUFhLE1BQ3ZZLFNBQVNHLEdBQUd2d0UsRUFBRUMsR0FBRyxHQUFHMnZFLEtBQUs1dkUsSUFBRyxJQUFLQyxHQUFHLElBQUlBLEVBQW1HLEdBQTdGLGlCQUFrQkEsR0FBRyxhQUFhQSxJQUFFMnZFLEdBQUc1dkUsRUFBRUMsRUFBRSxZQUFXQSxFQUFFLENBQUM3TixRQUFRNE4sRUFBRXd3RSxhQUFhdndFLEVBQUVvTCxLQUFLLE1BQVMsT0FBT3NrRSxHQUFHLENBQUMsR0FBRyxPQUFPRCxHQUFHLE1BQU10NEUsTUFBTXkzQixFQUFFLE1BQU04Z0QsR0FBRzF2RSxFQUFFeXZFLEdBQUdTLGFBQWEsQ0FBQ0UsTUFBTSxFQUFFRCxhQUFhbndFLEVBQUV3d0UsV0FBVyxXQUFXZCxHQUFHQSxHQUFHdGtFLEtBQUtwTCxFQUFFLE9BQU9ELEVBQUUrdkUsY0FBYyxJQUFJVyxJQUFHLEVBQUcsU0FBU0MsR0FBRzN3RSxHQUFHQSxFQUFFNHdFLFlBQVksQ0FBQy91QixVQUFVN2hELEVBQUV5NEQsY0FBY29ZLGdCQUFnQixLQUFLQyxlQUFlLEtBQUtsdUQsT0FBTyxDQUFDbXVELFFBQVEsTUFBTUMsUUFBUSxNQUMxYSxTQUFTQyxHQUFHanhFLEVBQUVDLEdBQUdELEVBQUVBLEVBQUU0d0UsWUFBWTN3RSxFQUFFMndFLGNBQWM1d0UsSUFBSUMsRUFBRTJ3RSxZQUFZLENBQUMvdUIsVUFBVTdoRCxFQUFFNmhELFVBQVVndkIsZ0JBQWdCN3dFLEVBQUU2d0UsZ0JBQWdCQyxlQUFlOXdFLEVBQUU4d0UsZUFBZWx1RCxPQUFPNWlCLEVBQUU0aUIsT0FBT291RCxRQUFRaHhFLEVBQUVneEUsVUFBVSxTQUFTRSxHQUFHbHhFLEVBQUVDLEdBQUcsTUFBTSxDQUFDa3hFLFVBQVVueEUsRUFBRW94RSxLQUFLbnhFLEVBQUVtUSxJQUFJLEVBQUV2VCxRQUFRLEtBQUsyQixTQUFTLEtBQUs2TSxLQUFLLE1BQU0sU0FBU2dtRSxHQUFHcnhFLEVBQUVDLEdBQW1CLEdBQUcsUUFBbkJELEVBQUVBLEVBQUU0d0UsYUFBd0IsQ0FBWSxJQUFJcDhFLEdBQWZ3TCxFQUFFQSxFQUFFNGlCLFFBQWVtdUQsUUFBUSxPQUFPdjhFLEVBQUV5TCxFQUFFb0wsS0FBS3BMLEdBQUdBLEVBQUVvTCxLQUFLN1csRUFBRTZXLEtBQUs3VyxFQUFFNlcsS0FBS3BMLEdBQUdELEVBQUUrd0UsUUFBUTl3RSxHQUNyWixTQUFTcXhFLEdBQUd0eEUsRUFBRUMsR0FBRyxJQUFJekwsRUFBRXdMLEVBQUU0d0UsWUFBWXB3QyxFQUFFeGdDLEVBQUVzNEQsVUFBVSxHQUFHLE9BQU85M0IsR0FBb0Joc0MsS0FBaEJnc0MsRUFBRUEsRUFBRW93QyxhQUFtQixDQUFDLElBQUlqMkUsRUFBRSxLQUFLcUcsRUFBRSxLQUF5QixHQUFHLFFBQXZCeE0sRUFBRUEsRUFBRXE4RSxpQkFBNEIsQ0FBQyxFQUFFLENBQUMsSUFBSWp3RCxFQUFFLENBQUN1d0QsVUFBVTM4RSxFQUFFMjhFLFVBQVVDLEtBQUs1OEUsRUFBRTQ4RSxLQUFLaGhFLElBQUk1YixFQUFFNGIsSUFBSXZULFFBQVFySSxFQUFFcUksUUFBUTJCLFNBQVNoSyxFQUFFZ0ssU0FBUzZNLEtBQUssTUFBTSxPQUFPckssRUFBRXJHLEVBQUVxRyxFQUFFNGYsRUFBRTVmLEVBQUVBLEVBQUVxSyxLQUFLdVYsRUFBRXBzQixFQUFFQSxFQUFFNlcsV0FBVyxPQUFPN1csR0FBRyxPQUFPd00sRUFBRXJHLEVBQUVxRyxFQUFFZixFQUFFZSxFQUFFQSxFQUFFcUssS0FBS3BMLE9BQU90RixFQUFFcUcsRUFBRWYsRUFBaUgsT0FBL0d6TCxFQUFFLENBQUNxdEQsVUFBVXJoQixFQUFFcWhCLFVBQVVndkIsZ0JBQWdCbDJFLEVBQUVtMkUsZUFBZTl2RSxFQUFFNGhCLE9BQU80ZCxFQUFFNWQsT0FBT291RCxRQUFReHdDLEVBQUV3d0MsY0FBU2h4RSxFQUFFNHdFLFlBQVlwOEUsR0FBNEIsUUFBbkJ3TCxFQUFFeEwsRUFBRXM4RSxnQkFBd0J0OEUsRUFBRXE4RSxnQkFBZ0I1d0UsRUFBRUQsRUFBRXFMLEtBQ25mcEwsRUFBRXpMLEVBQUVzOEUsZUFBZTd3RSxFQUNuQixTQUFTc3hFLEdBQUd2eEUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxJQUFJN2xDLEVBQUVxRixFQUFFNHdFLFlBQVlGLElBQUcsRUFBRyxJQUFJMXZFLEVBQUVyRyxFQUFFazJFLGdCQUFnQmp3RCxFQUFFam1CLEVBQUVtMkUsZUFBZWg2RSxFQUFFNkQsRUFBRWlvQixPQUFPbXVELFFBQVEsR0FBRyxPQUFPajZFLEVBQUUsQ0FBQzZELEVBQUVpb0IsT0FBT211RCxRQUFRLEtBQUssSUFBSTNpRSxFQUFFdFgsRUFBRWpELEVBQUV1YSxFQUFFL0MsS0FBSytDLEVBQUUvQyxLQUFLLEtBQUssT0FBT3VWLEVBQUU1ZixFQUFFbk4sRUFBRStzQixFQUFFdlYsS0FBS3hYLEVBQUUrc0IsRUFBRXhTLEVBQUUsSUFBSUUsRUFBRXRPLEVBQUVzNEQsVUFBVSxHQUFHLE9BQU9ocUQsRUFBRSxDQUFpQixJQUFJMGEsR0FBcEIxYSxFQUFFQSxFQUFFc2lFLGFBQW9CRSxlQUFlOW5ELElBQUlwSSxJQUFJLE9BQU9vSSxFQUFFMWEsRUFBRXVpRSxnQkFBZ0JoOUUsRUFBRW0xQixFQUFFM2QsS0FBS3hYLEVBQUV5YSxFQUFFd2lFLGVBQWUxaUUsSUFBSSxHQUFHLE9BQU9wTixFQUFFLENBQThCLElBQTdCZ29CLEVBQUVydUIsRUFBRWtuRCxVQUFVamhDLEVBQUUsRUFBRXRTLEVBQUV6YSxFQUFFdWEsRUFBRSxPQUFPLENBQUN0WCxFQUFFa0ssRUFBRW93RSxLQUFLLElBQUkvbkMsRUFBRXJvQyxFQUFFbXdFLFVBQVUsSUFBSTN3QyxFQUFFMXBDLEtBQUtBLEVBQUUsQ0FBQyxPQUFPd1gsSUFBSUEsRUFBRUEsRUFBRWpELEtBQUssQ0FBQzhsRSxVQUFVOW5DLEVBQUUrbkMsS0FBSyxFQUFFaGhFLElBQUlwUCxFQUFFb1AsSUFBSXZULFFBQVFtRSxFQUFFbkUsUUFBUTJCLFNBQVN3QyxFQUFFeEMsU0FDcmY2TSxLQUFLLE9BQU9yTCxFQUFFLENBQUMsSUFBSW1FLEVBQUVuRSxFQUFFdWxCLEVBQUV2a0IsRUFBVSxPQUFSbEssRUFBRW1KLEVBQUVvcEMsRUFBRTcwQyxFQUFTK3dCLEVBQUVuVixLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmak0sRUFBRW9oQixFQUFFMW9CLFNBQWlDLENBQUNtc0IsRUFBRTdrQixFQUFFNU0sS0FBSzh4QyxFQUFFcmdCLEVBQUVseUIsR0FBRyxNQUFNa0osRUFBRWdwQixFQUFFN2tCLEVBQUUsTUFBTW5FLEVBQUUsS0FBSyxFQUFFbUUsRUFBRTZaLE9BQWUsS0FBVDdaLEVBQUU2WixNQUFZLEdBQUcsS0FBSyxFQUFzRCxHQUFHLE9BQTNDbG5CLEVBQUUsbUJBQWRxTixFQUFFb2hCLEVBQUUxb0IsU0FBZ0NzSCxFQUFFNU0sS0FBSzh4QyxFQUFFcmdCLEVBQUVseUIsR0FBR3FOLEdBQTBCLE1BQU1uRSxFQUFFZ3BCLEVBQUV6USxFQUFFLEdBQUd5USxFQUFFbHlCLEdBQUcsTUFBTWtKLEVBQUUsS0FBSyxFQUFFMHdFLElBQUcsR0FBSSxPQUFPMXZFLEVBQUV4QyxXQUFXd0IsRUFBRWdlLE9BQU8sR0FBZSxRQUFabG5CLEVBQUU2RCxFQUFFcTJFLFNBQWlCcjJFLEVBQUVxMkUsUUFBUSxDQUFDaHdFLEdBQUdsSyxFQUFFMUMsS0FBSzRNLFNBQVNxb0MsRUFBRSxDQUFDOG5DLFVBQVU5bkMsRUFBRStuQyxLQUFLdDZFLEVBQUVzWixJQUFJcFAsRUFBRW9QLElBQUl2VCxRQUFRbUUsRUFBRW5FLFFBQVEyQixTQUFTd0MsRUFBRXhDLFNBQVM2TSxLQUFLLE1BQU0sT0FBT2lELEdBQUd6YSxFQUFFeWEsRUFBRSs2QixFQUFFajdCLEVBQUU0YSxHQUFHMWEsRUFBRUEsRUFBRWpELEtBQUtnK0IsRUFBRXpvQixHQUFHOXBCLEVBQVcsR0FBRyxRQUFaa0ssRUFBRUEsRUFBRXFLLE1BQzFlLElBQXNCLFFBQW5CdlUsRUFBRTZELEVBQUVpb0IsT0FBT211RCxTQUFpQixNQUFXL3ZFLEVBQUVsSyxFQUFFdVUsS0FBS3ZVLEVBQUV1VSxLQUFLLEtBQUsxUSxFQUFFbTJFLGVBQWVoNkUsRUFBRTZELEVBQUVpb0IsT0FBT211RCxRQUFRLE1BQWMsT0FBT3ppRSxJQUFJRixFQUFFNGEsR0FBR3J1QixFQUFFa25ELFVBQVV6ekMsRUFBRXpULEVBQUVrMkUsZ0JBQWdCaDlFLEVBQUU4RyxFQUFFbTJFLGVBQWV4aUUsRUFBRWtqRSxJQUFJNXdELEVBQUU1Z0IsRUFBRXF3RSxNQUFNenZELEVBQUU1Z0IsRUFBRXk0RCxjQUFjenZDLEdBQUcsU0FBU3lvRCxHQUFHenhFLEVBQUVDLEVBQUV6TCxHQUE4QixHQUEzQndMLEVBQUVDLEVBQUUrd0UsUUFBUS93RSxFQUFFK3dFLFFBQVEsS0FBUSxPQUFPaHhFLEVBQUUsSUFBSUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFbE0sT0FBT21NLElBQUksQ0FBQyxJQUFJdWdDLEVBQUV4Z0MsRUFBRUMsR0FBR3RGLEVBQUU2bEMsRUFBRWhpQyxTQUFTLEdBQUcsT0FBTzdELEVBQUUsQ0FBcUIsR0FBcEI2bEMsRUFBRWhpQyxTQUFTLEtBQUtnaUMsRUFBRWhzQyxFQUFLLG1CQUFvQm1HLEVBQUUsTUFBTXZELE1BQU15M0IsRUFBRSxJQUFJbDBCLElBQUlBLEVBQUVwRCxLQUFLaXBDLEtBQUssSUFBSWt4QyxJQUFHLElBQUtybUIsRUFBR3NtQixXQUFXQyxLQUMzYixTQUFTQyxHQUFHN3hFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQThCaHNDLEVBQUUsT0FBWEEsRUFBRUEsRUFBRWdzQyxFQUF0QnZnQyxFQUFFRCxFQUFFeTRELGdCQUE4Q3g0RCxFQUFFc1ksRUFBRSxHQUFHdFksRUFBRXpMLEdBQUd3TCxFQUFFeTRELGNBQWNqa0UsRUFBRSxJQUFJd0wsRUFBRXF3RSxRQUFRcndFLEVBQUU0d0UsWUFBWS91QixVQUFVcnRELEdBQzNJLElBQUlzOUUsR0FBRyxDQUFDQyxVQUFVLFNBQVMveEUsR0FBRyxTQUFPQSxFQUFFQSxFQUFFZ3lFLGtCQUFpQjNaLEdBQUdyNEQsS0FBS0EsR0FBTWl5RSxnQkFBZ0IsU0FBU2p5RSxFQUFFQyxFQUFFekwsR0FBR3dMLEVBQUVBLEVBQUVneUUsZ0JBQWdCLElBQUl4eEMsRUFBRTB4QyxLQUFLdjNFLEVBQUV3M0UsR0FBR255RSxHQUFHZ0IsRUFBRWt3RSxHQUFHMXdDLEVBQUU3bEMsR0FBR3FHLEVBQUVuRSxRQUFRb0QsRUFBRSxNQUFTekwsSUFBY3dNLEVBQUV4QyxTQUFTaEssR0FBRzY4RSxHQUFHcnhFLEVBQUVnQixHQUFHb3hFLEdBQUdweUUsRUFBRXJGLEVBQUU2bEMsSUFBSTZ4QyxvQkFBb0IsU0FBU3J5RSxFQUFFQyxFQUFFekwsR0FBR3dMLEVBQUVBLEVBQUVneUUsZ0JBQWdCLElBQUl4eEMsRUFBRTB4QyxLQUFLdjNFLEVBQUV3M0UsR0FBR255RSxHQUFHZ0IsRUFBRWt3RSxHQUFHMXdDLEVBQUU3bEMsR0FBR3FHLEVBQUVvUCxJQUFJLEVBQUVwUCxFQUFFbkUsUUFBUW9ELEVBQUUsTUFBU3pMLElBQWN3TSxFQUFFeEMsU0FBU2hLLEdBQUc2OEUsR0FBR3J4RSxFQUFFZ0IsR0FBR294RSxHQUFHcHlFLEVBQUVyRixFQUFFNmxDLElBQUk4eEMsbUJBQW1CLFNBQVN0eUUsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRWd5RSxnQkFBZ0IsSUFBSXg5RSxFQUFFMDlFLEtBQUsxeEMsRUFBRTJ4QyxHQUFHbnlFLEdBQUdyRixFQUFFdTJFLEdBQUcxOEUsRUFBRWdzQyxHQUFHN2xDLEVBQUV5VixJQUFJLEVBQUUsTUFBU25RLElBQWN0RixFQUFFNkQsU0FDamZ5QixHQUFHb3hFLEdBQUdyeEUsRUFBRXJGLEdBQUd5M0UsR0FBR3B5RSxFQUFFd2dDLEVBQUVoc0MsS0FBSyxTQUFTKzlFLEdBQUd2eUUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxFQUFFcUcsRUFBRTRmLEdBQWlCLE1BQU0sbUJBQXBCNWdCLEVBQUVBLEVBQUUrMkQsV0FBc0N5YixzQkFBc0J4eUUsRUFBRXd5RSxzQkFBc0JoeUMsRUFBRXgvQixFQUFFNGYsS0FBRzNnQixFQUFFM04sV0FBVzJOLEVBQUUzTixVQUFVbWdGLHNCQUFzQjdLLEdBQUdwekUsRUFBRWdzQyxJQUFLb25DLEdBQUdqdEUsRUFBRXFHLElBQy9NLFNBQVMweEUsR0FBRzF5RSxFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEdBQUUsRUFBRzdsQyxFQUFFMnhFLEdBQU90ckUsRUFBRWYsRUFBRTRsRCxZQUEyVyxNQUEvVixpQkFBa0I3a0QsR0FBRyxPQUFPQSxFQUFFQSxFQUFFdXZFLEdBQUd2dkUsSUFBSXJHLEVBQUVreUUsR0FBRzVzRSxHQUFHd3NFLEdBQUdGLEdBQUVyaEQsUUFBeUJscUIsR0FBR3cvQixFQUFFLE9BQXRCQSxFQUFFdmdDLEVBQUU2bEQsZUFBd0M0bUIsR0FBRzFzRSxFQUFFckYsR0FBRzJ4RSxJQUFJcnNFLEVBQUUsSUFBSUEsRUFBRXpMLEVBQUV3TSxHQUFHaEIsRUFBRXk0RCxjQUFjLE9BQU94NEQsRUFBRTJSLFlBQU8sSUFBUzNSLEVBQUUyUixNQUFNM1IsRUFBRTJSLE1BQU0sS0FBSzNSLEVBQUUweUUsUUFBUWIsR0FBRzl4RSxFQUFFKzJELFVBQVU5MkQsRUFBRUEsRUFBRSt4RSxnQkFBZ0JoeUUsRUFBRXdnQyxLQUFJeGdDLEVBQUVBLEVBQUUrMkQsV0FBWTRWLDRDQUE0Q2h5RSxFQUFFcUYsRUFBRTRzRSwwQ0FBMEM1ckUsR0FBVWYsRUFDM1osU0FBUzJ5RSxHQUFHNXlFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUd4Z0MsRUFBRUMsRUFBRTJSLE1BQU0sbUJBQW9CM1IsRUFBRTR5RSwyQkFBMkI1eUUsRUFBRTR5RSwwQkFBMEJyK0UsRUFBRWdzQyxHQUFHLG1CQUFvQnZnQyxFQUFFNnlFLGtDQUFrQzd5RSxFQUFFNnlFLGlDQUFpQ3QrRSxFQUFFZ3NDLEdBQUd2Z0MsRUFBRTJSLFFBQVE1UixHQUFHOHhFLEdBQUdPLG9CQUFvQnB5RSxFQUFFQSxFQUFFMlIsTUFBTSxNQUMvUCxTQUFTbWhFLEdBQUcveUUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxJQUFJN2xDLEVBQUVxRixFQUFFKzJELFVBQVVwOEQsRUFBRWt3QixNQUFNcjJCLEVBQUVtRyxFQUFFaVgsTUFBTTVSLEVBQUV5NEQsY0FBYzk5RCxFQUFFaTNFLEtBQUtGLEdBQUdmLEdBQUczd0UsR0FBRyxJQUFJZ0IsRUFBRWYsRUFBRTRsRCxZQUFZLGlCQUFrQjdrRCxHQUFHLE9BQU9BLEVBQUVyRyxFQUFFdkksUUFBUW0rRSxHQUFHdnZFLElBQUlBLEVBQUU2ckUsR0FBRzVzRSxHQUFHd3NFLEdBQUdGLEdBQUVyaEQsUUFBUXZ3QixFQUFFdkksUUFBUXM2RSxHQUFHMXNFLEVBQUVnQixJQUFJdXdFLEdBQUd2eEUsRUFBRXhMLEVBQUVtRyxFQUFFNmxDLEdBQUc3bEMsRUFBRWlYLE1BQU01UixFQUFFeTRELGNBQTJDLG1CQUE3QnozRCxFQUFFZixFQUFFa21ELDRCQUFpRDByQixHQUFHN3hFLEVBQUVDLEVBQUVlLEVBQUV4TSxHQUFHbUcsRUFBRWlYLE1BQU01UixFQUFFeTRELGVBQWUsbUJBQW9CeDRELEVBQUVrbUQsMEJBQTBCLG1CQUFvQnhyRCxFQUFFcTRFLHlCQUF5QixtQkFBb0JyNEUsRUFBRXM0RSwyQkFBMkIsbUJBQW9CdDRFLEVBQUV1NEUscUJBQ3ZlanpFLEVBQUV0RixFQUFFaVgsTUFBTSxtQkFBb0JqWCxFQUFFdTRFLG9CQUFvQnY0RSxFQUFFdTRFLHFCQUFxQixtQkFBb0J2NEUsRUFBRXM0RSwyQkFBMkJ0NEUsRUFBRXM0RSw0QkFBNEJoekUsSUFBSXRGLEVBQUVpWCxPQUFPa2dFLEdBQUdPLG9CQUFvQjEzRSxFQUFFQSxFQUFFaVgsTUFBTSxNQUFNMi9ELEdBQUd2eEUsRUFBRXhMLEVBQUVtRyxFQUFFNmxDLEdBQUc3bEMsRUFBRWlYLE1BQU01UixFQUFFeTRELGVBQWUsbUJBQW9COTlELEVBQUV3NEUsb0JBQW9CbnpFLEVBQUVnZSxPQUFPLEdBQUcsSUFBSW8xRCxHQUFHdDlFLE1BQU00QyxRQUN2VCxTQUFTMjZFLEdBQUdyekUsRUFBRUMsRUFBRXpMLEdBQVcsR0FBRyxRQUFYd0wsRUFBRXhMLEVBQUU4K0UsTUFBaUIsbUJBQW9CdHpFLEdBQUcsaUJBQWtCQSxFQUFFLENBQUMsR0FBR3hMLEVBQUUrK0UsT0FBTyxDQUFZLEdBQVgvK0UsRUFBRUEsRUFBRSsrRSxPQUFZLENBQUMsR0FBRyxJQUFJLytFLEVBQUU0YixJQUFJLE1BQU1oWixNQUFNeTNCLEVBQUUsTUFBTSxJQUFJMlIsRUFBRWhzQyxFQUFFdWlFLFVBQVUsSUFBSXYyQixFQUFFLE1BQU1wcEMsTUFBTXkzQixFQUFFLElBQUk3dUIsSUFBSSxJQUFJckYsRUFBRSxHQUFHcUYsRUFBRSxPQUFHLE9BQU9DLEdBQUcsT0FBT0EsRUFBRXF6RSxLQUFLLG1CQUFvQnJ6RSxFQUFFcXpFLEtBQUtyekUsRUFBRXF6RSxJQUFJRSxhQUFhNzRFLEVBQVNzRixFQUFFcXpFLEtBQUlyekUsRUFBRSxTQUFTRCxHQUFHLElBQUlDLEVBQUV1Z0MsRUFBRW94QyxLQUFLM3hFLElBQUl5eEUsS0FBS3p4RSxFQUFFdWdDLEVBQUVveEMsS0FBSyxJQUFJLE9BQU81eEUsU0FBU0MsRUFBRXRGLEdBQUdzRixFQUFFdEYsR0FBR3FGLEdBQUdDLEVBQUV1ekUsV0FBVzc0RSxFQUFTc0YsR0FBRSxHQUFHLGlCQUFrQkQsRUFBRSxNQUFNNUksTUFBTXkzQixFQUFFLE1BQU0sSUFBSXI2QixFQUFFKytFLE9BQU8sTUFBTW44RSxNQUFNeTNCLEVBQUUsSUFBSTd1QixJQUFLLE9BQU9BLEVBQ2hlLFNBQVN5ekUsR0FBR3p6RSxFQUFFQyxHQUFHLEdBQUcsYUFBYUQsRUFBRXZPLEtBQUssTUFBTTJGLE1BQU15M0IsRUFBRSxHQUFHLG9CQUFvQjMxQixPQUFPNUcsVUFBVWEsU0FBU29FLEtBQUswSSxHQUFHLHFCQUFxQi9HLE9BQU9DLEtBQUs4RyxHQUFHdkUsS0FBSyxNQUFNLElBQUl1RSxJQUNsSyxTQUFTeXpFLEdBQUcxekUsR0FBRyxTQUFTQyxFQUFFQSxFQUFFekwsR0FBRyxHQUFHd0wsRUFBRSxDQUFDLElBQUl3Z0MsRUFBRXZnQyxFQUFFMHpFLFdBQVcsT0FBT256QyxHQUFHQSxFQUFFb3pDLFdBQVdwL0UsRUFBRXlMLEVBQUUwekUsV0FBV24vRSxHQUFHeUwsRUFBRTR6RSxZQUFZNXpFLEVBQUUwekUsV0FBV24vRSxFQUFFQSxFQUFFby9FLFdBQVcsS0FBS3AvRSxFQUFFd3BCLE1BQU0sR0FBRyxTQUFTeHBCLEVBQUVBLEVBQUVnc0MsR0FBRyxJQUFJeGdDLEVBQUUsT0FBTyxLQUFLLEtBQUssT0FBT3dnQyxHQUFHdmdDLEVBQUV6TCxFQUFFZ3NDLEdBQUdBLEVBQUVBLEVBQUVzekMsUUFBUSxPQUFPLEtBQUssU0FBU3R6QyxFQUFFeGdDLEVBQUVDLEdBQUcsSUFBSUQsRUFBRSxJQUFJcTNDLElBQUksT0FBT3AzQyxHQUFHLE9BQU9BLEVBQUVqUCxJQUFJZ1AsRUFBRStGLElBQUk5RixFQUFFalAsSUFBSWlQLEdBQUdELEVBQUUrRixJQUFJOUYsRUFBRTVMLE1BQU00TCxHQUFHQSxFQUFFQSxFQUFFNnpFLFFBQVEsT0FBTzl6RSxFQUFFLFNBQVNyRixFQUFFcUYsRUFBRUMsR0FBc0MsT0FBbkNELEVBQUUrekUsR0FBRy96RSxFQUFFQyxJQUFLNUwsTUFBTSxFQUFFMkwsRUFBRTh6RSxRQUFRLEtBQVk5ekUsRUFBRSxTQUFTZ0IsRUFBRWYsRUFBRXpMLEVBQUVnc0MsR0FBYSxPQUFWdmdDLEVBQUU1TCxNQUFNbXNDLEVBQU14Z0MsRUFBNEIsUUFBakJ3Z0MsRUFBRXZnQyxFQUFFcTRELFlBQTZCOTNCLEVBQUVBLEVBQUVuc0MsT0FBUUcsR0FBR3lMLEVBQUUrZCxNQUFNLEVBQ3BmeHBCLEdBQUdnc0MsR0FBRXZnQyxFQUFFK2QsTUFBTSxFQUFTeHBCLEdBRG9hQSxFQUNsYSxTQUFTb3NCLEVBQUUzZ0IsR0FBc0MsT0FBbkNELEdBQUcsT0FBT0MsRUFBRXE0RCxZQUFZcjRELEVBQUUrZCxNQUFNLEdBQVUvZCxFQUFFLFNBQVNuSixFQUFFa0osRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxPQUFHLE9BQU92Z0MsR0FBRyxJQUFJQSxFQUFFbVEsTUFBV25RLEVBQUUrekUsR0FBR3gvRSxFQUFFd0wsRUFBRWd2QixLQUFLd1IsSUFBSyszQixPQUFPdjRELEVBQUVDLEtBQUVBLEVBQUV0RixFQUFFc0YsRUFBRXpMLElBQUsrakUsT0FBT3Y0RCxFQUFTQyxHQUFFLFNBQVNtTyxFQUFFcE8sRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxPQUFHLE9BQU92Z0MsR0FBR0EsRUFBRTJxRCxjQUFjcDJELEVBQUUvQyxPQUFZK3VDLEVBQUU3bEMsRUFBRXNGLEVBQUV6TCxFQUFFcTJCLFFBQVN5b0QsSUFBSUQsR0FBR3J6RSxFQUFFQyxFQUFFekwsR0FBR2dzQyxFQUFFKzNCLE9BQU92NEQsRUFBRXdnQyxLQUFFQSxFQUFFeXpDLEdBQUd6L0UsRUFBRS9DLEtBQUsrQyxFQUFFeEQsSUFBSXdELEVBQUVxMkIsTUFBTSxLQUFLN3FCLEVBQUVndkIsS0FBS3dSLElBQUs4eUMsSUFBSUQsR0FBR3J6RSxFQUFFQyxFQUFFekwsR0FBR2dzQyxFQUFFKzNCLE9BQU92NEQsRUFBU3dnQyxHQUFFLFNBQVMzc0MsRUFBRW1NLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsT0FBRyxPQUFPdmdDLEdBQUcsSUFBSUEsRUFBRW1RLEtBQUtuUSxFQUFFODJELFVBQVUyRCxnQkFBZ0JsbUUsRUFBRWttRSxlQUFlejZELEVBQUU4MkQsVUFBVW1kLGlCQUFpQjEvRSxFQUFFMC9FLGlCQUFzQmowRSxFQUNyZ0JrMEUsR0FBRzMvRSxFQUFFd0wsRUFBRWd2QixLQUFLd1IsSUFBSyszQixPQUFPdjRELEVBQUVDLEtBQUVBLEVBQUV0RixFQUFFc0YsRUFBRXpMLEVBQUVxOEQsVUFBVSxLQUFNMEgsT0FBT3Y0RCxFQUFTQyxHQUFFLFNBQVNxTyxFQUFFdE8sRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRXgvQixHQUFHLE9BQUcsT0FBT2YsR0FBRyxJQUFJQSxFQUFFbVEsTUFBV25RLEVBQUVtMEUsR0FBRzUvRSxFQUFFd0wsRUFBRWd2QixLQUFLd1IsRUFBRXgvQixJQUFLdTNELE9BQU92NEQsRUFBRUMsS0FBRUEsRUFBRXRGLEVBQUVzRixFQUFFekwsSUFBSytqRSxPQUFPdjRELEVBQVNDLEdBQUUsU0FBUytvQixFQUFFaHBCLEVBQUVDLEVBQUV6TCxHQUFHLEdBQUcsaUJBQWtCeUwsR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRSt6RSxHQUFHLEdBQUcvekUsRUFBRUQsRUFBRWd2QixLQUFLeDZCLElBQUsrakUsT0FBT3Y0RCxFQUFFQyxFQUFFLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFNnVELFVBQVUsS0FBSzVCLEVBQUcsT0FBTzE0RCxFQUFFeS9FLEdBQUdoMEUsRUFBRXhPLEtBQUt3TyxFQUFFalAsSUFBSWlQLEVBQUU0cUIsTUFBTSxLQUFLN3FCLEVBQUVndkIsS0FBS3g2QixJQUFLOCtFLElBQUlELEdBQUdyekUsRUFBRSxLQUFLQyxHQUFHekwsRUFBRStqRSxPQUFPdjRELEVBQUV4TCxFQUFFLEtBQUsyNEQsRUFBRyxPQUFPbHRELEVBQUVrMEUsR0FBR2wwRSxFQUFFRCxFQUFFZ3ZCLEtBQUt4NkIsSUFBSytqRSxPQUFPdjRELEVBQUVDLEVBQUUsR0FBR216RSxHQUFHbnpFLElBQUlxdUQsRUFBR3J1RCxHQUFHLE9BQU9BLEVBQUVtMEUsR0FBR24wRSxFQUNuZkQsRUFBRWd2QixLQUFLeDZCLEVBQUUsT0FBUStqRSxPQUFPdjRELEVBQUVDLEVBQUV3ekUsR0FBR3p6RSxFQUFFQyxHQUFHLE9BQU8sS0FBSyxTQUFTb3BDLEVBQUVycEMsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxJQUFJN2xDLEVBQUUsT0FBT3NGLEVBQUVBLEVBQUVqUCxJQUFJLEtBQUssR0FBRyxpQkFBa0J3RCxHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU9tRyxFQUFFLEtBQUs3RCxFQUFFa0osRUFBRUMsRUFBRSxHQUFHekwsRUFBRWdzQyxHQUFHLEdBQUcsaUJBQWtCaHNDLEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUVzNkQsVUFBVSxLQUFLNUIsRUFBRyxPQUFPMTRELEVBQUV4RCxNQUFNMkosRUFBRW5HLEVBQUUvQyxPQUFPMjdELEVBQUc5K0MsRUFBRXRPLEVBQUVDLEVBQUV6TCxFQUFFcTJCLE1BQU1nbUMsU0FBU3J3QixFQUFFN2xDLEdBQUd5VCxFQUFFcE8sRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxLQUFLLEtBQUsyc0IsRUFBRyxPQUFPMzRELEVBQUV4RCxNQUFNMkosRUFBRTlHLEVBQUVtTSxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHLEtBQUssR0FBRzR5QyxHQUFHNStFLElBQUk4NUQsRUFBRzk1RCxHQUFHLE9BQU8sT0FBT21HLEVBQUUsS0FBSzJULEVBQUV0TyxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFLE1BQU1pekMsR0FBR3p6RSxFQUFFeEwsR0FBRyxPQUFPLEtBQUssU0FBUzJQLEVBQUVuRSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEdBQUcsR0FBRyxpQkFBa0I2bEMsR0FBRyxpQkFBa0JBLEVBQUUsT0FDbGUxcEMsRUFBRW1KLEVBRHVlRCxFQUFFQSxFQUFFZ0UsSUFBSXhQLElBQ3RmLEtBQVcsR0FBR2dzQyxFQUFFN2xDLEdBQUcsR0FBRyxpQkFBa0I2bEMsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRXN1QixVQUFVLEtBQUs1QixFQUFHLE9BQU9sdEQsRUFBRUEsRUFBRWdFLElBQUksT0FBT3c4QixFQUFFeHZDLElBQUl3RCxFQUFFZ3NDLEVBQUV4dkMsTUFBTSxLQUFLd3ZDLEVBQUUvdUMsT0FBTzI3RCxFQUFHOStDLEVBQUVyTyxFQUFFRCxFQUFFd2dDLEVBQUUzVixNQUFNZ21DLFNBQVNsMkQsRUFBRTZsQyxFQUFFeHZDLEtBQUtvZCxFQUFFbk8sRUFBRUQsRUFBRXdnQyxFQUFFN2xDLEdBQUcsS0FBS3d5RCxFQUFHLE9BQTJDdDVELEVBQUVvTSxFQUF0Q0QsRUFBRUEsRUFBRWdFLElBQUksT0FBT3c4QixFQUFFeHZDLElBQUl3RCxFQUFFZ3NDLEVBQUV4dkMsTUFBTSxLQUFXd3ZDLEVBQUU3bEMsR0FBRyxHQUFHeTRFLEdBQUc1eUMsSUFBSTh0QixFQUFHOXRCLEdBQUcsT0FBd0JseUIsRUFBRXJPLEVBQW5CRCxFQUFFQSxFQUFFZ0UsSUFBSXhQLElBQUksS0FBV2dzQyxFQUFFN2xDLEVBQUUsTUFBTTg0RSxHQUFHeHpFLEVBQUV1Z0MsR0FBRyxPQUFPLEtBQUssU0FBU2piLEVBQUU1cUIsRUFBRWltQixFQUFFOXBCLEVBQUVzWCxHQUFHLElBQUksSUFBSXZhLEVBQUUsS0FBSys5QixFQUFFLEtBQUt1NEMsRUFBRXZwRCxFQUFFcWdCLEVBQUVyZ0IsRUFBRSxFQUFFK1EsRUFBRSxLQUFLLE9BQU93NEMsR0FBR2xwQyxFQUFFbnFDLEVBQUVoRCxPQUFPbXRDLElBQUksQ0FBQ2twQyxFQUFFOTFFLE1BQU00c0MsR0FBR3RQLEVBQUV3NEMsRUFBRUEsRUFBRSxNQUFNeDRDLEVBQUV3NEMsRUFBRTJKLFFBQVEsSUFBSXhsRSxFQUFFKzZCLEVBQUUxdUMsRUFBRXd2RSxFQUFFcnpFLEVBQUVtcUMsR0FBRzd5QixHQUFHLEdBQUcsT0FBT0UsRUFBRSxDQUFDLE9BQU82N0QsSUFBSUEsRUFBRXg0QyxHQUFHLE1BQU0zeEIsR0FBR21xRSxHQUFHLE9BQ2pmNzdELEVBQUVncUQsV0FBV3I0RCxFQUFFdEYsRUFBRXd2RSxHQUFHdnBELEVBQUU1ZixFQUFFc04sRUFBRXNTLEVBQUVxZ0IsR0FBRyxPQUFPclAsRUFBRS85QixFQUFFeWEsRUFBRXNqQixFQUFFa2lELFFBQVF4bEUsRUFBRXNqQixFQUFFdGpCLEVBQUU2N0QsRUFBRXg0QyxFQUFFLEdBQUdzUCxJQUFJbnFDLEVBQUVoRCxPQUFPLE9BQU9VLEVBQUVtRyxFQUFFd3ZFLEdBQUd0MkUsRUFBRSxHQUFHLE9BQU9zMkUsRUFBRSxDQUFDLEtBQUtscEMsRUFBRW5xQyxFQUFFaEQsT0FBT210QyxJQUFrQixRQUFka3BDLEVBQUVuaEQsRUFBRXJ1QixFQUFFN0QsRUFBRW1xQyxHQUFHN3lCLE1BQWN3UyxFQUFFNWYsRUFBRW1wRSxFQUFFdnBELEVBQUVxZ0IsR0FBRyxPQUFPclAsRUFBRS85QixFQUFFczJFLEVBQUV2NEMsRUFBRWtpRCxRQUFRM0osRUFBRXY0QyxFQUFFdTRDLEdBQUcsT0FBT3QyRSxFQUFFLElBQUlzMkUsRUFBRTNwQyxFQUFFN2xDLEVBQUV3dkUsR0FBR2xwQyxFQUFFbnFDLEVBQUVoRCxPQUFPbXRDLElBQXNCLFFBQWxCdFAsRUFBRXh0QixFQUFFZ21FLEVBQUV4dkUsRUFBRXNtQyxFQUFFbnFDLEVBQUVtcUMsR0FBRzd5QixNQUFjcE8sR0FBRyxPQUFPMnhCLEVBQUUybUMsV0FBVzZSLEVBQUVsUSxPQUFPLE9BQU90b0MsRUFBRTNnQyxJQUFJaXdDLEVBQUV0UCxFQUFFM2dDLEtBQUs0dkIsRUFBRTVmLEVBQUUyd0IsRUFBRS9RLEVBQUVxZ0IsR0FBRyxPQUFPclAsRUFBRS85QixFQUFFODlCLEVBQUVDLEVBQUVraUQsUUFBUW5pRCxFQUFFQyxFQUFFRCxHQUE0QyxPQUF6QzN4QixHQUFHbXFFLEVBQUVyNUUsU0FBUSxTQUFTa1AsR0FBRyxPQUFPQyxFQUFFdEYsRUFBRXFGLE1BQVluTSxFQUFFLFNBQVM0c0MsRUFBRTlsQyxFQUFFaW1CLEVBQUU5cEIsRUFBRXNYLEdBQUcsSUFBSXZhLEVBQUV5NkQsRUFBR3gzRCxHQUFHLEdBQUcsbUJBQW9CakQsRUFBRSxNQUFNdUQsTUFBTXkzQixFQUFFLE1BQWtCLEdBQUcsT0FBZi8zQixFQUFFakQsRUFBRTBELEtBQUtULElBQzFlLE1BQU1NLE1BQU15M0IsRUFBRSxNQUFNLElBQUksSUFBSStDLEVBQUUvOUIsRUFBRSxLQUFLczJFLEVBQUV2cEQsRUFBRXFnQixFQUFFcmdCLEVBQUUsRUFBRStRLEVBQUUsS0FBS3JqQixFQUFFeFgsRUFBRXVVLE9BQU8sT0FBTzgrRCxJQUFJNzdELEVBQUUzZ0IsS0FBS3N6QyxJQUFJM3lCLEVBQUV4WCxFQUFFdVUsT0FBTyxDQUFDOCtELEVBQUU5MUUsTUFBTTRzQyxHQUFHdFAsRUFBRXc0QyxFQUFFQSxFQUFFLE1BQU14NEMsRUFBRXc0QyxFQUFFMkosUUFBUSxJQUFJcnpDLEVBQUU0SSxFQUFFMXVDLEVBQUV3dkUsRUFBRTc3RCxFQUFFbGYsTUFBTWdmLEdBQUcsR0FBRyxPQUFPcXlCLEVBQUUsQ0FBQyxPQUFPMHBDLElBQUlBLEVBQUV4NEMsR0FBRyxNQUFNM3hCLEdBQUdtcUUsR0FBRyxPQUFPMXBDLEVBQUU2M0IsV0FBV3I0RCxFQUFFdEYsRUFBRXd2RSxHQUFHdnBELEVBQUU1ZixFQUFFeS9CLEVBQUU3ZixFQUFFcWdCLEdBQUcsT0FBT3JQLEVBQUUvOUIsRUFBRTRzQyxFQUFFN08sRUFBRWtpRCxRQUFRcnpDLEVBQUU3TyxFQUFFNk8sRUFBRTBwQyxFQUFFeDRDLEVBQUUsR0FBR3JqQixFQUFFM2dCLEtBQUssT0FBTzZHLEVBQUVtRyxFQUFFd3ZFLEdBQUd0MkUsRUFBRSxHQUFHLE9BQU9zMkUsRUFBRSxDQUFDLE1BQU03N0QsRUFBRTNnQixLQUFLc3pDLElBQUkzeUIsRUFBRXhYLEVBQUV1VSxPQUF3QixRQUFqQmlELEVBQUUwYSxFQUFFcnVCLEVBQUUyVCxFQUFFbGYsTUFBTWdmLE1BQWN3UyxFQUFFNWYsRUFBRXNOLEVBQUVzUyxFQUFFcWdCLEdBQUcsT0FBT3JQLEVBQUUvOUIsRUFBRXlhLEVBQUVzakIsRUFBRWtpRCxRQUFReGxFLEVBQUVzakIsRUFBRXRqQixHQUFHLE9BQU96YSxFQUFFLElBQUlzMkUsRUFBRTNwQyxFQUFFN2xDLEVBQUV3dkUsSUFBSTc3RCxFQUFFM2dCLEtBQUtzekMsSUFBSTN5QixFQUFFeFgsRUFBRXVVLE9BQTRCLFFBQXJCaUQsRUFBRW5LLEVBQUVnbUUsRUFBRXh2RSxFQUFFc21DLEVBQUUzeUIsRUFBRWxmLE1BQU1nZixNQUFjcE8sR0FBRyxPQUFPc08sRUFBRWdxRCxXQUNoZjZSLEVBQUVsUSxPQUFPLE9BQU8zckQsRUFBRXRkLElBQUlpd0MsRUFBRTN5QixFQUFFdGQsS0FBSzR2QixFQUFFNWYsRUFBRXNOLEVBQUVzUyxFQUFFcWdCLEdBQUcsT0FBT3JQLEVBQUUvOUIsRUFBRXlhLEVBQUVzakIsRUFBRWtpRCxRQUFReGxFLEVBQUVzakIsRUFBRXRqQixHQUE0QyxPQUF6Q3RPLEdBQUdtcUUsRUFBRXI1RSxTQUFRLFNBQVNrUCxHQUFHLE9BQU9DLEVBQUV0RixFQUFFcUYsTUFBWW5NLEVBQUUsT0FBTyxTQUFTbU0sRUFBRXdnQyxFQUFFeC9CLEVBQUVsSyxHQUFHLElBQUlzWCxFQUFFLGlCQUFrQnBOLEdBQUcsT0FBT0EsR0FBR0EsRUFBRXZQLE9BQU8yN0QsR0FBSSxPQUFPcHNELEVBQUVoUSxJQUFJb2QsSUFBSXBOLEVBQUVBLEVBQUU2cEIsTUFBTWdtQyxVQUFVLElBQUloOUQsRUFBRSxpQkFBa0JtTixHQUFHLE9BQU9BLEVBQUUsR0FBR25OLEVBQUUsT0FBT21OLEVBQUU4dEQsVUFBVSxLQUFLNUIsRUFBR2x0RCxFQUFFLENBQVMsSUFBUm5NLEVBQUVtTixFQUFFaFEsSUFBUW9kLEVBQUVveUIsRUFBRSxPQUFPcHlCLEdBQUcsQ0FBQyxHQUFHQSxFQUFFcGQsTUFBTTZDLEVBQUUsQ0FBQyxHQUFtQixJQUFadWEsRUFBRWdDLEtBQVksR0FBR3BQLEVBQUV2UCxPQUFPMjdELEVBQUcsQ0FBQzU0RCxFQUFFd0wsRUFBRW9PLEVBQUUwbEUsVUFBU3R6QyxFQUFFN2xDLEVBQUV5VCxFQUFFcE4sRUFBRTZwQixNQUFNZ21DLFdBQVkwSCxPQUFPdjRELEVBQUVBLEVBQUV3Z0MsRUFBRSxNQUFNeGdDLFFBQWdCLEdBQUdvTyxFQUFFdzhDLGNBQWM1cEQsRUFBRXZQLEtBQUssQ0FBQytDLEVBQUV3TCxFQUFFb08sRUFBRTBsRSxVQUM1ZXR6QyxFQUFFN2xDLEVBQUV5VCxFQUFFcE4sRUFBRTZwQixRQUFTeW9ELElBQUlELEdBQUdyekUsRUFBRW9PLEVBQUVwTixHQUFHdy9CLEVBQUUrM0IsT0FBT3Y0RCxFQUFFQSxFQUFFd2dDLEVBQUUsTUFBTXhnQyxFQUFHeEwsRUFBRXdMLEVBQUVvTyxHQUFHLE1BQVduTyxFQUFFRCxFQUFFb08sR0FBR0EsRUFBRUEsRUFBRTBsRSxRQUFROXlFLEVBQUV2UCxPQUFPMjdELElBQUk1c0IsRUFBRTR6QyxHQUFHcHpFLEVBQUU2cEIsTUFBTWdtQyxTQUFTN3dELEVBQUVndkIsS0FBS2w0QixFQUFFa0ssRUFBRWhRLE1BQU91bkUsT0FBT3Y0RCxFQUFFQSxFQUFFd2dDLEtBQUkxcEMsRUFBRW05RSxHQUFHanpFLEVBQUV2UCxLQUFLdVAsRUFBRWhRLElBQUlnUSxFQUFFNnBCLE1BQU0sS0FBSzdxQixFQUFFZ3ZCLEtBQUtsNEIsSUFBS3c4RSxJQUFJRCxHQUFHcnpFLEVBQUV3Z0MsRUFBRXgvQixHQUFHbEssRUFBRXloRSxPQUFPdjRELEVBQUVBLEVBQUVsSixHQUFHLE9BQU84cEIsRUFBRTVnQixHQUFHLEtBQUttdEQsRUFBR250RCxFQUFFLENBQUMsSUFBSW9PLEVBQUVwTixFQUFFaFEsSUFBSSxPQUFPd3ZDLEdBQUcsQ0FBQyxHQUFHQSxFQUFFeHZDLE1BQU1vZCxFQUFFLElBQUcsSUFBSW95QixFQUFFcHdCLEtBQUtvd0IsRUFBRXUyQixVQUFVMkQsZ0JBQWdCMTVELEVBQUUwNUQsZUFBZWw2QixFQUFFdTJCLFVBQVVtZCxpQkFBaUJsekUsRUFBRWt6RSxlQUFlLENBQUMxL0UsRUFBRXdMLEVBQUV3Z0MsRUFBRXN6QyxVQUFTdHpDLEVBQUU3bEMsRUFBRTZsQyxFQUFFeC9CLEVBQUU2dkQsVUFBVSxLQUFNMEgsT0FBT3Y0RCxFQUFFQSxFQUFFd2dDLEVBQUUsTUFBTXhnQyxFQUFPeEwsRUFBRXdMLEVBQUV3Z0MsR0FBRyxNQUFXdmdDLEVBQUVELEVBQUV3Z0MsR0FBR0EsRUFBRUEsRUFBRXN6QyxTQUFRdHpDLEVBQ3BmMnpDLEdBQUduekUsRUFBRWhCLEVBQUVndkIsS0FBS2w0QixJQUFLeWhFLE9BQU92NEQsRUFBRUEsRUFBRXdnQyxFQUFFLE9BQU81ZixFQUFFNWdCLEdBQUcsR0FBRyxpQkFBa0JnQixHQUFHLGlCQUFrQkEsRUFBRSxPQUFPQSxFQUFFLEdBQUdBLEVBQUUsT0FBT3cvQixHQUFHLElBQUlBLEVBQUVwd0IsS0FBSzViLEVBQUV3TCxFQUFFd2dDLEVBQUVzekMsVUFBU3R6QyxFQUFFN2xDLEVBQUU2bEMsRUFBRXgvQixJQUFLdTNELE9BQU92NEQsRUFBRUEsRUFBRXdnQyxJQUFJaHNDLEVBQUV3TCxFQUFFd2dDLElBQUdBLEVBQUV3ekMsR0FBR2h6RSxFQUFFaEIsRUFBRWd2QixLQUFLbDRCLElBQUt5aEUsT0FBT3Y0RCxFQUFFQSxFQUFFd2dDLEdBQUc1ZixFQUFFNWdCLEdBQUcsR0FBR296RSxHQUFHcHlFLEdBQUcsT0FBT3VrQixFQUFFdmxCLEVBQUV3Z0MsRUFBRXgvQixFQUFFbEssR0FBRyxHQUFHdzNELEVBQUd0dEQsR0FBRyxPQUFPeS9CLEVBQUV6Z0MsRUFBRXdnQyxFQUFFeC9CLEVBQUVsSyxHQUFjLEdBQVhqRCxHQUFHNC9FLEdBQUd6ekUsRUFBRWdCLFFBQU0sSUFBcUJBLElBQUlvTixFQUFFLE9BQU9wTyxFQUFFb1EsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLE1BQU1oWixNQUFNeTNCLEVBQUUsSUFBSWdnQyxFQUFHN3VELEVBQUV2TyxPQUFPLGNBQWUsT0FBTytDLEVBQUV3TCxFQUFFd2dDLElBQUksSUFBSTZ6QyxHQUFHWCxJQUFHLEdBQUlZLEdBQUdaLElBQUcsR0FBSWEsR0FBRyxHQUFHQyxHQUFHckksR0FBR29JLElBQUlFLEdBQUd0SSxHQUFHb0ksSUFBSS96RCxHQUFHMnJELEdBQUdvSSxJQUN0ZCxTQUFTRyxHQUFHMTBFLEdBQUcsR0FBR0EsSUFBSXUwRSxHQUFHLE1BQU1uOUUsTUFBTXkzQixFQUFFLE1BQU0sT0FBTzd1QixFQUFFLFNBQVMyMEUsR0FBRzMwRSxFQUFFQyxHQUF5QyxPQUF0Q29zRSxHQUFFN3JELEdBQUd2Z0IsR0FBR29zRSxHQUFFb0ksR0FBR3owRSxHQUFHcXNFLEdBQUVtSSxHQUFHRCxJQUFJdjBFLEVBQUVDLEVBQUVxeUQsVUFBbUIsS0FBSyxFQUFFLEtBQUssR0FBR3J5RCxHQUFHQSxFQUFFQSxFQUFFMjBFLGlCQUFpQjMwRSxFQUFFOHhELGFBQWFILEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBa0UzeEQsRUFBRTJ4RCxHQUFyQzN4RCxHQUF2QkQsRUFBRSxJQUFJQSxFQUFFQyxFQUFFdzJELFdBQVd4MkQsR0FBTTh4RCxjQUFjLEtBQUsveEQsRUFBRUEsRUFBRTYwRSxTQUFrQnpJLEdBQUVvSSxJQUFJbkksR0FBRW1JLEdBQUd2MEUsR0FBRyxTQUFTNjBFLEtBQUsxSSxHQUFFb0ksSUFBSXBJLEdBQUVxSSxJQUFJckksR0FBRTVyRCxJQUFJLFNBQVN1MEQsR0FBRy8wRSxHQUFHMDBFLEdBQUdsMEQsR0FBRzBLLFNBQVMsSUFBSWpyQixFQUFFeTBFLEdBQUdGLEdBQUd0cEQsU0FBYTEyQixFQUFFbzlELEdBQUczeEQsRUFBRUQsRUFBRXZPLE1BQU13TyxJQUFJekwsSUFBSTYzRSxHQUFFb0ksR0FBR3owRSxHQUFHcXNFLEdBQUVtSSxHQUFHaGdGLElBQUksU0FBU3dnRixHQUFHaDFFLEdBQUd5MEUsR0FBR3ZwRCxVQUFVbHJCLElBQUlvc0UsR0FBRW9JLElBQUlwSSxHQUFFcUksS0FBSyxJQUFJNTBELEdBQUVzc0QsR0FBRyxHQUM5YyxTQUFTOEksR0FBR2oxRSxHQUFHLElBQUksSUFBSUMsRUFBRUQsRUFBRSxPQUFPQyxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFbVEsSUFBSSxDQUFDLElBQUk1YixFQUFFeUwsRUFBRXc0RCxjQUFjLEdBQUcsT0FBT2prRSxJQUFtQixRQUFmQSxFQUFFQSxFQUFFa2tFLGFBQXFCLE9BQU9sa0UsRUFBRWpILE1BQU0sT0FBT2lILEVBQUVqSCxNQUFNLE9BQU8wUyxPQUFPLEdBQUcsS0FBS0EsRUFBRW1RLFVBQUssSUFBU25RLEVBQUVpMUUsY0FBY0MsYUFBYSxHQUFHLElBQWEsR0FBUmwxRSxFQUFFK2QsT0FBVSxPQUFPL2QsT0FBTyxHQUFHLE9BQU9BLEVBQUUrckUsTUFBTSxDQUFDL3JFLEVBQUUrckUsTUFBTXpULE9BQU90NEQsRUFBRUEsRUFBRUEsRUFBRStyRSxNQUFNLFNBQVMsR0FBRy9yRSxJQUFJRCxFQUFFLE1BQU0sS0FBSyxPQUFPQyxFQUFFNnpFLFNBQVMsQ0FBQyxHQUFHLE9BQU83ekUsRUFBRXM0RCxRQUFRdDRELEVBQUVzNEQsU0FBU3Y0RCxFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRXM0RCxPQUFPdDRELEVBQUU2ekUsUUFBUXZiLE9BQU90NEQsRUFBRXM0RCxPQUFPdDRELEVBQUVBLEVBQUU2ekUsUUFBUSxPQUFPLEtBQUssSUFBSXNCLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQ3BkLFNBQVNDLEdBQUd2MUUsRUFBRUMsR0FBRyxJQUFJekwsRUFBRWdoRixHQUFHLEVBQUUsS0FBSyxLQUFLLEdBQUdoaEYsRUFBRW8yRCxZQUFZLFVBQVVwMkQsRUFBRS9DLEtBQUssVUFBVStDLEVBQUV1aUUsVUFBVTkyRCxFQUFFekwsRUFBRStqRSxPQUFPdjRELEVBQUV4TCxFQUFFd3BCLE1BQU0sRUFBRSxPQUFPaGUsRUFBRTJ6RSxZQUFZM3pFLEVBQUUyekUsV0FBV0MsV0FBV3AvRSxFQUFFd0wsRUFBRTJ6RSxXQUFXbi9FLEdBQUd3TCxFQUFFNnpFLFlBQVk3ekUsRUFBRTJ6RSxXQUFXbi9FLEVBQUUsU0FBU2loRixHQUFHejFFLEVBQUVDLEdBQUcsT0FBT0QsRUFBRW9RLEtBQUssS0FBSyxFQUFFLElBQUk1YixFQUFFd0wsRUFBRXZPLEtBQXlFLE9BQU8sUUFBM0V3TyxFQUFFLElBQUlBLEVBQUVxeUQsVUFBVTk5RCxFQUFFdkQsZ0JBQWdCZ1AsRUFBRW12RCxTQUFTbitELGNBQWMsS0FBS2dQLEtBQW1CRCxFQUFFKzJELFVBQVU5MkQsR0FBRSxHQUFPLEtBQUssRUFBRSxPQUFvRCxRQUE3Q0EsRUFBRSxLQUFLRCxFQUFFMDFFLGNBQWMsSUFBSXoxRSxFQUFFcXlELFNBQVMsS0FBS3J5RCxLQUFZRCxFQUFFKzJELFVBQVU5MkQsR0FBRSxHQUF3QixRQUFRLE9BQU0sR0FDdmUsU0FBUzAxRSxHQUFHMzFFLEdBQUcsR0FBR3MxRSxHQUFHLENBQUMsSUFBSXIxRSxFQUFFbzFFLEdBQUcsR0FBR3AxRSxFQUFFLENBQUMsSUFBSXpMLEVBQUV5TCxFQUFFLElBQUl3MUUsR0FBR3oxRSxFQUFFQyxHQUFHLENBQXFCLEtBQXBCQSxFQUFFcXBDLEdBQUc5MEMsRUFBRXV6RSxnQkFBcUIwTixHQUFHejFFLEVBQUVDLEdBQXVDLE9BQW5DRCxFQUFFZ2UsT0FBZSxLQUFUaGUsRUFBRWdlLE1BQVksRUFBRXMzRCxJQUFHLE9BQUdGLEdBQUdwMUUsR0FBU3UxRSxHQUFHSCxHQUFHNWdGLEdBQUc0Z0YsR0FBR3AxRSxFQUFFcTFFLEdBQUcvckMsR0FBR3JwQyxFQUFFZ3lELGlCQUFpQmp5RCxFQUFFZ2UsT0FBZSxLQUFUaGUsRUFBRWdlLE1BQVksRUFBRXMzRCxJQUFHLEVBQUdGLEdBQUdwMUUsR0FBRyxTQUFTNDFFLEdBQUc1MUUsR0FBRyxJQUFJQSxFQUFFQSxFQUFFdTRELE9BQU8sT0FBT3Y0RCxHQUFHLElBQUlBLEVBQUVvUSxLQUFLLElBQUlwUSxFQUFFb1EsS0FBSyxLQUFLcFEsRUFBRW9RLEtBQUtwUSxFQUFFQSxFQUFFdTRELE9BQU82YyxHQUFHcDFFLEVBQzVTLFNBQVM2MUUsR0FBRzcxRSxHQUFHLEdBQUdBLElBQUlvMUUsR0FBRyxPQUFNLEVBQUcsSUFBSUUsR0FBRyxPQUFPTSxHQUFHNTFFLEdBQUdzMUUsSUFBRyxHQUFHLEVBQUcsSUFBSXIxRSxFQUFFRCxFQUFFdk8sS0FBSyxHQUFHLElBQUl1TyxFQUFFb1EsS0FBSyxTQUFTblEsR0FBRyxTQUFTQSxJQUFJbXJFLEdBQUduckUsRUFBRUQsRUFBRWsxRSxlQUFlLElBQUlqMUUsRUFBRW8xRSxHQUFHcDFFLEdBQUdzMUUsR0FBR3YxRSxFQUFFQyxHQUFHQSxFQUFFcXBDLEdBQUdycEMsRUFBRThuRSxhQUFtQixHQUFONk4sR0FBRzUxRSxHQUFNLEtBQUtBLEVBQUVvUSxJQUFJLENBQWdELEtBQTdCcFEsRUFBRSxRQUFwQkEsRUFBRUEsRUFBRXk0RCxlQUF5Qno0RCxFQUFFMDRELFdBQVcsTUFBVyxNQUFNdGhFLE1BQU15M0IsRUFBRSxNQUFNN3VCLEVBQUUsQ0FBaUIsSUFBaEJBLEVBQUVBLEVBQUUrbkUsWUFBZ0I5bkUsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFc3lELFNBQVMsQ0FBQyxJQUFJOTlELEVBQUV3TCxFQUFFelMsS0FBSyxHQUFHLE9BQU9pSCxFQUFFLENBQUMsR0FBRyxJQUFJeUwsRUFBRSxDQUFDbzFFLEdBQUcvckMsR0FBR3RwQyxFQUFFK25FLGFBQWEsTUFBTS9uRSxFQUFFQyxRQUFRLE1BQU16TCxHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBR3lMLElBQUlELEVBQUVBLEVBQUUrbkUsWUFBWXNOLEdBQUcsV0FBV0EsR0FBR0QsR0FBRzlyQyxHQUFHdHBDLEVBQUUrMkQsVUFBVWdSLGFBQWEsS0FBSyxPQUFNLEVBQ3RmLFNBQVMrTixLQUFLVCxHQUFHRCxHQUFHLEtBQUtFLElBQUcsRUFBRyxJQUFJUyxHQUFHLEdBQUcsU0FBU0MsS0FBSyxJQUFJLElBQUloMkUsRUFBRSxFQUFFQSxFQUFFKzFFLEdBQUdqaUYsT0FBT2tNLElBQUkrMUUsR0FBRy8xRSxHQUFHaTJFLDhCQUE4QixLQUFLRixHQUFHamlGLE9BQU8sRUFBRSxJQUFJb2lGLEdBQUdscEIsRUFBR21wQix1QkFBdUJDLEdBQUdwcEIsRUFBR3VpQix3QkFBd0I4RyxHQUFHLEVBQUVwcEQsR0FBRSxLQUFLL3JCLEdBQUUsS0FBS2tvQixHQUFFLEtBQUtrdEQsSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsS0FBSyxNQUFNcC9FLE1BQU15M0IsRUFBRSxNQUFPLFNBQVM0bkQsR0FBR3oyRSxFQUFFQyxHQUFHLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJekwsRUFBRSxFQUFFQSxFQUFFeUwsRUFBRW5NLFFBQVFVLEVBQUV3TCxFQUFFbE0sT0FBT1UsSUFBSSxJQUFJa3pFLEdBQUcxbkUsRUFBRXhMLEdBQUd5TCxFQUFFekwsSUFBSSxPQUFNLEVBQUcsT0FBTSxFQUM5WCxTQUFTa2lGLEdBQUcxMkUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxFQUFFcUcsR0FBeUgsR0FBdEhxMUUsR0FBR3IxRSxFQUFFaXNCLEdBQUVodEIsRUFBRUEsRUFBRXc0RCxjQUFjLEtBQUt4NEQsRUFBRTJ3RSxZQUFZLEtBQUszd0UsRUFBRW93RSxNQUFNLEVBQUU2RixHQUFHaHJELFFBQVEsT0FBT2xyQixHQUFHLE9BQU9BLEVBQUV5NEQsY0FBY2tlLEdBQUdDLEdBQUc1MkUsRUFBRXhMLEVBQUVnc0MsRUFBRTdsQyxHQUFNNDdFLEdBQUcsQ0FBQ3YxRSxFQUFFLEVBQUUsRUFBRSxDQUFPLEdBQU51MUUsSUFBRyxJQUFRLEdBQUd2MUUsR0FBRyxNQUFNNUosTUFBTXkzQixFQUFFLE1BQU03dEIsR0FBRyxFQUFFb29CLEdBQUVsb0IsR0FBRSxLQUFLakIsRUFBRTJ3RSxZQUFZLEtBQUtzRixHQUFHaHJELFFBQVEyckQsR0FBRzcyRSxFQUFFeEwsRUFBRWdzQyxFQUFFN2xDLFNBQVM0N0UsSUFBa0UsR0FBOURMLEdBQUdockQsUUFBUTRyRCxHQUFHNzJFLEVBQUUsT0FBT2lCLElBQUcsT0FBT0EsR0FBRW1LLEtBQUtnckUsR0FBRyxFQUFFanRELEdBQUVsb0IsR0FBRStyQixHQUFFLEtBQUtxcEQsSUFBRyxFQUFNcjJFLEVBQUUsTUFBTTdJLE1BQU15M0IsRUFBRSxNQUFNLE9BQU83dUIsRUFBRSxTQUFTKzJFLEtBQUssSUFBSS8yRSxFQUFFLENBQUN5NEQsY0FBYyxLQUFLNVcsVUFBVSxLQUFLbTFCLFVBQVUsS0FBS3BrRCxNQUFNLEtBQUt2bkIsS0FBSyxNQUE4QyxPQUF4QyxPQUFPK2QsR0FBRTZELEdBQUV3ckMsY0FBY3J2QyxHQUFFcHBCLEVBQUVvcEIsR0FBRUEsR0FBRS9kLEtBQUtyTCxFQUFTb3BCLEdBQy9lLFNBQVM2dEQsS0FBSyxHQUFHLE9BQU8vMUUsR0FBRSxDQUFDLElBQUlsQixFQUFFaXRCLEdBQUVxckMsVUFBVXQ0RCxFQUFFLE9BQU9BLEVBQUVBLEVBQUV5NEQsY0FBYyxVQUFVejRELEVBQUVrQixHQUFFbUssS0FBSyxJQUFJcEwsRUFBRSxPQUFPbXBCLEdBQUU2RCxHQUFFd3JDLGNBQWNydkMsR0FBRS9kLEtBQUssR0FBRyxPQUFPcEwsRUFBRW1wQixHQUFFbnBCLEVBQUVpQixHQUFFbEIsTUFBTSxDQUFDLEdBQUcsT0FBT0EsRUFBRSxNQUFNNUksTUFBTXkzQixFQUFFLE1BQVU3dUIsRUFBRSxDQUFDeTRELGVBQVB2M0QsR0FBRWxCLEdBQXFCeTRELGNBQWM1VyxVQUFVM2dELEdBQUUyZ0QsVUFBVW0xQixVQUFVOTFFLEdBQUU4MUUsVUFBVXBrRCxNQUFNMXhCLEdBQUUweEIsTUFBTXZuQixLQUFLLE1BQU0sT0FBTytkLEdBQUU2RCxHQUFFd3JDLGNBQWNydkMsR0FBRXBwQixFQUFFb3BCLEdBQUVBLEdBQUUvZCxLQUFLckwsRUFBRSxPQUFPb3BCLEdBQUUsU0FBUzh0RCxHQUFHbDNFLEVBQUVDLEdBQUcsTUFBTSxtQkFBb0JBLEVBQUVBLEVBQUVELEdBQUdDLEVBQ3ZZLFNBQVNrM0UsR0FBR24zRSxHQUFHLElBQUlDLEVBQUVnM0UsS0FBS3ppRixFQUFFeUwsRUFBRTJ5QixNQUFNLEdBQUcsT0FBT3ArQixFQUFFLE1BQU00QyxNQUFNeTNCLEVBQUUsTUFBTXI2QixFQUFFNGlGLG9CQUFvQnAzRSxFQUFFLElBQUl3Z0MsRUFBRXQvQixHQUFFdkcsRUFBRTZsQyxFQUFFdzJDLFVBQVVoMkUsRUFBRXhNLEVBQUV1OEUsUUFBUSxHQUFHLE9BQU8vdkUsRUFBRSxDQUFDLEdBQUcsT0FBT3JHLEVBQUUsQ0FBQyxJQUFJaW1CLEVBQUVqbUIsRUFBRTBRLEtBQUsxUSxFQUFFMFEsS0FBS3JLLEVBQUVxSyxLQUFLckssRUFBRXFLLEtBQUt1VixFQUFFNGYsRUFBRXcyQyxVQUFVcjhFLEVBQUVxRyxFQUFFeE0sRUFBRXU4RSxRQUFRLEtBQUssR0FBRyxPQUFPcDJFLEVBQUUsQ0FBQ0EsRUFBRUEsRUFBRTBRLEtBQUttMUIsRUFBRUEsRUFBRXFoQixVQUFVLElBQUkvcUQsRUFBRThwQixFQUFFNWYsRUFBRSxLQUFLb04sRUFBRXpULEVBQUUsRUFBRSxDQUFDLElBQUk5RyxFQUFFdWEsRUFBRWdqRSxLQUFLLElBQUlpRixHQUFHeGlGLEtBQUtBLEVBQUUsT0FBT2lELElBQUlBLEVBQUVBLEVBQUV1VSxLQUFLLENBQUMrbEUsS0FBSyxFQUFFaUcsT0FBT2pwRSxFQUFFaXBFLE9BQU9DLGFBQWFscEUsRUFBRWtwRSxhQUFhQyxXQUFXbnBFLEVBQUVtcEUsV0FBV2xzRSxLQUFLLE9BQU9tMUIsRUFBRXB5QixFQUFFa3BFLGVBQWV0M0UsRUFBRW9PLEVBQUVtcEUsV0FBV3YzRSxFQUFFd2dDLEVBQUVweUIsRUFBRWlwRSxZQUFZLENBQUMsSUFBSS9vRSxFQUFFLENBQUM4aUUsS0FBS3Y5RSxFQUFFd2pGLE9BQU9qcEUsRUFBRWlwRSxPQUFPQyxhQUFhbHBFLEVBQUVrcEUsYUFDOWZDLFdBQVducEUsRUFBRW1wRSxXQUFXbHNFLEtBQUssTUFBTSxPQUFPdlUsR0FBRzhwQixFQUFFOXBCLEVBQUV3WCxFQUFFdE4sRUFBRXcvQixHQUFHMXBDLEVBQUVBLEVBQUV1VSxLQUFLaUQsRUFBRTJlLEdBQUVvakQsT0FBT3g4RSxFQUFFMjlFLElBQUkzOUUsRUFBRXVhLEVBQUVBLEVBQUUvQyxXQUFXLE9BQU8rQyxHQUFHQSxJQUFJelQsR0FBRyxPQUFPN0QsRUFBRWtLLEVBQUV3L0IsRUFBRTFwQyxFQUFFdVUsS0FBS3VWLEVBQUU4bUQsR0FBR2xuQyxFQUFFdmdDLEVBQUV3NEQsaUJBQWlCNlgsSUFBRyxHQUFJcndFLEVBQUV3NEQsY0FBY2o0QixFQUFFdmdDLEVBQUU0aEQsVUFBVTdnRCxFQUFFZixFQUFFKzJFLFVBQVVsZ0YsRUFBRXRDLEVBQUVnakYsa0JBQWtCaDNDLEVBQUUsTUFBTSxDQUFDdmdDLEVBQUV3NEQsY0FBY2prRSxFQUFFaWpGLFVBQ3RRLFNBQVNDLEdBQUcxM0UsR0FBRyxJQUFJQyxFQUFFZzNFLEtBQUt6aUYsRUFBRXlMLEVBQUUyeUIsTUFBTSxHQUFHLE9BQU9wK0IsRUFBRSxNQUFNNEMsTUFBTXkzQixFQUFFLE1BQU1yNkIsRUFBRTRpRixvQkFBb0JwM0UsRUFBRSxJQUFJd2dDLEVBQUVoc0MsRUFBRWlqRixTQUFTOThFLEVBQUVuRyxFQUFFdThFLFFBQVEvdkUsRUFBRWYsRUFBRXc0RCxjQUFjLEdBQUcsT0FBTzk5RCxFQUFFLENBQUNuRyxFQUFFdThFLFFBQVEsS0FBSyxJQUFJbndELEVBQUVqbUIsRUFBRUEsRUFBRTBRLEtBQUssR0FBR3JLLEVBQUVoQixFQUFFZ0IsRUFBRTRmLEVBQUV5MkQsUUFBUXoyRCxFQUFFQSxFQUFFdlYsV0FBV3VWLElBQUlqbUIsR0FBRytzRSxHQUFHMW1FLEVBQUVmLEVBQUV3NEQsaUJBQWlCNlgsSUFBRyxHQUFJcndFLEVBQUV3NEQsY0FBY3ozRCxFQUFFLE9BQU9mLEVBQUUrMkUsWUFBWS8yRSxFQUFFNGhELFVBQVU3Z0QsR0FBR3hNLEVBQUVnakYsa0JBQWtCeDJFLEVBQUUsTUFBTSxDQUFDQSxFQUFFdy9CLEdBQ25WLFNBQVNtM0MsR0FBRzMzRSxFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEVBQUV2Z0MsRUFBRTIzRSxZQUFZcDNDLEVBQUVBLEVBQUV2Z0MsRUFBRTQzRSxTQUFTLElBQUlsOUUsRUFBRXNGLEVBQUVnMkUsOEJBQXlJLEdBQXhHLE9BQU90N0UsRUFBRXFGLEVBQUVyRixJQUFJNmxDLEdBQVV4Z0MsRUFBRUEsRUFBRTgzRSxrQkFBaUI5M0UsR0FBR3EyRSxHQUFHcjJFLEtBQUtBLEtBQUVDLEVBQUVnMkUsOEJBQThCejFDLEVBQUV1MUMsR0FBRzNoRixLQUFLNkwsS0FBTUQsRUFBRSxPQUFPeEwsRUFBRXlMLEVBQUU0M0UsU0FBb0IsTUFBWDlCLEdBQUczaEYsS0FBSzZMLEdBQVM3SSxNQUFNeTNCLEVBQUUsTUFDelAsU0FBU2twRCxHQUFHLzNFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsSUFBSTdsQyxFQUFFcTlFLEdBQUUsR0FBRyxPQUFPcjlFLEVBQUUsTUFBTXZELE1BQU15M0IsRUFBRSxNQUFNLElBQUk3dEIsRUFBRWYsRUFBRTIzRSxZQUFZaDNELEVBQUU1ZixFQUFFZixFQUFFNDNFLFNBQVMvZ0YsRUFBRW8vRSxHQUFHaHJELFFBQVE5YyxFQUFFdFgsRUFBRW1oRixVQUFTLFdBQVcsT0FBT04sR0FBR2g5RSxFQUFFc0YsRUFBRXpMLE1BQUtYLEVBQUV1YSxFQUFFLEdBQUdFLEVBQUVGLEVBQUUsR0FBR0EsRUFBRWdiLEdBQUUsSUFBSUosRUFBRWhwQixFQUFFeTRELGNBQWNwdkIsRUFBRXJnQixFQUFFNG9ELEtBQUt6dEUsRUFBRWtsQyxFQUFFNnVDLFlBQVkzeUQsRUFBRXlELEVBQUV6MEIsT0FBT3kwQixFQUFFQSxFQUFFcjNCLFVBQVUsSUFBSTh1QyxFQUFFeFQsR0FDdU8sT0FEck9qdEIsRUFBRXk0RCxjQUFjLENBQUNtWixLQUFLdm9DLEVBQUU5MEMsT0FBTzBMLEVBQUV0TyxVQUFVNnVDLEdBQUcxcEMsRUFBRXFoRixXQUFVLFdBQVc5dUMsRUFBRTZ1QyxZQUFZMWpGLEVBQUU2MEMsRUFBRSt1QyxZQUFZdmtGLEVBQUUsSUFBSW1NLEVBQUVnQixFQUFFZixFQUFFNDNFLFNBQVMsSUFBSW5RLEdBQUc5bUQsRUFBRTVnQixHQUFHLENBQUNBLEVBQUV4TCxFQUFFeUwsRUFBRTQzRSxTQUFTblEsR0FBR3A1RCxFQUFFdE8sS0FBS25NLEVBQUVtTSxHQUFHQSxFQUFFbXlFLEdBQUcxeEMsR0FBRzlsQyxFQUFFbTlFLGtCQUFrQjkzRSxFQUFFckYsRUFBRStoRSxjQUFjMThELEVBQUVyRixFQUFFbTlFLGlCQUFpQm45RSxFQUFFb2lFLGdCQUFnQi84RCxFQUFFLElBQUksSUFBSXdnQyxFQUM1ZjdsQyxFQUFFcWlFLGNBQWNsbUUsRUFBRWtKLEVBQUUsRUFBRWxKLEdBQUcsQ0FBQyxJQUFJc1gsRUFBRSxHQUFHMHVELEdBQUdobUUsR0FBR3lFLEVBQUUsR0FBRzZTLEVBQUVveUIsRUFBRXB5QixJQUFJcE8sRUFBRWxKLElBQUl5RSxNQUFLLENBQUMvRyxFQUFFeUwsRUFBRXVnQyxJQUFJMXBDLEVBQUVxaEYsV0FBVSxXQUFXLE9BQU8zM0MsRUFBRXZnQyxFQUFFNDNFLFNBQVEsV0FBVyxJQUFJNzNFLEVBQUVxcEMsRUFBRTZ1QyxZQUFZMWpGLEVBQUU2MEMsRUFBRSt1QyxZQUFZLElBQUk1akYsRUFBRXdMLEVBQUVDLEVBQUU0M0UsVUFBVSxJQUFJcjNDLEVBQUUyeEMsR0FBRzF4QyxHQUFHOWxDLEVBQUVtOUUsa0JBQWtCdDNDLEVBQUU3bEMsRUFBRStoRSxhQUFhLE1BQU0vcUMsR0FBR245QixHQUFFLFdBQVcsTUFBTW05QixXQUFTLENBQUMxeEIsRUFBRXVnQyxJQUFJa25DLEdBQUd2akUsRUFBRTNQLElBQUlrekUsR0FBR25pRCxFQUFFdGxCLElBQUl5bkUsR0FBRzErQyxFQUFFd1gsTUFBS3hnQyxFQUFFLENBQUMrd0UsUUFBUSxLQUFLMEcsU0FBUyxLQUFLTCxvQkFBb0JGLEdBQUdNLGtCQUFrQmxwRSxJQUFLbXBFLFNBQVM1akYsRUFBRXdrRixHQUFHdm1GLEtBQUssS0FBS203QixHQUFFanRCLEdBQUdvTyxFQUFFd2tCLE1BQU01eUIsRUFBRW9PLEVBQUU0b0UsVUFBVSxLQUFLMW9FLEVBQUVxcEUsR0FBR2g5RSxFQUFFc0YsRUFBRXpMLEdBQUc0WixFQUFFcXFELGNBQWNycUQsRUFBRXl6QyxVQUFVdnpDLEdBQVVBLEVBQ3RlLFNBQVNncUUsR0FBR3Q0RSxFQUFFQyxFQUFFekwsR0FBYyxPQUFPdWpGLEdBQVpkLEtBQWlCajNFLEVBQUVDLEVBQUV6TCxHQUFHLFNBQVMrakYsR0FBR3Y0RSxHQUFHLElBQUlDLEVBQUU4MkUsS0FBbUwsTUFBOUssbUJBQW9CLzJFLElBQUlBLEVBQUVBLEtBQUtDLEVBQUV3NEQsY0FBY3g0RCxFQUFFNGhELFVBQVU3aEQsRUFBb0ZBLEdBQWxGQSxFQUFFQyxFQUFFMnlCLE1BQU0sQ0FBQ20rQyxRQUFRLEtBQUswRyxTQUFTLEtBQUtMLG9CQUFvQkYsR0FBR00sa0JBQWtCeDNFLElBQU95M0UsU0FBU1ksR0FBR3ZtRixLQUFLLEtBQUttN0IsR0FBRWp0QixHQUFTLENBQUNDLEVBQUV3NEQsY0FBY3o0RCxHQUNoUixTQUFTdzRFLEdBQUd4NEUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBa08sT0FBL054Z0MsRUFBRSxDQUFDb1EsSUFBSXBRLEVBQUV4TixPQUFPeU4sRUFBRXc0RSxRQUFRamtGLEVBQUVra0YsS0FBS2w0QyxFQUFFbjFCLEtBQUssTUFBc0IsUUFBaEJwTCxFQUFFZ3RCLEdBQUUyakQsY0FBc0Izd0UsRUFBRSxDQUFDMHpFLFdBQVcsTUFBTTFtRCxHQUFFMmpELFlBQVkzd0UsRUFBRUEsRUFBRTB6RSxXQUFXM3pFLEVBQUVxTCxLQUFLckwsR0FBbUIsUUFBZnhMLEVBQUV5TCxFQUFFMHpFLFlBQW9CMXpFLEVBQUUwekUsV0FBVzN6RSxFQUFFcUwsS0FBS3JMLEdBQUd3Z0MsRUFBRWhzQyxFQUFFNlcsS0FBSzdXLEVBQUU2VyxLQUFLckwsRUFBRUEsRUFBRXFMLEtBQUttMUIsRUFBRXZnQyxFQUFFMHpFLFdBQVczekUsR0FBV0EsRUFBRSxTQUFTMjRFLEdBQUczNEUsR0FBNEIsT0FBZEEsRUFBRSxDQUFDa3JCLFFBQVFsckIsR0FBaEIrMkUsS0FBNEJ0ZSxjQUFjejRELEVBQUUsU0FBUzQ0RSxLQUFLLE9BQU8zQixLQUFLeGUsY0FBYyxTQUFTb2dCLEdBQUc3NEUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxJQUFJN2xDLEVBQUVvOEUsS0FBSzlwRCxHQUFFalAsT0FBT2hlLEVBQUVyRixFQUFFODlELGNBQWMrZixHQUFHLEVBQUV2NEUsRUFBRXpMLE9BQUUsT0FBTyxJQUFTZ3NDLEVBQUUsS0FBS0EsR0FDamMsU0FBU3M0QyxHQUFHOTRFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsSUFBSTdsQyxFQUFFczhFLEtBQUt6MkMsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSXgvQixPQUFFLEVBQU8sR0FBRyxPQUFPRSxHQUFFLENBQUMsSUFBSTBmLEVBQUUxZixHQUFFdTNELGNBQTBCLEdBQVp6M0QsRUFBRTRmLEVBQUU2M0QsUUFBVyxPQUFPajRDLEdBQUdpMkMsR0FBR2oyQyxFQUFFNWYsRUFBRTgzRCxNQUFtQixZQUFaRixHQUFHdjRFLEVBQUV6TCxFQUFFd00sRUFBRXcvQixHQUFXdlQsR0FBRWpQLE9BQU9oZSxFQUFFckYsRUFBRTg5RCxjQUFjK2YsR0FBRyxFQUFFdjRFLEVBQUV6TCxFQUFFd00sRUFBRXcvQixHQUFHLFNBQVN1NEMsR0FBRy80RSxFQUFFQyxHQUFHLE9BQU80NEUsR0FBRyxJQUFJLEVBQUU3NEUsRUFBRUMsR0FBRyxTQUFTKzRFLEdBQUdoNUUsRUFBRUMsR0FBRyxPQUFPNjRFLEdBQUcsSUFBSSxFQUFFOTRFLEVBQUVDLEdBQUcsU0FBU2c1RSxHQUFHajVFLEVBQUVDLEdBQUcsT0FBTzY0RSxHQUFHLEVBQUUsRUFBRTk0RSxFQUFFQyxHQUFHLFNBQVNpNUUsR0FBR2w1RSxFQUFFQyxHQUFHLE1BQUcsbUJBQW9CQSxHQUFTRCxFQUFFQSxJQUFJQyxFQUFFRCxHQUFHLFdBQVdDLEVBQUUsUUFBVSxNQUFPQSxHQUFxQkQsRUFBRUEsSUFBSUMsRUFBRWlyQixRQUFRbHJCLEVBQUUsV0FBV0MsRUFBRWlyQixRQUFRLFlBQXRFLEVBQ3hZLFNBQVNpdUQsR0FBR241RSxFQUFFQyxFQUFFekwsR0FBNkMsT0FBMUNBLEVBQUUsTUFBT0EsRUFBY0EsRUFBRXdCLE9BQU8sQ0FBQ2dLLElBQUksS0FBWTg0RSxHQUFHLEVBQUUsRUFBRUksR0FBR3BuRixLQUFLLEtBQUttTyxFQUFFRCxHQUFHeEwsR0FBRyxTQUFTNGtGLE1BQU0sU0FBU0MsR0FBR3I1RSxFQUFFQyxHQUFHLElBQUl6TCxFQUFFeWlGLEtBQUtoM0UsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSXVnQyxFQUFFaHNDLEVBQUVpa0UsY0FBYyxPQUFHLE9BQU9qNEIsR0FBRyxPQUFPdmdDLEdBQUd3MkUsR0FBR3gyRSxFQUFFdWdDLEVBQUUsSUFBV0EsRUFBRSxJQUFHaHNDLEVBQUVpa0UsY0FBYyxDQUFDejRELEVBQUVDLEdBQVVELEdBQUUsU0FBU3M1RSxHQUFHdDVFLEVBQUVDLEdBQUcsSUFBSXpMLEVBQUV5aUYsS0FBS2gzRSxPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJdWdDLEVBQUVoc0MsRUFBRWlrRSxjQUFjLE9BQUcsT0FBT2o0QixHQUFHLE9BQU92Z0MsR0FBR3cyRSxHQUFHeDJFLEVBQUV1Z0MsRUFBRSxJQUFXQSxFQUFFLElBQUd4Z0MsRUFBRUEsSUFBSXhMLEVBQUVpa0UsY0FBYyxDQUFDejRELEVBQUVDLEdBQVVELEdBQ3paLFNBQVN1NUUsR0FBR3Y1RSxFQUFFQyxHQUFHLElBQUl6TCxFQUFFdzZFLEtBQUtFLEdBQUcsR0FBRzE2RSxFQUFFLEdBQUdBLEdBQUUsV0FBV3dMLEdBQUUsTUFBTWt2RSxHQUFHLEdBQUcxNkUsRUFBRSxHQUFHQSxHQUFFLFdBQVcsSUFBSUEsRUFBRTRoRixHQUFHdmEsV0FBV3VhLEdBQUd2YSxXQUFXLEVBQUUsSUFBSTc3RCxHQUFFLEdBQUlDLElBQUksUUFBUW0yRSxHQUFHdmEsV0FBV3JuRSxNQUM1SixTQUFTNmpGLEdBQUdyNEUsRUFBRUMsRUFBRXpMLEdBQUcsSUFBSWdzQyxFQUFFMHhDLEtBQUt2M0UsRUFBRXczRSxHQUFHbnlFLEdBQUdnQixFQUFFLENBQUNvd0UsS0FBS3oyRSxFQUFFMDhFLE9BQU83aUYsRUFBRThpRixhQUFhLEtBQUtDLFdBQVcsS0FBS2xzRSxLQUFLLE1BQU11VixFQUFFM2dCLEVBQUU4d0UsUUFBNkUsR0FBckUsT0FBT253RCxFQUFFNWYsRUFBRXFLLEtBQUtySyxHQUFHQSxFQUFFcUssS0FBS3VWLEVBQUV2VixLQUFLdVYsRUFBRXZWLEtBQUtySyxHQUFHZixFQUFFOHdFLFFBQVEvdkUsRUFBRTRmLEVBQUU1Z0IsRUFBRXM0RCxVQUFhdDRELElBQUlpdEIsSUFBRyxPQUFPck0sR0FBR0EsSUFBSXFNLEdBQUVzcEQsR0FBR0QsSUFBRyxNQUFPLENBQUMsR0FBRyxJQUFJdDJFLEVBQUVxd0UsUUFBUSxPQUFPenZELEdBQUcsSUFBSUEsRUFBRXl2RCxRQUFpQyxRQUF4Qnp2RCxFQUFFM2dCLEVBQUVtM0UscUJBQThCLElBQUksSUFBSXRnRixFQUFFbUosRUFBRXUzRSxrQkFBa0JwcEUsRUFBRXdTLEVBQUU5cEIsRUFBRXRDLEdBQW1DLEdBQWhDd00sRUFBRXMyRSxhQUFhMTJELEVBQUU1ZixFQUFFdTJFLFdBQVducEUsRUFBS3M1RCxHQUFHdDVELEVBQUV0WCxHQUFHLE9BQU8sTUFBTWpELElBQWF1K0UsR0FBR3B5RSxFQUFFckYsRUFBRTZsQyxJQUM5WixJQUFJczJDLEdBQUcsQ0FBQzBDLFlBQVlqSixHQUFHa0osWUFBWWpELEdBQUdrRCxXQUFXbEQsR0FBRzJCLFVBQVUzQixHQUFHbUQsb0JBQW9CbkQsR0FBR29ELGdCQUFnQnBELEdBQUdxRCxRQUFRckQsR0FBR3NELFdBQVd0RCxHQUFHdUQsT0FBT3ZELEdBQUd5QixTQUFTekIsR0FBR3dELGNBQWN4RCxHQUFHeUQsaUJBQWlCekQsR0FBRzBELGNBQWMxRCxHQUFHMkQsaUJBQWlCM0QsR0FBRzRELG9CQUFvQjVELEdBQUc2RCwwQkFBeUIsR0FBSTFELEdBQUcsQ0FBQzZDLFlBQVlqSixHQUFHa0osWUFBWSxTQUFTejVFLEVBQUVDLEdBQTRDLE9BQXpDODJFLEtBQUt0ZSxjQUFjLENBQUN6NEQsT0FBRSxJQUFTQyxFQUFFLEtBQUtBLEdBQVVELEdBQUcwNUUsV0FBV25KLEdBQUc0SCxVQUFVWSxHQUFHWSxvQkFBb0IsU0FBUzM1RSxFQUFFQyxFQUFFekwsR0FBNkMsT0FBMUNBLEVBQUUsTUFBT0EsRUFBY0EsRUFBRXdCLE9BQU8sQ0FBQ2dLLElBQUksS0FBWTY0RSxHQUFHLEVBQUUsRUFBRUssR0FBR3BuRixLQUFLLEtBQ3ZmbU8sRUFBRUQsR0FBR3hMLElBQUlvbEYsZ0JBQWdCLFNBQVM1NUUsRUFBRUMsR0FBRyxPQUFPNDRFLEdBQUcsRUFBRSxFQUFFNzRFLEVBQUVDLElBQUk0NUUsUUFBUSxTQUFTNzVFLEVBQUVDLEdBQUcsSUFBSXpMLEVBQUV1aUYsS0FBcUQsT0FBaEQ5MkUsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUVELEVBQUVBLElBQUl4TCxFQUFFaWtFLGNBQWMsQ0FBQ3o0RCxFQUFFQyxHQUFVRCxHQUFHODVFLFdBQVcsU0FBUzk1RSxFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEVBQUV1MkMsS0FBdUssT0FBbEs5MkUsT0FBRSxJQUFTekwsRUFBRUEsRUFBRXlMLEdBQUdBLEVBQUV1Z0MsRUFBRWk0QixjQUFjajRCLEVBQUVxaEIsVUFBVTVoRCxFQUFtRkQsR0FBakZBLEVBQUV3Z0MsRUFBRTVOLE1BQU0sQ0FBQ20rQyxRQUFRLEtBQUswRyxTQUFTLEtBQUtMLG9CQUFvQnAzRSxFQUFFdzNFLGtCQUFrQnYzRSxJQUFPdzNFLFNBQVNZLEdBQUd2bUYsS0FBSyxLQUFLbTdCLEdBQUVqdEIsR0FBUyxDQUFDd2dDLEVBQUVpNEIsY0FBY3o0RCxJQUFJKzVFLE9BQU9wQixHQUFHVixTQUFTTSxHQUFHeUIsY0FBY1osR0FBR2EsaUJBQWlCLFNBQVNqNkUsR0FBRyxJQUFJQyxFQUFFczRFLEdBQUd2NEUsR0FBR3hMLEVBQUV5TCxFQUFFLEdBQUd1Z0MsRUFBRXZnQyxFQUFFLEdBQzVaLE9BRCtaODRFLElBQUcsV0FBVyxJQUFJOTRFLEVBQUVtMkUsR0FBR3ZhLFdBQzlldWEsR0FBR3ZhLFdBQVcsRUFBRSxJQUFJcjdCLEVBQUV4Z0MsR0FBRyxRQUFRbzJFLEdBQUd2YSxXQUFXNTdELEtBQUksQ0FBQ0QsSUFBV3hMLEdBQUcwbEYsY0FBYyxXQUFXLElBQUlsNkUsRUFBRXU0RSxJQUFHLEdBQUl0NEUsRUFBRUQsRUFBRSxHQUE4QixPQUFOMjRFLEdBQXJCMzRFLEVBQUV1NUUsR0FBR3puRixLQUFLLEtBQUtrTyxFQUFFLEtBQWdCLENBQUNBLEVBQUVDLElBQUlrNkUsaUJBQWlCLFNBQVNuNkUsRUFBRUMsRUFBRXpMLEdBQUcsSUFBSWdzQyxFQUFFdTJDLEtBQWtGLE9BQTdFdjJDLEVBQUVpNEIsY0FBYyxDQUFDbVosS0FBSyxDQUFDc0csWUFBWWo0RSxFQUFFbTRFLFlBQVksTUFBTTdqRixPQUFPeUwsRUFBRXJPLFVBQVU2QyxHQUFVdWpGLEdBQUd2M0MsRUFBRXhnQyxFQUFFQyxFQUFFekwsSUFBSTRsRixvQkFBb0IsV0FBVyxHQUFHOUUsR0FBRyxDQUFDLElBQUl0MUUsR0FBRSxFQUFHQyxFQXpEbEQsU0FBWUQsR0FBRyxNQUFNLENBQUM4dUQsU0FBU2YsRUFBRzU2RCxTQUFTNk0sRUFBRXdzQixRQUFReHNCLEdBeUREczZFLEVBQUcsV0FBaUQsTUFBdEN0NkUsSUFBSUEsR0FBRSxFQUFHeEwsRUFBRSxNQUFNbTNFLE1BQU14NEUsU0FBUyxNQUFZaUUsTUFBTXkzQixFQUFFLFNBQVNyNkIsRUFBRStqRixHQUFHdDRFLEdBQUcsR0FDMVosT0FENlosSUFBWSxFQUFQZ3RCLEdBQUUrQixRQUFVL0IsR0FBRWpQLE9BQU8sSUFBSXc2RCxHQUFHLEdBQUUsV0FBV2hrRixFQUFFLE1BQU1tM0UsTUFBTXg0RSxTQUFTLFlBQ2hmLEVBQU8sT0FBYzhNLEVBQW1DLE9BQU5zNEUsR0FBM0J0NEUsRUFBRSxNQUFNMHJFLE1BQU14NEUsU0FBUyxLQUFpQjhNLEdBQUdvNkUsMEJBQXlCLEdBQUl6RCxHQUFHLENBQUM0QyxZQUFZakosR0FBR2tKLFlBQVlKLEdBQUdLLFdBQVduSixHQUFHNEgsVUFBVWEsR0FBR1csb0JBQW9CUixHQUFHUyxnQkFBZ0JYLEdBQUdZLFFBQVFQLEdBQUdRLFdBQVczQyxHQUFHNEMsT0FBT25CLEdBQUdYLFNBQVMsV0FBVyxPQUFPZCxHQUFHRCxLQUFLOEMsY0FBY1osR0FBR2EsaUJBQWlCLFNBQVNqNkUsR0FBRyxJQUFJQyxFQUFFazNFLEdBQUdELElBQUkxaUYsRUFBRXlMLEVBQUUsR0FBR3VnQyxFQUFFdmdDLEVBQUUsR0FBNkYsT0FBMUYrNEUsSUFBRyxXQUFXLElBQUkvNEUsRUFBRW0yRSxHQUFHdmEsV0FBV3VhLEdBQUd2YSxXQUFXLEVBQUUsSUFBSXI3QixFQUFFeGdDLEdBQUcsUUFBUW8yRSxHQUFHdmEsV0FBVzU3RCxLQUFJLENBQUNELElBQVd4TCxHQUFHMGxGLGNBQWMsV0FBVyxJQUFJbDZFLEVBQUVtM0UsR0FBR0QsSUFBSSxHQUFHLE1BQU0sQ0FBQzBCLEtBQUsxdEQsUUFDOWVsckIsSUFBSW02RSxpQkFBaUI3QixHQUFHOEIsb0JBQW9CLFdBQVcsT0FBT2pELEdBQUdELElBQUksSUFBSW1ELDBCQUF5QixHQUFJeEQsR0FBRyxDQUFDMkMsWUFBWWpKLEdBQUdrSixZQUFZSixHQUFHSyxXQUFXbkosR0FBRzRILFVBQVVhLEdBQUdXLG9CQUFvQlIsR0FBR1MsZ0JBQWdCWCxHQUFHWSxRQUFRUCxHQUFHUSxXQUFXcEMsR0FBR3FDLE9BQU9uQixHQUFHWCxTQUFTLFdBQVcsT0FBT1AsR0FBR1IsS0FBSzhDLGNBQWNaLEdBQUdhLGlCQUFpQixTQUFTajZFLEdBQUcsSUFBSUMsRUFBRXkzRSxHQUFHUixJQUFJMWlGLEVBQUV5TCxFQUFFLEdBQUd1Z0MsRUFBRXZnQyxFQUFFLEdBQTZGLE9BQTFGKzRFLElBQUcsV0FBVyxJQUFJLzRFLEVBQUVtMkUsR0FBR3ZhLFdBQVd1YSxHQUFHdmEsV0FBVyxFQUFFLElBQUlyN0IsRUFBRXhnQyxHQUFHLFFBQVFvMkUsR0FBR3ZhLFdBQVc1N0QsS0FBSSxDQUFDRCxJQUFXeEwsR0FBRzBsRixjQUFjLFdBQVcsSUFBSWw2RSxFQUFFMDNFLEdBQUdSLElBQUksR0FBRyxNQUFNLENBQUMwQixLQUFLMXRELFFBQ3JmbHJCLElBQUltNkUsaUJBQWlCN0IsR0FBRzhCLG9CQUFvQixXQUFXLE9BQU8xQyxHQUFHUixJQUFJLElBQUltRCwwQkFBeUIsR0FBSUUsR0FBR3Z0QixFQUFHd3RCLGtCQUFrQmxLLElBQUcsRUFBRyxTQUFTbUssR0FBR3o2RSxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHdmdDLEVBQUUrckUsTUFBTSxPQUFPaHNFLEVBQUVzMEUsR0FBR3IwRSxFQUFFLEtBQUt6TCxFQUFFZ3NDLEdBQUc2ekMsR0FBR3AwRSxFQUFFRCxFQUFFZ3NFLE1BQU14M0UsRUFBRWdzQyxHQUFHLFNBQVNrNkMsR0FBRzE2RSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEdBQUduRyxFQUFFQSxFQUFFd3lELE9BQU8sSUFBSWhtRCxFQUFFZixFQUFFcXpFLElBQThCLE9BQTFCcEQsR0FBR2p3RSxFQUFFdEYsR0FBRzZsQyxFQUFFazJDLEdBQUcxMkUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRXgvQixFQUFFckcsR0FBTSxPQUFPcUYsR0FBSXN3RSxJQUEwRXJ3RSxFQUFFK2QsT0FBTyxFQUFFeThELEdBQUd6NkUsRUFBRUMsRUFBRXVnQyxFQUFFN2xDLEdBQVVzRixFQUFFK3JFLFFBQWhHL3JFLEVBQUUyd0UsWUFBWTV3RSxFQUFFNHdFLFlBQVkzd0UsRUFBRStkLFFBQVEsSUFBSWhlLEVBQUVxd0UsUUFBUTExRSxFQUFFb2lDLEdBQUcvOEIsRUFBRUMsRUFBRXRGLElBQ3hXLFNBQVNnZ0YsR0FBRzM2RSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEVBQUVxRyxHQUFHLEdBQUcsT0FBT2hCLEVBQUUsQ0FBQyxJQUFJNGdCLEVBQUVwc0IsRUFBRS9DLEtBQUssTUFBRyxtQkFBb0JtdkIsR0FBSWc2RCxHQUFHaDZELFNBQUksSUFBU0EsRUFBRW1sQyxjQUFjLE9BQU92eEQsRUFBRWt5RCxjQUFTLElBQVNseUQsRUFBRXV4RCxlQUFzRC9sRCxFQUFFaTBFLEdBQUd6L0UsRUFBRS9DLEtBQUssS0FBSyt1QyxFQUFFdmdDLEVBQUVBLEVBQUUrdUIsS0FBS2h1QixJQUFLc3lFLElBQUlyekUsRUFBRXF6RSxJQUFJdHpFLEVBQUV1NEQsT0FBT3Q0RCxFQUFTQSxFQUFFK3JFLE1BQU1oc0UsSUFBdkdDLEVBQUVtUSxJQUFJLEdBQUduUSxFQUFFeE8sS0FBS212QixFQUFFaTZELEdBQUc3NkUsRUFBRUMsRUFBRTJnQixFQUFFNGYsRUFBRTdsQyxFQUFFcUcsSUFBb0YsT0FBVjRmLEVBQUU1Z0IsRUFBRWdzRSxNQUFTLElBQUtyeEUsRUFBRXFHLEtBQUtyRyxFQUFFaW1CLEVBQUVzMEQsZUFBMEIxZ0YsRUFBRSxRQUFkQSxFQUFFQSxFQUFFa3lELFNBQW1CbHlELEVBQUVvekUsSUFBS2p0RSxFQUFFNmxDLElBQUl4Z0MsRUFBRXN6RSxNQUFNcnpFLEVBQUVxekUsS0FBWXYyQyxHQUFHLzhCLEVBQUVDLEVBQUVlLElBQUdmLEVBQUUrZCxPQUFPLEdBQUVoZSxFQUFFK3pFLEdBQUduekQsRUFBRTRmLElBQUs4eUMsSUFBSXJ6RSxFQUFFcXpFLElBQUl0ekUsRUFBRXU0RCxPQUFPdDRELEVBQVNBLEVBQUUrckUsTUFBTWhzRSxHQUNsYixTQUFTNjZFLEdBQUc3NkUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxFQUFFcUcsR0FBRyxHQUFHLE9BQU9oQixHQUFHNG5FLEdBQUc1bkUsRUFBRWsxRSxjQUFjMTBDLElBQUl4Z0MsRUFBRXN6RSxNQUFNcnpFLEVBQUVxekUsSUFBSSxJQUFHaEQsSUFBRyxFQUFHLElBQUt0dkUsRUFBRXJHLEdBQXFDLE9BQU9zRixFQUFFb3dFLE1BQU1yd0UsRUFBRXF3RSxNQUFNdHpDLEdBQUcvOEIsRUFBRUMsRUFBRWUsR0FBaEUsSUFBYSxNQUFSaEIsRUFBRWdlLFNBQWVzeUQsSUFBRyxHQUEwQyxPQUFPd0ssR0FBRzk2RSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFeC9CLEdBQ25MLFNBQVMrNUUsR0FBRy82RSxFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEVBQUV2Z0MsRUFBRXkxRSxhQUFhLzZFLEVBQUU2bEMsRUFBRXF3QixTQUFTN3ZELEVBQUUsT0FBT2hCLEVBQUVBLEVBQUV5NEQsY0FBYyxLQUFLLEdBQUcsV0FBV2o0QixFQUFFeFIsTUFBTSxrQ0FBa0N3UixFQUFFeFIsS0FBSyxHQUFHLElBQVksRUFBUC91QixFQUFFK3VCLE1BQVEvdUIsRUFBRXc0RCxjQUFjLENBQUN1aUIsVUFBVSxHQUFHQyxHQUFHaDdFLEVBQUV6TCxPQUFRLElBQUcsSUFBTyxXQUFGQSxHQUE4RSxPQUFPd0wsRUFBRSxPQUFPZ0IsRUFBRUEsRUFBRWc2RSxVQUFVeG1GLEVBQUVBLEVBQUV5TCxFQUFFb3dFLE1BQU1wd0UsRUFBRWd3RSxXQUFXLFdBQVdod0UsRUFBRXc0RCxjQUFjLENBQUN1aUIsVUFBVWg3RSxHQUFHaTdFLEdBQUdoN0UsRUFBRUQsR0FBRyxLQUF4S0MsRUFBRXc0RCxjQUFjLENBQUN1aUIsVUFBVSxHQUFHQyxHQUFHaDdFLEVBQUUsT0FBT2UsRUFBRUEsRUFBRWc2RSxVQUFVeG1GLFFBQTBILE9BQU93TSxHQUFHdy9CLEVBQUV4L0IsRUFBRWc2RSxVQUFVeG1GLEVBQUV5TCxFQUFFdzRELGNBQWMsTUFBTWo0QixFQUFFaHNDLEVBQUV5bUYsR0FBR2g3RSxFQUFFdWdDLEdBQWUsT0FBWmk2QyxHQUFHejZFLEVBQUVDLEVBQUV0RixFQUFFbkcsR0FBVXlMLEVBQUUrckUsTUFDMWUsU0FBU2tQLEdBQUdsN0UsRUFBRUMsR0FBRyxJQUFJekwsRUFBRXlMLEVBQUVxekUsS0FBTyxPQUFPdHpFLEdBQUcsT0FBT3hMLEdBQUcsT0FBT3dMLEdBQUdBLEVBQUVzekUsTUFBTTkrRSxLQUFFeUwsRUFBRStkLE9BQU8sS0FBSSxTQUFTODhELEdBQUc5NkUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxHQUFHLElBQUlxRyxFQUFFNnJFLEdBQUdyNEUsR0FBR2k0RSxHQUFHRixHQUFFcmhELFFBQTRDLE9BQXBDbHFCLEVBQUUwckUsR0FBR3pzRSxFQUFFZSxHQUFHa3ZFLEdBQUdqd0UsRUFBRXRGLEdBQUduRyxFQUFFa2lGLEdBQUcxMkUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRXgvQixFQUFFckcsR0FBTSxPQUFPcUYsR0FBSXN3RSxJQUEwRXJ3RSxFQUFFK2QsT0FBTyxFQUFFeThELEdBQUd6NkUsRUFBRUMsRUFBRXpMLEVBQUVtRyxHQUFVc0YsRUFBRStyRSxRQUFoRy9yRSxFQUFFMndFLFlBQVk1d0UsRUFBRTR3RSxZQUFZM3dFLEVBQUUrZCxRQUFRLElBQUloZSxFQUFFcXdFLFFBQVExMUUsRUFBRW9pQyxHQUFHLzhCLEVBQUVDLEVBQUV0RixJQUM5UCxTQUFTd2dGLEdBQUduN0UsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxHQUFHLEdBQUdreUUsR0FBR3I0RSxHQUFHLENBQUMsSUFBSXdNLEdBQUUsRUFBR2tzRSxHQUFHanRFLFFBQVFlLEdBQUUsRUFBVyxHQUFSa3ZFLEdBQUdqd0UsRUFBRXRGLEdBQU0sT0FBT3NGLEVBQUU4MkQsVUFBVSxPQUFPLzJELElBQUlBLEVBQUVzNEQsVUFBVSxLQUFLcjRELEVBQUVxNEQsVUFBVSxLQUFLcjRELEVBQUUrZCxPQUFPLEdBQUcwMEQsR0FBR3p5RSxFQUFFekwsRUFBRWdzQyxHQUFHdXlDLEdBQUc5eUUsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxHQUFHNmxDLEdBQUUsT0FBUSxHQUFHLE9BQU94Z0MsRUFBRSxDQUFDLElBQUk0Z0IsRUFBRTNnQixFQUFFODJELFVBQVVqZ0UsRUFBRW1KLEVBQUVpMUUsY0FBY3QwRCxFQUFFaUssTUFBTS96QixFQUFFLElBQUlzWCxFQUFFd1MsRUFBRXh1QixRQUFReUIsRUFBRVcsRUFBRXF4RCxZQUEwQ2h5RCxFQUE5QixpQkFBa0JBLEdBQUcsT0FBT0EsRUFBSTA4RSxHQUFHMThFLEdBQTJCNjRFLEdBQUd6c0UsRUFBMUJwTSxFQUFFZzVFLEdBQUdyNEUsR0FBR2k0RSxHQUFHRixHQUFFcmhELFNBQW1CLElBQUk1YyxFQUFFOVosRUFBRTJ4RCx5QkFBeUJuOUIsRUFBRSxtQkFBb0IxYSxHQUFHLG1CQUFvQnNTLEVBQUVveUQsd0JBQXdCaHFELEdBQUcsbUJBQW9CcEksRUFBRWt5RCxrQ0FDcGQsbUJBQW9CbHlELEVBQUVpeUQsNEJBQTRCLzdFLElBQUkwcEMsR0FBR3B5QixJQUFJdmEsSUFBSSsrRSxHQUFHM3lFLEVBQUUyZ0IsRUFBRTRmLEVBQUUzc0MsR0FBRzY4RSxJQUFHLEVBQUcsSUFBSXJuQyxFQUFFcHBDLEVBQUV3NEQsY0FBYzczQyxFQUFFaFAsTUFBTXkzQixFQUFFa29DLEdBQUd0eEUsRUFBRXVnQyxFQUFFNWYsRUFBRWptQixHQUFHeVQsRUFBRW5PLEVBQUV3NEQsY0FBYzNoRSxJQUFJMHBDLEdBQUc2SSxJQUFJajdCLEdBQUdvK0QsR0FBRXRoRCxTQUFTd2xELElBQUksbUJBQW9CcGlFLElBQUl1akUsR0FBRzV4RSxFQUFFekwsRUFBRThaLEVBQUVreUIsR0FBR3B5QixFQUFFbk8sRUFBRXc0RCxnQkFBZ0IzaEUsRUFBRTQ1RSxJQUFJNkIsR0FBR3R5RSxFQUFFekwsRUFBRXNDLEVBQUUwcEMsRUFBRTZJLEVBQUVqN0IsRUFBRXZhLEtBQUttMUIsR0FBRyxtQkFBb0JwSSxFQUFFcXlELDJCQUEyQixtQkFBb0JyeUQsRUFBRXN5RCxxQkFBcUIsbUJBQW9CdHlELEVBQUVzeUQsb0JBQW9CdHlELEVBQUVzeUQscUJBQXFCLG1CQUFvQnR5RCxFQUFFcXlELDJCQUEyQnJ5RCxFQUFFcXlELDZCQUE2QixtQkFDemVyeUQsRUFBRXV5RCxvQkFBb0JsekUsRUFBRStkLE9BQU8sS0FBSyxtQkFBb0I0QyxFQUFFdXlELG9CQUFvQmx6RSxFQUFFK2QsT0FBTyxHQUFHL2QsRUFBRWkxRSxjQUFjMTBDLEVBQUV2Z0MsRUFBRXc0RCxjQUFjcnFELEdBQUd3UyxFQUFFaUssTUFBTTJWLEVBQUU1ZixFQUFFaFAsTUFBTXhELEVBQUV3UyxFQUFFeHVCLFFBQVF5QixFQUFFMnNDLEVBQUUxcEMsSUFBSSxtQkFBb0I4cEIsRUFBRXV5RCxvQkFBb0JsekUsRUFBRStkLE9BQU8sR0FBR3dpQixHQUFFLE9BQVEsQ0FBQzVmLEVBQUUzZ0IsRUFBRTgyRCxVQUFVa2EsR0FBR2p4RSxFQUFFQyxHQUFHbkosRUFBRW1KLEVBQUVpMUUsY0FBY3JoRixFQUFFb00sRUFBRXhPLE9BQU93TyxFQUFFMnFELFlBQVk5ekQsRUFBRTA0RSxHQUFHdnZFLEVBQUV4TyxLQUFLcUYsR0FBRzhwQixFQUFFaUssTUFBTWgzQixFQUFFbTFCLEVBQUUvb0IsRUFBRXkxRSxhQUFhcnNDLEVBQUV6b0IsRUFBRXh1QixRQUFzRGdjLEVBQTlCLGlCQUFoQkEsRUFBRTVaLEVBQUVxeEQsY0FBaUMsT0FBT3ozQyxFQUFJbWlFLEdBQUduaUUsR0FBMkJzK0QsR0FBR3pzRSxFQUExQm1PLEVBQUV5K0QsR0FBR3I0RSxHQUFHaTRFLEdBQUdGLEdBQUVyaEQsU0FBbUIsSUFBSS9tQixFQUFFM1AsRUFBRTJ4RCwwQkFBMEI3M0MsRUFBRSxtQkFBb0JuSyxHQUNuZixtQkFBb0J5YyxFQUFFb3lELDBCQUEwQixtQkFBb0JweUQsRUFBRWt5RCxrQ0FBa0MsbUJBQW9CbHlELEVBQUVpeUQsNEJBQTRCLzdFLElBQUlreUIsR0FBR3FnQixJQUFJajdCLElBQUl3a0UsR0FBRzN5RSxFQUFFMmdCLEVBQUU0ZixFQUFFcHlCLEdBQUdzaUUsSUFBRyxFQUFHcm5DLEVBQUVwcEMsRUFBRXc0RCxjQUFjNzNDLEVBQUVoUCxNQUFNeTNCLEVBQUVrb0MsR0FBR3R4RSxFQUFFdWdDLEVBQUU1ZixFQUFFam1CLEdBQUcsSUFBSTRxQixFQUFFdGxCLEVBQUV3NEQsY0FBYzNoRSxJQUFJa3lCLEdBQUdxZ0IsSUFBSTlqQixHQUFHaW5ELEdBQUV0aEQsU0FBU3dsRCxJQUFJLG1CQUFvQnZzRSxJQUFJMHRFLEdBQUc1eEUsRUFBRXpMLEVBQUUyUCxFQUFFcThCLEdBQUdqYixFQUFFdGxCLEVBQUV3NEQsZ0JBQWdCNWtFLEVBQUU2OEUsSUFBSTZCLEdBQUd0eUUsRUFBRXpMLEVBQUVYLEVBQUUyc0MsRUFBRTZJLEVBQUU5akIsRUFBRW5YLEtBQUtFLEdBQUcsbUJBQW9Cc1MsRUFBRXc2RCw0QkFBNEIsbUJBQW9CeDZELEVBQUV5NkQsc0JBQXNCLG1CQUFvQno2RCxFQUFFeTZELHFCQUFxQno2RCxFQUFFeTZELG9CQUFvQjc2QyxFQUMxZ0JqYixFQUFFblgsR0FBRyxtQkFBb0J3UyxFQUFFdzZELDRCQUE0Qng2RCxFQUFFdzZELDJCQUEyQjU2QyxFQUFFamIsRUFBRW5YLElBQUksbUJBQW9Cd1MsRUFBRTA2RCxxQkFBcUJyN0UsRUFBRStkLE9BQU8sR0FBRyxtQkFBb0I0QyxFQUFFb3lELDBCQUEwQi95RSxFQUFFK2QsT0FBTyxPQUFPLG1CQUFvQjRDLEVBQUUwNkQsb0JBQW9CeGtGLElBQUlrSixFQUFFazFFLGVBQWU3ckMsSUFBSXJwQyxFQUFFeTRELGdCQUFnQng0RCxFQUFFK2QsT0FBTyxHQUFHLG1CQUFvQjRDLEVBQUVveUQseUJBQXlCbDhFLElBQUlrSixFQUFFazFFLGVBQWU3ckMsSUFBSXJwQyxFQUFFeTRELGdCQUFnQng0RCxFQUFFK2QsT0FBTyxLQUFLL2QsRUFBRWkxRSxjQUFjMTBDLEVBQUV2Z0MsRUFBRXc0RCxjQUFjbHpDLEdBQUczRSxFQUFFaUssTUFBTTJWLEVBQUU1ZixFQUFFaFAsTUFBTTJULEVBQUUzRSxFQUFFeHVCLFFBQVFnYyxFQUFFb3lCLEVBQUUzc0MsSUFBSSxtQkFBb0Irc0IsRUFBRTA2RCxvQkFDN2Z4a0YsSUFBSWtKLEVBQUVrMUUsZUFBZTdyQyxJQUFJcnBDLEVBQUV5NEQsZ0JBQWdCeDRELEVBQUUrZCxPQUFPLEdBQUcsbUJBQW9CNEMsRUFBRW95RCx5QkFBeUJsOEUsSUFBSWtKLEVBQUVrMUUsZUFBZTdyQyxJQUFJcnBDLEVBQUV5NEQsZ0JBQWdCeDRELEVBQUUrZCxPQUFPLEtBQUt3aUIsR0FBRSxHQUFJLE9BQU8rNkMsR0FBR3Y3RSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFeC9CLEVBQUVyRyxHQUN6TCxTQUFTNGdGLEdBQUd2N0UsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxFQUFFcUcsR0FBR2s2RSxHQUFHbDdFLEVBQUVDLEdBQUcsSUFBSTJnQixFQUFFLElBQWEsR0FBUjNnQixFQUFFK2QsT0FBVSxJQUFJd2lCLElBQUk1ZixFQUFFLE9BQU9qbUIsR0FBR3l5RSxHQUFHbnRFLEVBQUV6TCxHQUFFLEdBQUl1b0MsR0FBRy84QixFQUFFQyxFQUFFZSxHQUFHdy9CLEVBQUV2Z0MsRUFBRTgyRCxVQUFVd2pCLEdBQUdydkQsUUFBUWpyQixFQUFFLElBQUluSixFQUFFOHBCLEdBQUcsbUJBQW9CcHNCLEVBQUUweEQseUJBQXlCLEtBQUsxbEIsRUFBRXdtQixTQUF3SSxPQUEvSC9tRCxFQUFFK2QsT0FBTyxFQUFFLE9BQU9oZSxHQUFHNGdCLEdBQUczZ0IsRUFBRStyRSxNQUFNcUksR0FBR3AwRSxFQUFFRCxFQUFFZ3NFLE1BQU0sS0FBS2hyRSxHQUFHZixFQUFFK3JFLE1BQU1xSSxHQUFHcDBFLEVBQUUsS0FBS25KLEVBQUVrSyxJQUFJeTVFLEdBQUd6NkUsRUFBRUMsRUFBRW5KLEVBQUVrSyxHQUFHZixFQUFFdzRELGNBQWNqNEIsRUFBRTV1QixNQUFNalgsR0FBR3l5RSxHQUFHbnRFLEVBQUV6TCxHQUFFLEdBQVd5TCxFQUFFK3JFLE1BQU0sU0FBU3dQLEdBQUd4N0UsR0FBRyxJQUFJQyxFQUFFRCxFQUFFKzJELFVBQVU5MkQsRUFBRXc3RSxlQUFlMU8sR0FBRy9zRSxFQUFFQyxFQUFFdzdFLGVBQWV4N0UsRUFBRXc3RSxpQkFBaUJ4N0UsRUFBRTdOLFNBQVM2TixFQUFFN04sU0FBUzI2RSxHQUFHL3NFLEVBQUVDLEVBQUU3TixTQUFRLEdBQUl1aUYsR0FBRzMwRSxFQUFFQyxFQUFFeTZELGVBQzdkLElBUzBWZ2hCLEdBQU1DLEdBQUdDLEdBVC9WQyxHQUFHLENBQUNuakIsV0FBVyxLQUFLb2pCLFVBQVUsR0FDbEMsU0FBU0MsR0FBRy83RSxFQUFFQyxFQUFFekwsR0FBRyxJQUFzQ29zQixFQUFsQzRmLEVBQUV2Z0MsRUFBRXkxRSxhQUFhLzZFLEVBQUVrbEIsR0FBRXFMLFFBQVFscUIsR0FBRSxFQUE2TSxPQUF2TTRmLEVBQUUsSUFBYSxHQUFSM2dCLEVBQUUrZCxVQUFhNEMsR0FBRSxPQUFPNWdCLEdBQUcsT0FBT0EsRUFBRXk0RCxnQkFBaUIsSUFBTyxFQUFGOTlELElBQU1pbUIsR0FBRzVmLEdBQUUsRUFBR2YsRUFBRStkLFFBQVEsSUFBSSxPQUFPaGUsR0FBRyxPQUFPQSxFQUFFeTRELG9CQUFlLElBQVNqNEIsRUFBRXc3QyxXQUFVLElBQUt4N0MsRUFBRXk3Qyw2QkFBNkJ0aEYsR0FBRyxHQUFHMHhFLEdBQUV4c0QsR0FBSSxFQUFGbGxCLEdBQVEsT0FBT3FGLFFBQUcsSUFBU3dnQyxFQUFFdzdDLFVBQVVyRyxHQUFHMTFFLEdBQUdELEVBQUV3Z0MsRUFBRXF3QixTQUFTbDJELEVBQUU2bEMsRUFBRXc3QyxTQUFZaDdFLEdBQVNoQixFQUFFazhFLEdBQUdqOEUsRUFBRUQsRUFBRXJGLEVBQUVuRyxHQUFHeUwsRUFBRStyRSxNQUFNdlQsY0FBYyxDQUFDdWlCLFVBQVV4bUYsR0FBR3lMLEVBQUV3NEQsY0FBY29qQixHQUFHNzdFLEdBQUssaUJBQWtCd2dDLEVBQUUyN0MsMkJBQWlDbjhFLEVBQUVrOEUsR0FBR2o4RSxFQUFFRCxFQUFFckYsRUFBRW5HLEdBQUd5TCxFQUFFK3JFLE1BQU12VCxjQUFjLENBQUN1aUIsVUFBVXhtRixHQUMvZnlMLEVBQUV3NEQsY0FBY29qQixHQUFHNTdFLEVBQUVvd0UsTUFBTSxTQUFTcndFLEtBQUV4TCxFQUFFNG5GLEdBQUcsQ0FBQ3B0RCxLQUFLLFVBQVU2aEMsU0FBUzd3RCxHQUFHQyxFQUFFK3VCLEtBQUt4NkIsRUFBRSxPQUFRK2pFLE9BQU90NEQsRUFBU0EsRUFBRStyRSxNQUFNeDNFLEtBQVl3TCxFQUFFeTRELGNBQWtCejNELEdBQVN3L0IsRUFHekosU0FBWXhnQyxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEdBQUcsSUFBSXFHLEVBQUVmLEVBQUUrdUIsS0FBS3BPLEVBQUU1Z0IsRUFBRWdzRSxNQUFNaHNFLEVBQUU0Z0IsRUFBRWt6RCxRQUFRLElBQUloOUUsRUFBRSxDQUFDazRCLEtBQUssU0FBUzZoQyxTQUFTcjhELEdBQW9TLE9BQWpTLElBQU8sRUFBRndNLElBQU1mLEVBQUUrckUsUUFBUXByRCxJQUFHcHNCLEVBQUV5TCxFQUFFK3JFLE9BQVFpRSxXQUFXLEVBQUV6N0UsRUFBRWtoRixhQUFhNStFLEVBQWlCLFFBQWY4cEIsRUFBRXBzQixFQUFFbS9FLGFBQXFCMXpFLEVBQUU0ekUsWUFBWXIvRSxFQUFFcS9FLFlBQVk1ekUsRUFBRTB6RSxXQUFXL3lELEVBQUVBLEVBQUVnekQsV0FBVyxNQUFNM3pFLEVBQUU0ekUsWUFBWTV6RSxFQUFFMHpFLFdBQVcsTUFBTW4vRSxFQUFFdS9FLEdBQUduekQsRUFBRTlwQixHQUFHLE9BQU9rSixFQUFFd2dDLEVBQUV1ekMsR0FBRy96RSxFQUFFd2dDLElBQUlBLEVBQUU0ekMsR0FBRzV6QyxFQUFFeC9CLEVBQUVyRyxFQUFFLE9BQVFxakIsT0FBTyxFQUFHd2lCLEVBQUUrM0IsT0FBT3Q0RCxFQUFFekwsRUFBRStqRSxPQUFPdDRELEVBQUV6TCxFQUFFcy9FLFFBQVF0ekMsRUFBRXZnQyxFQUFFK3JFLE1BQU14M0UsRUFBU2dzQyxFQUh4TzY3QyxDQUFHcjhFLEVBQUVDLEVBQUV1Z0MsRUFBRXF3QixTQUFTcndCLEVBQUV3N0MsU0FBU3huRixHQUFHd00sRUFBRWYsRUFBRStyRSxNQUFNcnhFLEVBQUVxRixFQUFFZ3NFLE1BQU12VCxjQUFjejNELEVBQUV5M0QsY0FBYyxPQUFPOTlELEVBQUUsQ0FBQ3FnRixVQUFVeG1GLEdBQUcsQ0FBQ3dtRixVQUFVcmdGLEVBQUVxZ0YsVUFBVXhtRixHQUFHd00sRUFBRWl2RSxXQUFXandFLEVBQUVpd0UsWUFBWXo3RSxFQUFFeUwsRUFBRXc0RCxjQUFjb2pCLEdBQUdyN0MsSUFBRWhzQyxFQUVoVixTQUFZd0wsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxJQUFJN2xDLEVBQUVxRixFQUFFZ3NFLE1BQWlMLE9BQTNLaHNFLEVBQUVyRixFQUFFbTVFLFFBQVF0L0UsRUFBRXUvRSxHQUFHcDVFLEVBQUUsQ0FBQ3EwQixLQUFLLFVBQVU2aEMsU0FBU3I4RCxJQUFJLElBQVksRUFBUHlMLEVBQUUrdUIsUUFBVXg2QixFQUFFNjdFLE1BQU03dkMsR0FBR2hzQyxFQUFFK2pFLE9BQU90NEQsRUFBRXpMLEVBQUVzL0UsUUFBUSxLQUFLLE9BQU85ekUsSUFBSUEsRUFBRTR6RSxXQUFXLEtBQUs1ekUsRUFBRWdlLE1BQU0sRUFBRS9kLEVBQUU0ekUsWUFBWTV6RSxFQUFFMHpFLFdBQVczekUsR0FBVUMsRUFBRStyRSxNQUFNeDNFLEVBRnFIOG5GLENBQUd0OEUsRUFBRUMsRUFBRXVnQyxFQUFFcXdCLFNBQVNyOEQsR0FBR3lMLEVBQUV3NEQsY0FBYyxLQUFZamtFLElBQ2xRLFNBQVMwbkYsR0FBR2w4RSxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHLElBQUk3bEMsRUFBRXFGLEVBQUVndkIsS0FBS2h1QixFQUFFaEIsRUFBRWdzRSxNQUF1SyxPQUFqSy9yRSxFQUFFLENBQUMrdUIsS0FBSyxTQUFTNmhDLFNBQVM1d0QsR0FBRyxJQUFPLEVBQUZ0RixJQUFNLE9BQU9xRyxHQUFHQSxFQUFFaXZFLFdBQVcsRUFBRWp2RSxFQUFFMDBFLGFBQWF6MUUsR0FBR2UsRUFBRW83RSxHQUFHbjhFLEVBQUV0RixFQUFFLEVBQUUsTUFBTW5HLEVBQUU0L0UsR0FBRzUvRSxFQUFFbUcsRUFBRTZsQyxFQUFFLE1BQU14L0IsRUFBRXUzRCxPQUFPdjRELEVBQUV4TCxFQUFFK2pFLE9BQU92NEQsRUFBRWdCLEVBQUU4eUUsUUFBUXQvRSxFQUFFd0wsRUFBRWdzRSxNQUFNaHJFLEVBQVN4TSxFQUVnRCxTQUFTa25DLEdBQUcxN0IsRUFBRUMsR0FBR0QsRUFBRXF3RSxPQUFPcHdFLEVBQUUsSUFBSXpMLEVBQUV3TCxFQUFFczRELFVBQVUsT0FBTzlqRSxJQUFJQSxFQUFFNjdFLE9BQU9wd0UsR0FBRyt2RSxHQUFHaHdFLEVBQUV1NEQsT0FBT3Q0RCxHQUN0ZCxTQUFTczhFLEdBQUd2OEUsRUFBRUMsRUFBRXpMLEVBQUVnc0MsRUFBRTdsQyxFQUFFcUcsR0FBRyxJQUFJNGYsRUFBRTVnQixFQUFFeTRELGNBQWMsT0FBTzczQyxFQUFFNWdCLEVBQUV5NEQsY0FBYyxDQUFDK2pCLFlBQVl2OEUsRUFBRXc4RSxVQUFVLEtBQUtDLG1CQUFtQixFQUFFbnJFLEtBQUtpdkIsRUFBRTVULEtBQUtwNEIsRUFBRW1vRixTQUFTaGlGLEVBQUVnNUUsV0FBVzN5RSxJQUFJNGYsRUFBRTQ3RCxZQUFZdjhFLEVBQUUyZ0IsRUFBRTY3RCxVQUFVLEtBQUs3N0QsRUFBRTg3RCxtQkFBbUIsRUFBRTk3RCxFQUFFclAsS0FBS2l2QixFQUFFNWYsRUFBRWdNLEtBQUtwNEIsRUFBRW9zQixFQUFFKzdELFNBQVNoaUYsRUFBRWltQixFQUFFK3lELFdBQVczeUUsR0FDdlEsU0FBUzQ3RSxHQUFHNThFLEVBQUVDLEVBQUV6TCxHQUFHLElBQUlnc0MsRUFBRXZnQyxFQUFFeTFFLGFBQWEvNkUsRUFBRTZsQyxFQUFFMjBDLFlBQVluMEUsRUFBRXcvQixFQUFFNVQsS0FBc0MsR0FBakM2dEQsR0FBR3o2RSxFQUFFQyxFQUFFdWdDLEVBQUVxd0IsU0FBU3I4RCxHQUFrQixJQUFPLEdBQXRCZ3NDLEVBQUUzZ0IsR0FBRXFMLFVBQXFCc1YsRUFBSSxFQUFGQSxFQUFJLEVBQUV2Z0MsRUFBRStkLE9BQU8sT0FBTyxDQUFDLEdBQUcsT0FBT2hlLEdBQUcsSUFBYSxHQUFSQSxFQUFFZ2UsT0FBVWhlLEVBQUUsSUFBSUEsRUFBRUMsRUFBRStyRSxNQUFNLE9BQU9oc0UsR0FBRyxDQUFDLEdBQUcsS0FBS0EsRUFBRW9RLElBQUksT0FBT3BRLEVBQUV5NEQsZUFBZS84QixHQUFHMTdCLEVBQUV4TCxRQUFRLEdBQUcsS0FBS3dMLEVBQUVvUSxJQUFJc3JCLEdBQUcxN0IsRUFBRXhMLFFBQVEsR0FBRyxPQUFPd0wsRUFBRWdzRSxNQUFNLENBQUNoc0UsRUFBRWdzRSxNQUFNelQsT0FBT3Y0RCxFQUFFQSxFQUFFQSxFQUFFZ3NFLE1BQU0sU0FBUyxHQUFHaHNFLElBQUlDLEVBQUUsTUFBTUQsRUFBRSxLQUFLLE9BQU9BLEVBQUU4ekUsU0FBUyxDQUFDLEdBQUcsT0FBTzl6RSxFQUFFdTRELFFBQVF2NEQsRUFBRXU0RCxTQUFTdDRELEVBQUUsTUFBTUQsRUFBRUEsRUFBRUEsRUFBRXU0RCxPQUFPdjRELEVBQUU4ekUsUUFBUXZiLE9BQU92NEQsRUFBRXU0RCxPQUFPdjRELEVBQUVBLEVBQUU4ekUsUUFBUXR6QyxHQUFHLEVBQVMsR0FBUDZyQyxHQUFFeHNELEdBQUUyZ0IsR0FBTSxJQUFZLEVBQVB2Z0MsRUFBRSt1QixNQUFRL3VCLEVBQUV3NEQsY0FDemUsVUFBVSxPQUFPOTlELEdBQUcsSUFBSyxXQUFxQixJQUFWbkcsRUFBRXlMLEVBQUUrckUsTUFBVXJ4RSxFQUFFLEtBQUssT0FBT25HLEdBQWlCLFFBQWR3TCxFQUFFeEwsRUFBRThqRSxZQUFvQixPQUFPMmMsR0FBR2oxRSxLQUFLckYsRUFBRW5HLEdBQUdBLEVBQUVBLEVBQUVzL0UsUUFBWSxRQUFKdC9FLEVBQUVtRyxJQUFZQSxFQUFFc0YsRUFBRStyRSxNQUFNL3JFLEVBQUUrckUsTUFBTSxPQUFPcnhFLEVBQUVuRyxFQUFFcy9FLFFBQVF0L0UsRUFBRXMvRSxRQUFRLE1BQU15SSxHQUFHdDhFLEdBQUUsRUFBR3RGLEVBQUVuRyxFQUFFd00sRUFBRWYsRUFBRTB6RSxZQUFZLE1BQU0sSUFBSyxZQUE2QixJQUFqQm4vRSxFQUFFLEtBQUttRyxFQUFFc0YsRUFBRStyRSxNQUFVL3JFLEVBQUUrckUsTUFBTSxLQUFLLE9BQU9yeEUsR0FBRyxDQUFlLEdBQUcsUUFBakJxRixFQUFFckYsRUFBRTI5RCxZQUF1QixPQUFPMmMsR0FBR2oxRSxHQUFHLENBQUNDLEVBQUUrckUsTUFBTXJ4RSxFQUFFLE1BQU1xRixFQUFFckYsRUFBRW01RSxRQUFRbjVFLEVBQUVtNUUsUUFBUXQvRSxFQUFFQSxFQUFFbUcsRUFBRUEsRUFBRXFGLEVBQUV1OEUsR0FBR3Q4RSxHQUFFLEVBQUd6TCxFQUFFLEtBQUt3TSxFQUFFZixFQUFFMHpFLFlBQVksTUFBTSxJQUFLLFdBQVc0SSxHQUFHdDhFLEdBQUUsRUFBRyxLQUFLLFVBQUssRUFBT0EsRUFBRTB6RSxZQUFZLE1BQU0sUUFBUTF6RSxFQUFFdzRELGNBQWMsS0FBSyxPQUFPeDRELEVBQUUrckUsTUFDL2YsU0FBU2p2QyxHQUFHLzhCLEVBQUVDLEVBQUV6TCxHQUF5RCxHQUF0RCxPQUFPd0wsSUFBSUMsRUFBRWt3RSxhQUFhbndFLEVBQUVtd0UsY0FBY3FCLElBQUl2eEUsRUFBRW93RSxNQUFTLElBQUs3N0UsRUFBRXlMLEVBQUVnd0UsWUFBWSxDQUFDLEdBQUcsT0FBT2p3RSxHQUFHQyxFQUFFK3JFLFFBQVFoc0UsRUFBRWdzRSxNQUFNLE1BQU01MEUsTUFBTXkzQixFQUFFLE1BQU0sR0FBRyxPQUFPNXVCLEVBQUUrckUsTUFBTSxDQUE0QyxJQUFqQ3gzRSxFQUFFdS9FLEdBQVovekUsRUFBRUMsRUFBRStyRSxNQUFhaHNFLEVBQUUwMUUsY0FBY3oxRSxFQUFFK3JFLE1BQU14M0UsRUFBTUEsRUFBRStqRSxPQUFPdDRELEVBQUUsT0FBT0QsRUFBRTh6RSxTQUFTOXpFLEVBQUVBLEVBQUU4ekUsU0FBUXQvRSxFQUFFQSxFQUFFcy9FLFFBQVFDLEdBQUcvekUsRUFBRUEsRUFBRTAxRSxlQUFnQm5kLE9BQU90NEQsRUFBRXpMLEVBQUVzL0UsUUFBUSxLQUFLLE9BQU83ekUsRUFBRStyRSxNQUFNLE9BQU8sS0FLNVAsU0FBUzZRLEdBQUc3OEUsRUFBRUMsR0FBRyxJQUFJcTFFLEdBQUcsT0FBT3QxRSxFQUFFMjhFLFVBQVUsSUFBSyxTQUFTMThFLEVBQUVELEVBQUU0c0IsS0FBSyxJQUFJLElBQUlwNEIsRUFBRSxLQUFLLE9BQU95TCxHQUFHLE9BQU9BLEVBQUVxNEQsWUFBWTlqRSxFQUFFeUwsR0FBR0EsRUFBRUEsRUFBRTZ6RSxRQUFRLE9BQU90L0UsRUFBRXdMLEVBQUU0c0IsS0FBSyxLQUFLcDRCLEVBQUVzL0UsUUFBUSxLQUFLLE1BQU0sSUFBSyxZQUFZdC9FLEVBQUV3TCxFQUFFNHNCLEtBQUssSUFBSSxJQUFJNFQsRUFBRSxLQUFLLE9BQU9oc0MsR0FBRyxPQUFPQSxFQUFFOGpFLFlBQVk5M0IsRUFBRWhzQyxHQUFHQSxFQUFFQSxFQUFFcy9FLFFBQVEsT0FBT3R6QyxFQUFFdmdDLEdBQUcsT0FBT0QsRUFBRTRzQixLQUFLNXNCLEVBQUU0c0IsS0FBSyxLQUFLNXNCLEVBQUU0c0IsS0FBS2tuRCxRQUFRLEtBQUt0ekMsRUFBRXN6QyxRQUFRLE1BQzdaLFNBQVNnSixHQUFHOThFLEVBQUVDLEVBQUV6TCxHQUFHLElBQUlnc0MsRUFBRXZnQyxFQUFFeTFFLGFBQWEsT0FBT3oxRSxFQUFFbVEsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTyxLQUFLLEtBQUssRUFReUMsS0FBSyxHQUFHLE9BQU95OEQsR0FBRzVzRSxFQUFFeE8sT0FBT3E3RSxLQUFLLEtBUjFDLEtBQUssRUFBc0wsT0FBcExnSSxLQUFLMUksR0FBRUksSUFBR0osR0FBRUcsSUFBR3lKLE1BQUt4MUMsRUFBRXZnQyxFQUFFODJELFdBQVkwa0IsaUJBQWlCajdDLEVBQUVwdUMsUUFBUW91QyxFQUFFaTdDLGVBQWVqN0MsRUFBRWk3QyxlQUFlLE1BQVMsT0FBT3o3RSxHQUFHLE9BQU9BLEVBQUVnc0UsUUFBTTZKLEdBQUc1MUUsR0FBR0EsRUFBRStkLE9BQU8sRUFBRXdpQixFQUFFaTZCLFVBQVV4NkQsRUFBRStkLE9BQU8sTUFBa0IsS0FBSyxLQUFLLEVBQUVnM0QsR0FBRy8wRSxHQUFHLElBQUl0RixFQUFFKzVFLEdBQUdsMEQsR0FBRzBLLFNBQWtCLEdBQVQxMkIsRUFBRXlMLEVBQUV4TyxLQUFRLE9BQU91TyxHQUFHLE1BQU1DLEVBQUU4MkQsVUFBVTRrQixHQUFHMzdFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUt4Z0MsRUFBRXN6RSxNQUFNcnpFLEVBQUVxekUsTUFBTXJ6RSxFQUFFK2QsT0FBTyxTQUFTLENBQUMsSUFBSXdpQixFQUFFLENBQUMsR0FBRyxPQUM3ZnZnQyxFQUFFODJELFVBQVUsTUFBTTMvRCxNQUFNeTNCLEVBQUUsTUFBTSxPQUFPLEtBQXNCLEdBQWpCN3VCLEVBQUUwMEUsR0FBR0YsR0FBR3RwRCxTQUFZMnFELEdBQUc1MUUsR0FBRyxDQUFDdWdDLEVBQUV2Z0MsRUFBRTgyRCxVQUFVdmlFLEVBQUV5TCxFQUFFeE8sS0FBSyxJQUFJdVAsRUFBRWYsRUFBRWkxRSxjQUE4QixPQUFoQjEwQyxFQUFFcXJDLElBQUk1ckUsRUFBRXVnQyxFQUFFc3JDLElBQUk5cUUsRUFBU3hNLEdBQUcsSUFBSyxTQUFTbTFFLEdBQUUsU0FBU25wQyxHQUFHbXBDLEdBQUUsUUFBUW5wQyxHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVFtcEMsR0FBRSxPQUFPbnBDLEdBQUcsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUl4Z0MsRUFBRSxFQUFFQSxFQUFFdXBFLEdBQUd6MUUsT0FBT2tNLElBQUkycEUsR0FBRUosR0FBR3ZwRSxHQUFHd2dDLEdBQUcsTUFBTSxJQUFLLFNBQVNtcEMsR0FBRSxRQUFRbnBDLEdBQUcsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBT21wQyxHQUFFLFFBQVFucEMsR0FBR21wQyxHQUFFLE9BQU9ucEMsR0FBRyxNQUFNLElBQUssVUFBVW1wQyxHQUFFLFNBQVNucEMsR0FBRyxNQUFNLElBQUssUUFBUTR2QixHQUFHNXZCLEVBQUV4L0IsR0FBRzJvRSxHQUFFLFVBQVVucEMsR0FBRyxNQUFNLElBQUssU0FBU0EsRUFBRTB2QixjQUM1ZixDQUFDNnNCLGNBQWMvN0UsRUFBRWc4RSxVQUFVclQsR0FBRSxVQUFVbnBDLEdBQUcsTUFBTSxJQUFLLFdBQVc4d0IsR0FBRzl3QixFQUFFeC9CLEdBQUcyb0UsR0FBRSxVQUFVbnBDLEdBQWtCLElBQUksSUFBSTVmLEtBQXZCdzFDLEdBQUc1aEUsRUFBRXdNLEdBQUdoQixFQUFFLEtBQWtCZ0IsRUFBRUEsRUFBRXZCLGVBQWVtaEIsS0FBS2ptQixFQUFFcUcsRUFBRTRmLEdBQUcsYUFBYUEsRUFBRSxpQkFBa0JqbUIsRUFBRTZsQyxFQUFFaXhCLGNBQWM5MkQsSUFBSXFGLEVBQUUsQ0FBQyxXQUFXckYsSUFBSSxpQkFBa0JBLEdBQUc2bEMsRUFBRWl4QixjQUFjLEdBQUc5MkQsSUFBSXFGLEVBQUUsQ0FBQyxXQUFXLEdBQUdyRixJQUFJNHdELEVBQUc5ckQsZUFBZW1oQixJQUFJLE1BQU1qbUIsR0FBRyxhQUFhaW1CLEdBQUcrb0QsR0FBRSxTQUFTbnBDLElBQUksT0FBT2hzQyxHQUFHLElBQUssUUFBUTY2RCxFQUFHN3VCLEdBQUdrd0IsR0FBR2x3QixFQUFFeC9CLEdBQUUsR0FBSSxNQUFNLElBQUssV0FBV3F1RCxFQUFHN3VCLEdBQUdneEIsR0FBR2h4QixHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxNQUFNLFFBQVEsbUJBQW9CeC9CLEVBQUVpOEUsVUFBVXo4QyxFQUFFMDhDLFFBQ3RmblMsSUFBSXZxQyxFQUFFeGdDLEVBQUVDLEVBQUUyd0UsWUFBWXB3QyxFQUFFLE9BQU9BLElBQUl2Z0MsRUFBRStkLE9BQU8sT0FBTyxDQUFpWixPQUFoWjRDLEVBQUUsSUFBSWptQixFQUFFMjNELFNBQVMzM0QsRUFBRUEsRUFBRWcyRCxjQUFjM3dELElBQUkweEQsS0FBVTF4RCxFQUFFMnhELEdBQUduOUQsSUFBSXdMLElBQUkweEQsR0FBUSxXQUFXbDlELElBQUd3TCxFQUFFNGdCLEVBQUV6akIsY0FBYyxRQUFTNjBELFVBQVUscUJBQXVCaHlELEVBQUVBLEVBQUV1ekIsWUFBWXZ6QixFQUFFaXlELGFBQWEsaUJBQWtCenhCLEVBQUU1UixHQUFHNXVCLEVBQUU0Z0IsRUFBRXpqQixjQUFjM0ksRUFBRSxDQUFDbzZCLEdBQUc0UixFQUFFNVIsTUFBTTV1QixFQUFFNGdCLEVBQUV6akIsY0FBYzNJLEdBQUcsV0FBV0EsSUFBSW9zQixFQUFFNWdCLEVBQUV3Z0MsRUFBRXc4QyxTQUFTcDhELEVBQUVvOEQsVUFBUyxFQUFHeDhDLEVBQUVodkIsT0FBT29QLEVBQUVwUCxLQUFLZ3ZCLEVBQUVodkIsUUFBUXhSLEVBQUU0Z0IsRUFBRXU4RCxnQkFBZ0JuOUUsRUFBRXhMLEdBQUd3TCxFQUFFNnJFLElBQUk1ckUsRUFBRUQsRUFBRThyRSxJQUFJdHJDLEVBQUVrN0MsR0FBRzE3RSxFQUFFQyxHQUFTQSxFQUFFODJELFVBQVUvMkQsRUFBRTRnQixFQUFFeTFDLEdBQUc3aEUsRUFBRWdzQyxHQUFVaHNDLEdBQUcsSUFBSyxTQUFTbTFFLEdBQUUsU0FBUzNwRSxHQUFHMnBFLEdBQUUsUUFBUTNwRSxHQUNwZnJGLEVBQUU2bEMsRUFBRSxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRbXBDLEdBQUUsT0FBTzNwRSxHQUFHckYsRUFBRTZsQyxFQUFFLE1BQU0sSUFBSyxRQUFRLElBQUssUUFBUSxJQUFJN2xDLEVBQUUsRUFBRUEsRUFBRTR1RSxHQUFHejFFLE9BQU82RyxJQUFJZ3ZFLEdBQUVKLEdBQUc1dUUsR0FBR3FGLEdBQUdyRixFQUFFNmxDLEVBQUUsTUFBTSxJQUFLLFNBQVNtcEMsR0FBRSxRQUFRM3BFLEdBQUdyRixFQUFFNmxDLEVBQUUsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBT21wQyxHQUFFLFFBQVEzcEUsR0FBRzJwRSxHQUFFLE9BQU8zcEUsR0FBR3JGLEVBQUU2bEMsRUFBRSxNQUFNLElBQUssVUFBVW1wQyxHQUFFLFNBQVMzcEUsR0FBR3JGLEVBQUU2bEMsRUFBRSxNQUFNLElBQUssUUFBUTR2QixHQUFHcHdELEVBQUV3Z0MsR0FBRzdsQyxFQUFFbzFELEVBQUcvdkQsRUFBRXdnQyxHQUFHbXBDLEdBQUUsVUFBVTNwRSxHQUFHLE1BQU0sSUFBSyxTQUFTckYsRUFBRWkyRCxHQUFHNXdELEVBQUV3Z0MsR0FBRyxNQUFNLElBQUssU0FBU3hnQyxFQUFFa3dELGNBQWMsQ0FBQzZzQixjQUFjdjhDLEVBQUV3OEMsVUFBVXJpRixFQUFFNGQsRUFBRSxHQUFHaW9CLEVBQUUsQ0FBQ3B4QyxXQUFNLElBQVN1NkUsR0FBRSxVQUFVM3BFLEdBQUcsTUFBTSxJQUFLLFdBQVdzeEQsR0FBR3R4RCxFQUFFd2dDLEdBQUc3bEMsRUFDcGZ5MkQsR0FBR3B4RCxFQUFFd2dDLEdBQUdtcEMsR0FBRSxVQUFVM3BFLEdBQUcsTUFBTSxRQUFRckYsRUFBRTZsQyxFQUFFNDFCLEdBQUc1aEUsRUFBRW1HLEdBQUcsSUFBSTdELEVBQUU2RCxFQUFFLElBQUlxRyxLQUFLbEssRUFBRSxHQUFHQSxFQUFFMkksZUFBZXVCLEdBQUcsQ0FBQyxJQUFJb04sRUFBRXRYLEVBQUVrSyxHQUFHLFVBQVVBLEVBQUVxMEQsR0FBR3IxRCxFQUFFb08sR0FBRyw0QkFBNEJwTixFQUF1QixPQUFwQm9OLEVBQUVBLEVBQUVBLEVBQUVpOUQsWUFBTyxJQUFnQnZaLEdBQUc5eEQsRUFBRW9PLEdBQUksYUFBYXBOLEVBQUUsaUJBQWtCb04sR0FBRyxhQUFhNVosR0FBRyxLQUFLNFosSUFBSWdrRCxHQUFHcHlELEVBQUVvTyxHQUFHLGlCQUFrQkEsR0FBR2drRCxHQUFHcHlELEVBQUUsR0FBR29PLEdBQUcsbUNBQW1DcE4sR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSXVxRCxFQUFHOXJELGVBQWV1QixHQUFHLE1BQU1vTixHQUFHLGFBQWFwTixHQUFHMm9FLEdBQUUsU0FBUzNwRSxHQUFHLE1BQU1vTyxHQUFHcStDLEVBQUd6c0QsRUFBRWdCLEVBQUVvTixFQUFFd1MsSUFBSSxPQUFPcHNCLEdBQUcsSUFBSyxRQUFRNjZELEVBQUdydkQsR0FBRzB3RCxHQUFHMXdELEVBQUV3Z0MsR0FBRSxHQUNuZixNQUFNLElBQUssV0FBVzZ1QixFQUFHcnZELEdBQUd3eEQsR0FBR3h4RCxHQUFHLE1BQU0sSUFBSyxTQUFTLE1BQU13Z0MsRUFBRXB4QyxPQUFPNFEsRUFBRTFDLGFBQWEsUUFBUSxHQUFHNHhELEVBQUcxdUIsRUFBRXB4QyxRQUFRLE1BQU0sSUFBSyxTQUFTNFEsRUFBRWc5RSxXQUFXeDhDLEVBQUV3OEMsU0FBbUIsT0FBVmg4RSxFQUFFdy9CLEVBQUVweEMsT0FBYzRoRSxHQUFHaHhELElBQUl3Z0MsRUFBRXc4QyxTQUFTaDhFLEdBQUUsR0FBSSxNQUFNdy9CLEVBQUV5dkIsY0FBY2UsR0FBR2h4RCxJQUFJd2dDLEVBQUV3OEMsU0FBU3g4QyxFQUFFeXZCLGNBQWEsR0FBSSxNQUFNLFFBQVEsbUJBQW9CdDFELEVBQUVzaUYsVUFBVWo5RSxFQUFFazlFLFFBQVFuUyxJQUFJRyxHQUFHMTJFLEVBQUVnc0MsS0FBS3ZnQyxFQUFFK2QsT0FBTyxHQUFHLE9BQU8vZCxFQUFFcXpFLE1BQU1yekUsRUFBRStkLE9BQU8sS0FBSyxPQUFPLEtBQUssS0FBSyxFQUFFLEdBQUdoZSxHQUFHLE1BQU1DLEVBQUU4MkQsVUFBVTZrQixHQUFHNTdFLEVBQUVDLEVBQUVELEVBQUVrMUUsY0FBYzEwQyxPQUFPLENBQUMsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT3ZnQyxFQUFFODJELFVBQVUsTUFBTTMvRCxNQUFNeTNCLEVBQUUsTUFDL2VyNkIsRUFBRWtnRixHQUFHbDBELEdBQUcwSyxTQUFTd3BELEdBQUdGLEdBQUd0cEQsU0FBUzJxRCxHQUFHNTFFLElBQUl1Z0MsRUFBRXZnQyxFQUFFODJELFVBQVV2aUUsRUFBRXlMLEVBQUVpMUUsY0FBYzEwQyxFQUFFcXJDLElBQUk1ckUsRUFBRXVnQyxFQUFFK3hCLFlBQVkvOUQsSUFBSXlMLEVBQUUrZCxPQUFPLE1BQUt3aUIsR0FBRyxJQUFJaHNDLEVBQUU4OUQsU0FBUzk5RCxFQUFFQSxFQUFFbThELGVBQWV2cEMsZUFBZW9aLElBQUtxckMsSUFBSTVyRSxFQUFFQSxFQUFFODJELFVBQVV2MkIsR0FBRyxPQUFPLEtBQUssS0FBSyxHQUEwQixPQUF2QjRyQyxHQUFFdnNELElBQUcyZ0IsRUFBRXZnQyxFQUFFdzRELGNBQWlCLElBQWEsR0FBUng0RCxFQUFFK2QsUUFBaUIvZCxFQUFFb3dFLE1BQU03N0UsRUFBRXlMLElBQUV1Z0MsRUFBRSxPQUFPQSxFQUFFaHNDLEdBQUUsRUFBRyxPQUFPd0wsT0FBRSxJQUFTQyxFQUFFaTFFLGNBQWM4RyxVQUFVbkcsR0FBRzUxRSxHQUFHekwsRUFBRSxPQUFPd0wsRUFBRXk0RCxjQUFpQmo0QixJQUFJaHNDLEdBQUcsSUFBWSxFQUFQeUwsRUFBRSt1QixRQUFXLE9BQU9odkIsSUFBRyxJQUFLQyxFQUFFaTFFLGNBQWMrRyw0QkFBNEIsSUFBZSxFQUFWcDhELEdBQUVxTCxTQUFXLElBQUl0TCxLQUFJQSxHQUFFLElBQVcsSUFBSUEsSUFBRyxJQUFJQSxLQUFFQSxHQUNyZixHQUFFLE9BQU9vNEQsSUFBRyxJQUFRLFVBQUh4RyxLQUFlLElBQVEsVUFBSDRMLEtBQWVDLEdBQUdyRixHQUFFc0YsT0FBTTk4QyxHQUFHaHNDLEtBQUV5TCxFQUFFK2QsT0FBTyxHQUFTLE1BQUssS0FBSyxFQUFFLE9BQU84MkQsS0FBVyxPQUFPOTBFLEdBQUcrcEUsR0FBRzlwRSxFQUFFODJELFVBQVUyRCxlQUFlLEtBQUssS0FBSyxHQUFHLE9BQU9vVixHQUFHN3ZFLEdBQUcsS0FBMEMsS0FBSyxHQUEwQixHQUF2Qm1zRSxHQUFFdnNELElBQXdCLFFBQXJCMmdCLEVBQUV2Z0MsRUFBRXc0RCxlQUEwQixPQUFPLEtBQXNDLEdBQWpDejNELEVBQUUsSUFBYSxHQUFSZixFQUFFK2QsT0FBMkIsUUFBakI0QyxFQUFFNGYsRUFBRWk4QyxXQUFzQixHQUFHejdFLEVBQUU2N0UsR0FBR3I4QyxHQUFFLE9BQVEsQ0FBQyxHQUFHLElBQUk1Z0IsSUFBRyxPQUFPNWYsR0FBRyxJQUFhLEdBQVJBLEVBQUVnZSxPQUFVLElBQUloZSxFQUFFQyxFQUFFK3JFLE1BQU0sT0FBT2hzRSxHQUFHLENBQVMsR0FBRyxRQUFYNGdCLEVBQUVxMEQsR0FBR2oxRSxJQUFlLENBQ2pXLElBRGtXQyxFQUFFK2QsT0FBTyxHQUFHNitELEdBQUdyOEMsR0FBRSxHQUFvQixRQUFoQngvQixFQUFFNGYsRUFBRWd3RCxlQUF1QjN3RSxFQUFFMndFLFlBQVk1dkUsRUFBRWYsRUFBRStkLE9BQU8sR0FDbmYsT0FBT3dpQixFQUFFbXpDLGFBQWExekUsRUFBRTR6RSxZQUFZLE1BQU01ekUsRUFBRTB6RSxXQUFXbnpDLEVBQUVtekMsV0FBV256QyxFQUFFaHNDLEVBQU1BLEVBQUV5TCxFQUFFK3JFLE1BQU0sT0FBT3gzRSxHQUFPd0wsRUFBRXdnQyxHQUFOeC9CLEVBQUV4TSxHQUFRd3BCLE9BQU8sRUFBRWhkLEVBQUU0eUUsV0FBVyxLQUFLNXlFLEVBQUU2eUUsWUFBWSxLQUFLN3lFLEVBQUUyeUUsV0FBVyxLQUFtQixRQUFkL3lELEVBQUU1ZixFQUFFczNELFlBQW9CdDNELEVBQUVpdkUsV0FBVyxFQUFFanZFLEVBQUVxdkUsTUFBTXJ3RSxFQUFFZ0IsRUFBRWdyRSxNQUFNLEtBQUtockUsRUFBRWswRSxjQUFjLEtBQUtsMEUsRUFBRXkzRCxjQUFjLEtBQUt6M0QsRUFBRTR2RSxZQUFZLEtBQUs1dkUsRUFBRW12RSxhQUFhLEtBQUtudkUsRUFBRSsxRCxVQUFVLE9BQU8vMUQsRUFBRWl2RSxXQUFXcnZELEVBQUVxdkQsV0FBV2p2RSxFQUFFcXZFLE1BQU16dkQsRUFBRXl2RCxNQUFNcnZFLEVBQUVnckUsTUFBTXByRCxFQUFFb3JELE1BQU1ockUsRUFBRWswRSxjQUFjdDBELEVBQUVzMEQsY0FBY2wwRSxFQUFFeTNELGNBQWM3M0MsRUFBRTYzQyxjQUFjejNELEVBQUU0dkUsWUFBWWh3RCxFQUFFZ3dELFlBQVk1dkUsRUFBRXZQLEtBQUttdkIsRUFBRW52QixLQUFLdU8sRUFBRTRnQixFQUFFdXZELGFBQ3BmbnZFLEVBQUVtdkUsYUFBYSxPQUFPbndFLEVBQUUsS0FBSyxDQUFDcXdFLE1BQU1yd0UsRUFBRXF3RSxNQUFNRCxhQUFhcHdFLEVBQUVvd0UsZUFBZTU3RSxFQUFFQSxFQUFFcy9FLFFBQTJCLE9BQW5CekgsR0FBRXhzRCxHQUFZLEVBQVZBLEdBQUVxTCxRQUFVLEdBQVVqckIsRUFBRStyRSxNQUFNaHNFLEVBQUVBLEVBQUU4ekUsUUFBUSxPQUFPdHpDLEVBQUU1VCxNQUFNL2lCLEtBQUkwekUsS0FBS3Q5RSxFQUFFK2QsT0FBTyxHQUFHaGQsR0FBRSxFQUFHNjdFLEdBQUdyOEMsR0FBRSxHQUFJdmdDLEVBQUVvd0UsTUFBTSxjQUFjLENBQUMsSUFBSXJ2RSxFQUFFLEdBQVcsUUFBUmhCLEVBQUVpMUUsR0FBR3IwRCxLQUFhLEdBQUczZ0IsRUFBRStkLE9BQU8sR0FBR2hkLEdBQUUsRUFBbUIsUUFBaEJ4TSxFQUFFd0wsRUFBRTR3RSxlQUF1QjN3RSxFQUFFMndFLFlBQVlwOEUsRUFBRXlMLEVBQUUrZCxPQUFPLEdBQUc2K0QsR0FBR3I4QyxHQUFFLEdBQUksT0FBT0EsRUFBRTVULE1BQU0sV0FBVzRULEVBQUVtOEMsV0FBVy83RCxFQUFFMDNDLFlBQVlnZCxHQUFHLE9BQW1DLFFBQTVCcjFFLEVBQUVBLEVBQUUwekUsV0FBV256QyxFQUFFbXpDLGNBQXNCMXpFLEVBQUUyekUsV0FBVyxNQUFNLFVBQVUsRUFBRS9wRSxLQUFJMjJCLEVBQUVrOEMsbUJBQW1CYSxJQUFJLGFBQWEvb0YsSUFBSXlMLEVBQUUrZCxPQUNqZixHQUFHaGQsR0FBRSxFQUFHNjdFLEdBQUdyOEMsR0FBRSxHQUFJdmdDLEVBQUVvd0UsTUFBTSxVQUFVN3ZDLEVBQUVnOEMsYUFBYTU3RCxFQUFFa3pELFFBQVE3ekUsRUFBRStyRSxNQUFNL3JFLEVBQUUrckUsTUFBTXByRCxJQUFhLFFBQVRwc0IsRUFBRWdzQyxFQUFFanZCLE1BQWMvYyxFQUFFcy9FLFFBQVFsekQsRUFBRTNnQixFQUFFK3JFLE1BQU1wckQsRUFBRTRmLEVBQUVqdkIsS0FBS3FQLEdBQUcsT0FBTyxPQUFPNGYsRUFBRTVULE1BQU1wNEIsRUFBRWdzQyxFQUFFNVQsS0FBSzRULEVBQUVpOEMsVUFBVWpvRixFQUFFZ3NDLEVBQUU1VCxLQUFLcDRCLEVBQUVzL0UsUUFBUXR6QyxFQUFFbXpDLFdBQVcxekUsRUFBRTB6RSxXQUFXbnpDLEVBQUVrOEMsbUJBQW1CN3lFLEtBQUlyVixFQUFFcy9FLFFBQVEsS0FBSzd6RSxFQUFFNGYsR0FBRXFMLFFBQVFtaEQsR0FBRXhzRCxHQUFFN2UsRUFBSSxFQUFGZixFQUFJLEVBQUksRUFBRkEsR0FBS3pMLEdBQUcsS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU9ncEYsS0FBSyxPQUFPeDlFLEdBQUcsT0FBT0EsRUFBRXk0RCxnQkFBaUIsT0FBT3g0RCxFQUFFdzRELGdCQUFnQixrQ0FBa0NqNEIsRUFBRXhSLE9BQU8vdUIsRUFBRStkLE9BQU8sR0FBRyxLQUFLLE1BQU01bUIsTUFBTXkzQixFQUFFLElBQUk1dUIsRUFBRW1RLE1BQ2hkLFNBQVNxdEUsR0FBR3o5RSxHQUFHLE9BQU9BLEVBQUVvUSxLQUFLLEtBQUssRUFBRXk4RCxHQUFHN3NFLEVBQUV2TyxPQUFPcTdFLEtBQUssSUFBSTdzRSxFQUFFRCxFQUFFZ2UsTUFBTSxPQUFTLEtBQUYvZCxHQUFRRCxFQUFFZ2UsT0FBUyxLQUFIL2QsRUFBUSxHQUFHRCxHQUFHLEtBQUssS0FBSyxFQUFnQyxHQUE5QjgwRSxLQUFLMUksR0FBRUksSUFBR0osR0FBRUcsSUFBR3lKLEtBQWtCLElBQU8sSUFBcEIvMUUsRUFBRUQsRUFBRWdlLFFBQW9CLE1BQU01bUIsTUFBTXkzQixFQUFFLE1BQXlCLE9BQW5CN3VCLEVBQUVnZSxPQUFTLEtBQUgvZCxFQUFRLEdBQVVELEVBQUUsS0FBSyxFQUFFLE9BQU9nMUUsR0FBR2gxRSxHQUFHLEtBQUssS0FBSyxHQUFHLE9BQU9vc0UsR0FBRXZzRCxJQUFlLE1BQVo1ZixFQUFFRCxFQUFFZ2UsUUFBY2hlLEVBQUVnZSxPQUFTLEtBQUgvZCxFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT29zRSxHQUFFdnNELElBQUcsS0FBSyxLQUFLLEVBQUUsT0FBT2kxRCxLQUFLLEtBQUssS0FBSyxHQUFHLE9BQU9oRixHQUFHOXZFLEdBQUcsS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU93OUUsS0FBSyxLQUFLLFFBQVEsT0FBTyxNQUNyYSxTQUFTRSxHQUFHMTlFLEVBQUVDLEdBQUcsSUFBSSxJQUFJekwsRUFBRSxHQUFHZ3NDLEVBQUV2Z0MsRUFBRSxHQUFHekwsR0FBR202RCxFQUFHbnVCLEdBQUdBLEVBQUVBLEVBQUUrM0IsYUFBYS8zQixHQUFHLElBQUk3bEMsRUFBRW5HLEVBQUUsTUFBTXdNLEdBQUdyRyxFQUFFLDZCQUE2QnFHLEVBQUUvTixRQUFRLEtBQUsrTixFQUFFNUksTUFBTSxNQUFNLENBQUNoSixNQUFNNFEsRUFBRXpMLE9BQU8wTCxFQUFFN0gsTUFBTXVDLEdBQUcsU0FBU2dqRixHQUFHMzlFLEVBQUVDLEdBQUcsSUFBSWhCLFFBQVE1SSxNQUFNNEosRUFBRTdRLE9BQU8sTUFBTW9GLEdBQUd4RSxZQUFXLFdBQVcsTUFBTXdFLE1BbEIzUGtuRixHQUFHLFNBQVMxN0UsRUFBRUMsR0FBRyxJQUFJLElBQUl6TCxFQUFFeUwsRUFBRStyRSxNQUFNLE9BQU94M0UsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRTRiLEtBQUssSUFBSTViLEVBQUU0YixJQUFJcFEsRUFBRXVxQixZQUFZLzFCLEVBQUV1aUUsZ0JBQWdCLEdBQUcsSUFBSXZpRSxFQUFFNGIsS0FBSyxPQUFPNWIsRUFBRXczRSxNQUFNLENBQUN4M0UsRUFBRXczRSxNQUFNelQsT0FBTy9qRSxFQUFFQSxFQUFFQSxFQUFFdzNFLE1BQU0sU0FBUyxHQUFHeDNFLElBQUl5TCxFQUFFLE1BQU0sS0FBSyxPQUFPekwsRUFBRXMvRSxTQUFTLENBQUMsR0FBRyxPQUFPdC9FLEVBQUUrakUsUUFBUS9qRSxFQUFFK2pFLFNBQVN0NEQsRUFBRSxPQUFPekwsRUFBRUEsRUFBRStqRSxPQUFPL2pFLEVBQUVzL0UsUUFBUXZiLE9BQU8vakUsRUFBRStqRSxPQUFPL2pFLEVBQUVBLEVBQUVzL0UsVUFDaFM2SCxHQUFHLFNBQVMzN0UsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBRyxJQUFJN2xDLEVBQUVxRixFQUFFazFFLGNBQWMsR0FBR3Y2RSxJQUFJNmxDLEVBQUUsQ0FBQ3hnQyxFQUFFQyxFQUFFODJELFVBQVUyZCxHQUFHRixHQUFHdHBELFNBQVMsSUFBeVV0SyxFQUFyVTVmLEVBQUUsS0FBSyxPQUFPeE0sR0FBRyxJQUFLLFFBQVFtRyxFQUFFbzFELEVBQUcvdkQsRUFBRXJGLEdBQUc2bEMsRUFBRXV2QixFQUFHL3ZELEVBQUV3Z0MsR0FBR3gvQixFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVNyRyxFQUFFaTJELEdBQUc1d0QsRUFBRXJGLEdBQUc2bEMsRUFBRW93QixHQUFHNXdELEVBQUV3Z0MsR0FBR3gvQixFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVNyRyxFQUFFNGQsRUFBRSxHQUFHNWQsRUFBRSxDQUFDdkwsV0FBTSxJQUFTb3hDLEVBQUVqb0IsRUFBRSxHQUFHaW9CLEVBQUUsQ0FBQ3B4QyxXQUFNLElBQVM0UixFQUFFLEdBQUcsTUFBTSxJQUFLLFdBQVdyRyxFQUFFeTJELEdBQUdweEQsRUFBRXJGLEdBQUc2bEMsRUFBRTR3QixHQUFHcHhELEVBQUV3Z0MsR0FBR3gvQixFQUFFLEdBQUcsTUFBTSxRQUFRLG1CQUFvQnJHLEVBQUVzaUYsU0FBUyxtQkFBb0J6OEMsRUFBRXk4QyxVQUFVajlFLEVBQUVrOUUsUUFBUW5TLElBQXlCLElBQUlsM0UsS0FBekJ1aUUsR0FBRzVoRSxFQUFFZ3NDLEdBQVNoc0MsRUFBRSxLQUFjbUcsRUFBRSxJQUFJNmxDLEVBQUUvZ0MsZUFBZTVMLElBQUk4RyxFQUFFOEUsZUFBZTVMLElBQUksTUFBTThHLEVBQUU5RyxHQUFHLEdBQUcsVUFDM2VBLEVBQUUsQ0FBQyxJQUFJaUQsRUFBRTZELEVBQUU5RyxHQUFHLElBQUkrc0IsS0FBSzlwQixFQUFFQSxFQUFFMkksZUFBZW1oQixLQUFLcHNCLElBQUlBLEVBQUUsSUFBSUEsRUFBRW9zQixHQUFHLFFBQVEsNEJBQTRCL3NCLEdBQUcsYUFBYUEsR0FBRyxtQ0FBbUNBLEdBQUcsNkJBQTZCQSxHQUFHLGNBQWNBLElBQUkwM0QsRUFBRzlyRCxlQUFlNUwsR0FBR21OLElBQUlBLEVBQUUsS0FBS0EsRUFBRUEsR0FBRyxJQUFJNU0sS0FBS1AsRUFBRSxPQUFPLElBQUlBLEtBQUsyc0MsRUFBRSxDQUFDLElBQUlweUIsRUFBRW95QixFQUFFM3NDLEdBQXlCLEdBQXRCaUQsRUFBRSxNQUFNNkQsRUFBRUEsRUFBRTlHLFFBQUcsRUFBVTJzQyxFQUFFL2dDLGVBQWU1TCxJQUFJdWEsSUFBSXRYLElBQUksTUFBTXNYLEdBQUcsTUFBTXRYLEdBQUcsR0FBRyxVQUFVakQsRUFBRSxHQUFHaUQsRUFBRSxDQUFDLElBQUk4cEIsS0FBSzlwQixHQUFHQSxFQUFFMkksZUFBZW1oQixJQUFJeFMsR0FBR0EsRUFBRTNPLGVBQWVtaEIsS0FBS3BzQixJQUFJQSxFQUFFLElBQUlBLEVBQUVvc0IsR0FBRyxJQUFJLElBQUlBLEtBQUt4UyxFQUFFQSxFQUFFM08sZUFBZW1oQixJQUFJOXBCLEVBQUU4cEIsS0FBS3hTLEVBQUV3UyxLQUFLcHNCLElBQ2xmQSxFQUFFLElBQUlBLEVBQUVvc0IsR0FBR3hTLEVBQUV3UyxTQUFTcHNCLElBQUl3TSxJQUFJQSxFQUFFLElBQUlBLEVBQUU1TSxLQUFLUCxFQUFFVyxJQUFJQSxFQUFFNFosTUFBTSw0QkFBNEJ2YSxHQUFHdWEsRUFBRUEsRUFBRUEsRUFBRWk5RCxZQUFPLEVBQU92MEUsRUFBRUEsRUFBRUEsRUFBRXUwRSxZQUFPLEVBQU8sTUFBTWo5RCxHQUFHdFgsSUFBSXNYLElBQUlwTixFQUFFQSxHQUFHLElBQUk1TSxLQUFLUCxFQUFFdWEsSUFBSSxhQUFhdmEsRUFBRSxpQkFBa0J1YSxHQUFHLGlCQUFrQkEsSUFBSXBOLEVBQUVBLEdBQUcsSUFBSTVNLEtBQUtQLEVBQUUsR0FBR3VhLEdBQUcsbUNBQW1DdmEsR0FBRyw2QkFBNkJBLElBQUkwM0QsRUFBRzlyRCxlQUFlNUwsSUFBSSxNQUFNdWEsR0FBRyxhQUFhdmEsR0FBRzgxRSxHQUFFLFNBQVMzcEUsR0FBR2dCLEdBQUdsSyxJQUFJc1gsSUFBSXBOLEVBQUUsS0FBSyxpQkFBa0JvTixHQUFHLE9BQU9BLEdBQUdBLEVBQUUwZ0QsV0FBV2YsRUFBRzMvQyxFQUFFamIsWUFBWTZOLEVBQUVBLEdBQUcsSUFBSTVNLEtBQUtQLEVBQUV1YSxJQUFJNVosSUFBSXdNLEVBQUVBLEdBQUcsSUFBSTVNLEtBQUssUUFDL2VJLEdBQUcsSUFBSVgsRUFBRW1OLEdBQUtmLEVBQUUyd0UsWUFBWS84RSxLQUFFb00sRUFBRStkLE9BQU8sS0FBSTQ5RCxHQUFHLFNBQVM1N0UsRUFBRUMsRUFBRXpMLEVBQUVnc0MsR0FBR2hzQyxJQUFJZ3NDLElBQUl2Z0MsRUFBRStkLE9BQU8sSUFjZ0wsSUFBSTQvRCxHQUFHLG1CQUFvQjc2RCxRQUFRQSxRQUFRczBCLElBQUksU0FBU3dtQyxHQUFHNzlFLEVBQUVDLEVBQUV6TCxJQUFHQSxFQUFFMDhFLElBQUksRUFBRTE4RSxJQUFLNGIsSUFBSSxFQUFFNWIsRUFBRXFJLFFBQVEsQ0FBQytSLFFBQVEsTUFBTSxJQUFJNHhCLEVBQUV2Z0MsRUFBRTdRLE1BQXNELE9BQWhEb0YsRUFBRWdLLFNBQVMsV0FBV3MvRSxLQUFLQSxJQUFHLEVBQUdDLEdBQUd2OUMsR0FBR205QyxHQUFHMzlFLEVBQUVDLElBQVd6TCxFQUNwYixTQUFTd3BGLEdBQUdoK0UsRUFBRUMsRUFBRXpMLElBQUdBLEVBQUUwOEUsSUFBSSxFQUFFMThFLElBQUs0YixJQUFJLEVBQUUsSUFBSW93QixFQUFFeGdDLEVBQUV2TyxLQUFLeTBELHlCQUF5QixHQUFHLG1CQUFvQjFsQixFQUFFLENBQUMsSUFBSTdsQyxFQUFFc0YsRUFBRTdRLE1BQU1vRixFQUFFcUksUUFBUSxXQUFtQixPQUFSOGdGLEdBQUczOUUsRUFBRUMsR0FBVXVnQyxFQUFFN2xDLElBQUksSUFBSXFHLEVBQUVoQixFQUFFKzJELFVBQThPLE9BQXBPLE9BQU8vMUQsR0FBRyxtQkFBb0JBLEVBQUVpOUUsb0JBQW9CenBGLEVBQUVnSyxTQUFTLFdBQVcsbUJBQW9CZ2lDLElBQUksT0FBTzA5QyxHQUFHQSxHQUFHLElBQUk5bUMsSUFBSSxDQUFDbGtELE9BQU9nckYsR0FBRy9yRSxJQUFJamYsTUFBTXlxRixHQUFHMzlFLEVBQUVDLElBQUksSUFBSXpMLEVBQUV5TCxFQUFFN0gsTUFBTWxGLEtBQUsrcUYsa0JBQWtCaCtFLEVBQUU3USxNQUFNLENBQUMrdUYsZUFBZSxPQUFPM3BGLEVBQUVBLEVBQUUsT0FBY0EsRUFBRSxJQUFJNHBGLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFRam5DLElBQ3hjLFNBQVNrbkMsR0FBR3QrRSxHQUFHLElBQUlDLEVBQUVELEVBQUVzekUsSUFBSSxHQUFHLE9BQU9yekUsRUFBRSxHQUFHLG1CQUFvQkEsRUFBRSxJQUFJQSxFQUFFLE1BQU0sTUFBTXpMLEdBQUcrcEYsR0FBR3YrRSxFQUFFeEwsUUFBUXlMLEVBQUVpckIsUUFBUSxLQUFLLFNBQVNzekQsR0FBR3grRSxFQUFFQyxHQUFHLE9BQU9BLEVBQUVtUSxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBOFEsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQWpTLEtBQUssRUFBRSxHQUFXLElBQVJuUSxFQUFFK2QsT0FBVyxPQUFPaGUsRUFBRSxDQUFDLElBQUl4TCxFQUFFd0wsRUFBRWsxRSxjQUFjMTBDLEVBQUV4Z0MsRUFBRXk0RCxjQUE0Qng0RCxHQUFkRCxFQUFFQyxFQUFFODJELFdBQWNpYyx3QkFBd0IveUUsRUFBRTJxRCxjQUFjM3FELEVBQUV4TyxLQUFLK0MsRUFBRWc3RSxHQUFHdnZFLEVBQUV4TyxLQUFLK0MsR0FBR2dzQyxHQUFHeGdDLEVBQUV5K0Usb0NBQW9DeCtFLEVBQUUsT0FBTyxLQUFLLEVBQTZDLFlBQW5DLElBQVJBLEVBQUUrZCxPQUFXd3RELEdBQUd2ckUsRUFBRTgyRCxVQUFVMkQsZ0JBQTBELE1BQU10akUsTUFBTXkzQixFQUFFLE1BQzVlLFNBQVM2dkQsR0FBRzErRSxFQUFFQyxFQUFFekwsR0FBRyxPQUFPQSxFQUFFNGIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQWdELEdBQUcsUUFBaENuUSxFQUFFLFFBQWxCQSxFQUFFekwsRUFBRW84RSxhQUF1QjN3RSxFQUFFMHpFLFdBQVcsTUFBaUIsQ0FBQzN6RSxFQUFFQyxFQUFFQSxFQUFFb0wsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFXLEVBQU5yTCxFQUFFb1EsS0FBTyxDQUFDLElBQUlvd0IsRUFBRXhnQyxFQUFFeE4sT0FBT3dOLEVBQUV5NEUsUUFBUWo0QyxJQUFJeGdDLEVBQUVBLEVBQUVxTCxXQUFXckwsSUFBSUMsR0FBZ0QsR0FBRyxRQUFoQ0EsRUFBRSxRQUFsQkEsRUFBRXpMLEVBQUVvOEUsYUFBdUIzd0UsRUFBRTB6RSxXQUFXLE1BQWlCLENBQUMzekUsRUFBRUMsRUFBRUEsRUFBRW9MLEtBQUssRUFBRSxDQUFDLElBQUkxUSxFQUFFcUYsRUFBRXdnQyxFQUFFN2xDLEVBQUUwUSxLQUFhLElBQU8sR0FBZjFRLEVBQUVBLEVBQUV5VixPQUFlLElBQU8sRUFBRnpWLEtBQU9na0YsR0FBR25xRixFQUFFd0wsR0FBRzQrRSxHQUFHcHFGLEVBQUV3TCxJQUFJQSxFQUFFd2dDLFFBQVF4Z0MsSUFBSUMsR0FBRyxPQUFPLEtBQUssRUFDdFIsT0FEd1JELEVBQUV4TCxFQUFFdWlFLFVBQWtCLEVBQVJ2aUUsRUFBRXdwQixRQUFVLE9BQU8vZCxFQUFFRCxFQUFFbXpFLHFCQUFxQjN5QyxFQUFFaHNDLEVBQUVvMkQsY0FBY3AyRCxFQUFFL0MsS0FBS3dPLEVBQUVpMUUsY0FBYzFGLEdBQUdoN0UsRUFBRS9DLEtBQUt3TyxFQUFFaTFFLGVBQWVsMUUsRUFBRXM3RSxtQkFBbUI5NkMsRUFDeGdCdmdDLEVBQUV3NEQsY0FBY3o0RCxFQUFFeStFLDRDQUF1RCxRQUFoQngrRSxFQUFFekwsRUFBRW84RSxjQUFzQmEsR0FBR2o5RSxFQUFFeUwsRUFBRUQsSUFBVSxLQUFLLEVBQWtCLEdBQUcsUUFBbkJDLEVBQUV6TCxFQUFFbzhFLGFBQXdCLENBQVEsR0FBUDV3RSxFQUFFLEtBQVEsT0FBT3hMLEVBQUV3M0UsTUFBTSxPQUFPeDNFLEVBQUV3M0UsTUFBTTU3RCxLQUFLLEtBQUssRUFBNEIsS0FBSyxFQUFFcFEsRUFBRXhMLEVBQUV3M0UsTUFBTWpWLFVBQVUwYSxHQUFHajlFLEVBQUV5TCxFQUFFRCxHQUFHLE9BQU8sS0FBSyxFQUEyRSxPQUF6RUEsRUFBRXhMLEVBQUV1aUUsZUFBVSxPQUFPOTJELEdBQVcsRUFBUnpMLEVBQUV3cEIsT0FBU2t0RCxHQUFHMTJFLEVBQUUvQyxLQUFLK0MsRUFBRTBnRixnQkFBZ0JsMUUsRUFBRTYrRSxTQUFlLEtBQUssRUFBUyxLQUFLLEVBQVMsS0FBSyxHQUNuWCxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUQ2VSxLQUFLLEdBQ3pZLFlBRDRZLE9BQU9ycUYsRUFBRWlrRSxnQkFBZ0Jqa0UsRUFBRUEsRUFBRThqRSxVQUFVLE9BQU85akUsSUFBSUEsRUFBRUEsRUFBRWlrRSxjQUFjLE9BQU9qa0UsSUFBSUEsRUFBRUEsRUFBRWtrRSxXQUFXLE9BQU9sa0UsR0FBRzBtRSxHQUFHMW1FLE9BQ3piLE1BQU00QyxNQUFNeTNCLEVBQUUsTUFDNUUsU0FBU2l3RCxHQUFHOStFLEVBQUVDLEdBQUcsSUFBSSxJQUFJekwsRUFBRXdMLElBQUksQ0FBQyxHQUFHLElBQUl4TCxFQUFFNGIsSUFBSSxDQUFDLElBQUlvd0IsRUFBRWhzQyxFQUFFdWlFLFVBQVUsR0FBRzkyRCxFQUFZLG1CQUFWdWdDLEVBQUVBLEVBQUVuVyxPQUE0QmlyQyxZQUFZOTBCLEVBQUU4MEIsWUFBWSxVQUFVLE9BQU8sYUFBYTkwQixFQUFFbFcsUUFBUSxXQUFXLENBQUNrVyxFQUFFaHNDLEVBQUV1aUUsVUFBVSxJQUFJcDhELEVBQUVuRyxFQUFFMGdGLGNBQWM3cUQsTUFBTTF2QixFQUFFLE1BQVNBLEdBQWFBLEVBQUU4RSxlQUFlLFdBQVc5RSxFQUFFMnZCLFFBQVEsS0FBS2tXLEVBQUVuVyxNQUFNQyxRQUFROHFDLEdBQUcsVUFBVXo2RCxTQUFTLEdBQUcsSUFBSW5HLEVBQUU0YixJQUFJNWIsRUFBRXVpRSxVQUFVeEUsVUFBVXR5RCxFQUFFLEdBQUd6TCxFQUFFMGdGLG1CQUFtQixJQUFJLEtBQUsxZ0YsRUFBRTRiLEtBQUssS0FBSzViLEVBQUU0YixLQUFLLE9BQU81YixFQUFFaWtFLGVBQWVqa0UsSUFBSXdMLElBQUksT0FBT3hMLEVBQUV3M0UsTUFBTSxDQUFDeDNFLEVBQUV3M0UsTUFBTXpULE9BQU8vakUsRUFBRUEsRUFBRUEsRUFBRXczRSxNQUFNLFNBQVMsR0FBR3gzRSxJQUN0ZndMLEVBQUUsTUFBTSxLQUFLLE9BQU94TCxFQUFFcy9FLFNBQVMsQ0FBQyxHQUFHLE9BQU90L0UsRUFBRStqRSxRQUFRL2pFLEVBQUUrakUsU0FBU3Y0RCxFQUFFLE9BQU94TCxFQUFFQSxFQUFFK2pFLE9BQU8vakUsRUFBRXMvRSxRQUFRdmIsT0FBTy9qRSxFQUFFK2pFLE9BQU8vakUsRUFBRUEsRUFBRXMvRSxTQUNqSCxTQUFTaUwsR0FBRy8rRSxFQUFFQyxHQUFHLEdBQUdxdEUsSUFBSSxtQkFBb0JBLEdBQUcwUixxQkFBcUIsSUFBSTFSLEdBQUcwUixxQkFBcUIzUixHQUFHcHRFLEdBQUcsTUFBTWUsSUFBSSxPQUFPZixFQUFFbVEsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFtQixHQUFHLFFBQW5CcFEsRUFBRUMsRUFBRTJ3RSxjQUF5QyxRQUFmNXdFLEVBQUVBLEVBQUUyekUsWUFBcUIsQ0FBQyxJQUFJbi9FLEVBQUV3TCxFQUFFQSxFQUFFcUwsS0FBSyxFQUFFLENBQUMsSUFBSW0xQixFQUFFaHNDLEVBQUVtRyxFQUFFNmxDLEVBQUVpNEMsUUFBZ0IsR0FBUmo0QyxFQUFFQSxFQUFFcHdCLFNBQU8sSUFBU3pWLEVBQUUsR0FBRyxJQUFPLEVBQUY2bEMsR0FBS20rQyxHQUFHMStFLEVBQUV6TCxPQUFPLENBQUNnc0MsRUFBRXZnQyxFQUFFLElBQUl0RixJQUFJLE1BQU1xRyxHQUFHdTlFLEdBQUcvOUMsRUFBRXgvQixJQUFJeE0sRUFBRUEsRUFBRTZXLFdBQVc3VyxJQUFJd0wsR0FBRyxNQUFNLEtBQUssRUFBc0IsR0FBcEJzK0UsR0FBR3IrRSxHQUFvQixtQkFBakJELEVBQUVDLEVBQUU4MkQsV0FBbUNrb0IscUJBQXFCLElBQUlqL0UsRUFBRTZxQixNQUFNNXFCLEVBQUVpMUUsY0FBY2wxRSxFQUFFNFIsTUFBTTNSLEVBQUV3NEQsY0FBY3o0RCxFQUFFaS9FLHVCQUF1QixNQUFNaitFLEdBQUd1OUUsR0FBR3QrRSxFQUMvZ0JlLEdBQUcsTUFBTSxLQUFLLEVBQUVzOUUsR0FBR3IrRSxHQUFHLE1BQU0sS0FBSyxFQUFFaS9FLEdBQUdsL0UsRUFBRUMsSUFBSSxTQUFTay9FLEdBQUduL0UsR0FBR0EsRUFBRXM0RCxVQUFVLEtBQUt0NEQsRUFBRWdzRSxNQUFNLEtBQUtoc0UsRUFBRW13RSxhQUFhLEtBQUtud0UsRUFBRTZ6RSxZQUFZLEtBQUs3ekUsRUFBRTJ6RSxXQUFXLEtBQUszekUsRUFBRWsxRSxjQUFjLEtBQUtsMUUsRUFBRXk0RCxjQUFjLEtBQUt6NEQsRUFBRTAxRSxhQUFhLEtBQUsxMUUsRUFBRXU0RCxPQUFPLEtBQUt2NEQsRUFBRTR3RSxZQUFZLEtBQUssU0FBU3dPLEdBQUdwL0UsR0FBRyxPQUFPLElBQUlBLEVBQUVvUSxLQUFLLElBQUlwUSxFQUFFb1EsS0FBSyxJQUFJcFEsRUFBRW9RLElBQ25TLFNBQVNpdkUsR0FBR3IvRSxHQUFHQSxFQUFFLENBQUMsSUFBSSxJQUFJQyxFQUFFRCxFQUFFdTRELE9BQU8sT0FBT3Q0RCxHQUFHLENBQUMsR0FBR20vRSxHQUFHbi9FLEdBQUcsTUFBTUQsRUFBRUMsRUFBRUEsRUFBRXM0RCxPQUFPLE1BQU1uaEUsTUFBTXkzQixFQUFFLE1BQU8sSUFBSXI2QixFQUFFeUwsRUFBZ0IsT0FBZEEsRUFBRXpMLEVBQUV1aUUsVUFBaUJ2aUUsRUFBRTRiLEtBQUssS0FBSyxFQUFFLElBQUlvd0IsR0FBRSxFQUFHLE1BQU0sS0FBSyxFQUErQixLQUFLLEVBQUV2Z0MsRUFBRUEsRUFBRXk2RCxjQUFjbDZCLEdBQUUsRUFBRyxNQUFNLFFBQVEsTUFBTXBwQyxNQUFNeTNCLEVBQUUsTUFBZSxHQUFScjZCLEVBQUV3cEIsUUFBV28wQyxHQUFHbnlELEVBQUUsSUFBSXpMLEVBQUV3cEIsUUFBUSxJQUFJaGUsRUFBRUMsRUFBRSxJQUFJekwsRUFBRXdMLElBQUksQ0FBQyxLQUFLLE9BQU94TCxFQUFFcy9FLFNBQVMsQ0FBQyxHQUFHLE9BQU90L0UsRUFBRStqRSxRQUFRNm1CLEdBQUc1cUYsRUFBRStqRSxRQUFRLENBQUMvakUsRUFBRSxLQUFLLE1BQU13TCxFQUFFeEwsRUFBRUEsRUFBRStqRSxPQUFpQyxJQUExQi9qRSxFQUFFcy9FLFFBQVF2YixPQUFPL2pFLEVBQUUrakUsT0FBVy9qRSxFQUFFQSxFQUFFcy9FLFFBQVEsSUFBSXQvRSxFQUFFNGIsS0FBSyxJQUFJNWIsRUFBRTRiLEtBQUssS0FBSzViLEVBQUU0YixLQUFLLENBQUMsR0FBVyxFQUFSNWIsRUFBRXdwQixNQUFRLFNBQVMvZCxFQUFFLEdBQUcsT0FDL2V6TCxFQUFFdzNFLE9BQU8sSUFBSXgzRSxFQUFFNGIsSUFBSSxTQUFTblEsRUFBT3pMLEVBQUV3M0UsTUFBTXpULE9BQU8vakUsRUFBRUEsRUFBRUEsRUFBRXczRSxNQUFNLEtBQWEsRUFBUngzRSxFQUFFd3BCLE9BQVMsQ0FBQ3hwQixFQUFFQSxFQUFFdWlFLFVBQVUsTUFBTS8yRCxHQUFHd2dDLEVBQUU4K0MsR0FBR3QvRSxFQUFFeEwsRUFBRXlMLEdBQUdzL0UsR0FBR3YvRSxFQUFFeEwsRUFBRXlMLEdBQ3pILFNBQVNxL0UsR0FBR3QvRSxFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEVBQUV4Z0MsRUFBRW9RLElBQUl6VixFQUFFLElBQUk2bEMsR0FBRyxJQUFJQSxFQUFFLEdBQUc3bEMsRUFBRXFGLEVBQUVyRixFQUFFcUYsRUFBRSsyRCxVQUFVLzJELEVBQUUrMkQsVUFBVTFrRSxTQUFTNE4sRUFBRSxJQUFJekwsRUFBRTg5RCxTQUFTOTlELEVBQUVpaUUsV0FBVytvQixhQUFheC9FLEVBQUVDLEdBQUd6TCxFQUFFZ3JGLGFBQWF4L0UsRUFBRUMsSUFBSSxJQUFJekwsRUFBRTg5RCxVQUFVcnlELEVBQUV6TCxFQUFFaWlFLFlBQWErb0IsYUFBYXgvRSxFQUFFeEwsSUFBS3lMLEVBQUV6TCxHQUFJKzFCLFlBQVl2cUIsR0FBNEIsT0FBeEJ4TCxFQUFFQSxFQUFFaXJGLHNCQUEwQyxPQUFPeC9FLEVBQUVpOUUsVUFBVWo5RSxFQUFFaTlFLFFBQVFuUyxVQUFVLEdBQUcsSUFBSXZxQyxHQUFjLFFBQVZ4Z0MsRUFBRUEsRUFBRWdzRSxPQUFnQixJQUFJc1QsR0FBR3QvRSxFQUFFQyxFQUFFekwsR0FBR3dMLEVBQUVBLEVBQUU4ekUsUUFBUSxPQUFPOXpFLEdBQUdzL0UsR0FBR3QvRSxFQUFFQyxFQUFFekwsR0FBR3dMLEVBQUVBLEVBQUU4ekUsUUFDOVksU0FBU3lMLEdBQUd2L0UsRUFBRUMsRUFBRXpMLEdBQUcsSUFBSWdzQyxFQUFFeGdDLEVBQUVvUSxJQUFJelYsRUFBRSxJQUFJNmxDLEdBQUcsSUFBSUEsRUFBRSxHQUFHN2xDLEVBQUVxRixFQUFFckYsRUFBRXFGLEVBQUUrMkQsVUFBVS8yRCxFQUFFKzJELFVBQVUxa0UsU0FBUzROLEVBQUV6TCxFQUFFZ3JGLGFBQWF4L0UsRUFBRUMsR0FBR3pMLEVBQUUrMUIsWUFBWXZxQixRQUFRLEdBQUcsSUFBSXdnQyxHQUFjLFFBQVZ4Z0MsRUFBRUEsRUFBRWdzRSxPQUFnQixJQUFJdVQsR0FBR3YvRSxFQUFFQyxFQUFFekwsR0FBR3dMLEVBQUVBLEVBQUU4ekUsUUFBUSxPQUFPOXpFLEdBQUd1L0UsR0FBR3YvRSxFQUFFQyxFQUFFekwsR0FBR3dMLEVBQUVBLEVBQUU4ekUsUUFDck4sU0FBU29MLEdBQUdsL0UsRUFBRUMsR0FBRyxJQUFJLElBQWF0RixFQUFFcUcsRUFBWHhNLEVBQUV5TCxFQUFFdWdDLEdBQUUsSUFBUyxDQUFDLElBQUlBLEVBQUUsQ0FBQ0EsRUFBRWhzQyxFQUFFK2pFLE9BQU92NEQsRUFBRSxPQUFPLENBQUMsR0FBRyxPQUFPd2dDLEVBQUUsTUFBTXBwQyxNQUFNeTNCLEVBQUUsTUFBb0IsT0FBZGwwQixFQUFFNmxDLEVBQUV1MkIsVUFBaUJ2MkIsRUFBRXB3QixLQUFLLEtBQUssRUFBRXBQLEdBQUUsRUFBRyxNQUFNaEIsRUFBRSxLQUFLLEVBQWlDLEtBQUssRUFBRXJGLEVBQUVBLEVBQUUrL0QsY0FBYzE1RCxHQUFFLEVBQUcsTUFBTWhCLEVBQUV3Z0MsRUFBRUEsRUFBRSszQixPQUFPLzNCLEdBQUUsRUFBRyxHQUFHLElBQUloc0MsRUFBRTRiLEtBQUssSUFBSTViLEVBQUU0YixJQUFJLENBQUNwUSxFQUFFLElBQUksSUFBSTRnQixFQUFFNWdCLEVBQUVsSixFQUFFdEMsRUFBRTRaLEVBQUV0WCxJQUFJLEdBQUdpb0YsR0FBR24rRCxFQUFFeFMsR0FBRyxPQUFPQSxFQUFFNDlELE9BQU8sSUFBSTU5RCxFQUFFZ0MsSUFBSWhDLEVBQUU0OUQsTUFBTXpULE9BQU9ucUQsRUFBRUEsRUFBRUEsRUFBRTQ5RCxVQUFVLENBQUMsR0FBRzU5RCxJQUFJdFgsRUFBRSxNQUFNa0osRUFBRSxLQUFLLE9BQU9vTyxFQUFFMGxFLFNBQVMsQ0FBQyxHQUFHLE9BQU8xbEUsRUFBRW1xRCxRQUFRbnFELEVBQUVtcUQsU0FBU3poRSxFQUFFLE1BQU1rSixFQUFFb08sRUFBRUEsRUFBRW1xRCxPQUFPbnFELEVBQUUwbEUsUUFBUXZiLE9BQU9ucUQsRUFBRW1xRCxPQUFPbnFELEVBQUVBLEVBQUUwbEUsUUFBUTl5RSxHQUFHNGYsRUFBRWptQixFQUFFN0QsRUFBRXRDLEVBQUV1aUUsVUFDcmYsSUFBSW4yQyxFQUFFMHhDLFNBQVMxeEMsRUFBRTYxQyxXQUFXbGpDLFlBQVl6OEIsR0FBRzhwQixFQUFFMlMsWUFBWXo4QixJQUFJNkQsRUFBRTQ0QixZQUFZLytCLEVBQUV1aUUsZ0JBQWdCLEdBQUcsSUFBSXZpRSxFQUFFNGIsS0FBSyxHQUFHLE9BQU81YixFQUFFdzNFLE1BQU0sQ0FBQ3J4RSxFQUFFbkcsRUFBRXVpRSxVQUFVMkQsY0FBYzE1RCxHQUFFLEVBQUd4TSxFQUFFdzNFLE1BQU16VCxPQUFPL2pFLEVBQUVBLEVBQUVBLEVBQUV3M0UsTUFBTSxlQUFlLEdBQUcrUyxHQUFHLytFLEVBQUV4TCxHQUFHLE9BQU9BLEVBQUV3M0UsTUFBTSxDQUFDeDNFLEVBQUV3M0UsTUFBTXpULE9BQU8vakUsRUFBRUEsRUFBRUEsRUFBRXczRSxNQUFNLFNBQVMsR0FBR3gzRSxJQUFJeUwsRUFBRSxNQUFNLEtBQUssT0FBT3pMLEVBQUVzL0UsU0FBUyxDQUFDLEdBQUcsT0FBT3QvRSxFQUFFK2pFLFFBQVEvakUsRUFBRStqRSxTQUFTdDRELEVBQUUsT0FBa0IsS0FBWHpMLEVBQUVBLEVBQUUrakUsUUFBYW5vRCxNQUFNb3dCLEdBQUUsR0FBSWhzQyxFQUFFcy9FLFFBQVF2YixPQUFPL2pFLEVBQUUrakUsT0FBTy9qRSxFQUFFQSxFQUFFcy9FLFNBQ2xaLFNBQVM0TCxHQUFHMS9FLEVBQUVDLEdBQUcsT0FBT0EsRUFBRW1RLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJNWIsRUFBRXlMLEVBQUUyd0UsWUFBeUMsR0FBRyxRQUFoQ3A4RSxFQUFFLE9BQU9BLEVBQUVBLEVBQUVtL0UsV0FBVyxNQUFpQixDQUFDLElBQUluekMsRUFBRWhzQyxFQUFFQSxFQUFFNlcsS0FBSyxHQUFHLElBQVcsRUFBTm0xQixFQUFFcHdCLE9BQVNwUSxFQUFFd2dDLEVBQUVpNEMsUUFBUWo0QyxFQUFFaTRDLGFBQVEsT0FBTyxJQUFTejRFLEdBQUdBLEtBQUt3Z0MsRUFBRUEsRUFBRW4xQixXQUFXbTFCLElBQUloc0MsR0FBRyxPQUFPLEtBQUssRUFFckosS0FBSyxHQUFvRyxLQUFLLEdBQUcsT0FGNkMsS0FBSyxFQUFnQixHQUFHLE9BQWpCQSxFQUFFeUwsRUFBRTgyRCxXQUFxQixDQUFDdjJCLEVBQUV2Z0MsRUFBRWkxRSxjQUFjLElBQUl2NkUsRUFBRSxPQUFPcUYsRUFBRUEsRUFBRWsxRSxjQUFjMTBDLEVBQUV4Z0MsRUFBRUMsRUFBRXhPLEtBQUssSUFBSXVQLEVBQUVmLEVBQUUyd0UsWUFBK0IsR0FBbkIzd0UsRUFBRTJ3RSxZQUFZLEtBQVEsT0FBTzV2RSxFQUFFLENBQWdGLElBQS9FeE0sRUFBRXMzRSxJQUFJdHJDLEVBQUUsVUFBVXhnQyxHQUFHLFVBQVV3Z0MsRUFBRS91QyxNQUFNLE1BQU0rdUMsRUFBRTFvQyxNQUFNeTRELEdBQUcvN0QsRUFBRWdzQyxHQUFHNjFCLEdBQUdyMkQsRUFBRXJGLEdBQUdzRixFQUFFbzJELEdBQUdyMkQsRUFBRXdnQyxHQUFPN2xDLEVBQUUsRUFBRUEsRUFBRXFHLEVBQUVsTixPQUFPNkcsR0FDbGYsRUFBRSxDQUFDLElBQUlpbUIsRUFBRTVmLEVBQUVyRyxHQUFHN0QsRUFBRWtLLEVBQUVyRyxFQUFFLEdBQUcsVUFBVWltQixFQUFFeTBDLEdBQUc3Z0UsRUFBRXNDLEdBQUcsNEJBQTRCOHBCLEVBQUVreEMsR0FBR3Q5RCxFQUFFc0MsR0FBRyxhQUFhOHBCLEVBQUV3eEMsR0FBRzU5RCxFQUFFc0MsR0FBRzIxRCxFQUFHajRELEVBQUVvc0IsRUFBRTlwQixFQUFFbUosR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUXd3RCxHQUFHaDhELEVBQUVnc0MsR0FBRyxNQUFNLElBQUssV0FBVyt3QixHQUFHLzhELEVBQUVnc0MsR0FBRyxNQUFNLElBQUssU0FBU3hnQyxFQUFFeEwsRUFBRTA3RCxjQUFjNnNCLFlBQVl2b0YsRUFBRTA3RCxjQUFjNnNCLGNBQWN2OEMsRUFBRXc4QyxTQUFtQixPQUFWaDhFLEVBQUV3L0IsRUFBRXB4QyxPQUFjNGhFLEdBQUd4OEQsSUFBSWdzQyxFQUFFdzhDLFNBQVNoOEUsR0FBRSxHQUFJaEIsTUFBTXdnQyxFQUFFdzhDLFdBQVcsTUFBTXg4QyxFQUFFeXZCLGFBQWFlLEdBQUd4OEQsSUFBSWdzQyxFQUFFdzhDLFNBQVN4OEMsRUFBRXl2QixjQUFhLEdBQUllLEdBQUd4OEQsSUFBSWdzQyxFQUFFdzhDLFNBQVN4OEMsRUFBRXc4QyxTQUFTLEdBQUcsSUFBRyxNQUFPLE9BQU8sS0FBSyxFQUFFLEdBQUcsT0FBTy84RSxFQUFFODJELFVBQVUsTUFBTTMvRCxNQUFNeTNCLEVBQUUsTUFDL2MsWUFEcWQ1dUIsRUFBRTgyRCxVQUFVeEUsVUFDamZ0eUQsRUFBRWkxRSxlQUFxQixLQUFLLEVBQThELGFBQTVEMWdGLEVBQUV5TCxFQUFFODJELFdBQVkwRCxVQUFVam1FLEVBQUVpbUUsU0FBUSxFQUFHUyxHQUFHMW1FLEVBQUVrbUUsaUJBQXNDLEtBQUssR0FBeUQsT0FBdEQsT0FBT3o2RCxFQUFFdzRELGdCQUFnQmtuQixHQUFHOTFFLEtBQUlpMUUsR0FBRzcrRSxFQUFFK3JFLE9BQU0sU0FBSzRULEdBQUczL0UsR0FBVSxLQUFLLEdBQVMsWUFBTjIvRSxHQUFHMy9FLEdBQXlCLEtBQUssR0FBRyxLQUFLLEdBQWdDLFlBQTdCNitFLEdBQUc3K0UsRUFBRSxPQUFPQSxFQUFFdzRELGVBQXNCLE1BQU1yaEUsTUFBTXkzQixFQUFFLE1BQU8sU0FBUyt3RCxHQUFHNS9FLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTR3RSxZQUFZLEdBQUcsT0FBTzN3RSxFQUFFLENBQUNELEVBQUU0d0UsWUFBWSxLQUFLLElBQUlwOEUsRUFBRXdMLEVBQUUrMkQsVUFBVSxPQUFPdmlFLElBQUlBLEVBQUV3TCxFQUFFKzJELFVBQVUsSUFBSXFuQixJQUFJbitFLEVBQUVuUCxTQUFRLFNBQVNtUCxHQUFHLElBQUl1Z0MsRUFBRXEvQyxHQUFHL3RGLEtBQUssS0FBS2tPLEVBQUVDLEdBQUd6TCxFQUFFMGQsSUFBSWpTLEtBQUt6TCxFQUFFMmQsSUFBSWxTLEdBQUdBLEVBQUV2TSxLQUFLOHNDLEVBQUVBLFFBQ25lLFNBQVNzL0MsR0FBRzkvRSxFQUFFQyxHQUFHLE9BQU8sT0FBT0QsSUFBc0IsUUFBbEJBLEVBQUVBLEVBQUV5NEQsZ0JBQXdCLE9BQU96NEQsRUFBRTA0RCxhQUErQixRQUFsQno0RCxFQUFFQSxFQUFFdzRELGdCQUF3QixPQUFPeDRELEVBQUV5NEQsV0FBZSxJQUFJcW5CLEdBQUdwMkUsS0FBS2dtQixLQUFLcXdELEdBQUdoekIsRUFBR21wQix1QkFBdUI4SixHQUFHanpCLEVBQUd3dEIsa0JBQWtCMEYsR0FBRSxFQUFFbEksR0FBRSxLQUFLbUksR0FBRSxLQUFLN0MsR0FBRSxFQUFFOEMsR0FBRyxFQUFFQyxHQUFHbFUsR0FBRyxHQUFHdnNELEdBQUUsRUFBRTBnRSxHQUFHLEtBQUtDLEdBQUcsRUFBRS9PLEdBQUcsRUFBRTRMLEdBQUcsRUFBRW9ELEdBQUcsRUFBRUMsR0FBRyxLQUFLZCxHQUFHLEVBQUVwQyxHQUFHaDhELEVBQUFBLEVBQVMsU0FBU20vRCxLQUFLbkQsR0FBRzF6RSxLQUFJLElBQUksSUE4QnNGODJFLEdBOUJsRkMsR0FBRSxLQUFLOUMsSUFBRyxFQUFHQyxHQUFHLEtBQUtHLEdBQUcsS0FBSzJDLElBQUcsRUFBR0MsR0FBRyxLQUFLQyxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLElBQUcsRUFBRyxTQUFTdlAsS0FBSyxPQUFPLElBQU8sR0FBRmdPLElBQU1yMkUsTUFBSyxJQUFJdzNFLEdBQUdBLEdBQUdBLEdBQUd4M0UsS0FDM2UsU0FBU3NvRSxHQUFHbnlFLEdBQVksR0FBRyxJQUFPLEdBQW5CQSxFQUFFQSxFQUFFZ3ZCLE9BQWtCLE9BQU8sRUFBRSxHQUFHLElBQU8sRUFBRmh2QixHQUFLLE9BQU8sS0FBS2d2RSxLQUFLLEVBQUUsRUFBa0IsR0FBaEIsSUFBSXNTLEtBQUtBLEdBQUdmLElBQU8sSUFBSWpSLEdBQUd6VCxXQUFXLENBQUMsSUFBSTBsQixLQUFLQSxHQUFHLE9BQU9kLEdBQUdBLEdBQUcvakIsYUFBYSxHQUFHMThELEVBQUVzaEYsR0FBRyxJQUFJcmhGLEVBQUUsU0FBU3NoRixHQUFzRCxPQUE3QyxJQUFOdGhGLElBQUlBLElBQThCLElBQVBBLEdBQWJELEVBQUUsU0FBU0EsSUFBT0EsS0FBVUMsRUFBRSxNQUFjQSxFQUE0RCxPQUExREQsRUFBRWd2RSxLQUF1Qmh2RSxFQUFFazlELEdBQXBCLElBQU8sRUFBRmdqQixLQUFNLEtBQUtsZ0YsRUFBTyxHQUFRQSxFQXRLM1EsU0FBWUEsR0FBRyxPQUFPQSxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sRUFBRSxLQUFLLEdBQUcsT0FBTyxFQUFFLFFBQVEsT0FBTyxHQXNLdUowaEYsQ0FBRzFoRixHQUFWc2hGLElBQ25SLFNBQVNsUCxHQUFHcHlFLEVBQUVDLEVBQUV6TCxHQUFHLEdBQUcsR0FBRzJzRixHQUFHLE1BQU1BLEdBQUcsRUFBRUMsR0FBRyxLQUFLaHFGLE1BQU15M0IsRUFBRSxNQUFnQixHQUFHLFFBQWI3dUIsRUFBRTJoRixHQUFHM2hGLEVBQUVDLElBQWUsT0FBTyxLQUFLbzlELEdBQUdyOUQsRUFBRUMsRUFBRXpMLEdBQUd3TCxJQUFJZzRFLEtBQUlvRixJQUFJbjlFLEVBQUUsSUFBSTJmLElBQUd5OUQsR0FBR3I5RSxFQUFFczlFLEtBQUksSUFBSTk4QyxFQUFFd3VDLEtBQUssSUFBSS91RSxFQUFFLElBQU8sRUFBRmlnRixLQUFNLElBQU8sR0FBRkEsSUFBTTBCLEdBQUc1aEYsSUFBSTZoRixHQUFHN2hGLEVBQUV4TCxHQUFHLElBQUkwckYsS0FBSVEsS0FBS3RSLFFBQVEsSUFBTyxFQUFGOFEsS0FBTSxLQUFLMS9DLEdBQUcsS0FBS0EsSUFBSSxPQUFPMGdELEdBQUdBLEdBQUcsSUFBSTlwQyxJQUFJLENBQUNwM0MsSUFBSWtoRixHQUFHL3VFLElBQUluUyxJQUFJNmhGLEdBQUc3aEYsRUFBRXhMLElBQUlpc0YsR0FBR3pnRixFQUFFLFNBQVMyaEYsR0FBRzNoRixFQUFFQyxHQUFHRCxFQUFFcXdFLE9BQU9wd0UsRUFBRSxJQUFJekwsRUFBRXdMLEVBQUVzNEQsVUFBcUMsSUFBM0IsT0FBTzlqRSxJQUFJQSxFQUFFNjdFLE9BQU9wd0UsR0FBR3pMLEVBQUV3TCxFQUFNQSxFQUFFQSxFQUFFdTRELE9BQU8sT0FBT3Y0RCxHQUFHQSxFQUFFaXdFLFlBQVlod0UsRUFBZ0IsUUFBZHpMLEVBQUV3TCxFQUFFczRELGFBQXFCOWpFLEVBQUV5N0UsWUFBWWh3RSxHQUFHekwsRUFBRXdMLEVBQUVBLEVBQUVBLEVBQUV1NEQsT0FBTyxPQUFPLElBQUkvakUsRUFBRTRiLElBQUk1YixFQUFFdWlFLFVBQVUsS0FDemUsU0FBUzhxQixHQUFHN2hGLEVBQUVDLEdBQUcsSUFBSSxJQUFJekwsRUFBRXdMLEVBQUU4aEYsYUFBYXRoRCxFQUFFeGdDLEVBQUU0OEQsZUFBZWppRSxFQUFFcUYsRUFBRTY4RCxZQUFZNzdELEVBQUVoQixFQUFFK2hGLGdCQUFnQm5oRSxFQUFFNWdCLEVBQUUwOEQsYUFBYSxFQUFFOTdDLEdBQUcsQ0FBQyxJQUFJOXBCLEVBQUUsR0FBR2dtRSxHQUFHbDhDLEdBQUd4UyxFQUFFLEdBQUd0WCxFQUFFakQsRUFBRW1OLEVBQUVsSyxHQUFHLElBQUksSUFBSWpELEdBQUcsR0FBRyxJQUFLdWEsRUFBRW95QixJQUFJLElBQUtweUIsRUFBRXpULEdBQUcsQ0FBQzlHLEVBQUVvTSxFQUFFdThELEdBQUdwdUQsR0FBRyxJQUFJRSxFQUFFb0csR0FBRTFULEVBQUVsSyxHQUFHLElBQUl3WCxFQUFFemEsRUFBRSxJQUFJLEdBQUd5YSxFQUFFemEsRUFBRSxLQUFLLFFBQVFBLEdBQUdvTSxJQUFJRCxFQUFFMjhELGNBQWN2dUQsR0FBR3dTLElBQUl4UyxFQUF3QixHQUF0Qm95QixFQUFFaThCLEdBQUd6OEQsRUFBRUEsSUFBSWc0RSxHQUFFc0YsR0FBRSxHQUFHcjlFLEVBQUV5VSxHQUFLLElBQUk4ckIsRUFBRSxPQUFPaHNDLElBQUlBLElBQUlrNkUsSUFBSWpCLEdBQUdqNUUsR0FBR3dMLEVBQUU4aEYsYUFBYSxLQUFLOWhGLEVBQUVnaUYsaUJBQWlCLE9BQU8sQ0FBQyxHQUFHLE9BQU94dEYsRUFBRSxDQUFDLEdBQUd3TCxFQUFFZ2lGLG1CQUFtQi9oRixFQUFFLE9BQU96TCxJQUFJazZFLElBQUlqQixHQUFHajVFLEdBQUcsS0FBS3lMLEdBQUd6TCxFQUFFb3RGLEdBQUc5dkYsS0FBSyxLQUFLa08sR0FBRyxPQUFPNHVFLElBQUlBLEdBQUcsQ0FBQ3A2RSxHQUFHcTZFLEdBQUdyQixHQUFHVSxHQUFHbUIsS0FBS1QsR0FBR3g2RSxLQUFLSSxHQUNyZkEsRUFBRWs2RSxJQUFJLEtBQUt6dUUsRUFBRXpMLEVBQUUyNkUsR0FBRyxHQUFHeVMsR0FBRzl2RixLQUFLLEtBQUtrTyxLQUFLeEwsRUF6SytGLFNBQVl3TCxHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxHQUFHLEtBQUssRUFBRSxPQUFPLEdBQUcsUUFBUSxNQUFNNUksTUFBTXkzQixFQUFFLElBQUk3dUIsS0F5S3hUaWlGLENBQUdoaUYsR0FBR3pMLEVBQUUyNkUsR0FBRzM2RSxFQUFFMHRGLEdBQUdwd0YsS0FBSyxLQUFLa08sS0FBS0EsRUFBRWdpRixpQkFBaUIvaEYsRUFBRUQsRUFBRThoRixhQUFhdHRGLEdBQzVHLFNBQVMwdEYsR0FBR2xpRixHQUFpQixHQUFkcWhGLElBQUksRUFBRUUsR0FBR0QsR0FBRyxFQUFLLElBQU8sR0FBRnBCLElBQU0sTUFBTTlvRixNQUFNeTNCLEVBQUUsTUFBTSxJQUFJNXVCLEVBQUVELEVBQUU4aEYsYUFBYSxHQUFHSyxNQUFNbmlGLEVBQUU4aEYsZUFBZTdoRixFQUFFLE9BQU8sS0FBSyxJQUFJekwsRUFBRWlvRSxHQUFHejhELEVBQUVBLElBQUlnNEUsR0FBRXNGLEdBQUUsR0FBRyxHQUFHLElBQUk5b0YsRUFBRSxPQUFPLEtBQUssSUFBSWdzQyxFQUFFaHNDLEVBQU1tRyxFQUFFdWxGLEdBQUVBLElBQUcsR0FBRyxJQUFJbC9FLEVBQUVvaEYsS0FBa0MsSUFBMUJwSyxLQUFJaDRFLEdBQUdzOUUsS0FBSTk4QyxJQUFFa2dELEtBQUsyQixHQUFHcmlGLEVBQUV3Z0MsVUFBVThoRCxLQUFLLE1BQU0sTUFBTXhyRixHQUFHeXJGLEdBQUd2aUYsRUFBRWxKLEdBQWdFLEdBQXBEKzRFLEtBQUttUSxHQUFHOTBELFFBQVFscUIsRUFBRWsvRSxHQUFFdmxGLEVBQUUsT0FBT3dsRixHQUFFMy9DLEVBQUUsR0FBR3czQyxHQUFFLEtBQUtzRixHQUFFLEVBQUU5OEMsRUFBRTVnQixJQUFNLElBQUsyZ0UsR0FBR25ELElBQUlpRixHQUFHcmlGLEVBQUUsUUFBUSxHQUFHLElBQUl3Z0MsRUFBRSxDQUF5RixHQUF4RixJQUFJQSxJQUFJMC9DLElBQUcsR0FBR2xnRixFQUFFeTZELFVBQVV6NkQsRUFBRXk2RCxTQUFRLEVBQUcrUSxHQUFHeHJFLEVBQUUwNkQsZ0JBQXdCLEtBQVJsbUUsRUFBRXlvRSxHQUFHajlELE1BQVd3Z0MsRUFBRWdpRCxHQUFHeGlGLEVBQUV4TCxLQUFRLElBQUlnc0MsRUFBRSxNQUFNdmdDLEVBQUVxZ0YsR0FBRytCLEdBQUdyaUYsRUFBRSxHQUFHcTlFLEdBQUdyOUUsRUFBRXhMLEdBQUdxdEYsR0FBRzdoRixFQUFFNkosTUFBSzVKLEVBQzNjLE9BRDZjRCxFQUFFeWlGLGFBQ3JmemlGLEVBQUVrckIsUUFBUW90QyxVQUFVdDRELEVBQUUwaUYsY0FBY2x1RixFQUFTZ3NDLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNcHBDLE1BQU15M0IsRUFBRSxNQUFNLEtBQUssRUFDSSxLQUFLLEVBQUU4ekQsR0FBRzNpRixHQUFHLE1BREgsS0FBSyxFQUFVLEdBQVJxOUUsR0FBR3I5RSxFQUFFeEwsSUFBUyxTQUFGQSxLQUFjQSxHQUFpQixJQUFiZ3NDLEVBQUVtL0MsR0FBRyxJQUFJOTFFLE1BQVUsQ0FBQyxHQUFHLElBQUk0eUQsR0FBR3o4RCxFQUFFLEdBQUcsTUFBeUIsS0FBbkJyRixFQUFFcUYsRUFBRTQ4RCxnQkFBcUJwb0UsS0FBS0EsRUFBRSxDQUFDMDlFLEtBQUtseUUsRUFBRTY4RCxhQUFhNzhELEVBQUU0OEQsZUFBZWppRSxFQUFFLE1BQU1xRixFQUFFNGlGLGNBQWNqcEQsR0FBR2dwRCxHQUFHN3dGLEtBQUssS0FBS2tPLEdBQUd3Z0MsR0FBRyxNQUFNbWlELEdBQUczaUYsR0FBRyxNQUFNLEtBQUssRUFBVSxHQUFScTlFLEdBQUdyOUUsRUFBRXhMLElBQVMsUUFBRkEsS0FBYUEsRUFBRSxNQUFxQixJQUFmZ3NDLEVBQUV4Z0MsRUFBRXM5RCxXQUFlM2lFLEdBQUcsRUFBRSxFQUFFbkcsR0FBRyxDQUFDLElBQUlvc0IsRUFBRSxHQUFHazhDLEdBQUd0b0UsR0FBR3dNLEVBQUUsR0FBRzRmLEdBQUVBLEVBQUU0ZixFQUFFNWYsSUFBS2ptQixJQUFJQSxFQUFFaW1CLEdBQUdwc0IsSUFBSXdNLEVBQ2paLEdBRG1aeE0sRUFBRW1HLEVBQ2xaLElBRDRabkcsR0FBRyxLQUFYQSxFQUFFcVYsS0FBSXJWLEdBQVcsSUFBSSxJQUFJQSxFQUFFLElBQUksS0FBS0EsRUFBRSxLQUFLLEtBQUtBLEVBQUUsS0FBSyxJQUFJQSxFQUFFLElBQUksS0FDbGZBLEVBQUUsS0FBSyxLQUFLdXJGLEdBQUd2ckYsRUFBRSxPQUFPQSxHQUFVLENBQUN3TCxFQUFFNGlGLGNBQWNqcEQsR0FBR2dwRCxHQUFHN3dGLEtBQUssS0FBS2tPLEdBQUd4TCxHQUFHLE1BQU1tdUYsR0FBRzNpRixHQUFHLE1BQXlCLFFBQVEsTUFBTTVJLE1BQU15M0IsRUFBRSxPQUFrQixPQUFWZ3pELEdBQUc3aEYsRUFBRTZKLE1BQVk3SixFQUFFOGhGLGVBQWU3aEYsRUFBRWlpRixHQUFHcHdGLEtBQUssS0FBS2tPLEdBQUcsS0FBSyxTQUFTcTlFLEdBQUdyOUUsRUFBRUMsR0FBdUQsSUFBcERBLElBQUl1Z0YsR0FBR3ZnRixJQUFJbTlFLEdBQUdwOUUsRUFBRTQ4RCxnQkFBZ0IzOEQsRUFBRUQsRUFBRTY4RCxjQUFjNThELEVBQU1ELEVBQUVBLEVBQUUraEYsZ0JBQWdCLEVBQUU5aEYsR0FBRyxDQUFDLElBQUl6TCxFQUFFLEdBQUdzb0UsR0FBRzc4RCxHQUFHdWdDLEVBQUUsR0FBR2hzQyxFQUFFd0wsRUFBRXhMLElBQUksRUFBRXlMLElBQUl1Z0MsR0FDMVUsU0FBU29oRCxHQUFHNWhGLEdBQUcsR0FBRyxJQUFPLEdBQUZrZ0YsSUFBTSxNQUFNOW9GLE1BQU15M0IsRUFBRSxNQUFXLEdBQUxzekQsS0FBUW5pRixJQUFJZzRFLElBQUcsSUFBS2g0RSxFQUFFMjhELGFBQWEyZ0IsSUFBRyxDQUFDLElBQUlyOUUsRUFBRXE5RSxHQUFNOW9GLEVBQUVndUYsR0FBR3hpRixFQUFFQyxHQUFHLElBQUtzZ0YsR0FBR25ELE1BQWdCNW9GLEVBQUVndUYsR0FBR3hpRixFQUFmQyxFQUFFdzhELEdBQUd6OEQsRUFBRUMsVUFBNkJ6TCxFQUFFZ3VGLEdBQUd4aUYsRUFBZkMsRUFBRXc4RCxHQUFHejhELEVBQUUsSUFBZ0gsR0FBbkcsSUFBSUEsRUFBRW9RLEtBQUssSUFBSTViLElBQUkwckYsSUFBRyxHQUFHbGdGLEVBQUV5NkQsVUFBVXo2RCxFQUFFeTZELFNBQVEsRUFBRytRLEdBQUd4ckUsRUFBRTA2RCxnQkFBd0IsS0FBUno2RCxFQUFFZzlELEdBQUdqOUQsTUFBV3hMLEVBQUVndUYsR0FBR3hpRixFQUFFQyxLQUFRLElBQUl6TCxFQUFFLE1BQU1BLEVBQUU4ckYsR0FBRytCLEdBQUdyaUYsRUFBRSxHQUFHcTlFLEdBQUdyOUUsRUFBRUMsR0FBRzRoRixHQUFHN2hGLEVBQUU2SixNQUFLclYsRUFBdUUsT0FBckV3TCxFQUFFeWlGLGFBQWF6aUYsRUFBRWtyQixRQUFRb3RDLFVBQVV0NEQsRUFBRTBpRixjQUFjemlGLEVBQUUwaUYsR0FBRzNpRixHQUFHNmhGLEdBQUc3aEYsRUFBRTZKLE1BQVksS0FDakgsU0FBU294RSxHQUFHajdFLEVBQUVDLEdBQUdvc0UsR0FBRWdVLEdBQUdELElBQUlBLElBQUluZ0YsRUFBRXNnRixJQUFJdGdGLEVBQUUsU0FBU3U5RSxLQUFLNEMsR0FBR0MsR0FBR24xRCxRQUFRa2hELEdBQUVpVSxJQUM1VixTQUFTZ0MsR0FBR3JpRixFQUFFQyxHQUFHRCxFQUFFeWlGLGFBQWEsS0FBS3ppRixFQUFFMGlGLGNBQWMsRUFBRSxJQUFJbHVGLEVBQUV3TCxFQUFFNGlGLGNBQWlELElBQWxDLElBQUlwdUYsSUFBSXdMLEVBQUU0aUYsZUFBZSxFQUFFdFgsR0FBRzkyRSxJQUFPLE9BQU8yckYsR0FBRSxJQUFJM3JGLEVBQUUyckYsR0FBRTVuQixPQUFPLE9BQU8vakUsR0FBRyxDQUFDLElBQUlnc0MsRUFBRWhzQyxFQUFFLE9BQU9nc0MsRUFBRXB3QixLQUFLLEtBQUssRUFBNkIsT0FBM0Jvd0IsRUFBRUEsRUFBRS91QyxLQUFLbTBELG9CQUF3Q2tuQixLQUFLLE1BQU0sS0FBSyxFQUFFZ0ksS0FBSzFJLEdBQUVJLElBQUdKLEdBQUVHLElBQUd5SixLQUFLLE1BQU0sS0FBSyxFQUFFaEIsR0FBR3gwQyxHQUFHLE1BQU0sS0FBSyxFQUFFczBDLEtBQUssTUFBTSxLQUFLLEdBQWMsS0FBSyxHQUFHMUksR0FBRXZzRCxJQUFHLE1BQU0sS0FBSyxHQUFHaXdELEdBQUd0dkMsR0FBRyxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUdnOUMsS0FBS2hwRixFQUFFQSxFQUFFK2pFLE9BQU95ZixHQUFFaDRFLEVBQUVtZ0YsR0FBRXBNLEdBQUcvekUsRUFBRWtyQixRQUFRLE1BQU1veUQsR0FBRThDLEdBQUdHLEdBQUd0Z0YsRUFBRTJmLEdBQUUsRUFBRTBnRSxHQUFHLEtBQUtFLEdBQUdwRCxHQUFHNUwsR0FBRyxFQUN2YyxTQUFTK1EsR0FBR3ZpRixFQUFFQyxHQUFHLE9BQUUsQ0FBQyxJQUFJekwsRUFBRTJyRixHQUFFLElBQXVCLEdBQW5CdFEsS0FBS3FHLEdBQUdockQsUUFBUTRyRCxHQUFNUixHQUFHLENBQUMsSUFBSSxJQUFJOTFDLEVBQUV2VCxHQUFFd3JDLGNBQWMsT0FBT2o0QixHQUFHLENBQUMsSUFBSTdsQyxFQUFFNmxDLEVBQUU1TixNQUFNLE9BQU9qNEIsSUFBSUEsRUFBRW8yRSxRQUFRLE1BQU12d0MsRUFBRUEsRUFBRW4xQixLQUFLaXJFLElBQUcsRUFBeUMsR0FBdENELEdBQUcsRUFBRWp0RCxHQUFFbG9CLEdBQUUrckIsR0FBRSxLQUFLc3BELElBQUcsRUFBRzBKLEdBQUcvMEQsUUFBUSxLQUFRLE9BQU8xMkIsR0FBRyxPQUFPQSxFQUFFK2pFLE9BQU8sQ0FBQzM0QyxHQUFFLEVBQUUwZ0UsR0FBR3JnRixFQUFFa2dGLEdBQUUsS0FBSyxNQUFNbmdGLEVBQUUsQ0FBQyxJQUFJZ0IsRUFBRWhCLEVBQUU0Z0IsRUFBRXBzQixFQUFFK2pFLE9BQU96aEUsRUFBRXRDLEVBQUU0WixFQUFFbk8sRUFBb0QsR0FBbERBLEVBQUVxOUUsR0FBRXhtRixFQUFFa25CLE9BQU8sS0FBS2xuQixFQUFFKzhFLFlBQVkvOEUsRUFBRTY4RSxXQUFXLEtBQVEsT0FBT3ZsRSxHQUFHLGlCQUFrQkEsR0FBRyxtQkFBb0JBLEVBQUUxYSxLQUFLLENBQUMsSUFBSUcsRUFBRXVhLEVBQUUsR0FBRyxJQUFZLEVBQVB0WCxFQUFFazRCLE1BQVEsQ0FBQyxJQUFJMWdCLEVBQUV4WCxFQUFFd2hFLFVBQVVocUQsR0FBR3hYLEVBQUU4NUUsWUFBWXRpRSxFQUFFc2lFLFlBQVk5NUUsRUFBRTJoRSxjQUFjbnFELEVBQUVtcUQsY0FBYzNoRSxFQUFFdTVFLE1BQU0vaEUsRUFBRStoRSxRQUNwZnY1RSxFQUFFODVFLFlBQVksS0FBSzk1RSxFQUFFMmhFLGNBQWMsTUFBTSxJQUFJenZDLEVBQUUsSUFBZSxFQUFWbkosR0FBRXFMLFNBQVdtZSxFQUFFem9CLEVBQUUsRUFBRSxDQUFDLElBQUl6YyxFQUFFLEdBQUdBLEVBQUUsS0FBS2tsQyxFQUFFajVCLElBQUksQ0FBQyxJQUFJbVYsRUFBRThqQixFQUFFb3ZCLGNBQWMsR0FBRyxPQUFPbHpDLEVBQUVwaEIsRUFBRSxPQUFPb2hCLEVBQUVtekMsZUFBcUIsQ0FBQyxJQUFJajRCLEVBQUU0SSxFQUFFNnJDLGNBQWMvd0UsT0FBRSxJQUFTczhCLEVBQUV1N0MsWUFBWSxJQUFLdjdDLEVBQUV3N0MsNkJBQThCanpELElBQVMsR0FBRzdrQixFQUFFLENBQUMsSUFBSTg4QixFQUFFb0ksRUFBRXVuQyxZQUFZLEdBQUcsT0FBTzN2QyxFQUFFLENBQUMsSUFBSWtwQyxFQUFFLElBQUkveUIsSUFBSSt5QixFQUFFaDRELElBQUl0ZSxHQUFHdzFDLEVBQUV1bkMsWUFBWXpHLE9BQU9scEMsRUFBRTl1QixJQUFJdGUsR0FBRyxHQUFHLElBQVksRUFBUHcxQyxFQUFFcmEsTUFBUSxDQUEyQyxHQUExQ3FhLEVBQUVyckIsT0FBTyxHQUFHbG5CLEVBQUVrbkIsT0FBTyxNQUFNbG5CLEVBQUVrbkIsUUFBUSxLQUFRLElBQUlsbkIsRUFBRXNaLElBQUksR0FBRyxPQUFPdFosRUFBRXdoRSxVQUFVeGhFLEVBQUVzWixJQUFJLE9BQU8sQ0FBQyxJQUFJd2hCLEVBQUVzL0MsSUFBSSxFQUFFLEdBQUd0L0MsRUFBRXhoQixJQUFJLEVBQUVpaEUsR0FBR3Y2RSxFQUFFODZCLEdBQUc5NkIsRUFBRXU1RSxPQUFPLEVBQUUsTUFBTXJ3RSxFQUFFb08sT0FDNWYsRUFBT3RYLEVBQUVtSixFQUFFLElBQUkweEIsRUFBRTN3QixFQUFFNmhGLFVBQStHLEdBQXJHLE9BQU9seEQsR0FBR0EsRUFBRTN3QixFQUFFNmhGLFVBQVUsSUFBSWpGLEdBQUd4dkUsRUFBRSxJQUFJZ3BDLElBQUl6bEIsRUFBRTVyQixJQUFJbFMsRUFBRXVhLFNBQWdCLEtBQVhBLEVBQUV1akIsRUFBRTN0QixJQUFJblEsTUFBZ0J1YSxFQUFFLElBQUlncEMsSUFBSXpsQixFQUFFNXJCLElBQUlsUyxFQUFFdWEsS0FBU0EsRUFBRThELElBQUlwYixHQUFHLENBQUNzWCxFQUFFK0QsSUFBSXJiLEdBQUcsSUFBSXlFLEVBQUV1bkYsR0FBR2h4RixLQUFLLEtBQUtrUCxFQUFFbk4sRUFBRWlELEdBQUdqRCxFQUFFSCxLQUFLNkgsRUFBRUEsR0FBRzh0QyxFQUFFcnJCLE9BQU8sS0FBS3FyQixFQUFFZ25DLE1BQU1wd0UsRUFBRSxNQUFNRCxFQUFFcXBDLEVBQUVBLEVBQUVrdkIsYUFBYSxPQUFPbHZCLEdBQUdqN0IsRUFBRWhYLE9BQU95M0QsRUFBRy8zRCxFQUFFckYsT0FBTyxxQkFBcUIseUxBQXlMLElBQUltdUIsS0FBSUEsR0FBRSxHQUFHeFIsRUFBRXN2RSxHQUFHdHZFLEVBQUV0WCxHQUFHdXlDLEVBQ3Bmem9CLEVBQUUsRUFBRSxDQUFDLE9BQU95b0IsRUFBRWo1QixLQUFLLEtBQUssRUFBRXBQLEVBQUVvTixFQUFFaTdCLEVBQUVyckIsT0FBTyxLQUFLL2QsSUFBSUEsRUFBRW9wQyxFQUFFZ25DLE9BQU9wd0UsRUFBa0JxeEUsR0FBR2pvQyxFQUFidzBDLEdBQUd4MEMsRUFBRXJvQyxFQUFFZixJQUFXLE1BQU1ELEVBQUUsS0FBSyxFQUFFZ0IsRUFBRW9OLEVBQUUsSUFBSXE4RCxFQUFFcGhDLEVBQUU1M0MsS0FBS2k1RSxFQUFFcmhDLEVBQUUwdEIsVUFBVSxHQUFHLElBQWEsR0FBUjF0QixFQUFFcnJCLFNBQVksbUJBQW9CeXNELEVBQUV2a0IsMEJBQTBCLE9BQU93a0IsR0FBRyxtQkFBb0JBLEVBQUV1VCxvQkFBb0IsT0FBT0MsS0FBS0EsR0FBR2hzRSxJQUFJdzRELEtBQUssQ0FBQ3JoQyxFQUFFcnJCLE9BQU8sS0FBSy9kLElBQUlBLEVBQUVvcEMsRUFBRWduQyxPQUFPcHdFLEVBQWtCcXhFLEdBQUdqb0MsRUFBYjIwQyxHQUFHMzBDLEVBQUVyb0MsRUFBRWYsSUFBVyxNQUFNRCxHQUFHcXBDLEVBQUVBLEVBQUVrdkIsYUFBYSxPQUFPbHZCLEdBQUcwNUMsR0FBR3Z1RixHQUFHLE1BQU13dUYsR0FBSS9pRixFQUFFK2lGLEVBQUc3QyxLQUFJM3JGLEdBQUcsT0FBT0EsSUFBSTJyRixHQUFFM3JGLEVBQUVBLEVBQUUrakUsUUFBUSxTQUFTLE9BQy9hLFNBQVM2cEIsS0FBSyxJQUFJcGlGLEVBQUVnZ0YsR0FBRzkwRCxRQUFzQixPQUFkODBELEdBQUc5MEQsUUFBUTRyRCxHQUFVLE9BQU85MkUsRUFBRTgyRSxHQUFHOTJFLEVBQUUsU0FBU3dpRixHQUFHeGlGLEVBQUVDLEdBQUcsSUFBSXpMLEVBQUUwckYsR0FBRUEsSUFBRyxHQUFHLElBQUkxL0MsRUFBRTRoRCxLQUEyQixJQUF0QnBLLEtBQUloNEUsR0FBR3M5RSxLQUFJcjlFLEdBQUdvaUYsR0FBR3JpRixFQUFFQyxTQUFVZ2pGLEtBQUssTUFBTSxNQUFNdG9GLEdBQUc0bkYsR0FBR3ZpRixFQUFFckYsR0FBa0MsR0FBdEJrMUUsS0FBS3FRLEdBQUUxckYsRUFBRXdyRixHQUFHOTBELFFBQVFzVixFQUFLLE9BQU8yL0MsR0FBRSxNQUFNL29GLE1BQU15M0IsRUFBRSxNQUFpQixPQUFYbXBELEdBQUUsS0FBS3NGLEdBQUUsRUFBUzE5RCxHQUFFLFNBQVNxakUsS0FBSyxLQUFLLE9BQU85QyxJQUFHK0MsR0FBRy9DLElBQUcsU0FBU21DLEtBQUssS0FBSyxPQUFPbkMsS0FBSXhTLE1BQU11VixHQUFHL0MsSUFBRyxTQUFTK0MsR0FBR2xqRixHQUFHLElBQUlDLEVBQUUwZ0YsR0FBRzNnRixFQUFFczRELFVBQVV0NEQsRUFBRW9nRixJQUFJcGdGLEVBQUVrMUUsY0FBY2wxRSxFQUFFMDFFLGFBQWEsT0FBT3oxRSxFQUFFOGlGLEdBQUcvaUYsR0FBR21nRixHQUFFbGdGLEVBQUVnZ0YsR0FBRy8wRCxRQUFRLEtBQzVhLFNBQVM2M0QsR0FBRy9pRixHQUFHLElBQUlDLEVBQUVELEVBQUUsRUFBRSxDQUFDLElBQUl4TCxFQUFFeUwsRUFBRXE0RCxVQUFxQixHQUFYdDRELEVBQUVDLEVBQUVzNEQsT0FBVSxJQUFhLEtBQVJ0NEQsRUFBRStkLE9BQVksQ0FBYyxHQUFHLFFBQWhCeHBCLEVBQUVzb0YsR0FBR3RvRixFQUFFeUwsRUFBRW1nRixLQUFxQixZQUFKRCxHQUFFM3JGLEdBQWEsR0FBRyxNQUFQQSxFQUFFeUwsR0FBWW1RLEtBQUssS0FBSzViLEVBQUU0YixLQUFLLE9BQU81YixFQUFFaWtFLGVBQWUsSUFBUSxXQUFIMm5CLEtBQWdCLElBQVksRUFBUDVyRixFQUFFdzZCLE1BQVEsQ0FBQyxJQUFJLElBQUl3UixFQUFFLEVBQUU3bEMsRUFBRW5HLEVBQUV3M0UsTUFBTSxPQUFPcnhFLEdBQUc2bEMsR0FBRzdsQyxFQUFFMDFFLE1BQU0xMUUsRUFBRXMxRSxXQUFXdDFFLEVBQUVBLEVBQUVtNUUsUUFBUXQvRSxFQUFFeTdFLFdBQVd6dkMsRUFBRSxPQUFPeGdDLEdBQUcsSUFBYSxLQUFSQSxFQUFFZ2UsU0FBYyxPQUFPaGUsRUFBRTZ6RSxjQUFjN3pFLEVBQUU2ekUsWUFBWTV6RSxFQUFFNHpFLGFBQWEsT0FBTzV6RSxFQUFFMHpFLGFBQWEsT0FBTzN6RSxFQUFFMnpFLGFBQWEzekUsRUFBRTJ6RSxXQUFXQyxXQUFXM3pFLEVBQUU0ekUsYUFBYTd6RSxFQUFFMnpFLFdBQVcxekUsRUFBRTB6RSxZQUFZLEVBQUUxekUsRUFBRStkLFFBQVEsT0FDL2VoZSxFQUFFMnpFLFdBQVczekUsRUFBRTJ6RSxXQUFXQyxXQUFXM3pFLEVBQUVELEVBQUU2ekUsWUFBWTV6RSxFQUFFRCxFQUFFMnpFLFdBQVcxekUsUUFBUSxDQUFTLEdBQUcsUUFBWHpMLEVBQUVpcEYsR0FBR3g5RSxJQUFrQyxPQUFsQnpMLEVBQUV3cEIsT0FBTyxVQUFLbWlFLEdBQUUzckYsR0FBUyxPQUFPd0wsSUFBSUEsRUFBRTZ6RSxZQUFZN3pFLEVBQUUyekUsV0FBVyxLQUFLM3pFLEVBQUVnZSxPQUFPLE1BQWtCLEdBQUcsUUFBZi9kLEVBQUVBLEVBQUU2ekUsU0FBeUIsWUFBSnFNLEdBQUVsZ0YsR0FBU2tnRixHQUFFbGdGLEVBQUVELFFBQVEsT0FBT0MsR0FBRyxJQUFJMmYsS0FBSUEsR0FBRSxHQUFHLFNBQVMraUUsR0FBRzNpRixHQUFHLElBQUlDLEVBQUUrdUUsS0FBOEIsT0FBekJFLEdBQUcsR0FBR2lVLEdBQUdyeEYsS0FBSyxLQUFLa08sRUFBRUMsSUFBVyxLQUN0VCxTQUFTa2pGLEdBQUduakYsRUFBRUMsR0FBRyxHQUFHa2lGLFdBQVcsT0FBT3JCLElBQUksR0FBRyxJQUFPLEdBQUZaLElBQU0sTUFBTTlvRixNQUFNeTNCLEVBQUUsTUFBTSxJQUFJcjZCLEVBQUV3TCxFQUFFeWlGLGFBQWEsR0FBRyxPQUFPanVGLEVBQUUsT0FBTyxLQUEyQyxHQUF0Q3dMLEVBQUV5aUYsYUFBYSxLQUFLemlGLEVBQUUwaUYsY0FBYyxFQUFLbHVGLElBQUl3TCxFQUFFa3JCLFFBQVEsTUFBTTl6QixNQUFNeTNCLEVBQUUsTUFBTTd1QixFQUFFOGhGLGFBQWEsS0FBSyxJQUFJdGhELEVBQUVoc0MsRUFBRTY3RSxNQUFNNzdFLEVBQUV5N0UsV0FBV3QxRSxFQUFFNmxDLEVBQUV4L0IsRUFBRWhCLEVBQUUwOEQsY0FBYy9oRSxFQUFFcUYsRUFBRTA4RCxhQUFhL2hFLEVBQUVxRixFQUFFNDhELGVBQWUsRUFBRTU4RCxFQUFFNjhELFlBQVksRUFBRTc4RCxFQUFFMjhELGNBQWNoaUUsRUFBRXFGLEVBQUU4M0Usa0JBQWtCbjlFLEVBQUVxRixFQUFFKzhELGdCQUFnQnBpRSxFQUFFQSxFQUFFcUYsRUFBRWc5RCxjQUFjLElBQUksSUFBSXA4QyxFQUFFNWdCLEVBQUVzOUQsV0FBV3htRSxFQUFFa0osRUFBRStoRixnQkFBZ0IsRUFBRS9nRixHQUFHLENBQUMsSUFBSW9OLEVBQUUsR0FBRzB1RCxHQUFHOTdELEdBQUduTixFQUFFLEdBQUd1YSxFQUFFelQsRUFBRXlULEdBQUcsRUFBRXdTLEVBQUV4UyxJQUFJLEVBQUV0WCxFQUFFc1gsSUFBSSxFQUFFcE4sSUFBSW5OLEVBQ25WLEdBRHFWLE9BQ2pmcXRGLElBQUksSUFBTyxHQUFGMWdELElBQU8wZ0QsR0FBR2h2RSxJQUFJbFMsSUFBSWtoRixHQUFHam5CLE9BQU9qNkQsR0FBR0EsSUFBSWc0RSxLQUFJbUksR0FBRW5JLEdBQUUsS0FBS3NGLEdBQUUsR0FBRyxFQUFFOW9GLEVBQUV3cEIsTUFBTSxPQUFPeHBCLEVBQUVtL0UsWUFBWW4vRSxFQUFFbS9FLFdBQVdDLFdBQVdwL0UsRUFBRWdzQyxFQUFFaHNDLEVBQUVxL0UsYUFBYXJ6QyxFQUFFaHNDLEVBQUVnc0MsRUFBRWhzQyxFQUFFcS9FLFlBQWUsT0FBT3J6QyxFQUFFLENBQXdDLEdBQXZDN2xDLEVBQUV1bEYsR0FBRUEsSUFBRyxHQUFHRCxHQUFHLzBELFFBQVEsS0FBSzgvQyxHQUFHcE4sR0FBYXlLLEdBQVZ6bkQsRUFBRXVuRCxNQUFjLENBQUMsR0FBRyxtQkFBbUJ2bkQsRUFBRTlwQixFQUFFLENBQUM4USxNQUFNZ1osRUFBRWlvRCxlQUFlNStELElBQUkyVyxFQUFFa29ELG1CQUFtQjlvRSxFQUFFLEdBQUdsSixHQUFHQSxFQUFFOHBCLEVBQUUrdkMsZ0JBQWdCNzVELEVBQUVreUUsYUFBYWpyRSxRQUFRbEssRUFBRWlELEVBQUVteUUsY0FBY255RSxFQUFFbXlFLGlCQUFpQixJQUFJcDFFLEVBQUV1dkYsV0FBVyxDQUFDdHNGLEVBQUVqRCxFQUFFazFFLFdBQVcvbkUsRUFBRW5OLEVBQUVxMUUsYUFBYTk2RCxFQUFFdmEsRUFBRXMxRSxVQUFVdDFFLEVBQUVBLEVBQUV1MUUsWUFBWSxJQUFJdHlFLEVBQUV3N0QsU0FBU2xrRCxFQUFFa2tELFNBQVMsTUFBTTB3QixHQUFJbHNGLEVBQUUsS0FDbmYsTUFBTWtKLEVBQUUsSUFBSXNPLEVBQUUsRUFBRTBhLEdBQUcsRUFBRXFnQixHQUFHLEVBQUVsbEMsRUFBRSxFQUFFb2hCLEVBQUUsRUFBRWtiLEVBQUU3ZixFQUFFcWdCLEVBQUUsS0FBS2hoQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUlrcUUsRUFBSzFwQyxJQUFJM3BDLEdBQUcsSUFBSWtLLEdBQUcsSUFBSXkvQixFQUFFNnhCLFdBQVd0cEMsRUFBRTFhLEVBQUV0TixHQUFHeS9CLElBQUlyeUIsR0FBRyxJQUFJdmEsR0FBRyxJQUFJNHNDLEVBQUU2eEIsV0FBV2pwQixFQUFFLzZCLEVBQUV6YSxHQUFHLElBQUk0c0MsRUFBRTZ4QixXQUFXaGtELEdBQUdteUIsRUFBRTh4QixVQUFVeitELFFBQVcsUUFBUXEyRSxFQUFFMXBDLEVBQUV3eEIsYUFBa0JoeEIsRUFBRVIsRUFBRUEsRUFBRTBwQyxFQUFFLE9BQU8sQ0FBQyxHQUFHMXBDLElBQUk3ZixFQUFFLE1BQU0zZ0IsRUFBOEMsR0FBNUNnaEMsSUFBSW5xQyxLQUFLcU4sSUFBSW5ELElBQUlnb0IsRUFBRTFhLEdBQUcyeUIsSUFBSTd5QixLQUFLbVgsSUFBSTF4QixJQUFJdzFDLEVBQUUvNkIsR0FBTSxRQUFRNjdELEVBQUUxcEMsRUFBRXNuQyxhQUFhLE1BQVU5bUMsR0FBSlIsRUFBRVEsR0FBTXcxQixXQUFXaDJCLEVBQUUwcEMsRUFBRXJ6RSxHQUFHLElBQUlreUIsSUFBSSxJQUFJcWdCLEVBQUUsS0FBSyxDQUFDemhDLE1BQU1vaEIsRUFBRS9lLElBQUlvL0IsUUFBUXZ5QyxFQUFFLEtBQUtBLEVBQUVBLEdBQUcsQ0FBQzhRLE1BQU0sRUFBRXFDLElBQUksUUFBUW5ULEVBQUUsS0FBS20wRSxHQUFHLENBQUNvWSxZQUFZemlFLEVBQUUwaUUsZUFBZXhzRixHQUFHOG1FLElBQUcsRUFBRzRqQixHQUFHLEtBQUtDLElBQUcsRUFBR2IsR0FBRXBnRCxFQUFFLE9BQU8raUQsS0FBSyxNQUFNUCxHQUFJLEdBQUcsT0FDdmdCcEMsR0FBRSxNQUFNeHBGLE1BQU15M0IsRUFBRSxNQUFNMHZELEdBQUdxQyxHQUFFb0MsR0FBSXBDLEdBQUVBLEdBQUVoTixrQkFBaUIsT0FBT2dOLElBQUdZLEdBQUcsS0FBS1osR0FBRXBnRCxFQUFFLE9BQU8sSUFBSTVmLEVBQUU1Z0IsRUFBRSxPQUFPNGdGLElBQUcsQ0FBQyxJQUFJaHZELEVBQUVndkQsR0FBRTVpRSxNQUErQixHQUF2QixHQUFGNFQsR0FBTXdnQyxHQUFHd3VCLEdBQUU3cEIsVUFBVSxJQUFTLElBQUZubEMsRUFBTSxDQUFDLElBQUlELEVBQUVpdkQsR0FBRXRvQixVQUFVLEdBQUcsT0FBTzNtQyxFQUFFLENBQUMsSUFBSXAyQixFQUFFbzJCLEVBQUUyaEQsSUFBSSxPQUFPLzNFLElBQUksbUJBQW9CQSxFQUFFQSxFQUFFLE1BQU1BLEVBQUUydkIsUUFBUSxPQUFPLE9BQVMsS0FBRjBHLEdBQVEsS0FBSyxFQUFFeXRELEdBQUd1QixJQUFHQSxHQUFFNWlFLFFBQVEsRUFBRSxNQUFNLEtBQUssRUFBRXFoRSxHQUFHdUIsSUFBR0EsR0FBRTVpRSxRQUFRLEVBQUUwaEUsR0FBR2tCLEdBQUV0b0IsVUFBVXNvQixJQUFHLE1BQU0sS0FBSyxLQUFLQSxHQUFFNWlFLFFBQVEsS0FBSyxNQUFNLEtBQUssS0FBSzRpRSxHQUFFNWlFLFFBQVEsS0FBSzBoRSxHQUFHa0IsR0FBRXRvQixVQUFVc29CLElBQUcsTUFBTSxLQUFLLEVBQUVsQixHQUFHa0IsR0FBRXRvQixVQUFVc29CLElBQUcsTUFBTSxLQUFLLEVBQU0xQixHQUFHdCtELEVBQVA5cEIsRUFBRThwRixJQUFVLElBQUlwVyxFQUFFMXpFLEVBQUV3aEUsVUFBVTZtQixHQUFHcm9GLEdBQUcsT0FDbmYwekUsR0FBRzJVLEdBQUczVSxHQUFHb1csR0FBRUEsR0FBRWhOLFlBQVksTUFBTW9QLEdBQUksR0FBRyxPQUFPcEMsR0FBRSxNQUFNeHBGLE1BQU15M0IsRUFBRSxNQUFNMHZELEdBQUdxQyxHQUFFb0MsR0FBSXBDLEdBQUVBLEdBQUVoTixrQkFBaUIsT0FBT2dOLElBQWtELEdBQS9DcmxGLEVBQUUwdkUsR0FBR3Q1QyxFQUFFdzJDLEtBQUt2MkMsRUFBRXIyQixFQUFFOG5GLFlBQVl6aUUsRUFBRXJsQixFQUFFK25GLGVBQWtCM3hELElBQUlDLEdBQUdBLEdBQUdBLEVBQUUrK0IsZUFBZXFYLEdBQUdwMkMsRUFBRSsrQixjQUFjaWtCLGdCQUFnQmhqRCxHQUFHLENBQUMsT0FBT2hSLEdBQUd5bkQsR0FBR3oyQyxLQUFLRCxFQUFFL1EsRUFBRWhaLFdBQWMsS0FBUnJNLEVBQUVxbEIsRUFBRTNXLE9BQWlCMU8sRUFBRW8yQixHQUFHLG1CQUFtQkMsR0FBR0EsRUFBRWkzQyxlQUFlbDNDLEVBQUVDLEVBQUVrM0MsYUFBYW4vRCxLQUFLRCxJQUFJbk8sRUFBRXEyQixFQUFFeGlDLE1BQU0wRSxVQUFVeUgsR0FBR28yQixFQUFFQyxFQUFFKytCLGVBQWVyMEQsV0FBV3ExQixFQUFFcTNDLGFBQWFqckUsUUFBU2tyRSxlQUFlMXRFLEVBQUVBLEVBQUUwdEUsZUFBZW55RSxFQUFFODZCLEVBQUU2L0IsWUFBWTM5RCxPQUFPMDJFLEVBQUU3Z0UsS0FBS0QsSUFBSWtYLEVBQUVoWixNQUFNOVEsR0FBRzhwQixPQUFFLElBQ3BmQSxFQUFFM1csSUFBSXVnRSxFQUFFN2dFLEtBQUtELElBQUlrWCxFQUFFM1csSUFBSW5ULElBQUl5RSxFQUFFaEosUUFBUWk0RSxFQUFFNXBELElBQUk5cEIsRUFBRThwQixFQUFFQSxFQUFFNHBELEVBQUVBLEVBQUUxekUsR0FBR0EsRUFBRWd4RSxHQUFHbDJDLEVBQUU0NEMsR0FBR3hwRSxFQUFFOG1FLEdBQUdsMkMsRUFBRWhSLEdBQUc5cEIsR0FBR2tLLElBQUksSUFBSXpGLEVBQUU2bkYsWUFBWTduRixFQUFFd3RFLGFBQWFqeUUsRUFBRXd2QixNQUFNL3FCLEVBQUUydEUsZUFBZXB5RSxFQUFFMlIsUUFBUWxOLEVBQUU0dEUsWUFBWW5vRSxFQUFFc2xCLE1BQU0vcUIsRUFBRTZ0RSxjQUFjcG9FLEVBQUV5SCxXQUFVa3BCLEVBQUVBLEVBQUU2eEQsZUFBZ0JDLFNBQVMzc0YsRUFBRXd2QixLQUFLeHZCLEVBQUUyUixRQUFRbE4sRUFBRW1vRixrQkFBa0JsWixFQUFFNXBELEdBQUdybEIsRUFBRW9vRixTQUFTaHlELEdBQUdwMkIsRUFBRWhKLE9BQU95TyxFQUFFc2xCLEtBQUt0bEIsRUFBRXlILFVBQVVrcEIsRUFBRWl5RCxPQUFPNWlGLEVBQUVzbEIsS0FBS3RsQixFQUFFeUgsUUFBUWxOLEVBQUVvb0YsU0FBU2h5RCxPQUFRQSxFQUFFLEdBQUcsSUFBSXAyQixFQUFFcTJCLEVBQUVyMkIsRUFBRUEsRUFBRWs3RCxZQUFZLElBQUlsN0QsRUFBRSsyRCxVQUFVM2dDLEVBQUV2OUIsS0FBSyxDQUFDd2EsUUFBUXJULEVBQUUwUyxLQUFLMVMsRUFBRXNvRixXQUFXQyxJQUFJdm9GLEVBQUV3b0YsWUFBbUQsSUFBdkMsbUJBQW9CbnlELEVBQUVpdEQsT0FBT2p0RCxFQUFFaXRELFFBQVlqdEQsRUFDcmYsRUFBRUEsRUFBRUQsRUFBRTc5QixPQUFPODlCLEtBQUlyMkIsRUFBRW8yQixFQUFFQyxJQUFLaGpCLFFBQVFpMUUsV0FBV3RvRixFQUFFMFMsS0FBSzFTLEVBQUVxVCxRQUFRbTFFLFVBQVV4b0YsRUFBRXVvRixJQUFJbG1CLEtBQUtvTixHQUFHQyxHQUFHRCxHQUFHLEtBQUtockUsRUFBRWtyQixRQUFRMTJCLEVBQUVvc0YsR0FBRXBnRCxFQUFFLE9BQU8sSUFBSTVPLEVBQUU1eEIsRUFBRSxPQUFPNGdGLElBQUcsQ0FBQyxJQUFJblcsRUFBRW1XLEdBQUU1aUUsTUFBZ0MsR0FBeEIsR0FBRnlzRCxHQUFNaVUsR0FBRzlzRCxFQUFFZ3ZELEdBQUV0b0IsVUFBVXNvQixJQUFRLElBQUZuVyxFQUFNLENBQUM5NEMsT0FBRSxFQUFPLElBQUkrNEMsRUFBRWtXLEdBQUV0TixJQUFJLEdBQUcsT0FBTzVJLEVBQUUsQ0FBQyxJQUFJQyxFQUFFaVcsR0FBRTdwQixVQUFpQjZwQixHQUFFeHdFLElBQThCdWhCLEVBQUVnNUMsRUFBRSxtQkFBb0JELEVBQUVBLEVBQUUvNEMsR0FBRys0QyxFQUFFeC9DLFFBQVF5RyxHQUFHaXZELEdBQUVBLEdBQUVoTixZQUFZLE1BQU1vUCxHQUFJLEdBQUcsT0FBT3BDLEdBQUUsTUFBTXhwRixNQUFNeTNCLEVBQUUsTUFBTTB2RCxHQUFHcUMsR0FBRW9DLEdBQUlwQyxHQUFFQSxHQUFFaE4sa0JBQWlCLE9BQU9nTixJQUFHQSxHQUFFLEtBQUtqUyxLQUFLdVIsR0FBRXZsRixPQUFPcUYsRUFBRWtyQixRQUFRMTJCLEVBQUUsR0FBR3FzRixHQUFHQSxJQUFHLEVBQUdDLEdBQUc5Z0YsRUFBRStnRixHQUFHOWdGLE9BQU8sSUFBSTJnRixHQUFFcGdELEVBQUUsT0FBT29nRCxJQUFHM2dGLEVBQ3BmMmdGLEdBQUVoTixXQUFXZ04sR0FBRWhOLFdBQVcsS0FBYSxFQUFSZ04sR0FBRTVpRSxTQUFVeXNELEVBQUVtVyxJQUFJOU0sUUFBUSxLQUFLckosRUFBRTFULFVBQVUsTUFBTTZwQixHQUFFM2dGLEVBQXFGLEdBQWxFLEtBQWpCdWdDLEVBQUV4Z0MsRUFBRTA4RCxnQkFBcUJ3aEIsR0FBRyxNQUFNLElBQUkxOUMsRUFBRXhnQyxJQUFJb2hGLEdBQUdELE1BQU1BLEdBQUcsRUFBRUMsR0FBR3BoRixHQUFHbWhGLEdBQUcsRUFBRTNzRixFQUFFQSxFQUFFdWlFLFVBQWF1VyxJQUFJLG1CQUFvQkEsR0FBRzBXLGtCQUFrQixJQUFJMVcsR0FBRzBXLGtCQUFrQjNXLEdBQUc3NEUsT0FBRSxFQUFPLEtBQXNCLEdBQWhCQSxFQUFFMDJCLFFBQVFsTixRQUFXLE1BQU1nbEUsSUFBZSxHQUFWbkIsR0FBRzdoRixFQUFFNkosTUFBUWkwRSxHQUFHLE1BQU1BLElBQUcsRUFBRzk5RSxFQUFFKzlFLEdBQUdBLEdBQUcsS0FBSy85RSxFQUFFLE9BQUcsSUFBTyxFQUFGa2dGLEtBQWlCOVEsS0FBTCxLQUNqVyxTQUFTbVUsS0FBSyxLQUFLLE9BQU8zQyxJQUFHLENBQUMsSUFBSTVnRixFQUFFNGdGLEdBQUV0b0IsVUFBVW1wQixJQUFJLE9BQU9ELEtBQUssSUFBYSxFQUFSWixHQUFFNWlFLE9BQVM0NkMsR0FBR2dvQixHQUFFWSxNQUFNQyxJQUFHLEdBQUksS0FBS2IsR0FBRXh3RSxLQUFLMHZFLEdBQUc5L0UsRUFBRTRnRixLQUFJaG9CLEdBQUdnb0IsR0FBRVksTUFBTUMsSUFBRyxJQUFLLElBQUl4aEYsRUFBRTJnRixHQUFFNWlFLE1BQU0sSUFBTyxJQUFGL2QsSUFBUXUrRSxHQUFHeCtFLEVBQUU0Z0YsSUFBRyxJQUFPLElBQUYzZ0YsSUFBUTRnRixLQUFLQSxJQUFHLEVBQUcxUixHQUFHLElBQUcsV0FBZ0IsT0FBTGdULEtBQVksU0FBUXZCLEdBQUVBLEdBQUVoTixZQUFZLFNBQVN1TyxLQUFLLEdBQUcsS0FBS3BCLEdBQUcsQ0FBQyxJQUFJL2dGLEVBQUUsR0FBRytnRixHQUFHLEdBQUdBLEdBQVMsT0FBTkEsR0FBRyxHQUFVN1IsR0FBR2x2RSxFQUFFaWtGLElBQUksT0FBTSxFQUFHLFNBQVNyRixHQUFHNStFLEVBQUVDLEdBQUcrZ0YsR0FBRzVzRixLQUFLNkwsRUFBRUQsR0FBRzZnRixLQUFLQSxJQUFHLEVBQUcxUixHQUFHLElBQUcsV0FBZ0IsT0FBTGdULEtBQVksU0FBUSxTQUFTeEQsR0FBRzMrRSxFQUFFQyxHQUFHZ2hGLEdBQUc3c0YsS0FBSzZMLEVBQUVELEdBQUc2Z0YsS0FBS0EsSUFBRyxFQUFHMVIsR0FBRyxJQUFHLFdBQWdCLE9BQUxnVCxLQUFZLFNBQ3pkLFNBQVM4QixLQUFLLEdBQUcsT0FBT25ELEdBQUcsT0FBTSxFQUFHLElBQUk5Z0YsRUFBRThnRixHQUFXLEdBQVJBLEdBQUcsS0FBUSxJQUFPLEdBQUZaLElBQU0sTUFBTTlvRixNQUFNeTNCLEVBQUUsTUFBTSxJQUFJNXVCLEVBQUVpZ0YsR0FBRUEsSUFBRyxHQUFHLElBQUkxckYsRUFBRXlzRixHQUFHQSxHQUFHLEdBQUcsSUFBSSxJQUFJemdELEVBQUUsRUFBRUEsRUFBRWhzQyxFQUFFVixPQUFPMHNDLEdBQUcsRUFBRSxDQUFDLElBQUk3bEMsRUFBRW5HLEVBQUVnc0MsR0FBR3gvQixFQUFFeE0sRUFBRWdzQyxFQUFFLEdBQUc1ZixFQUFFam1CLEVBQUU4OUUsUUFBeUIsR0FBakI5OUUsRUFBRTg5RSxhQUFRLEVBQVUsbUJBQW9CNzNELEVBQUUsSUFBSUEsSUFBSSxNQUFNeFMsR0FBRyxHQUFHLE9BQU9wTixFQUFFLE1BQU01SixNQUFNeTNCLEVBQUUsTUFBTTB2RCxHQUFHdjlFLEVBQUVvTixJQUFlLElBQVg1WixFQUFFd3NGLEdBQUdBLEdBQUcsR0FBT3hnRCxFQUFFLEVBQUVBLEVBQUVoc0MsRUFBRVYsT0FBTzBzQyxHQUFHLEVBQUUsQ0FBQzdsQyxFQUFFbkcsRUFBRWdzQyxHQUFHeC9CLEVBQUV4TSxFQUFFZ3NDLEVBQUUsR0FBRyxJQUFJLElBQUkxcEMsRUFBRTZELEVBQUVuSSxPQUFPbUksRUFBRTg5RSxRQUFRM2hGLElBQUksTUFBTXNYLEdBQUcsR0FBRyxPQUFPcE4sRUFBRSxNQUFNNUosTUFBTXkzQixFQUFFLE1BQU0wdkQsR0FBR3Y5RSxFQUFFb04sSUFBSSxJQUFJdFgsRUFBRWtKLEVBQUVrckIsUUFBUTJvRCxZQUFZLE9BQU8vOEUsR0FBR2tKLEVBQUVsSixFQUFFODhFLFdBQVc5OEUsRUFBRTg4RSxXQUFXLEtBQWEsRUFBUjk4RSxFQUFFa25CLFFBQVVsbkIsRUFBRWc5RSxRQUNqZixLQUFLaDlFLEVBQUVpZ0UsVUFBVSxNQUFNamdFLEVBQUVrSixFQUFXLE9BQVRrZ0YsR0FBRWpnRixFQUFFbXZFLE1BQVcsRUFBRyxTQUFTOFUsR0FBR2xrRixFQUFFQyxFQUFFekwsR0FBeUI2OEUsR0FBR3J4RSxFQUFmQyxFQUFFNDlFLEdBQUc3OUUsRUFBZkMsRUFBRXk5RSxHQUFHbHBGLEVBQUV5TCxHQUFZLElBQVdBLEVBQUVpeUUsS0FBZSxRQUFWbHlFLEVBQUUyaEYsR0FBRzNoRixFQUFFLE1BQWNxOUQsR0FBR3I5RCxFQUFFLEVBQUVDLEdBQUc0aEYsR0FBRzdoRixFQUFFQyxJQUN6SSxTQUFTcytFLEdBQUd2K0UsRUFBRUMsR0FBRyxHQUFHLElBQUlELEVBQUVvUSxJQUFJOHpFLEdBQUdsa0YsRUFBRUEsRUFBRUMsUUFBUSxJQUFJLElBQUl6TCxFQUFFd0wsRUFBRXU0RCxPQUFPLE9BQU8vakUsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRTRiLElBQUksQ0FBQzh6RSxHQUFHMXZGLEVBQUV3TCxFQUFFQyxHQUFHLE1BQVcsR0FBRyxJQUFJekwsRUFBRTRiLElBQUksQ0FBQyxJQUFJb3dCLEVBQUVoc0MsRUFBRXVpRSxVQUFVLEdBQUcsbUJBQW9CdmlFLEVBQUUvQyxLQUFLeTBELDBCQUEwQixtQkFBb0IxbEIsRUFBRXk5QyxvQkFBb0IsT0FBT0MsS0FBS0EsR0FBR2hzRSxJQUFJc3VCLElBQUksQ0FBVyxJQUFJN2xDLEVBQUVxakYsR0FBR3hwRixFQUFuQndMLEVBQUUwOUUsR0FBR3o5RSxFQUFFRCxHQUFnQixHQUE0QixHQUF6QnF4RSxHQUFHNzhFLEVBQUVtRyxHQUFHQSxFQUFFdTNFLEtBQWtCLFFBQWIxOUUsRUFBRW10RixHQUFHbnRGLEVBQUUsSUFBZTZvRSxHQUFHN29FLEVBQUUsRUFBRW1HLEdBQUdrbkYsR0FBR3J0RixFQUFFbUcsUUFBUSxHQUFHLG1CQUFvQjZsQyxFQUFFeTlDLG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHaHNFLElBQUlzdUIsSUFBSSxJQUFJQSxFQUFFeTlDLGtCQUFrQmgrRSxFQUFFRCxHQUFHLE1BQU1nQixJQUFJLE9BQU94TSxFQUFFQSxFQUFFK2pFLFFBQ3BkLFNBQVN1cUIsR0FBRzlpRixFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEVBQUV4Z0MsRUFBRTZpRixVQUFVLE9BQU9yaUQsR0FBR0EsRUFBRXk1QixPQUFPaDZELEdBQUdBLEVBQUVpeUUsS0FBS2x5RSxFQUFFNjhELGFBQWE3OEQsRUFBRTQ4RCxlQUFlcG9FLEVBQUV3akYsS0FBSWg0RSxJQUFJczlFLEdBQUU5b0YsS0FBS0EsSUFBSSxJQUFJb3JCLElBQUcsSUFBSUEsS0FBTSxTQUFGMDlELE1BQWNBLElBQUcsSUFBSXp6RSxLQUFJODFFLEdBQUcwQyxHQUFHcmlGLEVBQUUsR0FBR3dnRixJQUFJaHNGLEdBQUdxdEYsR0FBRzdoRixFQUFFQyxHQUFHLFNBQVM0L0UsR0FBRzcvRSxFQUFFQyxHQUFHLElBQUl6TCxFQUFFd0wsRUFBRSsyRCxVQUFVLE9BQU92aUUsR0FBR0EsRUFBRXlsRSxPQUFPaDZELEdBQU8sSUFBSkEsRUFBRSxLQUFtQixJQUFPLEdBQWhCQSxFQUFFRCxFQUFFZ3ZCLE9BQWUvdUIsRUFBRSxFQUFFLElBQU8sRUFBRkEsR0FBS0EsRUFBRSxLQUFLK3VFLEtBQUssRUFBRSxHQUFHLElBQUlzUyxLQUFLQSxHQUFHZixJQUF1QixLQUFuQnRnRixFQUFFazlELEdBQUcsVUFBVW1rQixPQUFZcmhGLEVBQUUsV0FBV3pMLEVBQUUwOUUsS0FBZSxRQUFWbHlFLEVBQUUyaEYsR0FBRzNoRixFQUFFQyxNQUFjbzlELEdBQUdyOUQsRUFBRUMsRUFBRXpMLEdBQUdxdEYsR0FBRzdoRixFQUFFeEwsSUFValosU0FBUzJ2RixHQUFHbmtGLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUd0dEMsS0FBS2tkLElBQUlwUSxFQUFFOU0sS0FBS2xDLElBQUl3RCxFQUFFdEIsS0FBSzRnRixRQUFRNWdGLEtBQUs4NEUsTUFBTTk0RSxLQUFLcWxFLE9BQU9ybEUsS0FBSzZqRSxVQUFVN2pFLEtBQUt6QixLQUFLeUIsS0FBSzAzRCxZQUFZLEtBQUsxM0QsS0FBS21CLE1BQU0sRUFBRW5CLEtBQUtvZ0YsSUFBSSxLQUFLcGdGLEtBQUt3aUYsYUFBYXoxRSxFQUFFL00sS0FBS2k5RSxhQUFhajlFLEtBQUt1bEUsY0FBY3ZsRSxLQUFLMDlFLFlBQVkxOUUsS0FBS2dpRixjQUFjLEtBQUtoaUYsS0FBSzg3QixLQUFLd1IsRUFBRXR0QyxLQUFLOHFCLE1BQU0sRUFBRTlxQixLQUFLeWdGLFdBQVd6Z0YsS0FBSzJnRixZQUFZM2dGLEtBQUswZ0YsV0FBVyxLQUFLMWdGLEtBQUsrOEUsV0FBVy84RSxLQUFLbTlFLE1BQU0sRUFBRW45RSxLQUFLb2xFLFVBQVUsS0FBSyxTQUFTa2QsR0FBR3gxRSxFQUFFQyxFQUFFekwsRUFBRWdzQyxHQUFHLE9BQU8sSUFBSTJqRCxHQUFHbmtGLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsU0FBU282QyxHQUFHNTZFLEdBQWlCLFVBQWRBLEVBQUVBLEVBQUUxTixhQUF1QjBOLEVBQUVva0Ysa0JBRXJkLFNBQVNyUSxHQUFHL3pFLEVBQUVDLEdBQUcsSUFBSXpMLEVBQUV3TCxFQUFFczRELFVBQ3VCLE9BRGIsT0FBTzlqRSxJQUFHQSxFQUFFZ2hGLEdBQUd4MUUsRUFBRW9RLElBQUluUSxFQUFFRCxFQUFFaFAsSUFBSWdQLEVBQUVndkIsT0FBUTQ3QixZQUFZNXFELEVBQUU0cUQsWUFBWXAyRCxFQUFFL0MsS0FBS3VPLEVBQUV2TyxLQUFLK0MsRUFBRXVpRSxVQUFVLzJELEVBQUUrMkQsVUFBVXZpRSxFQUFFOGpFLFVBQVV0NEQsRUFBRUEsRUFBRXM0RCxVQUFVOWpFLElBQUlBLEVBQUVraEYsYUFBYXoxRSxFQUFFekwsRUFBRS9DLEtBQUt1TyxFQUFFdk8sS0FBSytDLEVBQUV3cEIsTUFBTSxFQUFFeHBCLEVBQUVvL0UsV0FBVyxLQUFLcC9FLEVBQUVxL0UsWUFBWSxLQUFLci9FLEVBQUVtL0UsV0FBVyxNQUFNbi9FLEVBQUV5N0UsV0FBV2p3RSxFQUFFaXdFLFdBQVd6N0UsRUFBRTY3RSxNQUFNcndFLEVBQUVxd0UsTUFBTTc3RSxFQUFFdzNFLE1BQU1oc0UsRUFBRWdzRSxNQUFNeDNFLEVBQUUwZ0YsY0FBY2wxRSxFQUFFazFFLGNBQWMxZ0YsRUFBRWlrRSxjQUFjejRELEVBQUV5NEQsY0FBY2prRSxFQUFFbzhFLFlBQVk1d0UsRUFBRTR3RSxZQUFZM3dFLEVBQUVELEVBQUVtd0UsYUFBYTM3RSxFQUFFMjdFLGFBQWEsT0FBT2x3RSxFQUFFLEtBQUssQ0FBQ293RSxNQUFNcHdFLEVBQUVvd0UsTUFBTUQsYUFBYW53RSxFQUFFbXdFLGNBQzNlNTdFLEVBQUVzL0UsUUFBUTl6RSxFQUFFOHpFLFFBQVF0L0UsRUFBRUgsTUFBTTJMLEVBQUUzTCxNQUFNRyxFQUFFOCtFLElBQUl0ekUsRUFBRXN6RSxJQUFXOStFLEVBQ3ZELFNBQVN5L0UsR0FBR2owRSxFQUFFQyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLEVBQUVxRyxHQUFHLElBQUk0ZixFQUFFLEVBQU0sR0FBSjRmLEVBQUV4Z0MsRUFBSyxtQkFBb0JBLEVBQUU0NkUsR0FBRzU2RSxLQUFLNGdCLEVBQUUsUUFBUSxHQUFHLGlCQUFrQjVnQixFQUFFNGdCLEVBQUUsT0FBTzVnQixFQUFFLE9BQU9BLEdBQUcsS0FBS290RCxFQUFHLE9BQU9nbkIsR0FBRzUvRSxFQUFFcThELFNBQVNsMkQsRUFBRXFHLEVBQUVmLEdBQUcsS0FBSyt0RCxFQUFHcHRDLEVBQUUsRUFBRWptQixHQUFHLEdBQUcsTUFBTSxLQUFLMHlELEVBQUd6c0MsRUFBRSxFQUFFam1CLEdBQUcsRUFBRSxNQUFNLEtBQUsyeUQsRUFBRyxPQUFPdHRELEVBQUV3MUUsR0FBRyxHQUFHaGhGLEVBQUV5TCxFQUFJLEVBQUZ0RixJQUFPaXdELFlBQVkwQyxFQUFHdHRELEVBQUV2TyxLQUFLNjdELEVBQUd0dEQsRUFBRXF3RSxNQUFNcnZFLEVBQUVoQixFQUFFLEtBQUswdEQsRUFBRyxPQUFPMXRELEVBQUV3MUUsR0FBRyxHQUFHaGhGLEVBQUV5TCxFQUFFdEYsSUFBS2xKLEtBQUtpOEQsRUFBRzF0RCxFQUFFNHFELFlBQVk4QyxFQUFHMXRELEVBQUVxd0UsTUFBTXJ2RSxFQUFFaEIsRUFBRSxLQUFLMnRELEVBQUcsT0FBTzN0RCxFQUFFdzFFLEdBQUcsR0FBR2hoRixFQUFFeUwsRUFBRXRGLElBQUtpd0QsWUFBWStDLEVBQUczdEQsRUFBRXF3RSxNQUFNcnZFLEVBQUVoQixFQUFFLEtBQUtpdUQsRUFBRyxPQUFPbXVCLEdBQUc1bkYsRUFBRW1HLEVBQUVxRyxFQUFFZixHQUFHLEtBQUtpdUQsRUFBRyxPQUFPbHVELEVBQUV3MUUsR0FBRyxHQUFHaGhGLEVBQUV5TCxFQUFFdEYsSUFBS2l3RCxZQUFZc0QsRUFBR2x1RCxFQUFFcXdFLE1BQU1ydkUsRUFBRWhCLEVBQUUsUUFBUSxHQUFHLGlCQUNoZkEsR0FBRyxPQUFPQSxFQUFFLE9BQU9BLEVBQUU4dUQsVUFBVSxLQUFLdkIsRUFBRzNzQyxFQUFFLEdBQUcsTUFBTTVnQixFQUFFLEtBQUt3dEQsRUFBRzVzQyxFQUFFLEVBQUUsTUFBTTVnQixFQUFFLEtBQUt5dEQsRUFBRzdzQyxFQUFFLEdBQUcsTUFBTTVnQixFQUFFLEtBQUs0dEQsRUFBR2h0QyxFQUFFLEdBQUcsTUFBTTVnQixFQUFFLEtBQUs2dEQsRUFBR2p0QyxFQUFFLEdBQUc0ZixFQUFFLEtBQUssTUFBTXhnQyxFQUFFLEtBQUs4dEQsRUFBR2x0QyxFQUFFLEdBQUcsTUFBTTVnQixFQUFFLE1BQU01SSxNQUFNeTNCLEVBQUUsSUFBSSxNQUFNN3VCLEVBQUVBLFNBQVNBLEVBQUUsS0FBdUQsT0FBakRDLEVBQUV1MUUsR0FBRzUwRCxFQUFFcHNCLEVBQUV5TCxFQUFFdEYsSUFBS2l3RCxZQUFZNXFELEVBQUVDLEVBQUV4TyxLQUFLK3VDLEVBQUV2Z0MsRUFBRW93RSxNQUFNcnZFLEVBQVNmLEVBQUUsU0FBU20wRSxHQUFHcDBFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQTJCLE9BQXhCeGdDLEVBQUV3MUUsR0FBRyxFQUFFeDFFLEVBQUV3Z0MsRUFBRXZnQyxJQUFLb3dFLE1BQU03N0UsRUFBU3dMLEVBQUUsU0FBU284RSxHQUFHcDhFLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQTZDLE9BQTFDeGdDLEVBQUV3MUUsR0FBRyxHQUFHeDFFLEVBQUV3Z0MsRUFBRXZnQyxJQUFLMnFELFlBQVlxRCxFQUFHanVELEVBQUVxd0UsTUFBTTc3RSxFQUFTd0wsRUFBRSxTQUFTZzBFLEdBQUdoMEUsRUFBRUMsRUFBRXpMLEdBQThCLE9BQTNCd0wsRUFBRXcxRSxHQUFHLEVBQUV4MUUsRUFBRSxLQUFLQyxJQUFLb3dFLE1BQU03N0UsRUFBU3dMLEVBQ2xjLFNBQVNtMEUsR0FBR24wRSxFQUFFQyxFQUFFekwsR0FBOEosT0FBM0p5TCxFQUFFdTFFLEdBQUcsRUFBRSxPQUFPeDFFLEVBQUU2d0QsU0FBUzd3RCxFQUFFNndELFNBQVMsR0FBRzd3RCxFQUFFaFAsSUFBSWlQLElBQUtvd0UsTUFBTTc3RSxFQUFFeUwsRUFBRTgyRCxVQUFVLENBQUMyRCxjQUFjMTZELEVBQUUwNkQsY0FBYzJwQixnQkFBZ0IsS0FBS25RLGVBQWVsMEUsRUFBRWswRSxnQkFBdUJqMEUsRUFDckwsU0FBU3FrRixHQUFHdGtGLEVBQUVDLEVBQUV6TCxHQUFHdEIsS0FBS2tkLElBQUluUSxFQUFFL00sS0FBS3duRSxjQUFjMTZELEVBQUU5TSxLQUFLdXZGLGFBQWF2dkYsS0FBSzJ2RixVQUFVM3ZGLEtBQUtnNEIsUUFBUWg0QixLQUFLbXhGLGdCQUFnQixLQUFLbnhGLEtBQUswdkYsZUFBZSxFQUFFMXZGLEtBQUt1b0YsZUFBZXZvRixLQUFLZCxRQUFRLEtBQUtjLEtBQUt1bkUsUUFBUWptRSxFQUFFdEIsS0FBSzR1RixhQUFhLEtBQUs1dUYsS0FBSzh1RixpQkFBaUIsRUFBRTl1RixLQUFLb3FFLFdBQVdGLEdBQUcsR0FBR2xxRSxLQUFLNnVGLGdCQUFnQjNrQixJQUFJLEdBQUdscUUsS0FBSzZwRSxlQUFlN3BFLEtBQUt3dkYsY0FBY3h2RixLQUFLNGtGLGlCQUFpQjVrRixLQUFLeXBFLGFBQWF6cEUsS0FBSzJwRSxZQUFZM3BFLEtBQUswcEUsZUFBZTFwRSxLQUFLd3BFLGFBQWEsRUFBRXhwRSxLQUFLOHBFLGNBQWNJLEdBQUcsR0FBR2xxRSxLQUFLcXhGLGdDQUFnQyxLQUU3ZSxTQUFTQyxHQUFHeGtGLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEdBQUcsSUFBSTdsQyxFQUFFc0YsRUFBRWlyQixRQUFRbHFCLEVBQUVreEUsS0FBS3R4RCxFQUFFdXhELEdBQUd4M0UsR0FBR3FGLEVBQUUsR0FBR3hMLEVBQUUsQ0FBcUJ5TCxFQUFFLENBQUMsR0FBR280RCxHQUExQjdqRSxFQUFFQSxFQUFFdzlFLG1CQUE4Qng5RSxHQUFHLElBQUlBLEVBQUU0YixJQUFJLE1BQU1oWixNQUFNeTNCLEVBQUUsTUFBTSxJQUFJLzNCLEVBQUV0QyxFQUFFLEVBQUUsQ0FBQyxPQUFPc0MsRUFBRXNaLEtBQUssS0FBSyxFQUFFdFosRUFBRUEsRUFBRWlnRSxVQUFVM2tFLFFBQVEsTUFBTTZOLEVBQUUsS0FBSyxFQUFFLEdBQUc0c0UsR0FBRy8xRSxFQUFFckYsTUFBTSxDQUFDcUYsRUFBRUEsRUFBRWlnRSxVQUFVb1csMENBQTBDLE1BQU1sdEUsR0FBR25KLEVBQUVBLEVBQUV5aEUsYUFBYSxPQUFPemhFLEdBQUcsTUFBTU0sTUFBTXkzQixFQUFFLE1BQU8sR0FBRyxJQUFJcjZCLEVBQUU0YixJQUFJLENBQUMsSUFBSWhDLEVBQUU1WixFQUFFL0MsS0FBSyxHQUFHbzdFLEdBQUd6K0QsR0FBRyxDQUFDNVosRUFBRXc0RSxHQUFHeDRFLEVBQUU0WixFQUFFdFgsR0FBRyxNQUFNa0osR0FBR3hMLEVBQUVzQyxPQUFPdEMsRUFBRTgzRSxHQUNyVyxPQUR3VyxPQUFPcnNFLEVBQUU3TixRQUFRNk4sRUFBRTdOLFFBQVFvQyxFQUFFeUwsRUFBRXc3RSxlQUFlam5GLEdBQUV5TCxFQUFFaXhFLEdBQUdsd0UsRUFBRTRmLElBQUsvakIsUUFBUSxDQUFDK1IsUUFBUTVPLEdBQXVCLFFBQXBCd2dDLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxLQUMxZXZnQyxFQUFFekIsU0FBU2dpQyxHQUFHNndDLEdBQUcxMkUsRUFBRXNGLEdBQUdteUUsR0FBR3ozRSxFQUFFaW1CLEVBQUU1ZixHQUFVNGYsRUFBRSxTQUFTNmpFLEdBQUd6a0YsR0FBZSxPQUFaQSxFQUFFQSxFQUFFa3JCLFNBQWM4Z0QsT0FBeUJoc0UsRUFBRWdzRSxNQUFNNTdELElBQW9EcFEsRUFBRWdzRSxNQUFNalYsV0FBaEYsS0FBMkYsU0FBUzJ0QixHQUFHMWtGLEVBQUVDLEdBQXFCLEdBQUcsUUFBckJELEVBQUVBLEVBQUV5NEQsZ0JBQTJCLE9BQU96NEQsRUFBRTA0RCxXQUFXLENBQUMsSUFBSWxrRSxFQUFFd0wsRUFBRTg3RSxVQUFVOTdFLEVBQUU4N0UsVUFBVSxJQUFJdG5GLEdBQUdBLEVBQUV5TCxFQUFFekwsRUFBRXlMLEdBQUcsU0FBU21sQyxHQUFHcGxDLEVBQUVDLEdBQUd5a0YsR0FBRzFrRixFQUFFQyxJQUFJRCxFQUFFQSxFQUFFczRELFlBQVlvc0IsR0FBRzFrRixFQUFFQyxHQUN4VixTQUFTMGtGLEdBQUcza0YsRUFBRUMsRUFBRXpMLEdBQUcsSUFBSWdzQyxFQUFFLE1BQU1oc0MsR0FBRyxNQUFNQSxFQUFFb3dGLGtCQUFrQnB3RixFQUFFb3dGLGlCQUFpQkMsZ0JBQWdCLEtBQWlLLEdBQTVKcndGLEVBQUUsSUFBSTh2RixHQUFHdGtGLEVBQUVDLEVBQUUsTUFBTXpMLElBQUcsSUFBS0EsRUFBRWltRSxTQUFTeDZELEVBQUV1MUUsR0FBRyxFQUFFLEtBQUssS0FBSyxJQUFJdjFFLEVBQUUsRUFBRSxJQUFJQSxFQUFFLEVBQUUsR0FBR3pMLEVBQUUwMkIsUUFBUWpyQixFQUFFQSxFQUFFODJELFVBQVV2aUUsRUFBRW04RSxHQUFHMXdFLEdBQUdELEVBQUVxcUUsSUFBSTcxRSxFQUFFMDJCLFFBQVE2K0MsR0FBRyxJQUFJL3BFLEVBQUVzeUQsU0FBU3R5RCxFQUFFeTJELFdBQVd6MkQsR0FBTXdnQyxFQUFFLElBQUl4Z0MsRUFBRSxFQUFFQSxFQUFFd2dDLEVBQUUxc0MsT0FBT2tNLElBQUksQ0FBUSxJQUFJckYsR0FBWHNGLEVBQUV1Z0MsRUFBRXhnQyxJQUFXNDNFLFlBQVlqOUUsRUFBRUEsRUFBRXNGLEVBQUU0M0UsU0FBUyxNQUFNcmpGLEVBQUUrdkYsZ0NBQWdDL3ZGLEVBQUUrdkYsZ0NBQWdDLENBQUN0a0YsRUFBRXRGLEdBQUduRyxFQUFFK3ZGLGdDQUFnQ253RixLQUFLNkwsRUFBRXRGLEdBQUd6SCxLQUFLNHhGLGNBQWN0d0YsRUFDL1IsU0FBU3V3RixHQUFHL2tGLEdBQUcsU0FBU0EsR0FBRyxJQUFJQSxFQUFFc3lELFVBQVUsSUFBSXR5RCxFQUFFc3lELFVBQVUsS0FBS3R5RCxFQUFFc3lELFdBQVcsSUFBSXR5RCxFQUFFc3lELFVBQVUsaUNBQWlDdHlELEVBQUV1eUQsWUFFdlQsU0FBU3l5QixHQUFHaGxGLEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEVBQUU3bEMsR0FBRyxJQUFJcUcsRUFBRXhNLEVBQUVpckYsb0JBQW9CLEdBQUd6K0UsRUFBRSxDQUFDLElBQUk0ZixFQUFFNWYsRUFBRThqRixjQUFjLEdBQUcsbUJBQW9CbnFGLEVBQUUsQ0FBQyxJQUFJN0QsRUFBRTZELEVBQUVBLEVBQUUsV0FBVyxJQUFJcUYsRUFBRXlrRixHQUFHN2pFLEdBQUc5cEIsRUFBRVMsS0FBS3lJLElBQUl3a0YsR0FBR3ZrRixFQUFFMmdCLEVBQUU1Z0IsRUFBRXJGLE9BQU8sQ0FBbUQsR0FBbERxRyxFQUFFeE0sRUFBRWlyRixvQkFEMUssU0FBWXovRSxFQUFFQyxHQUEwSCxHQUF2SEEsSUFBMkRBLE1BQXZEQSxFQUFFRCxFQUFFLElBQUlBLEVBQUVzeUQsU0FBU3R5RCxFQUFFNDBFLGdCQUFnQjUwRSxFQUFFaXlELFdBQVcsT0FBYSxJQUFJaHlELEVBQUVxeUQsV0FBV3J5RCxFQUFFZ2xGLGFBQWEscUJBQXdCaGxGLEVBQUUsSUFBSSxJQUFJekwsRUFBRUEsRUFBRXdMLEVBQUVxeUQsV0FBV3J5RCxFQUFFdXpCLFlBQVkvK0IsR0FBRyxPQUFPLElBQUltd0YsR0FBRzNrRixFQUFFLEVBQUVDLEVBQUUsQ0FBQ3c2RCxTQUFRLFFBQUksR0FDM0J5cUIsQ0FBRzF3RixFQUFFZ3NDLEdBQUc1ZixFQUFFNWYsRUFBRThqRixjQUFpQixtQkFBb0JucUYsRUFBRSxDQUFDLElBQUl5VCxFQUFFelQsRUFBRUEsRUFBRSxXQUFXLElBQUlxRixFQUFFeWtGLEdBQUc3akUsR0FBR3hTLEVBQUU3VyxLQUFLeUksS0E3Q3RGLFNBQVlBLEVBQUVDLEdBQUcsSUFBSXpMLEVBQUUwckYsR0FBRUEsS0FBSSxFQUFFQSxJQUFHLEVBQUUsSUFBV2xnRixFQUFFQyxHQUFHLFFBQVksS0FBSmlnRixHQUFFMXJGLEtBQVVrc0YsS0FBS3RSLE9BNkNhK1YsRUFBRyxXQUFXWCxHQUFHdmtGLEVBQUUyZ0IsRUFBRTVnQixFQUFFckYsTUFBSyxPQUFPOHBGLEdBQUc3akUsR0F2QnBVKy9ELEdBQUcsU0FBUzNnRixFQUFFQyxFQUFFekwsR0FBRyxJQUFJZ3NDLEVBQUV2Z0MsRUFBRW93RSxNQUFNLEdBQUcsT0FBT3J3RSxFQUFFLEdBQUdBLEVBQUVrMUUsZ0JBQWdCajFFLEVBQUV5MUUsY0FBY2xKLEdBQUV0aEQsUUFBUW9sRCxJQUFHLE1BQVEsSUFBRyxJQUFLOTdFLEVBQUVnc0MsR0FBb0MsQ0FBTyxPQUFOOHZDLElBQUcsRUFBVXJ3RSxFQUFFbVEsS0FBSyxLQUFLLEVBQUVvckUsR0FBR3Y3RSxHQUFHNjFFLEtBQUssTUFBTSxLQUFLLEVBQUVmLEdBQUc5MEUsR0FBRyxNQUFNLEtBQUssRUFBRTRzRSxHQUFHNXNFLEVBQUV4TyxPQUFPeTdFLEdBQUdqdEUsR0FBRyxNQUFNLEtBQUssRUFBRTAwRSxHQUFHMTBFLEVBQUVBLEVBQUU4MkQsVUFBVTJELGVBQWUsTUFBTSxLQUFLLEdBQUdsNkIsRUFBRXZnQyxFQUFFaTFFLGNBQWM5bEYsTUFBTSxJQUFJdUwsRUFBRXNGLEVBQUV4TyxLQUFLczlELFNBQVNzZCxHQUFFb0QsR0FBRzkwRSxFQUFFbzFFLGVBQWVwMUUsRUFBRW8xRSxjQUFjdnZDLEVBQUUsTUFBTSxLQUFLLEdBQUcsR0FBRyxPQUFPdmdDLEVBQUV3NEQsY0FBZSxPQUFHLElBQUtqa0UsRUFBRXlMLEVBQUUrckUsTUFBTWlFLFlBQW1COEwsR0FBRy83RSxFQUFFQyxFQUFFekwsSUFBRzYzRSxHQUFFeHNELEdBQVksRUFBVkEsR0FBRXFMLFNBQThCLFFBQW5CanJCLEVBQUU4OEIsR0FBRy84QixFQUFFQyxFQUFFekwsSUFDL2V5TCxFQUFFNnpFLFFBQVEsTUFBS3pILEdBQUV4c0QsR0FBWSxFQUFWQSxHQUFFcUwsU0FBVyxNQUFNLEtBQUssR0FBMEIsR0FBdkJzVixFQUFFLElBQUtoc0MsRUFBRXlMLEVBQUVnd0UsWUFBZSxJQUFhLEdBQVJqd0UsRUFBRWdlLE9BQVUsQ0FBQyxHQUFHd2lCLEVBQUUsT0FBT284QyxHQUFHNThFLEVBQUVDLEVBQUV6TCxHQUFHeUwsRUFBRStkLE9BQU8sR0FBK0YsR0FBMUUsUUFBbEJyakIsRUFBRXNGLEVBQUV3NEQsaUJBQXlCOTlELEVBQUU4aEYsVUFBVSxLQUFLOWhGLEVBQUVpeUIsS0FBSyxLQUFLanlCLEVBQUVnNUUsV0FBVyxNQUFNdEgsR0FBRXhzRCxHQUFFQSxHQUFFcUwsU0FBWXNWLEVBQUUsTUFBVyxPQUFPLEtBQUssS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPdmdDLEVBQUVvd0UsTUFBTSxFQUFFMEssR0FBRy82RSxFQUFFQyxFQUFFekwsR0FBRyxPQUFPdW9DLEdBQUcvOEIsRUFBRUMsRUFBRXpMLEdBRDNMODdFLEdBQUcsSUFBYSxNQUFSdHdFLEVBQUVnZSxZQUN5THN5RCxJQUFHLEVBQWEsT0FBVnJ3RSxFQUFFb3dFLE1BQU0sRUFBU3B3RSxFQUFFbVEsS0FBSyxLQUFLLEVBQStJLEdBQTdJb3dCLEVBQUV2Z0MsRUFBRXhPLEtBQUssT0FBT3VPLElBQUlBLEVBQUVzNEQsVUFBVSxLQUFLcjRELEVBQUVxNEQsVUFBVSxLQUFLcjRELEVBQUUrZCxPQUFPLEdBQUdoZSxFQUFFQyxFQUFFeTFFLGFBQWEvNkUsRUFBRSt4RSxHQUFHenNFLEVBQUVzc0UsR0FBRXJoRCxTQUFTZ2xELEdBQUdqd0UsRUFBRXpMLEdBQUdtRyxFQUFFKzdFLEdBQUcsS0FBS3oyRSxFQUFFdWdDLEVBQUV4Z0MsRUFBRXJGLEVBQUVuRyxHQUFHeUwsRUFBRStkLE9BQU8sRUFBSyxpQkFDcmVyakIsR0FBRyxPQUFPQSxHQUFHLG1CQUFvQkEsRUFBRXFzRCxhQUFRLElBQVNyc0QsRUFBRW0wRCxTQUFTLENBQWlELEdBQWhEN3VELEVBQUVtUSxJQUFJLEVBQUVuUSxFQUFFdzRELGNBQWMsS0FBS3g0RCxFQUFFMndFLFlBQVksS0FBUS9ELEdBQUdyc0MsR0FBRyxDQUFDLElBQUl4L0IsR0FBRSxFQUFHa3NFLEdBQUdqdEUsUUFBUWUsR0FBRSxFQUFHZixFQUFFdzRELGNBQWMsT0FBTzk5RCxFQUFFaVgsWUFBTyxJQUFTalgsRUFBRWlYLE1BQU1qWCxFQUFFaVgsTUFBTSxLQUFLKytELEdBQUcxd0UsR0FBRyxJQUFJMmdCLEVBQUU0ZixFQUFFMmxCLHlCQUF5QixtQkFBb0J2bEMsR0FBR2l4RCxHQUFHNXhFLEVBQUV1Z0MsRUFBRTVmLEVBQUU1Z0IsR0FBR3JGLEVBQUVnNEUsUUFBUWIsR0FBRzd4RSxFQUFFODJELFVBQVVwOEQsRUFBRUEsRUFBRXEzRSxnQkFBZ0IveEUsRUFBRTh5RSxHQUFHOXlFLEVBQUV1Z0MsRUFBRXhnQyxFQUFFeEwsR0FBR3lMLEVBQUVzN0UsR0FBRyxLQUFLdDdFLEVBQUV1Z0MsR0FBRSxFQUFHeC9CLEVBQUV4TSxRQUFReUwsRUFBRW1RLElBQUksRUFBRXFxRSxHQUFHLEtBQUt4NkUsRUFBRXRGLEVBQUVuRyxHQUFHeUwsRUFBRUEsRUFBRStyRSxNQUFNLE9BQU8vckUsRUFBRSxLQUFLLEdBQUd0RixFQUFFc0YsRUFBRTJxRCxZQUFZNXFELEVBQUUsQ0FDaFgsT0FEaVgsT0FBT0EsSUFBSUEsRUFBRXM0RCxVQUFVLEtBQUtyNEQsRUFBRXE0RCxVQUFVLEtBQUtyNEQsRUFBRStkLE9BQU8sR0FDbmZoZSxFQUFFQyxFQUFFeTFFLGFBQXVCLzZFLEdBQVZxRyxFQUFFckcsRUFBRXMwRCxPQUFVdDBELEVBQUVxMEQsVUFBVS91RCxFQUFFeE8sS0FBS2tKLEVBQUVxRyxFQUFFZixFQUFFbVEsSUFPeEQsU0FBWXBRLEdBQUcsR0FBRyxtQkFBb0JBLEVBQUUsT0FBTzQ2RSxHQUFHNTZFLEdBQUcsRUFBRSxFQUFFLEdBQUcsTUFBU0EsRUFBWSxDQUFjLElBQWJBLEVBQUVBLEVBQUU4dUQsWUFBZ0JyQixFQUFHLE9BQU8sR0FBRyxHQUFHenRELElBQUk0dEQsRUFBRyxPQUFPLEdBQUcsT0FBTyxFQVBsRnczQixDQUFHenFGLEdBQUdxRixFQUFFd3ZFLEdBQUc3MEUsRUFBRXFGLEdBQVVnQixHQUFHLEtBQUssRUFBRWYsRUFBRTY2RSxHQUFHLEtBQUs3NkUsRUFBRXRGLEVBQUVxRixFQUFFeEwsR0FBRyxNQUFNd0wsRUFBRSxLQUFLLEVBQUVDLEVBQUVrN0UsR0FBRyxLQUFLbDdFLEVBQUV0RixFQUFFcUYsRUFBRXhMLEdBQUcsTUFBTXdMLEVBQUUsS0FBSyxHQUFHQyxFQUFFeTZFLEdBQUcsS0FBS3o2RSxFQUFFdEYsRUFBRXFGLEVBQUV4TCxHQUFHLE1BQU13TCxFQUFFLEtBQUssR0FBR0MsRUFBRTA2RSxHQUFHLEtBQUsxNkUsRUFBRXRGLEVBQUU2MEUsR0FBRzcwRSxFQUFFbEosS0FBS3VPLEdBQUd3Z0MsRUFBRWhzQyxHQUFHLE1BQU13TCxFQUFFLE1BQU01SSxNQUFNeTNCLEVBQUUsSUFBSWwwQixFQUFFLEtBQU0sT0FBT3NGLEVBQUUsS0FBSyxFQUFFLE9BQU91Z0MsRUFBRXZnQyxFQUFFeE8sS0FBS2tKLEVBQUVzRixFQUFFeTFFLGFBQTJDb0YsR0FBRzk2RSxFQUFFQyxFQUFFdWdDLEVBQXJDN2xDLEVBQUVzRixFQUFFMnFELGNBQWNwcUIsRUFBRTdsQyxFQUFFNjBFLEdBQUdodkMsRUFBRTdsQyxHQUFjbkcsR0FBRyxLQUFLLEVBQUUsT0FBT2dzQyxFQUFFdmdDLEVBQUV4TyxLQUFLa0osRUFBRXNGLEVBQUV5MUUsYUFBMkN5RixHQUFHbjdFLEVBQUVDLEVBQUV1Z0MsRUFBckM3bEMsRUFBRXNGLEVBQUUycUQsY0FBY3BxQixFQUFFN2xDLEVBQUU2MEUsR0FBR2h2QyxFQUFFN2xDLEdBQWNuRyxHQUFHLEtBQUssRUFBd0IsR0FBdEJnbkYsR0FBR3Y3RSxHQUFHdWdDLEVBQUV2Z0MsRUFBRTJ3RSxZQUFlLE9BQU81d0UsR0FBRyxPQUFPd2dDLEVBQUUsTUFBTXBwQyxNQUFNeTNCLEVBQUUsTUFDM1ksR0FBOUcyUixFQUFFdmdDLEVBQUV5MUUsYUFBK0IvNkUsRUFBRSxRQUFwQkEsRUFBRXNGLEVBQUV3NEQsZUFBeUI5OUQsRUFBRWlVLFFBQVEsS0FBS3FpRSxHQUFHanhFLEVBQUVDLEdBQUdzeEUsR0FBR3R4RSxFQUFFdWdDLEVBQUUsS0FBS2hzQyxJQUFHZ3NDLEVBQUV2Z0MsRUFBRXc0RCxjQUFjN3BELFdBQWVqVSxFQUFFbTdFLEtBQUs3MUUsRUFBRTg4QixHQUFHLzhCLEVBQUVDLEVBQUV6TCxPQUFPLENBQXVGLElBQXJFd00sR0FBakJyRyxFQUFFc0YsRUFBRTgyRCxXQUFpQjBELFdBQVE0YSxHQUFHL3JDLEdBQUdycEMsRUFBRTgyRCxVQUFVMkQsY0FBY3pJLFlBQVltakIsR0FBR24xRSxFQUFFZSxFQUFFczBFLElBQUcsR0FBTXQwRSxFQUFFLENBQXFDLEdBQUcsT0FBdkNoQixFQUFFckYsRUFBRTRwRixpQ0FBMkMsSUFBSTVwRixFQUFFLEVBQUVBLEVBQUVxRixFQUFFbE0sT0FBTzZHLEdBQUcsR0FBRXFHLEVBQUVoQixFQUFFckYsSUFBS3M3RSw4QkFBOEJqMkUsRUFBRXJGLEVBQUUsR0FBR283RSxHQUFHM2hGLEtBQUs0TSxHQUFvQixJQUFqQnhNLEVBQUU4L0UsR0FBR3IwRSxFQUFFLEtBQUt1Z0MsRUFBRWhzQyxHQUFPeUwsRUFBRStyRSxNQUFNeDNFLEVBQUVBLEdBQUdBLEVBQUV3cEIsT0FBZSxFQUFUeHBCLEVBQUV3cEIsTUFBUyxLQUFLeHBCLEVBQUVBLEVBQUVzL0UsYUFBYTJHLEdBQUd6NkUsRUFBRUMsRUFBRXVnQyxFQUFFaHNDLEdBQUdzaEYsS0FBSzcxRSxFQUFFQSxFQUFFK3JFLE1BQU0sT0FBTy9yRSxFQUFFLEtBQUssRUFBRSxPQUFPODBFLEdBQUc5MEUsR0FBRyxPQUFPRCxHQUNuZjIxRSxHQUFHMTFFLEdBQUd1Z0MsRUFBRXZnQyxFQUFFeE8sS0FBS2tKLEVBQUVzRixFQUFFeTFFLGFBQWExMEUsRUFBRSxPQUFPaEIsRUFBRUEsRUFBRWsxRSxjQUFjLEtBQUt0MEQsRUFBRWptQixFQUFFazJELFNBQVN1YSxHQUFHNXFDLEVBQUU3bEMsR0FBR2ltQixFQUFFLEtBQUssT0FBTzVmLEdBQUdvcUUsR0FBRzVxQyxFQUFFeC9CLEtBQUtmLEVBQUUrZCxPQUFPLElBQUlrOUQsR0FBR2w3RSxFQUFFQyxHQUFHdzZFLEdBQUd6NkUsRUFBRUMsRUFBRTJnQixFQUFFcHNCLEdBQUd5TCxFQUFFK3JFLE1BQU0sS0FBSyxFQUFFLE9BQU8sT0FBT2hzRSxHQUFHMjFFLEdBQUcxMUUsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPODdFLEdBQUcvN0UsRUFBRUMsRUFBRXpMLEdBQUcsS0FBSyxFQUFFLE9BQU9tZ0YsR0FBRzEwRSxFQUFFQSxFQUFFODJELFVBQVUyRCxlQUFlbDZCLEVBQUV2Z0MsRUFBRXkxRSxhQUFhLE9BQU8xMUUsRUFBRUMsRUFBRStyRSxNQUFNcUksR0FBR3AwRSxFQUFFLEtBQUt1Z0MsRUFBRWhzQyxHQUFHaW1GLEdBQUd6NkUsRUFBRUMsRUFBRXVnQyxFQUFFaHNDLEdBQUd5TCxFQUFFK3JFLE1BQU0sS0FBSyxHQUFHLE9BQU94ckMsRUFBRXZnQyxFQUFFeE8sS0FBS2tKLEVBQUVzRixFQUFFeTFFLGFBQTJDZ0YsR0FBRzE2RSxFQUFFQyxFQUFFdWdDLEVBQXJDN2xDLEVBQUVzRixFQUFFMnFELGNBQWNwcUIsRUFBRTdsQyxFQUFFNjBFLEdBQUdodkMsRUFBRTdsQyxHQUFjbkcsR0FBRyxLQUFLLEVBQUUsT0FBT2ltRixHQUFHejZFLEVBQUVDLEVBQUVBLEVBQUV5MUUsYUFBYWxoRixHQUFHeUwsRUFBRStyRSxNQUFNLEtBQUssRUFDdGMsS0FBSyxHQUFHLE9BQU95TyxHQUFHejZFLEVBQUVDLEVBQUVBLEVBQUV5MUUsYUFBYTdrQixTQUFTcjhELEdBQUd5TCxFQUFFK3JFLE1BQU0sS0FBSyxHQUFHaHNFLEVBQUUsQ0FBQ3dnQyxFQUFFdmdDLEVBQUV4TyxLQUFLczlELFNBQVNwMEQsRUFBRXNGLEVBQUV5MUUsYUFBYTkwRCxFQUFFM2dCLEVBQUVpMUUsY0FBY2wwRSxFQUFFckcsRUFBRXZMLE1BQU0sSUFBSTBILEVBQUVtSixFQUFFeE8sS0FBS3M5RCxTQUFpRCxHQUF4Q3NkLEdBQUVvRCxHQUFHMzRFLEVBQUVpNUUsZUFBZWo1RSxFQUFFaTVFLGNBQWMvdUUsRUFBSyxPQUFPNGYsRUFBRSxHQUFHOXBCLEVBQUU4cEIsRUFBRXh4QixNQUEwRyxJQUFwRzRSLEVBQUUwbUUsR0FBRzV3RSxFQUFFa0ssR0FBRyxFQUF3RixHQUFyRixtQkFBb0J3L0IsRUFBRTZrRCxzQkFBc0I3a0QsRUFBRTZrRCxzQkFBc0J2dUYsRUFBRWtLLEdBQUcsY0FBcUIsR0FBRzRmLEVBQUVpd0MsV0FBV2wyRCxFQUFFazJELFdBQVcyYixHQUFFdGhELFFBQVEsQ0FBQ2pyQixFQUFFODhCLEdBQUcvOEIsRUFBRUMsRUFBRXpMLEdBQUcsTUFBTXdMLFFBQVEsSUFBYyxRQUFWbEosRUFBRW1KLEVBQUUrckUsU0FBaUJsMUUsRUFBRXloRSxPQUFPdDRELEdBQUcsT0FBT25KLEdBQUcsQ0FBQyxJQUFJc1gsRUFBRXRYLEVBQUVxNUUsYUFBYSxHQUFHLE9BQU8vaEUsRUFBRSxDQUFDd1MsRUFBRTlwQixFQUFFazFFLE1BQU0sSUFBSSxJQUFJbjRFLEVBQ3RmdWEsRUFBRWdpRSxhQUFhLE9BQU92OEUsR0FBRyxDQUFDLEdBQUdBLEVBQUV6QixVQUFVb3VDLEdBQUcsSUFBSzNzQyxFQUFFMjhFLGFBQWF4dkUsR0FBRyxDQUFDLElBQUlsSyxFQUFFc1osT0FBTXZjLEVBQUVxOUUsSUFBSSxFQUFFMThFLEdBQUdBLElBQUs0YixJQUFJLEVBQUVpaEUsR0FBR3Y2RSxFQUFFakQsSUFBSWlELEVBQUV1NUUsT0FBTzc3RSxFQUFnQixRQUFkWCxFQUFFaUQsRUFBRXdoRSxhQUFxQnprRSxFQUFFdzhFLE9BQU83N0UsR0FBR3c3RSxHQUFHbDVFLEVBQUV5aEUsT0FBTy9qRSxHQUFHNFosRUFBRWlpRSxPQUFPNzdFLEVBQUUsTUFBTVgsRUFBRUEsRUFBRXdYLFdBQVd1VixFQUFFLEtBQUs5cEIsRUFBRXNaLEtBQUl0WixFQUFFckYsT0FBT3dPLEVBQUV4TyxLQUFLLEtBQWFxRixFQUFFazFFLE1BQU0sR0FBRyxPQUFPcHJELEVBQUVBLEVBQUUyM0MsT0FBT3poRSxPQUFPLElBQUk4cEIsRUFBRTlwQixFQUFFLE9BQU84cEIsR0FBRyxDQUFDLEdBQUdBLElBQUkzZ0IsRUFBRSxDQUFDMmdCLEVBQUUsS0FBSyxNQUFrQixHQUFHLFFBQWY5cEIsRUFBRThwQixFQUFFa3pELFNBQW9CLENBQUNoOUUsRUFBRXloRSxPQUFPMzNDLEVBQUUyM0MsT0FBTzMzQyxFQUFFOXBCLEVBQUUsTUFBTThwQixFQUFFQSxFQUFFMjNDLE9BQU96aEUsRUFBRThwQixFQUFFNjVELEdBQUd6NkUsRUFBRUMsRUFBRXRGLEVBQUVrMkQsU0FBU3I4RCxHQUFHeUwsRUFBRUEsRUFBRStyRSxNQUFNLE9BQU8vckUsRUFBRSxLQUFLLEVBQUUsT0FBT3RGLEVBQUVzRixFQUFFeE8sS0FBc0IrdUMsR0FBakJ4L0IsRUFBRWYsRUFBRXkxRSxjQUFpQjdrQixTQUFTcWYsR0FBR2p3RSxFQUFFekwsR0FDbmRnc0MsRUFBRUEsRUFEb2Q3bEMsRUFBRTQxRSxHQUFHNTFFLEVBQ3BmcUcsRUFBRXNrRix3QkFBOEJybEYsRUFBRStkLE9BQU8sRUFBRXk4RCxHQUFHejZFLEVBQUVDLEVBQUV1Z0MsRUFBRWhzQyxHQUFHeUwsRUFBRStyRSxNQUFNLEtBQUssR0FBRyxPQUFnQmhyRSxFQUFFd3VFLEdBQVg3MEUsRUFBRXNGLEVBQUV4TyxLQUFZd08sRUFBRXkxRSxjQUE2QmlGLEdBQUczNkUsRUFBRUMsRUFBRXRGLEVBQXRCcUcsRUFBRXd1RSxHQUFHNzBFLEVBQUVsSixLQUFLdVAsR0FBY3cvQixFQUFFaHNDLEdBQUcsS0FBSyxHQUFHLE9BQU9xbUYsR0FBRzc2RSxFQUFFQyxFQUFFQSxFQUFFeE8sS0FBS3dPLEVBQUV5MUUsYUFBYWwxQyxFQUFFaHNDLEdBQUcsS0FBSyxHQUFHLE9BQU9nc0MsRUFBRXZnQyxFQUFFeE8sS0FBS2tKLEVBQUVzRixFQUFFeTFFLGFBQWEvNkUsRUFBRXNGLEVBQUUycUQsY0FBY3BxQixFQUFFN2xDLEVBQUU2MEUsR0FBR2h2QyxFQUFFN2xDLEdBQUcsT0FBT3FGLElBQUlBLEVBQUVzNEQsVUFBVSxLQUFLcjRELEVBQUVxNEQsVUFBVSxLQUFLcjRELEVBQUUrZCxPQUFPLEdBQUcvZCxFQUFFbVEsSUFBSSxFQUFFeThELEdBQUdyc0MsSUFBSXhnQyxHQUFFLEVBQUdrdEUsR0FBR2p0RSxJQUFJRCxHQUFFLEVBQUdrd0UsR0FBR2p3RSxFQUFFekwsR0FBR2srRSxHQUFHenlFLEVBQUV1Z0MsRUFBRTdsQyxHQUFHbzRFLEdBQUc5eUUsRUFBRXVnQyxFQUFFN2xDLEVBQUVuRyxHQUFHK21GLEdBQUcsS0FBS3Q3RSxFQUFFdWdDLEdBQUUsRUFBR3hnQyxFQUFFeEwsR0FBRyxLQUFLLEdBQUcsT0FBT29vRixHQUFHNThFLEVBQUVDLEVBQUV6TCxHQUFHLEtBQUssR0FBb0IsS0FBSyxHQUFHLE9BQU91bUYsR0FBRy82RSxFQUFFQyxFQUFFekwsR0FBRyxNQUFNNEMsTUFBTXkzQixFQUFFLElBQUk1dUIsRUFBRW1RLE9BYS9ldTBFLEdBQUdyeUYsVUFBVTAwRCxPQUFPLFNBQVNobkQsR0FBR3drRixHQUFHeGtGLEVBQUU5TSxLQUFLNHhGLGNBQWMsS0FBSyxPQUFPSCxHQUFHcnlGLFVBQVVpekYsUUFBUSxXQUFXLElBQUl2bEYsRUFBRTlNLEtBQUs0eEYsY0FBYzdrRixFQUFFRCxFQUFFMDZELGNBQWM4cEIsR0FBRyxLQUFLeGtGLEVBQUUsTUFBSyxXQUFXQyxFQUFFb3FFLElBQUksU0FFd0p4UixHQUFHLFNBQVM3NEQsR0FBTSxLQUFLQSxFQUFFb1EsTUFBZ0JnaUUsR0FBR3B5RSxFQUFFLEVBQVZreUUsTUFBZTlzQyxHQUFHcGxDLEVBQUUsS0FBSzg0RCxHQUFHLFNBQVM5NEQsR0FBTSxLQUFLQSxFQUFFb1EsTUFBZ0JnaUUsR0FBR3B5RSxFQUFFLFNBQVZreUUsTUFBc0I5c0MsR0FBR3BsQyxFQUFFLFlBQ25jKzRELEdBQUcsU0FBUy80RCxHQUFHLEdBQUcsS0FBS0EsRUFBRW9RLElBQUksQ0FBQyxJQUFJblEsRUFBRWl5RSxLQUFLMTlFLEVBQUUyOUUsR0FBR255RSxHQUFHb3lFLEdBQUdweUUsRUFBRXhMLEVBQUV5TCxHQUFHbWxDLEdBQUdwbEMsRUFBRXhMLEtBQUt3a0UsR0FBRyxTQUFTaDVELEVBQUVDLEdBQUcsT0FBT0EsS0FDN0Z5MkQsR0FBRyxTQUFTMTJELEVBQUVDLEVBQUV6TCxHQUFHLE9BQU95TCxHQUFHLElBQUssUUFBeUIsR0FBakJ1d0QsR0FBR3h3RCxFQUFFeEwsR0FBR3lMLEVBQUV6TCxFQUFFc0QsS0FBUSxVQUFVdEQsRUFBRS9DLE1BQU0sTUFBTXdPLEVBQUUsQ0FBQyxJQUFJekwsRUFBRXdMLEVBQUV4TCxFQUFFaWlFLFlBQVlqaUUsRUFBRUEsRUFBRWlpRSxXQUFzRixJQUEzRWppRSxFQUFFQSxFQUFFZ3hGLGlCQUFpQixjQUFjaHJGLEtBQUtJLFVBQVUsR0FBR3FGLEdBQUcsbUJBQXVCQSxFQUFFLEVBQUVBLEVBQUV6TCxFQUFFVixPQUFPbU0sSUFBSSxDQUFDLElBQUl1Z0MsRUFBRWhzQyxFQUFFeUwsR0FBRyxHQUFHdWdDLElBQUl4Z0MsR0FBR3dnQyxFQUFFaWxELE9BQU96bEYsRUFBRXlsRixLQUFLLENBQUMsSUFBSTlxRixFQUFFcThELEdBQUd4MkIsR0FBRyxJQUFJN2xDLEVBQUUsTUFBTXZELE1BQU15M0IsRUFBRSxLQUFLOGdDLEVBQUdudkIsR0FBR2d3QixHQUFHaHdCLEVBQUU3bEMsS0FBSyxNQUFNLElBQUssV0FBVzQyRCxHQUFHdnhELEVBQUV4TCxHQUFHLE1BQU0sSUFBSyxTQUFtQixPQUFWeUwsRUFBRXpMLEVBQUVwRixRQUFlNGhFLEdBQUdoeEQsSUFBSXhMLEVBQUV3b0YsU0FBUy84RSxHQUFFLEtBQU1rM0QsR0EvQ3JTLFNBQVluM0QsRUFBRUMsR0FBRyxJQUFJekwsRUFBRTByRixHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPbGdGLEVBQUVDLEdBQUcsUUFBWSxLQUFKaWdGLEdBQUUxckYsS0FBVWtzRixLQUFLdFIsUUFnRDdMaFksR0FBRyxTQUFTcDNELEVBQUVDLEVBQUV6TCxFQUFFZ3NDLEVBQUU3bEMsR0FBRyxJQUFJcUcsRUFBRWsvRSxHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPaFIsR0FBRyxHQUFHbHZFLEVBQUVsTyxLQUFLLEtBQUttTyxFQUFFekwsRUFBRWdzQyxFQUFFN2xDLElBQUksUUFBWSxLQUFKdWxGLEdBQUVsL0UsS0FBVTAvRSxLQUFLdFIsUUFBUS9YLEdBQUcsV0FBVyxJQUFPLEdBQUY2b0IsTUFoRC9ILFdBQWMsR0FBRyxPQUFPZ0IsR0FBRyxDQUFDLElBQUlsaEYsRUFBRWtoRixHQUFHQSxHQUFHLEtBQUtsaEYsRUFBRWxQLFNBQVEsU0FBU2tQLEdBQUdBLEVBQUUyOEQsY0FBYyxHQUFHMzhELEVBQUUwOEQsYUFBYW1sQixHQUFHN2hGLEVBQUU2SixTQUFPdWxFLEtBZ0RzQnNXLEdBQUt2RCxPQUFPN3FCLEdBQUcsU0FBU3QzRCxFQUFFQyxHQUFHLElBQUl6TCxFQUFFMHJGLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU9sZ0YsRUFBRUMsR0FBRyxRQUFZLEtBQUppZ0YsR0FBRTFyRixLQUFVa3NGLEtBQUt0UixRQUErSSxJQUFpRHVXLEdBQUcsQ0FBQ0Msd0JBQXdCdnJCLEdBQUd3ckIsV0FBVyxFQUFFam5GLFFBQVEsU0FBU2tuRixvQkFBb0IsYUFDdmVDLEdBQUcsQ0FBQ0YsV0FBV0YsR0FBR0UsV0FBV2puRixRQUFRK21GLEdBQUcvbUYsUUFBUWtuRixvQkFBb0JILEdBQUdHLG9CQUFvQkUsZUFBZUwsR0FBR0ssZUFBZUMsa0JBQWtCLEtBQUtDLDRCQUE0QixLQUFLQyw0QkFBNEIsS0FBS0MsY0FBYyxLQUFLQyx3QkFBd0IsS0FBS0Msd0JBQXdCLEtBQUtDLG1CQUFtQixLQUFLQyxlQUFlLEtBQUtDLHFCQUFxQno1QixFQUFHbXBCLHVCQUF1QnVRLHdCQUF3QixTQUFTMW1GLEdBQVcsT0FBTyxRQUFmQSxFQTlPOU4sU0FBWUEsR0FBVyxHQUFSQSxFQUR0TixTQUFZQSxHQUFHLElBQUlDLEVBQUVELEVBQUVzNEQsVUFBVSxJQUFJcjRELEVBQUUsQ0FBUyxHQUFHLFFBQVhBLEVBQUVvNEQsR0FBR3I0RCxJQUFlLE1BQU01SSxNQUFNeTNCLEVBQUUsTUFBTSxPQUFPNXVCLElBQUlELEVBQUUsS0FBS0EsRUFBRSxJQUFJLElBQUl4TCxFQUFFd0wsRUFBRXdnQyxFQUFFdmdDLElBQUksQ0FBQyxJQUFJdEYsRUFBRW5HLEVBQUUrakUsT0FBTyxHQUFHLE9BQU81OUQsRUFBRSxNQUFNLElBQUlxRyxFQUFFckcsRUFBRTI5RCxVQUFVLEdBQUcsT0FBT3QzRCxFQUFFLENBQVksR0FBRyxRQUFkdy9CLEVBQUU3bEMsRUFBRTQ5RCxRQUFtQixDQUFDL2pFLEVBQUVnc0MsRUFBRSxTQUFTLE1BQU0sR0FBRzdsQyxFQUFFcXhFLFFBQVFockUsRUFBRWdyRSxNQUFNLENBQUMsSUFBSWhyRSxFQUFFckcsRUFBRXF4RSxNQUFNaHJFLEdBQUcsQ0FBQyxHQUFHQSxJQUFJeE0sRUFBRSxPQUFPbWtFLEdBQUdoK0QsR0FBR3FGLEVBQUUsR0FBR2dCLElBQUl3L0IsRUFBRSxPQUFPbTRCLEdBQUdoK0QsR0FBR3NGLEVBQUVlLEVBQUVBLEVBQUU4eUUsUUFBUSxNQUFNMThFLE1BQU15M0IsRUFBRSxNQUFPLEdBQUdyNkIsRUFBRStqRSxTQUFTLzNCLEVBQUUrM0IsT0FBTy9qRSxFQUFFbUcsRUFBRTZsQyxFQUFFeC9CLE1BQU0sQ0FBQyxJQUFJLElBQUk0ZixHQUFFLEVBQUc5cEIsRUFBRTZELEVBQUVxeEUsTUFBTWwxRSxHQUFHLENBQUMsR0FBR0EsSUFBSXRDLEVBQUUsQ0FBQ29zQixHQUFFLEVBQUdwc0IsRUFBRW1HLEVBQUU2bEMsRUFBRXgvQixFQUFFLE1BQU0sR0FBR2xLLElBQUkwcEMsRUFBRSxDQUFDNWYsR0FBRSxFQUFHNGYsRUFBRTdsQyxFQUFFbkcsRUFBRXdNLEVBQUUsTUFBTWxLLEVBQUVBLEVBQUVnOUUsUUFBUSxJQUFJbHpELEVBQUUsQ0FBQyxJQUFJOXBCLEVBQUVrSyxFQUFFZ3JFLE1BQU1sMUUsR0FBRyxDQUFDLEdBQUdBLElBQzVmdEMsRUFBRSxDQUFDb3NCLEdBQUUsRUFBR3BzQixFQUFFd00sRUFBRXcvQixFQUFFN2xDLEVBQUUsTUFBTSxHQUFHN0QsSUFBSTBwQyxFQUFFLENBQUM1ZixHQUFFLEVBQUc0ZixFQUFFeC9CLEVBQUV4TSxFQUFFbUcsRUFBRSxNQUFNN0QsRUFBRUEsRUFBRWc5RSxRQUFRLElBQUlsekQsRUFBRSxNQUFNeHBCLE1BQU15M0IsRUFBRSxPQUFRLEdBQUdyNkIsRUFBRThqRSxZQUFZOTNCLEVBQUUsTUFBTXBwQyxNQUFNeTNCLEVBQUUsTUFBTyxHQUFHLElBQUlyNkIsRUFBRTRiLElBQUksTUFBTWhaLE1BQU15M0IsRUFBRSxNQUFNLE9BQU9yNkIsRUFBRXVpRSxVQUFVN3JDLFVBQVUxMkIsRUFBRXdMLEVBQUVDLEVBQW1CMjBDLENBQUc1MEMsSUFBT0EsRUFBRSxPQUFPLEtBQUssSUFBSSxJQUFJQyxFQUFFRCxJQUFJLENBQUMsR0FBRyxJQUFJQyxFQUFFbVEsS0FBSyxJQUFJblEsRUFBRW1RLElBQUksT0FBT25RLEVBQUUsR0FBR0EsRUFBRStyRSxNQUFNL3JFLEVBQUUrckUsTUFBTXpULE9BQU90NEQsRUFBRUEsRUFBRUEsRUFBRStyRSxVQUFVLENBQUMsR0FBRy9yRSxJQUFJRCxFQUFFLE1BQU0sTUFBTUMsRUFBRTZ6RSxTQUFTLENBQUMsSUFBSTd6RSxFQUFFczRELFFBQVF0NEQsRUFBRXM0RCxTQUFTdjRELEVBQUUsT0FBTyxLQUFLQyxFQUFFQSxFQUFFczRELE9BQU90NEQsRUFBRTZ6RSxRQUFRdmIsT0FBT3Q0RCxFQUFFczRELE9BQU90NEQsRUFBRUEsRUFBRTZ6RSxTQUFTLE9BQU8sS0E4T3JDNlMsQ0FBRzNtRixJQUFtQixLQUFLQSxFQUFFKzJELFdBQVc2dUIsd0JBQXdCRCxHQUFHQyx5QkFSL0ksV0FBYyxPQUFPLE1BUzdXZ0IsNEJBQTRCLEtBQUtDLGdCQUFnQixLQUFLQyxhQUFhLEtBQUtDLGtCQUFrQixLQUFLQyxnQkFBZ0IsTUFBTSxHQUFHLG9CQUFxQkMsK0JBQStCLENBQUMsSUFBSUMsR0FBR0QsK0JBQStCLElBQUlDLEdBQUdDLFlBQVlELEdBQUdFLGNBQWMsSUFBSS9aLEdBQUc2WixHQUFHRyxPQUFPdEIsSUFBSXpZLEdBQUc0WixHQUFHLE1BQU1sbkYsTUFFM1IxVCxFQUFRMDZELE9BQU8sU0FBU2huRCxFQUFFQyxFQUFFekwsR0FBRyxJQUFJdXdGLEdBQUc5a0YsR0FBRyxNQUFNN0ksTUFBTXkzQixFQUFFLE1BQU0sT0FBT20yRCxHQUFHLEtBQUtobEYsRUFBRUMsR0FBRSxFQUFHekwsa0NDclNuRixTQUFTOHlGLElBRVAsR0FDNEMsb0JBQW5DTCxnQ0FDNEMsbUJBQTVDQSwrQkFBK0JLLFNBY3hDLElBRUVMLCtCQUErQkssU0FBU0EsR0FDeEMsTUFBT2o0RixHQUdQNFAsUUFBUTVJLE1BQU1oSCxJQU9oQmk0RixHQUNBajdGLEVBQU9DLFFBQVUsRUFBakIsaUNDekJXLElBQUkyVCxFQUFFLG1CQUFvQmtZLFFBQVFBLE9BQU9nMkMsSUFBSTM1RCxFQUFFeUwsRUFBRWtZLE9BQU9nMkMsSUFBSSxpQkFBaUIsTUFBTTN0QixFQUFFdmdDLEVBQUVrWSxPQUFPZzJDLElBQUksZ0JBQWdCLE1BQU14ekQsRUFBRXNGLEVBQUVrWSxPQUFPZzJDLElBQUksa0JBQWtCLE1BQU1udEQsRUFBRWYsRUFBRWtZLE9BQU9nMkMsSUFBSSxxQkFBcUIsTUFBTXZ0QyxFQUFFM2dCLEVBQUVrWSxPQUFPZzJDLElBQUksa0JBQWtCLE1BQU1yM0QsRUFBRW1KLEVBQUVrWSxPQUFPZzJDLElBQUksa0JBQWtCLE1BQU0vL0MsRUFBRW5PLEVBQUVrWSxPQUFPZzJDLElBQUksaUJBQWlCLE1BQU10NkQsRUFBRW9NLEVBQUVrWSxPQUFPZzJDLElBQUksb0JBQW9CLE1BQU01MUMsRUFBRXRZLEVBQUVrWSxPQUFPZzJDLElBQUkseUJBQXlCLE1BQU03L0MsRUFBRXJPLEVBQUVrWSxPQUFPZzJDLElBQUkscUJBQXFCLE1BQU05a0IsRUFBRXBwQyxFQUFFa1ksT0FBT2cyQyxJQUFJLGtCQUFrQixNQUFNeDhCLEVBQUUxeEIsRUFDcGZrWSxPQUFPZzJDLElBQUksdUJBQXVCLE1BQU1ob0IsRUFBRWxtQyxFQUFFa1ksT0FBT2cyQyxJQUFJLGNBQWMsTUFBTXY4QixFQUFFM3hCLEVBQUVrWSxPQUFPZzJDLElBQUksY0FBYyxNQUFNNXlELEVBQUUwRSxFQUFFa1ksT0FBT2cyQyxJQUFJLGVBQWUsTUFBTTF0QixFQUFFeGdDLEVBQUVrWSxPQUFPZzJDLElBQUkscUJBQXFCLE1BQU01b0MsRUFBRXRsQixFQUFFa1ksT0FBT2cyQyxJQUFJLG1CQUFtQixNQUFNdC9CLEVBQUU1dUIsRUFBRWtZLE9BQU9nMkMsSUFBSSxlQUFlLE1BQ2xRLFNBQVNsdEIsRUFBRWpoQyxHQUFHLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJbXFFLEVBQUVucUUsRUFBRTh1RCxTQUFTLE9BQU9xYixHQUFHLEtBQUszMUUsRUFBRSxPQUFPd0wsRUFBRUEsRUFBRXZPLE1BQVEsS0FBS29DLEVBQUUsS0FBSzBrQixFQUFFLEtBQUs1ZCxFQUFFLEtBQUtpbUIsRUFBRSxLQUFLNWYsRUFBRSxLQUFLcW9DLEVBQUUsT0FBT3JwQyxFQUFFLFFBQVEsT0FBT0EsRUFBRUEsR0FBR0EsRUFBRTh1RCxVQUFZLEtBQUsxZ0QsRUFBRSxLQUFLRSxFQUFFLEtBQUtzakIsRUFBRSxLQUFLdVUsRUFBRSxLQUFLcnZDLEVBQUUsT0FBT2tKLEVBQUUsUUFBUSxPQUFPbXFFLEdBQUcsS0FBSzNwQyxFQUFFLE9BQU8ycEMsSUFBSSxTQUFTbmhELEVBQUVocEIsR0FBRyxPQUFPaWhDLEVBQUVqaEMsS0FBS3VZLEVBQUVqc0IsRUFBUWk3RixVQUFVMXpGLEVBQUV2SCxFQUFRazdGLGVBQWVqdkUsRUFBRWpzQixFQUFRbTdGLGdCQUFnQnI1RSxFQUFFOWhCLEVBQVFvN0YsZ0JBQWdCNXdGLEVBQUV4SyxFQUFRcTdGLFFBQVFuekYsRUFBRWxJLEVBQVF5NkQsV0FBV3o0QyxFQUFFaGlCLEVBQVFzN0YsU0FBU2p0RixFQUFFck8sRUFBUXU3RixLQUFLajJELEVBQUV0bEMsRUFBUTI2RCxLQUFLOWdCLEVBQUU3NUMsRUFBUXc3RixPQUFPdG5ELEVBQ2hmbDBDLEVBQVF5N0YsU0FBU25uRSxFQUFFdDBCLEVBQVEwN0YsV0FBV2huRixFQUFFMVUsRUFBUTI3RixTQUFTNStDLEVBQUUvOEMsRUFBUTQ3RixZQUFZLFNBQVNsb0YsR0FBRyxPQUFPZ3BCLEVBQUVocEIsSUFBSWloQyxFQUFFamhDLEtBQUtuTSxHQUFHdkgsRUFBUTY3RixpQkFBaUJuL0QsRUFBRTE4QixFQUFRODdGLGtCQUFrQixTQUFTcG9GLEdBQUcsT0FBT2loQyxFQUFFamhDLEtBQUtvTyxHQUFHOWhCLEVBQVErN0Ysa0JBQWtCLFNBQVNyb0YsR0FBRyxPQUFPaWhDLEVBQUVqaEMsS0FBS2xKLEdBQUd4SyxFQUFRZzhGLFVBQVUsU0FBU3RvRixHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUU4dUQsV0FBV3Q2RCxHQUFHbEksRUFBUWk4RixhQUFhLFNBQVN2b0YsR0FBRyxPQUFPaWhDLEVBQUVqaEMsS0FBS3NPLEdBQUdoaUIsRUFBUWs4RixXQUFXLFNBQVN4b0YsR0FBRyxPQUFPaWhDLEVBQUVqaEMsS0FBS3JGLEdBQUdyTyxFQUFRbThGLE9BQU8sU0FBU3pvRixHQUFHLE9BQU9paEMsRUFBRWpoQyxLQUFLNHhCLEdBQ3pkdGxDLEVBQVF3NkQsT0FBTyxTQUFTOW1ELEdBQUcsT0FBT2loQyxFQUFFamhDLEtBQUttbUMsR0FBRzc1QyxFQUFRbzhGLFNBQVMsU0FBUzFvRixHQUFHLE9BQU9paEMsRUFBRWpoQyxLQUFLd2dDLEdBQUdsMEMsRUFBUXE4RixXQUFXLFNBQVMzb0YsR0FBRyxPQUFPaWhDLEVBQUVqaEMsS0FBSzRnQixHQUFHdDBCLEVBQVFzOEYsYUFBYSxTQUFTNW9GLEdBQUcsT0FBT2loQyxFQUFFamhDLEtBQUtnQixHQUFHMVUsRUFBUXU4RixXQUFXLFNBQVM3b0YsR0FBRyxPQUFPaWhDLEVBQUVqaEMsS0FBS3FwQyxHQUN6Ty84QyxFQUFRdzhGLG1CQUFtQixTQUFTOW9GLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsbUJBQW9CQSxHQUFHQSxJQUFJckYsR0FBR3FGLElBQUl1WSxHQUFHdlksSUFBSTRnQixHQUFHNWdCLElBQUlnQixHQUFHaEIsSUFBSXFwQyxHQUFHcnBDLElBQUkyeEIsR0FBRyxpQkFBa0IzeEIsR0FBRyxPQUFPQSxJQUFJQSxFQUFFOHVELFdBQVdsOUIsR0FBRzV4QixFQUFFOHVELFdBQVczb0IsR0FBR25tQyxFQUFFOHVELFdBQVdoNEQsR0FBR2tKLEVBQUU4dUQsV0FBVzFnRCxHQUFHcE8sRUFBRTh1RCxXQUFXeGdELEdBQUd0TyxFQUFFOHVELFdBQVdydUIsR0FBR3pnQyxFQUFFOHVELFdBQVd2cEMsR0FBR3ZsQixFQUFFOHVELFdBQVdqZ0MsR0FBRzd1QixFQUFFOHVELFdBQVd2ekQsSUFBSWpQLEVBQVF5OEYsT0FBTzluRCwrQkNYalU1MEMsRUFBT0MsUUFBVSxFQUFqQixtQ0NLVyxJQUFJdUgsRUFBRSxFQUFRLE1BQWlCeWEsRUFBRSxNQUFNKzZCLEVBQUUsTUFBTS84QyxFQUFRczdGLFNBQVMsTUFBTXQ3RixFQUFRMDdGLFdBQVcsTUFBTTE3RixFQUFReTdGLFNBQVMsTUFBTSxJQUFJcDJELEVBQUUsTUFBTXdVLEVBQUUsTUFBTXZVLEVBQUUsTUFBTXRsQyxFQUFRMjdGLFNBQVMsTUFBTSxJQUFJOWQsRUFBRSxNQUFNNXVFLEVBQUUsTUFDcE0sR0FBRyxtQkFBb0I0YyxRQUFRQSxPQUFPZzJDLElBQUksQ0FBQyxJQUFJMXRCLEVBQUV0b0IsT0FBT2cyQyxJQUFJNy9DLEVBQUVteUIsRUFBRSxpQkFBaUI0SSxFQUFFNUksRUFBRSxnQkFBZ0JuMEMsRUFBUXM3RixTQUFTbm5ELEVBQUUsa0JBQWtCbjBDLEVBQVEwN0YsV0FBV3ZuRCxFQUFFLHFCQUFxQm4wQyxFQUFReTdGLFNBQVN0bkQsRUFBRSxrQkFBa0I5TyxFQUFFOE8sRUFBRSxrQkFBa0IwRixFQUFFMUYsRUFBRSxpQkFBaUI3TyxFQUFFNk8sRUFBRSxxQkFBcUJuMEMsRUFBUTI3RixTQUFTeG5ELEVBQUUsa0JBQWtCMHBDLEVBQUUxcEMsRUFBRSxjQUFjbGxDLEVBQUVrbEMsRUFBRSxjQUFjLElBQUlsYixFQUFFLG1CQUFvQnBOLFFBQVFBLE9BQU8vTSxTQUN0UixTQUFTNjFCLEVBQUVqaEMsR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFeEwsRUFBRSxFQUFFQSxFQUFFMkcsVUFBVXJILE9BQU9VLElBQUl5TCxHQUFHLFdBQVcxUixtQkFBbUI0TSxVQUFVM0csSUFBSSxNQUFNLHlCQUF5QndMLEVBQUUsV0FBV0MsRUFBRSxpSEFDcFUsSUFBSStvQixFQUFFLENBQUMrb0QsVUFBVSxXQUFXLE9BQU0sR0FBSU8sbUJBQW1CLGFBQWFELG9CQUFvQixhQUFhSixnQkFBZ0IsY0FBY2hwRCxFQUFFLEdBQUcsU0FBUzlrQixFQUFFbkUsRUFBRUMsRUFBRXpMLEdBQUd0QixLQUFLMjNCLE1BQU03cUIsRUFBRTlNLEtBQUtkLFFBQVE2TixFQUFFL00sS0FBSzArRSxLQUFLM29ELEVBQUUvMUIsS0FBS3kvRSxRQUFRbitFLEdBQUd3MEIsRUFDcE4sU0FBU3NqQyxLQUE2QixTQUFTL3pCLEVBQUV2NEIsRUFBRUMsRUFBRXpMLEdBQUd0QixLQUFLMjNCLE1BQU03cUIsRUFBRTlNLEtBQUtkLFFBQVE2TixFQUFFL00sS0FBSzArRSxLQUFLM29ELEVBQUUvMUIsS0FBS3kvRSxRQUFRbitFLEdBQUd3MEIsRUFEc0c3a0IsRUFBRTdSLFVBQVU4eEYsaUJBQWlCLEdBQUdqZ0YsRUFBRTdSLFVBQVUwMkYsU0FBUyxTQUFTaHBGLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTTVJLE1BQU02cEMsRUFBRSxLQUFLL3RDLEtBQUt5L0UsUUFBUVYsZ0JBQWdCLytFLEtBQUs4TSxFQUFFQyxFQUFFLGFBQWFrRSxFQUFFN1IsVUFBVTIyRixZQUFZLFNBQVNqcEYsR0FBRzlNLEtBQUt5L0UsUUFBUUwsbUJBQW1CcC9FLEtBQUs4TSxFQUFFLGdCQUNuZHNzRCxFQUFFaDZELFVBQVU2UixFQUFFN1IsVUFBc0YsSUFBSW9pQixFQUFFNmpCLEVBQUVqbUMsVUFBVSxJQUFJZzZELEVBQUU1M0MsRUFBRWhWLFlBQVk2NEIsRUFBRTFrQyxFQUFFNmdCLEVBQUV2USxFQUFFN1IsV0FBV29pQixFQUFFKzlELHNCQUFxQixFQUFHLElBQUk5SSxFQUFFLENBQUN6K0MsUUFBUSxNQUFNa2hELEVBQUVsekUsT0FBTzVHLFVBQVVtTixlQUFlNHNFLEVBQUUsQ0FBQ3I3RSxLQUFJLEVBQUdzaUYsS0FBSSxFQUFHNFYsUUFBTyxFQUFHQyxVQUFTLEdBQ2hTLFNBQVMzZSxFQUFFeHFFLEVBQUVDLEVBQUV6TCxHQUFHLElBQUltRyxFQUFFNmxDLEVBQUUsR0FBR3B5QixFQUFFLEtBQUt0WCxFQUFFLEtBQUssR0FBRyxNQUFNbUosRUFBRSxJQUFJdEYsVUFBSyxJQUFTc0YsRUFBRXF6RSxNQUFNeDhFLEVBQUVtSixFQUFFcXpFLFVBQUssSUFBU3J6RSxFQUFFalAsTUFBTW9kLEVBQUUsR0FBR25PLEVBQUVqUCxLQUFLaVAsRUFBRW1zRSxFQUFFNzBFLEtBQUswSSxFQUFFdEYsS0FBSzB4RSxFQUFFNXNFLGVBQWU5RSxLQUFLNmxDLEVBQUU3bEMsR0FBR3NGLEVBQUV0RixJQUFJLElBQUlpbUIsRUFBRXpsQixVQUFVckgsT0FBTyxFQUFFLEdBQUcsSUFBSThzQixFQUFFNGYsRUFBRXF3QixTQUFTcjhELE9BQU8sR0FBRyxFQUFFb3NCLEVBQUUsQ0FBQyxJQUFJLElBQUk1ZixFQUFFbEwsTUFBTThxQixHQUFHckksRUFBRSxFQUFFQSxFQUFFcUksRUFBRXJJLElBQUl2WCxFQUFFdVgsR0FBR3BkLFVBQVVvZCxFQUFFLEdBQUdpb0IsRUFBRXF3QixTQUFTN3ZELEVBQUUsR0FBR2hCLEdBQUdBLEVBQUUrbEQsYUFBYSxJQUFJcHJELEtBQUtpbUIsRUFBRTVnQixFQUFFK2xELGtCQUFlLElBQVN2bEIsRUFBRTdsQyxLQUFLNmxDLEVBQUU3bEMsR0FBR2ltQixFQUFFam1CLElBQUksTUFBTSxDQUFDbTBELFNBQVN4Z0QsRUFBRTdjLEtBQUt1TyxFQUFFaFAsSUFBSW9kLEVBQUVrbEUsSUFBSXg4RSxFQUFFK3pCLE1BQU0yVixFQUFFK3lDLE9BQU81SixFQUFFeitDLFNBQ3hVLFNBQVN5L0MsRUFBRTNxRSxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUU4dUQsV0FBV3hnRCxFQUFxRyxJQUFJaStELEVBQUUsT0FBTyxTQUFTQyxFQUFFeHNFLEVBQUVDLEdBQUcsTUFBTSxpQkFBa0JELEdBQUcsT0FBT0EsR0FBRyxNQUFNQSxFQUFFaFAsSUFBN0ssU0FBZ0JnUCxHQUFHLElBQUlDLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxNQUFNLE1BQU0sSUFBSUQsRUFBRXpKLFFBQVEsU0FBUSxTQUFTeUosR0FBRyxPQUFPQyxFQUFFRCxNQUFtRnU4QixDQUFPLEdBQUd2OEIsRUFBRWhQLEtBQUtpUCxFQUFFOU0sU0FBUyxJQUM1VyxTQUFTMFcsRUFBRTdKLEVBQUVDLEVBQUV6TCxFQUFFbUcsRUFBRTZsQyxHQUFHLElBQUlweUIsU0FBU3BPLEVBQUssY0FBY29PLEdBQUcsWUFBWUEsSUFBRXBPLEVBQUUsTUFBSyxJQUFJbEosR0FBRSxFQUFHLEdBQUcsT0FBT2tKLEVBQUVsSixHQUFFLE9BQVEsT0FBT3NYLEdBQUcsSUFBSyxTQUFTLElBQUssU0FBU3RYLEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPa0osRUFBRTh1RCxVQUFVLEtBQUt4Z0QsRUFBRSxLQUFLKzZCLEVBQUV2eUMsR0FBRSxHQUFJLEdBQUdBLEVBQUUsT0FBVzBwQyxFQUFFQSxFQUFOMXBDLEVBQUVrSixHQUFTQSxFQUFFLEtBQUtyRixFQUFFLElBQUk2eEUsRUFBRTExRSxFQUFFLEdBQUc2RCxFQUFFN0UsTUFBTTRDLFFBQVE4bkMsSUFBSWhzQyxFQUFFLEdBQUcsTUFBTXdMLElBQUl4TCxFQUFFd0wsRUFBRXpKLFFBQVFnMkUsRUFBRSxPQUFPLEtBQUsxaUUsRUFBRTIyQixFQUFFdmdDLEVBQUV6TCxFQUFFLElBQUcsU0FBU3dMLEdBQUcsT0FBT0EsTUFBSyxNQUFNd2dDLElBQUltcUMsRUFBRW5xQyxLQUFLQSxFQUQvVyxTQUFXeGdDLEVBQUVDLEdBQUcsTUFBTSxDQUFDNnVELFNBQVN4Z0QsRUFBRTdjLEtBQUt1TyxFQUFFdk8sS0FBS1QsSUFBSWlQLEVBQUVxekUsSUFBSXR6RSxFQUFFc3pFLElBQUl6b0QsTUFBTTdxQixFQUFFNnFCLE1BQU0wb0QsT0FBT3Z6RSxFQUFFdXpFLFFBQzRSOUksQ0FBRWpxQyxFQUFFaHNDLElBQUlnc0MsRUFBRXh2QyxLQUFLOEYsR0FBR0EsRUFBRTlGLE1BQU13dkMsRUFBRXh2QyxJQUFJLElBQUksR0FBR3d2QyxFQUFFeHZDLEtBQUt1RixRQUFRZzJFLEVBQUUsT0FBTyxLQUFLdnNFLElBQUlDLEVBQUU3TCxLQUFLb3NDLElBQUksRUFBeUIsR0FBdkIxcEMsRUFBRSxFQUFFNkQsRUFBRSxLQUFLQSxFQUFFLElBQUlBLEVBQUUsSUFBTzdFLE1BQU00QyxRQUFRc0gsR0FBRyxJQUFJLElBQUk0Z0IsRUFDemYsRUFBRUEsRUFBRTVnQixFQUFFbE0sT0FBTzhzQixJQUFJLENBQVEsSUFBSTVmLEVBQUVyRyxFQUFFNnhFLEVBQWZwK0QsRUFBRXBPLEVBQUU0Z0IsR0FBZUEsR0FBRzlwQixHQUFHK1MsRUFBRXVFLEVBQUVuTyxFQUFFekwsRUFBRXdNLEVBQUV3L0IsUUFBUSxHQUFHeC9CLEVBTmhFLFNBQVdoQixHQUFHLE9BQUcsT0FBT0EsR0FBRyxpQkFBa0JBLEVBQVMsS0FBc0MsbUJBQWpDQSxFQUFFdWxCLEdBQUd2bEIsRUFBRXVsQixJQUFJdmxCLEVBQUUsZUFBMENBLEVBQUUsS0FNbEQ2dUIsQ0FBRTd1QixHQUFHLG1CQUFvQmdCLEVBQUUsSUFBSWhCLEVBQUVnQixFQUFFekosS0FBS3lJLEdBQUc0Z0IsRUFBRSxJQUFJeFMsRUFBRXBPLEVBQUVxTCxRQUFRMWQsTUFBNkJtSixHQUFHK1MsRUFBMUJ1RSxFQUFFQSxFQUFFaGYsTUFBMEI2USxFQUFFekwsRUFBdEJ3TSxFQUFFckcsRUFBRTZ4RSxFQUFFcCtELEVBQUV3UyxLQUFrQjRmLFFBQVEsR0FBRyxXQUFXcHlCLEVBQUUsTUFBTW5PLEVBQUUsR0FBR0QsRUFBRTVJLE1BQU02cEMsRUFBRSxHQUFHLG9CQUFvQmhoQyxFQUFFLHFCQUFxQi9HLE9BQU9DLEtBQUs2RyxHQUFHdEUsS0FBSyxNQUFNLElBQUl1RSxJQUFJLE9BQU9uSixFQUFFLFNBQVMrb0IsRUFBRTdmLEVBQUVDLEVBQUV6TCxHQUFHLEdBQUcsTUFBTXdMLEVBQUUsT0FBT0EsRUFBRSxJQUFJckYsRUFBRSxHQUFHNmxDLEVBQUUsRUFBbUQsT0FBakQzMkIsRUFBRTdKLEVBQUVyRixFQUFFLEdBQUcsSUFBRyxTQUFTcUYsR0FBRyxPQUFPQyxFQUFFMUksS0FBSy9DLEVBQUV3TCxFQUFFd2dDLFFBQWM3bEMsRUFDMVosU0FBUyt2RSxFQUFFMXFFLEdBQUcsSUFBSSxJQUFJQSxFQUFFb3BGLFFBQVEsQ0FBQyxJQUFJbnBGLEVBQUVELEVBQUVxcEYsUUFBUXBwRixFQUFFQSxJQUFJRCxFQUFFb3BGLFFBQVEsRUFBRXBwRixFQUFFcXBGLFFBQVFwcEYsRUFBRUEsRUFBRXZNLE1BQUssU0FBU3VNLEdBQUcsSUFBSUQsRUFBRW9wRixVQUFVbnBGLEVBQUVBLEVBQUVxcEYsUUFBUXRwRixFQUFFb3BGLFFBQVEsRUFBRXBwRixFQUFFcXBGLFFBQVFwcEYsTUFBSSxTQUFTQSxHQUFHLElBQUlELEVBQUVvcEYsVUFBVXBwRixFQUFFb3BGLFFBQVEsRUFBRXBwRixFQUFFcXBGLFFBQVFwcEYsTUFBSyxHQUFHLElBQUlELEVBQUVvcEYsUUFBUSxPQUFPcHBGLEVBQUVxcEYsUUFBUSxNQUFNcnBGLEVBQUVxcEYsUUFBUyxJQUFJcDhELEVBQUUsQ0FBQy9CLFFBQVEsTUFBTSxTQUFTaHFCLElBQUksSUFBSWxCLEVBQUVpdEIsRUFBRS9CLFFBQVEsR0FBRyxPQUFPbHJCLEVBQUUsTUFBTTVJLE1BQU02cEMsRUFBRSxNQUFNLE9BQU9qaEMsRUFBRSxJQUFJb3BCLEVBQUUsQ0FBQytzRCx1QkFBdUJscEQsRUFBRXNpRCx3QkFBd0IsQ0FBQzFULFdBQVcsR0FBRzJlLGtCQUFrQjdRLEVBQUU0ZixxQkFBcUIsQ0FBQ3IrRCxTQUFRLEdBQUluQyxPQUFPbDFCLEdBQ2pldkgsRUFBUXdrRSxTQUFTLENBQUNsa0QsSUFBSWlULEVBQUUvdUIsUUFBUSxTQUFTa1AsRUFBRUMsRUFBRXpMLEdBQUdxckIsRUFBRTdmLEdBQUUsV0FBV0MsRUFBRWxLLE1BQU03QyxLQUFLaUksYUFBWTNHLElBQUk4UyxNQUFNLFNBQVN0SCxHQUFHLElBQUlDLEVBQUUsRUFBdUIsT0FBckI0ZixFQUFFN2YsR0FBRSxXQUFXQyxPQUFhQSxHQUFHdXBGLFFBQVEsU0FBU3hwRixHQUFHLE9BQU82ZixFQUFFN2YsR0FBRSxTQUFTQSxHQUFHLE9BQU9BLE1BQUssSUFBSXlwRixLQUFLLFNBQVN6cEYsR0FBRyxJQUFJMnFFLEVBQUUzcUUsR0FBRyxNQUFNNUksTUFBTTZwQyxFQUFFLE1BQU0sT0FBT2poQyxJQUFJMVQsRUFBUXFsRixVQUFVeHRFLEVBQUU3WCxFQUFRbzlGLGNBQWNueEQsRUFBRWpzQyxFQUFRMmdFLG1EQUFtRDdqQyxFQUNoWDk4QixFQUFRcTlGLGFBQWEsU0FBUzNwRixFQUFFQyxFQUFFekwsR0FBRyxHQUFHLE1BQU93TCxFQUFjLE1BQU01SSxNQUFNNnBDLEVBQUUsSUFBSWpoQyxJQUFJLElBQUlyRixFQUFFOUcsRUFBRSxHQUFHbU0sRUFBRTZxQixPQUFPMlYsRUFBRXhnQyxFQUFFaFAsSUFBSW9kLEVBQUVwTyxFQUFFc3pFLElBQUl4OEUsRUFBRWtKLEVBQUV1ekUsT0FBTyxHQUFHLE1BQU10ekUsRUFBRSxDQUFvRSxRQUFuRSxJQUFTQSxFQUFFcXpFLE1BQU1sbEUsRUFBRW5PLEVBQUVxekUsSUFBSXg4RSxFQUFFNnlFLEVBQUV6K0MsY0FBUyxJQUFTanJCLEVBQUVqUCxNQUFNd3ZDLEVBQUUsR0FBR3ZnQyxFQUFFalAsS0FBUWdQLEVBQUV2TyxNQUFNdU8sRUFBRXZPLEtBQUtzMEQsYUFBYSxJQUFJbmxDLEVBQUU1Z0IsRUFBRXZPLEtBQUtzMEQsYUFBYSxJQUFJL2tELEtBQUtmLEVBQUVtc0UsRUFBRTcwRSxLQUFLMEksRUFBRWUsS0FBS3FyRSxFQUFFNXNFLGVBQWV1QixLQUFLckcsRUFBRXFHLFFBQUcsSUFBU2YsRUFBRWUsU0FBSSxJQUFTNGYsRUFBRUEsRUFBRTVmLEdBQUdmLEVBQUVlLElBQUksSUFBSUEsRUFBRTdGLFVBQVVySCxPQUFPLEVBQUUsR0FBRyxJQUFJa04sRUFBRXJHLEVBQUVrMkQsU0FBU3I4RCxPQUFPLEdBQUcsRUFBRXdNLEVBQUUsQ0FBQzRmLEVBQUU5cUIsTUFBTWtMLEdBQUcsSUFBSSxJQUFJdVgsRUFBRSxFQUFFQSxFQUFFdlgsRUFBRXVYLElBQUlxSSxFQUFFckksR0FBR3BkLFVBQVVvZCxFQUFFLEdBQUc1ZCxFQUFFazJELFNBQVNqd0MsRUFBRSxNQUFNLENBQUNrdUMsU0FBU3hnRCxFQUFFN2MsS0FBS3VPLEVBQUV2TyxLQUN4ZlQsSUFBSXd2QyxFQUFFOHlDLElBQUlsbEUsRUFBRXljLE1BQU1sd0IsRUFBRTQ0RSxPQUFPejhFLElBQUl4SyxFQUFRczlGLGNBQWMsU0FBUzVwRixFQUFFQyxHQUE4SyxZQUEzSyxJQUFTQSxJQUFJQSxFQUFFLE9BQU1ELEVBQUUsQ0FBQzh1RCxTQUFTM29CLEVBQUVrL0Msc0JBQXNCcGxGLEVBQUU4dkUsY0FBYy92RSxFQUFFNnBGLGVBQWU3cEYsRUFBRThwRixhQUFhLEVBQUVDLFNBQVMsS0FBS0MsU0FBUyxPQUFRRCxTQUFTLENBQUNqN0IsU0FBU245QixFQUFFbzlCLFNBQVMvdUQsR0FBVUEsRUFBRWdxRixTQUFTaHFGLEdBQUcxVCxFQUFRNlEsY0FBY3F0RSxFQUFFbCtFLEVBQVEyOUYsY0FBYyxTQUFTanFGLEdBQUcsSUFBSUMsRUFBRXVxRSxFQUFFMTRFLEtBQUssS0FBS2tPLEdBQVksT0FBVEMsRUFBRXhPLEtBQUt1TyxFQUFTQyxHQUFHM1QsRUFBUTQ5RixVQUFVLFdBQVcsTUFBTSxDQUFDaC9ELFFBQVEsT0FBTzUrQixFQUFRNjlGLFdBQVcsU0FBU25xRixHQUFHLE1BQU0sQ0FBQzh1RCxTQUFTbDlCLEVBQUVvMUIsT0FBT2huRCxJQUFJMVQsRUFBUTg5RixlQUFlemYsRUFDM2VyK0UsRUFBUSs5RixLQUFLLFNBQVNycUYsR0FBRyxNQUFNLENBQUM4dUQsU0FBU3Z6RCxFQUFFeXpELFNBQVMsQ0FBQ282QixTQUFTLEVBQUVDLFFBQVFycEYsR0FBR2l2RCxNQUFNeWIsSUFBSXArRSxFQUFRMGhCLEtBQUssU0FBU2hPLEVBQUVDLEdBQUcsTUFBTSxDQUFDNnVELFNBQVNxYixFQUFFMTRFLEtBQUt1TyxFQUFFMG1ELGFBQVEsSUFBU3ptRCxFQUFFLEtBQUtBLElBQUkzVCxFQUFRbXRGLFlBQVksU0FBU3o1RSxFQUFFQyxHQUFHLE9BQU9pQixJQUFJdTRFLFlBQVl6NUUsRUFBRUMsSUFBSTNULEVBQVFvdEYsV0FBVyxTQUFTMTVFLEVBQUVDLEdBQUcsT0FBT2lCLElBQUl3NEUsV0FBVzE1RSxFQUFFQyxJQUFJM1QsRUFBUTB0RixjQUFjLGFBQWExdEYsRUFBUTZyRixVQUFVLFNBQVNuNEUsRUFBRUMsR0FBRyxPQUFPaUIsSUFBSWkzRSxVQUFVbjRFLEVBQUVDLElBQUkzVCxFQUFRcXRGLG9CQUFvQixTQUFTMzVFLEVBQUVDLEVBQUV6TCxHQUFHLE9BQU8wTSxJQUFJeTRFLG9CQUFvQjM1RSxFQUFFQyxFQUFFekwsSUFDOWNsSSxFQUFRc3RGLGdCQUFnQixTQUFTNTVFLEVBQUVDLEdBQUcsT0FBT2lCLElBQUkwNEUsZ0JBQWdCNTVFLEVBQUVDLElBQUkzVCxFQUFRdXRGLFFBQVEsU0FBUzc1RSxFQUFFQyxHQUFHLE9BQU9pQixJQUFJMjRFLFFBQVE3NUUsRUFBRUMsSUFBSTNULEVBQVF3dEYsV0FBVyxTQUFTOTVFLEVBQUVDLEVBQUV6TCxHQUFHLE9BQU8wTSxJQUFJNDRFLFdBQVc5NUUsRUFBRUMsRUFBRXpMLElBQUlsSSxFQUFReXRGLE9BQU8sU0FBUy81RSxHQUFHLE9BQU9rQixJQUFJNjRFLE9BQU8vNUUsSUFBSTFULEVBQVEyckYsU0FBUyxTQUFTajRFLEdBQUcsT0FBT2tCLElBQUkrMkUsU0FBU2o0RSxJQUFJMVQsRUFBUXNTLFFBQVEsc0NDbkJuVHZTLEVBQU9DLFFBQVUsRUFBakIsZ0JDSUYsSUFBSWcrRixFQUFXLFNBQVVoK0YsR0FDdkIsYUFFQSxJQUVJc0UsRUFGQTI1RixFQUFLcnhGLE9BQU81RyxVQUNaeVAsRUFBU3dvRixFQUFHOXFGLGVBRVo0a0IsRUFBNEIsbUJBQVhsTSxPQUF3QkEsT0FBUyxHQUNsRHF5RSxFQUFpQm5tRSxFQUFRalosVUFBWSxhQUNyQ3EvRSxFQUFzQnBtRSxFQUFRcW1FLGVBQWlCLGtCQUMvQ0MsRUFBb0J0bUUsRUFBUXVtRSxhQUFlLGdCQUUvQyxTQUFTbDVFLEVBQU9sUyxFQUFLeE8sRUFBSzVCLEdBT3hCLE9BTkE4SixPQUFPd0ksZUFBZWxDLEVBQUt4TyxFQUFLLENBQzlCNUIsTUFBT0EsRUFDUG1tQixZQUFZLEVBQ1p0VSxjQUFjLEVBQ2R1VSxVQUFVLElBRUxoVyxFQUFJeE8sR0FFYixJQUVFMGdCLEVBQU8sR0FBSSxJQUNYLE1BQU9yaUIsR0FDUHFpQixFQUFTLFNBQVNsUyxFQUFLeE8sRUFBSzVCLEdBQzFCLE9BQU9vUSxFQUFJeE8sR0FBTzVCLEdBSXRCLFNBQVM4MkMsRUFBSzJrRCxFQUFTQyxFQUFTcCtFLEVBQU1xK0UsR0FFcEMsSUFBSUMsRUFBaUJGLEdBQVdBLEVBQVF4NEYscUJBQXFCMjRGLEVBQVlILEVBQVVHLEVBQy9FQyxFQUFZaHlGLE9BQU8xRyxPQUFPdzRGLEVBQWUxNEYsV0FDekNGLEVBQVUsSUFBSSs0RixFQUFRSixHQUFlLElBTXpDLE9BRkFHLEVBQVVFLFFBdU1aLFNBQTBCUCxFQUFTbitFLEVBQU10YSxHQUN2QyxJQUFJd2YsRUFBUXk1RSxFQUVaLE9BQU8sU0FBZ0I5N0YsRUFBUStvQyxHQUM3QixHQUFJMW1CLElBQVUwNUUsRUFDWixNQUFNLElBQUlsMEYsTUFBTSxnQ0FHbEIsR0FBSXdhLElBQVUyNUUsRUFBbUIsQ0FDL0IsR0FBZSxVQUFYaDhGLEVBQ0YsTUFBTStvQyxFQUtSLE9BQU9rekQsSUFNVCxJQUhBcDVGLEVBQVE3QyxPQUFTQSxFQUNqQjZDLEVBQVFrbUMsSUFBTUEsSUFFRCxDQUNYLElBQUltekQsRUFBV3I1RixFQUFRcTVGLFNBQ3ZCLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkMsRUFBb0JGLEVBQVVyNUYsR0FDbkQsR0FBSXM1RixFQUFnQixDQUNsQixHQUFJQSxJQUFtQkUsRUFBa0IsU0FDekMsT0FBT0YsR0FJWCxHQUF1QixTQUFuQnQ1RixFQUFRN0MsT0FHVjZDLEVBQVF5NUYsS0FBT3o1RixFQUFRMDVGLE1BQVExNUYsRUFBUWttQyxTQUVsQyxHQUF1QixVQUFuQmxtQyxFQUFRN0MsT0FBb0IsQ0FDckMsR0FBSXFpQixJQUFVeTVFLEVBRVosTUFEQXo1RSxFQUFRMjVFLEVBQ0ZuNUYsRUFBUWttQyxJQUdoQmxtQyxFQUFRMjVGLGtCQUFrQjM1RixFQUFRa21DLFNBRU4sV0FBbkJsbUMsRUFBUTdDLFFBQ2pCNkMsRUFBUTQ1RixPQUFPLFNBQVU1NUYsRUFBUWttQyxLQUduQzFtQixFQUFRMDVFLEVBRVIsSUFBSVcsRUFBU0MsRUFBU3JCLEVBQVNuK0UsRUFBTXRhLEdBQ3JDLEdBQW9CLFdBQWhCNjVGLEVBQU94NkYsS0FBbUIsQ0FPNUIsR0FKQW1nQixFQUFReGYsRUFBUXpFLEtBQ1o0OUYsRUFDQVksRUFFQUYsRUFBTzN6RCxNQUFRc3pELEVBQ2pCLFNBR0YsTUFBTyxDQUNMeDhGLE1BQU82OEYsRUFBTzN6RCxJQUNkM3FDLEtBQU15RSxFQUFRekUsTUFHUyxVQUFoQnMrRixFQUFPeDZGLE9BQ2hCbWdCLEVBQVEyNUUsRUFHUm41RixFQUFRN0MsT0FBUyxRQUNqQjZDLEVBQVFrbUMsSUFBTTJ6RCxFQUFPM3pELE9BL1FQOHpELENBQWlCdkIsRUFBU24rRSxFQUFNdGEsR0FFN0M4NEYsRUFjVCxTQUFTZ0IsRUFBU3IxRixFQUFJMkksRUFBSzg0QixHQUN6QixJQUNFLE1BQU8sQ0FBRTdtQyxLQUFNLFNBQVU2bUMsSUFBS3poQyxFQUFHVSxLQUFLaUksRUFBSzg0QixJQUMzQyxNQUFPanBDLEdBQ1AsTUFBTyxDQUFFb0MsS0FBTSxRQUFTNm1DLElBQUtqcEMsSUFoQmpDL0MsRUFBUTQ1QyxLQUFPQSxFQW9CZixJQUFJbWxELEVBQXlCLGlCQUN6QmMsRUFBeUIsaUJBQ3pCYixFQUFvQixZQUNwQkMsRUFBb0IsWUFJcEJLLEVBQW1CLEdBTXZCLFNBQVNYLEtBQ1QsU0FBU29CLEtBQ1QsU0FBU0MsS0FJVCxJQUFJdDNFLEVBQW9CLEdBQ3hCdEQsRUFBT3NELEVBQW1CdzFFLEdBQWdCLFdBQ3hDLE9BQU90M0YsUUFHVCxJQUFJcTVGLEVBQVdyekYsT0FBT29HLGVBQ2xCa3RGLEVBQTBCRCxHQUFZQSxFQUFTQSxFQUFTdjBFLEVBQU8sTUFDL0R3MEUsR0FDQUEsSUFBNEJqQyxHQUM1QnhvRixFQUFPeEssS0FBS2kxRixFQUF5QmhDLEtBR3ZDeDFFLEVBQW9CdzNFLEdBR3RCLElBQUlDLEVBQUtILEVBQTJCaDZGLFVBQ2xDMjRGLEVBQVUzNEYsVUFBWTRHLE9BQU8xRyxPQUFPd2lCLEdBWXRDLFNBQVMwM0UsRUFBc0JwNkYsR0FDN0IsQ0FBQyxPQUFRLFFBQVMsVUFBVXhCLFNBQVEsU0FBU3ZCLEdBQzNDbWlCLEVBQU9wZixFQUFXL0MsR0FBUSxTQUFTK29DLEdBQ2pDLE9BQU9wbEMsS0FBS2s0RixRQUFRNzdGLEVBQVErb0MsU0FrQ2xDLFNBQVNxMEQsRUFBY3pCLEVBQVcwQixHQUNoQyxTQUFTQyxFQUFPdDlGLEVBQVErb0MsRUFBS25yQyxFQUFTQyxHQUNwQyxJQUFJNitGLEVBQVNDLEVBQVNoQixFQUFVMzdGLEdBQVMyN0YsRUFBVzV5RCxHQUNwRCxHQUFvQixVQUFoQjJ6RCxFQUFPeDZGLEtBRUosQ0FDTCxJQUFJNE4sRUFBUzRzRixFQUFPM3pELElBQ2hCbHBDLEVBQVFpUSxFQUFPalEsTUFDbkIsT0FBSUEsR0FDaUIsaUJBQVZBLEdBQ1AyUyxFQUFPeEssS0FBS25JLEVBQU8sV0FDZHc5RixFQUFZei9GLFFBQVFpQyxFQUFNMDlGLFNBQVNwNUYsTUFBSyxTQUFTdEUsR0FDdER5OUYsRUFBTyxPQUFRejlGLEVBQU9qQyxFQUFTQyxNQUM5QixTQUFTaUMsR0FDVnc5RixFQUFPLFFBQVN4OUYsRUFBS2xDLEVBQVNDLE1BSTNCdy9GLEVBQVl6L0YsUUFBUWlDLEdBQU9zRSxNQUFLLFNBQVNxNUYsR0FJOUMxdEYsRUFBT2pRLE1BQVEyOUYsRUFDZjUvRixFQUFRa1MsTUFDUCxTQUFTaEosR0FHVixPQUFPdzJGLEVBQU8sUUFBU3gyRixFQUFPbEosRUFBU0MsTUF2QnpDQSxFQUFPNitGLEVBQU8zekQsS0E0QmxCLElBQUkwMEQsRUFnQ0o5NUYsS0FBS2s0RixRQTlCTCxTQUFpQjc3RixFQUFRK29DLEdBQ3ZCLFNBQVMyMEQsSUFDUCxPQUFPLElBQUlMLEdBQVksU0FBU3ovRixFQUFTQyxHQUN2Q3kvRixFQUFPdDlGLEVBQVErb0MsRUFBS25yQyxFQUFTQyxNQUlqQyxPQUFPNC9GLEVBYUxBLEVBQWtCQSxFQUFnQnQ1RixLQUNoQ3U1RixFQUdBQSxHQUNFQSxLQWtIVixTQUFTdEIsRUFBb0JGLEVBQVVyNUYsR0FDckMsSUFBSTdDLEVBQVNrOEYsRUFBU3JnRixTQUFTaFosRUFBUTdDLFFBQ3ZDLEdBQUlBLElBQVdxQixFQUFXLENBS3hCLEdBRkF3QixFQUFRcTVGLFNBQVcsS0FFSSxVQUFuQnI1RixFQUFRN0MsT0FBb0IsQ0FFOUIsR0FBSWs4RixFQUFTcmdGLFNBQWlCLFNBRzVCaFosRUFBUTdDLE9BQVMsU0FDakI2QyxFQUFRa21DLElBQU0xbkMsRUFDZCs2RixFQUFvQkYsRUFBVXI1RixHQUVQLFVBQW5CQSxFQUFRN0MsUUFHVixPQUFPcThGLEVBSVh4NUYsRUFBUTdDLE9BQVMsUUFDakI2QyxFQUFRa21DLElBQU0sSUFBSWhsQyxVQUNoQixrREFHSixPQUFPczRGLEVBR1QsSUFBSUssRUFBU0MsRUFBUzM4RixFQUFRazhGLEVBQVNyZ0YsU0FBVWhaLEVBQVFrbUMsS0FFekQsR0FBb0IsVUFBaEIyekQsRUFBT3g2RixLQUlULE9BSEFXLEVBQVE3QyxPQUFTLFFBQ2pCNkMsRUFBUWttQyxJQUFNMnpELEVBQU8zekQsSUFDckJsbUMsRUFBUXE1RixTQUFXLEtBQ1pHLEVBR1QsSUFBSXNCLEVBQU9qQixFQUFPM3pELElBRWxCLE9BQU00MEQsRUFPRkEsRUFBS3YvRixNQUdQeUUsRUFBUXE1RixFQUFTMEIsWUFBY0QsRUFBSzk5RixNQUdwQ2dELEVBQVFpWixLQUFPb2dGLEVBQVMyQixRQVFELFdBQW5CaDdGLEVBQVE3QyxTQUNWNkMsRUFBUTdDLE9BQVMsT0FDakI2QyxFQUFRa21DLElBQU0xbkMsR0FVbEJ3QixFQUFRcTVGLFNBQVcsS0FDWkcsR0FORXNCLEdBM0JQOTZGLEVBQVE3QyxPQUFTLFFBQ2pCNkMsRUFBUWttQyxJQUFNLElBQUlobEMsVUFBVSxvQ0FDNUJsQixFQUFRcTVGLFNBQVcsS0FDWkcsR0FvRFgsU0FBU3lCLEVBQWFDLEdBQ3BCLElBQUl6N0UsRUFBUSxDQUFFMDdFLE9BQVFELEVBQUssSUFFdkIsS0FBS0EsSUFDUHo3RSxFQUFNMjdFLFNBQVdGLEVBQUssSUFHcEIsS0FBS0EsSUFDUHo3RSxFQUFNNDdFLFdBQWFILEVBQUssR0FDeEJ6N0UsRUFBTTY3RSxTQUFXSixFQUFLLElBR3hCcDZGLEtBQUt5NkYsV0FBV3Y1RixLQUFLeWQsR0FHdkIsU0FBUys3RSxFQUFjLzdFLEdBQ3JCLElBQUlvNkUsRUFBU3A2RSxFQUFNZzhFLFlBQWMsR0FDakM1QixFQUFPeDZGLEtBQU8sZ0JBQ1B3NkYsRUFBTzN6RCxJQUNkem1CLEVBQU1nOEUsV0FBYTVCLEVBR3JCLFNBQVNkLEVBQVFKLEdBSWY3M0YsS0FBS3k2RixXQUFhLENBQUMsQ0FBRUosT0FBUSxTQUM3QnhDLEVBQVlqNkYsUUFBUXU4RixFQUFjbjZGLE1BQ2xDQSxLQUFLNDZGLE9BQU0sR0E4QmIsU0FBUzkxRSxFQUFPM0csR0FDZCxHQUFJQSxFQUFVLENBQ1osSUFBSS9GLEVBQWlCK0YsRUFBU201RSxHQUM5QixHQUFJbC9FLEVBQ0YsT0FBT0EsRUFBZS9ULEtBQUs4WixHQUc3QixHQUE2QixtQkFBbEJBLEVBQVNoRyxLQUNsQixPQUFPZ0csRUFHVCxJQUFLMHVCLE1BQU0xdUIsRUFBU3ZkLFFBQVMsQ0FDM0IsSUFBSUYsR0FBSyxFQUFHeVgsRUFBTyxTQUFTQSxJQUMxQixPQUFTelgsRUFBSXlkLEVBQVN2ZCxRQUNwQixHQUFJaU8sRUFBT3hLLEtBQUs4WixFQUFVemQsR0FHeEIsT0FGQXlYLEVBQUtqYyxNQUFRaWlCLEVBQVN6ZCxHQUN0QnlYLEVBQUsxZCxNQUFPLEVBQ0wwZCxFQU9YLE9BSEFBLEVBQUtqYyxNQUFRd0IsRUFDYnlhLEVBQUsxZCxNQUFPLEVBRUwwZCxHQUdULE9BQU9BLEVBQUtBLEtBQU9BLEdBS3ZCLE1BQU8sQ0FBRUEsS0FBTW1nRixHQUlqQixTQUFTQSxJQUNQLE1BQU8sQ0FBRXA4RixNQUFPd0IsRUFBV2pELE1BQU0sR0ErTW5DLE9BN21CQTArRixFQUFrQi81RixVQUFZZzZGLEVBQzlCNTZFLEVBQU8rNkUsRUFBSSxjQUFlSCxHQUMxQjU2RSxFQUFPNDZFLEVBQTRCLGNBQWVELEdBQ2xEQSxFQUFrQnJtQyxZQUFjdDBDLEVBQzlCNDZFLEVBQ0EzQixFQUNBLHFCQWFGcitGLEVBQVF5aEcsb0JBQXNCLFNBQVNDLEdBQ3JDLElBQUlDLEVBQXlCLG1CQUFYRCxHQUF5QkEsRUFBT3R1RixZQUNsRCxRQUFPdXVGLElBQ0hBLElBQVM1QixHQUcyQix1QkFBbkM0QixFQUFLam9DLGFBQWVpb0MsRUFBS24yRixRQUloQ3hMLEVBQVE0aEcsS0FBTyxTQUFTRixHQVF0QixPQVBJOTBGLE9BQU9pSixlQUNUakosT0FBT2lKLGVBQWU2ckYsRUFBUTFCLElBRTlCMEIsRUFBTzVoRSxVQUFZa2dFLEVBQ25CNTZFLEVBQU9zOEUsRUFBUXJELEVBQW1CLHNCQUVwQ3FELEVBQU8xN0YsVUFBWTRHLE9BQU8xRyxPQUFPaTZGLEdBQzFCdUIsR0FPVDFoRyxFQUFRNmhHLE1BQVEsU0FBUzcxRCxHQUN2QixNQUFPLENBQUV3MEQsUUFBU3gwRCxJQXNFcEJvMEQsRUFBc0JDLEVBQWNyNkYsV0FDcENvZixFQUFPaTdFLEVBQWNyNkYsVUFBV200RixHQUFxQixXQUNuRCxPQUFPdjNGLFFBRVQ1RyxFQUFRcWdHLGNBQWdCQSxFQUt4QnJnRyxFQUFROGhHLE1BQVEsU0FBU3ZELEVBQVNDLEVBQVNwK0UsRUFBTXErRSxFQUFhNkIsUUFDeEMsSUFBaEJBLElBQXdCQSxFQUFjMS9GLFNBRTFDLElBQUltaEcsRUFBTyxJQUFJMUIsRUFDYnptRCxFQUFLMmtELEVBQVNDLEVBQVNwK0UsRUFBTXErRSxHQUM3QjZCLEdBR0YsT0FBT3RnRyxFQUFReWhHLG9CQUFvQmpELEdBQy9CdUQsRUFDQUEsRUFBS2hqRixPQUFPM1gsTUFBSyxTQUFTMkwsR0FDeEIsT0FBT0EsRUFBTzFSLEtBQU8wUixFQUFPalEsTUFBUWkvRixFQUFLaGpGLFdBdUtqRHFoRixFQUFzQkQsR0FFdEIvNkUsRUFBTys2RSxFQUFJOUIsRUFBbUIsYUFPOUJqNUUsRUFBTys2RSxFQUFJakMsR0FBZ0IsV0FDekIsT0FBT3QzRixRQUdUd2UsRUFBTys2RSxFQUFJLFlBQVksV0FDckIsTUFBTyx3QkFrQ1RuZ0csRUFBUTZNLEtBQU8sU0FBUzRXLEdBQ3RCLElBQUk1VyxFQUFPLEdBQ1gsSUFBSyxJQUFJbkksS0FBTytlLEVBQ2Q1VyxFQUFLL0UsS0FBS3BELEdBTVosT0FKQW1JLEVBQUtzTixVQUlFLFNBQVM0RSxJQUNkLEtBQU9sUyxFQUFLckYsUUFBUSxDQUNsQixJQUFJOUMsRUFBTW1JLEVBQUsya0QsTUFDZixHQUFJOXNELEtBQU8rZSxFQUdULE9BRkExRSxFQUFLamMsTUFBUTRCLEVBQ2JxYSxFQUFLMWQsTUFBTyxFQUNMMGQsRUFRWCxPQURBQSxFQUFLMWQsTUFBTyxFQUNMMGQsSUFzQ1gvZSxFQUFRMHJCLE9BQVNBLEVBTWpCbXpFLEVBQVE3NEYsVUFBWSxDQUNsQm9OLFlBQWF5ckYsRUFFYjJDLE1BQU8sU0FBU1EsR0FjZCxHQWJBcDdGLEtBQUsrZSxLQUFPLEVBQ1ovZSxLQUFLbVksS0FBTyxFQUdablksS0FBSzI0RixLQUFPMzRGLEtBQUs0NEYsTUFBUWw3RixFQUN6QnNDLEtBQUt2RixNQUFPLEVBQ1p1RixLQUFLdTRGLFNBQVcsS0FFaEJ2NEYsS0FBSzNELE9BQVMsT0FDZDJELEtBQUtvbEMsSUFBTTFuQyxFQUVYc0MsS0FBS3k2RixXQUFXNzhGLFFBQVE4OEYsSUFFbkJVLEVBQ0gsSUFBSyxJQUFJeDJGLEtBQVE1RSxLQUVRLE1BQW5CNEUsRUFBS2dHLE9BQU8sSUFDWmlFLEVBQU94SyxLQUFLckUsS0FBTTRFLEtBQ2pCaW9DLE9BQU9qb0MsRUFBS2EsTUFBTSxNQUNyQnpGLEtBQUs0RSxHQUFRbEgsSUFNckJpMEIsS0FBTSxXQUNKM3hCLEtBQUt2RixNQUFPLEVBRVosSUFDSTRnRyxFQURZcjdGLEtBQUt5NkYsV0FBVyxHQUNMRSxXQUMzQixHQUF3QixVQUFwQlUsRUFBVzk4RixLQUNiLE1BQU04OEYsRUFBV2oyRCxJQUduQixPQUFPcGxDLEtBQUtzN0YsTUFHZHpDLGtCQUFtQixTQUFTMEMsR0FDMUIsR0FBSXY3RixLQUFLdkYsS0FDUCxNQUFNOGdHLEVBR1IsSUFBSXI4RixFQUFVYyxLQUNkLFNBQVN3N0YsRUFBT0MsRUFBS0MsR0FZbkIsT0FYQTNDLEVBQU94NkYsS0FBTyxRQUNkdzZGLEVBQU8zekQsSUFBTW0yRCxFQUNicjhGLEVBQVFpWixLQUFPc2pGLEVBRVhDLElBR0Z4OEYsRUFBUTdDLE9BQVMsT0FDakI2QyxFQUFRa21DLElBQU0xbkMsS0FHTmcrRixFQUdaLElBQUssSUFBSWg3RixFQUFJVixLQUFLeTZGLFdBQVc3NUYsT0FBUyxFQUFHRixHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSWllLEVBQVEzZSxLQUFLeTZGLFdBQVcvNUYsR0FDeEJxNEYsRUFBU3A2RSxFQUFNZzhFLFdBRW5CLEdBQXFCLFNBQWpCaDhFLEVBQU0wN0UsT0FJUixPQUFPbUIsRUFBTyxPQUdoQixHQUFJNzhFLEVBQU0wN0UsUUFBVXI2RixLQUFLK2UsS0FBTSxDQUM3QixJQUFJNDhFLEVBQVc5c0YsRUFBT3hLLEtBQUtzYSxFQUFPLFlBQzlCaTlFLEVBQWEvc0YsRUFBT3hLLEtBQUtzYSxFQUFPLGNBRXBDLEdBQUlnOUUsR0FBWUMsRUFBWSxDQUMxQixHQUFJNTdGLEtBQUsrZSxLQUFPSixFQUFNMjdFLFNBQ3BCLE9BQU9rQixFQUFPNzhFLEVBQU0yN0UsVUFBVSxHQUN6QixHQUFJdDZGLEtBQUsrZSxLQUFPSixFQUFNNDdFLFdBQzNCLE9BQU9pQixFQUFPNzhFLEVBQU00N0UsaUJBR2pCLEdBQUlvQixHQUNULEdBQUkzN0YsS0FBSytlLEtBQU9KLEVBQU0yN0UsU0FDcEIsT0FBT2tCLEVBQU83OEUsRUFBTTI3RSxVQUFVLE9BRzNCLEtBQUlzQixFQU1ULE1BQU0sSUFBSTEzRixNQUFNLDBDQUxoQixHQUFJbEUsS0FBSytlLEtBQU9KLEVBQU00N0UsV0FDcEIsT0FBT2lCLEVBQU83OEUsRUFBTTQ3RSxnQkFVOUJ6QixPQUFRLFNBQVN2NkYsRUFBTTZtQyxHQUNyQixJQUFLLElBQUkxa0MsRUFBSVYsS0FBS3k2RixXQUFXNzVGLE9BQVMsRUFBR0YsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlpZSxFQUFRM2UsS0FBS3k2RixXQUFXLzVGLEdBQzVCLEdBQUlpZSxFQUFNMDdFLFFBQVVyNkYsS0FBSytlLE1BQ3JCbFEsRUFBT3hLLEtBQUtzYSxFQUFPLGVBQ25CM2UsS0FBSytlLEtBQU9KLEVBQU00N0UsV0FBWSxDQUNoQyxJQUFJc0IsRUFBZWw5RSxFQUNuQixPQUlBazlFLElBQ1UsVUFBVHQ5RixHQUNTLGFBQVRBLElBQ0RzOUYsRUFBYXhCLFFBQVVqMUQsR0FDdkJBLEdBQU95MkQsRUFBYXRCLGFBR3RCc0IsRUFBZSxNQUdqQixJQUFJOUMsRUFBUzhDLEVBQWVBLEVBQWFsQixXQUFhLEdBSXRELE9BSEE1QixFQUFPeDZGLEtBQU9BLEVBQ2R3NkYsRUFBTzN6RCxJQUFNQSxFQUVUeTJELEdBQ0Y3N0YsS0FBSzNELE9BQVMsT0FDZDJELEtBQUttWSxLQUFPMGpGLEVBQWF0QixXQUNsQjdCLEdBR0YxNEYsS0FBSzg3RixTQUFTL0MsSUFHdkIrQyxTQUFVLFNBQVMvQyxFQUFReUIsR0FDekIsR0FBb0IsVUFBaEJ6QixFQUFPeDZGLEtBQ1QsTUFBTXc2RixFQUFPM3pELElBY2YsTUFYb0IsVUFBaEIyekQsRUFBT3g2RixNQUNTLGFBQWhCdzZGLEVBQU94NkYsS0FDVHlCLEtBQUttWSxLQUFPNGdGLEVBQU8zekQsSUFDTSxXQUFoQjJ6RCxFQUFPeDZGLE1BQ2hCeUIsS0FBS3M3RixLQUFPdDdGLEtBQUtvbEMsSUFBTTJ6RCxFQUFPM3pELElBQzlCcGxDLEtBQUszRCxPQUFTLFNBQ2QyRCxLQUFLbVksS0FBTyxPQUNhLFdBQWhCNGdGLEVBQU94NkYsTUFBcUJpOEYsSUFDckN4NkYsS0FBS21ZLEtBQU9xaUYsR0FHUDlCLEdBR1RxRCxPQUFRLFNBQVN4QixHQUNmLElBQUssSUFBSTc1RixFQUFJVixLQUFLeTZGLFdBQVc3NUYsT0FBUyxFQUFHRixHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSWllLEVBQVEzZSxLQUFLeTZGLFdBQVcvNUYsR0FDNUIsR0FBSWllLEVBQU00N0UsYUFBZUEsRUFHdkIsT0FGQXY2RixLQUFLODdGLFNBQVNuOUUsRUFBTWc4RSxXQUFZaDhFLEVBQU02N0UsVUFDdENFLEVBQWMvN0UsR0FDUCs1RSxJQUtiLE1BQVMsU0FBUzJCLEdBQ2hCLElBQUssSUFBSTM1RixFQUFJVixLQUFLeTZGLFdBQVc3NUYsT0FBUyxFQUFHRixHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSWllLEVBQVEzZSxLQUFLeTZGLFdBQVcvNUYsR0FDNUIsR0FBSWllLEVBQU0wN0UsU0FBV0EsRUFBUSxDQUMzQixJQUFJdEIsRUFBU3A2RSxFQUFNZzhFLFdBQ25CLEdBQW9CLFVBQWhCNUIsRUFBT3g2RixLQUFrQixDQUMzQixJQUFJeTlGLEVBQVNqRCxFQUFPM3pELElBQ3BCczFELEVBQWMvN0UsR0FFaEIsT0FBT3E5RSxHQU1YLE1BQU0sSUFBSTkzRixNQUFNLDBCQUdsQiszRixjQUFlLFNBQVM5OUUsRUFBVTg3RSxFQUFZQyxHQWE1QyxPQVpBbDZGLEtBQUt1NEYsU0FBVyxDQUNkcmdGLFNBQVU0TSxFQUFPM0csR0FDakI4N0UsV0FBWUEsRUFDWkMsUUFBU0EsR0FHUyxTQUFoQmw2RixLQUFLM0QsU0FHUDJELEtBQUtvbEMsSUFBTTFuQyxHQUdOZzdGLElBUUp0L0YsRUE5c0JLLENBcXRCaUJELEVBQU9DLFNBR3RDLElBQ0U4aUcsbUJBQXFCOUUsRUFDckIsTUFBTytFLEdBV21CLGlCQUFmMXVFLFdBQ1RBLFdBQVd5dUUsbUJBQXFCOUUsRUFFaEN2bUYsU0FBUyxJQUFLLHlCQUFkQSxDQUF3Q3VtRiw2QkN2dUIvQixJQUFJdHBGLEVBQUU0ZixFQUFFOXBCLEVBQUVzWCxFQUFFLEdBQUcsaUJBQWtCa2hGLGFBQWEsbUJBQW9CQSxZQUFZM3lGLElBQUksQ0FBQyxJQUFJOUksRUFBRXk3RixZQUFZaGpHLEVBQVFpd0UsYUFBYSxXQUFXLE9BQU8xb0UsRUFBRThJLFdBQVcsQ0FBQyxJQUFJMHNDLEVBQUVqdEMsS0FBS3UxQixFQUFFMFgsRUFBRTFzQyxNQUFNclEsRUFBUWl3RSxhQUFhLFdBQVcsT0FBT2x6QixFQUFFMXNDLE1BQU1nMUIsR0FDM08sR0FBRyxvQkFBcUI1ekIsUUFBUSxtQkFBb0I0MEIsZUFBZSxDQUFDLElBQUlmLEVBQUUsS0FBS3U0QyxFQUFFLEtBQUsxcEMsRUFBRSxXQUFXLEdBQUcsT0FBTzdPLEVBQUUsSUFBSSxJQUFJNXhCLEVBQUUxVCxFQUFRaXdFLGVBQWUzcUMsR0FBRSxFQUFHNXhCLEdBQUc0eEIsRUFBRSxLQUFLLE1BQU0zeEIsR0FBRyxNQUFNalEsV0FBV3l3QyxFQUFFLEdBQUd4Z0MsSUFBS2UsRUFBRSxTQUFTaEIsR0FBRyxPQUFPNHhCLEVBQUU1aEMsV0FBV2dSLEVBQUUsRUFBRWhCLElBQUk0eEIsRUFBRTV4QixFQUFFaFEsV0FBV3l3QyxFQUFFLEtBQUs3ZixFQUFFLFNBQVM1Z0IsRUFBRUMsR0FBR2txRSxFQUFFbjZFLFdBQVdnUSxFQUFFQyxJQUFJbkosRUFBRSxXQUFXeTBFLGFBQWFwQixJQUFJNzlFLEVBQVFzaEYscUJBQXFCLFdBQVcsT0FBTSxHQUFJeC9ELEVBQUU5aEIsRUFBUWlqRyx3QkFBd0IsaUJBQWlCLENBQUMsSUFBSWhxRSxFQUFFeG5CLE9BQU8vTixXQUFXNitCLEVBQUU5d0IsT0FBT3d0RSxhQUFhLEdBQUcsb0JBQXFCdHNFLFFBQVEsQ0FBQyxJQUFJZ2lDLEVBQzdmbGpDLE9BQU95eEYscUJBQXFCLG1CQUFvQnp4RixPQUFPMHhGLHVCQUF1Qnh3RixRQUFRNUksTUFBTSxzSkFBc0osbUJBQW9CNHFDLEdBQUdoaUMsUUFBUTVJLE1BQU0scUpBQXFKLElBQUkyeUIsR0FBRSxFQUFHQyxFQUFFLEtBQUs5a0IsR0FBRyxFQUFFbW9ELEVBQUUsRUFBRS96QixFQUFFLEVBQUVqc0MsRUFBUXNoRixxQkFBcUIsV0FBVyxPQUFPdGhGLEVBQVFpd0UsZ0JBQ2hnQmhrQyxHQUFHbnFCLEVBQUUsYUFBYTloQixFQUFRaWpHLHdCQUF3QixTQUFTdnZGLEdBQUcsRUFBRUEsR0FBRyxJQUFJQSxFQUFFZixRQUFRNUksTUFBTSxtSEFBbUhpMkQsRUFBRSxFQUFFdHNELEVBQUUySixLQUFLNEUsTUFBTSxJQUFJdk8sR0FBRyxHQUFHLElBQUkwVSxFQUFFLElBQUlpZSxlQUFlZzNDLEVBQUVqMUQsRUFBRXllLE1BQU16ZSxFQUFFMGUsTUFBTUMsVUFBVSxXQUFXLEdBQUcsT0FBT3BLLEVBQUUsQ0FBQyxJQUFJanBCLEVBQUUxVCxFQUFRaXdFLGVBQWVoa0MsRUFBRXY0QixFQUFFc3NELEVBQUUsSUFBSXJqQyxHQUFFLEVBQUdqcEIsR0FBRzJwRSxFQUFFMTJDLFlBQVksT0FBT2pLLEdBQUUsRUFBR0MsRUFBRSxNQUFNLE1BQU1ocEIsR0FBRyxNQUFNMHBFLEVBQUUxMkMsWUFBWSxNQUFNaHpCLFFBQVMrb0IsR0FBRSxHQUFJaG9CLEVBQUUsU0FBU2hCLEdBQUdpcEIsRUFBRWpwQixFQUFFZ3BCLElBQUlBLEdBQUUsRUFBRzJnRCxFQUFFMTJDLFlBQVksUUFBUXJTLEVBQUUsU0FBUzVnQixFQUFFQyxHQUFHa0UsRUFDdGZvaEIsR0FBRSxXQUFXdmxCLEVBQUUxVCxFQUFRaXdFLGtCQUFpQnQ4RCxJQUFJbkosRUFBRSxXQUFXKzNCLEVBQUUxcUIsR0FBR0EsR0FBRyxHQUFHLFNBQVNpb0UsRUFBRXBzRSxFQUFFQyxHQUFHLElBQUl6TCxFQUFFd0wsRUFBRWxNLE9BQU9rTSxFQUFFNUwsS0FBSzZMLEdBQUdELEVBQUUsT0FBTyxDQUFDLElBQUl3Z0MsRUFBRWhzQyxFQUFFLElBQUksRUFBRW1HLEVBQUVxRixFQUFFd2dDLEdBQUcsVUFBRyxJQUFTN2xDLEdBQUcsRUFBRTB4RSxFQUFFMXhFLEVBQUVzRixJQUEwQixNQUFNRCxFQUE3QkEsRUFBRXdnQyxHQUFHdmdDLEVBQUVELEVBQUV4TCxHQUFHbUcsRUFBRW5HLEVBQUVnc0MsR0FBZ0IsU0FBU2dxQyxFQUFFeHFFLEdBQVUsWUFBTyxLQUFkQSxFQUFFQSxFQUFFLElBQXFCLEtBQUtBLEVBQ2hQLFNBQVN5cUUsRUFBRXpxRSxHQUFHLElBQUlDLEVBQUVELEVBQUUsR0FBRyxRQUFHLElBQVNDLEVBQUUsQ0FBQyxJQUFJekwsRUFBRXdMLEVBQUU4OUMsTUFBTSxHQUFHdHBELElBQUl5TCxFQUFFLENBQUNELEVBQUUsR0FBR3hMLEVBQUV3TCxFQUFFLElBQUksSUFBSXdnQyxFQUFFLEVBQUU3bEMsRUFBRXFGLEVBQUVsTSxPQUFPMHNDLEVBQUU3bEMsR0FBRyxDQUFDLElBQUk0ZCxFQUFFLEdBQUdpb0IsRUFBRSxHQUFHLEVBQUVseUIsRUFBRXRPLEVBQUV1WSxHQUFHaGQsRUFBRWdkLEVBQUUsRUFBRTR0QixFQUFFbm1DLEVBQUV6RSxHQUFHLFFBQUcsSUFBUytTLEdBQUcsRUFBRSs5RCxFQUFFLzlELEVBQUU5WixRQUFHLElBQVMyeEMsR0FBRyxFQUFFa21DLEVBQUVsbUMsRUFBRTczQixJQUFJdE8sRUFBRXdnQyxHQUFHMkYsRUFBRW5tQyxFQUFFekUsR0FBRy9HLEVBQUVnc0MsRUFBRWpsQyxJQUFJeUUsRUFBRXdnQyxHQUFHbHlCLEVBQUV0TyxFQUFFdVksR0FBRy9qQixFQUFFZ3NDLEVBQUVqb0IsT0FBUSxXQUFHLElBQVM0dEIsR0FBRyxFQUFFa21DLEVBQUVsbUMsRUFBRTN4QyxJQUEwQixNQUFNd0wsRUFBN0JBLEVBQUV3Z0MsR0FBRzJGLEVBQUVubUMsRUFBRXpFLEdBQUcvRyxFQUFFZ3NDLEVBQUVqbEMsSUFBZ0IsT0FBTzBFLEVBQUUsT0FBTyxLQUFLLFNBQVNvc0UsRUFBRXJzRSxFQUFFQyxHQUFHLElBQUl6TCxFQUFFd0wsRUFBRTB2RixVQUFVenZGLEVBQUV5dkYsVUFBVSxPQUFPLElBQUlsN0YsRUFBRUEsRUFBRXdMLEVBQUVwSixHQUFHcUosRUFBRXJKLEdBQUcsSUFBSSt6RSxFQUFFLEdBQUc0QixFQUFFLEdBQUdDLEVBQUUsRUFBRTNpRSxFQUFFLEtBQUtnVyxFQUFFLEVBQUU2cUQsR0FBRSxFQUFHejlDLEdBQUUsRUFBRy9yQixHQUFFLEVBQ2phLFNBQVNrb0IsRUFBRXBwQixHQUFHLElBQUksSUFBSUMsRUFBRXVxRSxFQUFFK0IsR0FBRyxPQUFPdHNFLEdBQUcsQ0FBQyxHQUFHLE9BQU9BLEVBQUV6QixTQUFTaXNFLEVBQUU4QixPQUFRLE1BQUd0c0UsRUFBRTB2RixXQUFXM3ZGLEdBQWdELE1BQTlDeXFFLEVBQUU4QixHQUFHdHNFLEVBQUV5dkYsVUFBVXp2RixFQUFFMnZGLGVBQWV4akIsRUFBRXpCLEVBQUUxcUUsR0FBY0EsRUFBRXVxRSxFQUFFK0IsSUFBSSxTQUFTeUwsRUFBRWg0RSxHQUFhLEdBQVZrQixHQUFFLEVBQUdrb0IsRUFBRXBwQixJQUFPaXRCLEVBQUUsR0FBRyxPQUFPdTlDLEVBQUVHLEdBQUcxOUMsR0FBRSxFQUFHanNCLEVBQUU0ZSxPQUFPLENBQUMsSUFBSTNmLEVBQUV1cUUsRUFBRStCLEdBQUcsT0FBT3RzRSxHQUFHMmdCLEVBQUVvM0QsRUFBRS8zRSxFQUFFMHZGLFVBQVUzdkYsSUFDdFAsU0FBUzRmLEVBQUU1ZixFQUFFQyxHQUFHZ3RCLEdBQUUsRUFBRy9yQixJQUFJQSxHQUFFLEVBQUdwSyxLQUFLNHpFLEdBQUUsRUFBRyxJQUFJbDJFLEVBQUVxckIsRUFBRSxJQUFTLElBQUx1SixFQUFFbnBCLEdBQU80SixFQUFFMmdFLEVBQUVHLEdBQUcsT0FBTzlnRSxNQUFNQSxFQUFFK2xGLGVBQWUzdkYsSUFBSUQsSUFBSTFULEVBQVFzaEYseUJBQXlCLENBQUMsSUFBSXB0QyxFQUFFMzJCLEVBQUVyTCxTQUFTLEdBQUcsbUJBQW9CZ2lDLEVBQUUsQ0FBQzMyQixFQUFFckwsU0FBUyxLQUFLcWhCLEVBQUVoVyxFQUFFZ21GLGNBQWMsSUFBSWwxRixFQUFFNmxDLEVBQUUzMkIsRUFBRStsRixnQkFBZ0IzdkYsR0FBR0EsRUFBRTNULEVBQVFpd0UsZUFBZSxtQkFBb0I1aEUsRUFBRWtQLEVBQUVyTCxTQUFTN0QsRUFBRWtQLElBQUkyZ0UsRUFBRUcsSUFBSUYsRUFBRUUsR0FBR3ZoRCxFQUFFbnBCLFFBQVF3cUUsRUFBRUUsR0FBRzlnRSxFQUFFMmdFLEVBQUVHLEdBQUcsR0FBRyxPQUFPOWdFLEVBQUUsSUFBSTBPLEdBQUUsTUFBTyxDQUFDLElBQUlqSyxFQUFFazhELEVBQUUrQixHQUFHLE9BQU9qK0QsR0FBR3NTLEVBQUVvM0QsRUFBRTFwRSxFQUFFcWhGLFVBQVUxdkYsR0FBR3NZLEdBQUUsRUFBRyxPQUFPQSxFQUFFLFFBQVExTyxFQUFFLEtBQUtnVyxFQUFFcnJCLEVBQUVrMkUsR0FBRSxHQUFJLElBQUk0UyxFQUFFbHZFLEVBQUU5aEIsRUFBUW1pRixzQkFBc0IsRUFDdGVuaUYsRUFBUTZoRiwyQkFBMkIsRUFBRTdoRixFQUFRaWlGLHFCQUFxQixFQUFFamlGLEVBQVEydUUsd0JBQXdCLEVBQUUzdUUsRUFBUXdqRyxtQkFBbUIsS0FBS3hqRyxFQUFRb3hFLDhCQUE4QixFQUFFcHhFLEVBQVFvaEYsd0JBQXdCLFNBQVMxdEUsR0FBR0EsRUFBRXhCLFNBQVMsTUFBTWxTLEVBQVF5akcsMkJBQTJCLFdBQVc5aUUsR0FBR3k5QyxJQUFJejlDLEdBQUUsRUFBR2pzQixFQUFFNGUsS0FBS3R6QixFQUFRMmhGLGlDQUFpQyxXQUFXLE9BQU9wdUQsR0FBR3Z6QixFQUFRMGpHLDhCQUE4QixXQUFXLE9BQU94bEIsRUFBRUcsSUFDcGFyK0UsRUFBUTJqRyxjQUFjLFNBQVNqd0YsR0FBRyxPQUFPNmYsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJNWYsRUFBRSxFQUFFLE1BQU0sUUFBUUEsRUFBRTRmLEVBQUUsSUFBSXJyQixFQUFFcXJCLEVBQUVBLEVBQUU1ZixFQUFFLElBQUksT0FBT0QsSUFBSSxRQUFRNmYsRUFBRXJyQixJQUFJbEksRUFBUTRqRyx3QkFBd0IsYUFBYTVqRyxFQUFRd2hGLHNCQUFzQndQLEVBQUVoeEYsRUFBUWl1RSx5QkFBeUIsU0FBU3Y2RCxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVFBLEVBQUUsRUFBRSxJQUFJeEwsRUFBRXFyQixFQUFFQSxFQUFFN2YsRUFBRSxJQUFJLE9BQU9DLElBQUksUUFBUTRmLEVBQUVyckIsSUFDcFdsSSxFQUFRMHVFLDBCQUEwQixTQUFTaDdELEVBQUVDLEVBQUV6TCxHQUFHLElBQUlnc0MsRUFBRWwwQyxFQUFRaXdFLGVBQThGLE9BQXRDL25FLEVBQXpDLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFlLGlCQUFaQSxFQUFFQSxFQUFFMjdGLFFBQTZCLEVBQUUzN0YsRUFBRWdzQyxFQUFFaHNDLEVBQU9nc0MsRUFBU3hnQyxHQUFHLEtBQUssRUFBRSxJQUFJckYsR0FBRyxFQUFFLE1BQU0sS0FBSyxFQUFFQSxFQUFFLElBQUksTUFBTSxLQUFLLEVBQUVBLEVBQUUsV0FBVyxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sUUFBUUEsRUFBRSxJQUEyTSxPQUFqTXFGLEVBQUUsQ0FBQ3BKLEdBQUc0MUUsSUFBSWh1RSxTQUFTeUIsRUFBRTR2RixjQUFjN3ZGLEVBQUUydkYsVUFBVW43RixFQUFFbzdGLGVBQXZEajFGLEVBQUVuRyxFQUFFbUcsRUFBb0UrMEYsV0FBVyxHQUFHbDdGLEVBQUVnc0MsR0FBR3hnQyxFQUFFMHZGLFVBQVVsN0YsRUFBRTQzRSxFQUFFRyxFQUFFdnNFLEdBQUcsT0FBT3dxRSxFQUFFRyxJQUFJM3FFLElBQUl3cUUsRUFBRStCLEtBQUtyckUsRUFBRXBLLElBQUlvSyxHQUFFLEVBQUcwZixFQUFFbzNELEVBQUV4akYsRUFBRWdzQyxNQUFNeGdDLEVBQUUwdkYsVUFBVS8wRixFQUFFeXhFLEVBQUV6QixFQUFFM3FFLEdBQUdpdEIsR0FBR3k5QyxJQUFJejlDLEdBQUUsRUFBR2pzQixFQUFFNGUsS0FBWTVmLEdBQzFkMVQsRUFBUThqRyxzQkFBc0IsU0FBU3B3RixHQUFHLElBQUlDLEVBQUU0ZixFQUFFLE9BQU8sV0FBVyxJQUFJcnJCLEVBQUVxckIsRUFBRUEsRUFBRTVmLEVBQUUsSUFBSSxPQUFPRCxFQUFFakssTUFBTTdDLEtBQUtpSSxXQUFXLFFBQVEwa0IsRUFBRXJyQixrQ0NoQjNIbkksRUFBT0MsUUFBVSxFQUFqQixNQ0ZFK2pHLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUIzL0YsSUFBakI0L0YsRUFDSCxPQUFPQSxFQUFhbGtHLFFBR3JCLElBQUlELEVBQVNna0csRUFBeUJFLEdBQVksQ0FHakRqa0csUUFBUyxJQU9WLE9BSEFta0csRUFBb0JGLEdBQVVsa0csRUFBUUEsRUFBT0MsUUFBU2drRyxHQUcvQ2prRyxFQUFPQyxRQ3BCZmdrRyxFQUFvQmhpRixFQUFLamlCLElBQ3hCLElBQUkrb0MsRUFBUy9vQyxHQUFVQSxFQUFPcWtHLFdBQzdCLElBQU9ya0csRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREFpa0csRUFBb0I5dkQsRUFBRXBMLEVBQVEsQ0FBRXAxQixFQUFHbzFCLElBQzVCQSxHQ0xSazdELEVBQW9COXZELEVBQUksQ0FBQ2wwQyxFQUFTcWtHLEtBQ2pDLElBQUksSUFBSTMvRixLQUFPMi9GLEVBQ1hMLEVBQW9CTSxFQUFFRCxFQUFZMy9GLEtBQVNzL0YsRUFBb0JNLEVBQUV0a0csRUFBUzBFLElBQzVFa0ksT0FBT3dJLGVBQWVwVixFQUFTMEUsRUFBSyxDQUFFdWtCLFlBQVksRUFBTXZSLElBQUsyc0YsRUFBVzMvRixNQ0ozRXMvRixFQUFvQjF2RSxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmRCxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU96dEIsTUFBUSxJQUFJNlEsU0FBUyxjQUFiLEdBQ2QsTUFBT3BKLEdBQ1IsR0FBc0IsaUJBQVhvRCxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QnV5RixFQUFvQk0sRUFBSSxDQUFDcHhGLEVBQUszRyxJQUFVSyxPQUFPNUcsVUFBVW1OLGVBQWVsSSxLQUFLaUksRUFBSzNHLDhEQ0FuRSxTQUFTZzRGLEVBQWdCRCxFQUFHdm5ELEdBTXpDLE9BTEF3bkQsRUFBa0IzM0YsT0FBT2lKLGdCQUFrQixTQUF5Qnl1RixFQUFHdm5ELEdBRXJFLE9BREF1bkQsRUFBRXhrRSxVQUFZaWQsRUFDUHVuRCxHQUdGQyxFQUFnQkQsRUFBR3ZuRCxHQ0xiLFNBQVN5bkQsRUFBZUMsRUFBVUMsR0FDL0NELEVBQVN6K0YsVUFBWTRHLE9BQU8xRyxPQUFPdytGLEVBQVcxK0YsV0FDOUN5K0YsRUFBU3orRixVQUFVb04sWUFBY3F4RixFQUNqQyxFQUFlQSxFQUFVQyxHQ0paLFNBQVMsSUFldEIsT0FkQSxFQUFXOTNGLE9BQU82dkIsUUFBVSxTQUFVdndCLEdBQ3BDLElBQUssSUFBSTVFLEVBQUksRUFBR0EsRUFBSXVILFVBQVVySCxPQUFRRixJQUFLLENBQ3pDLElBQUlXLEVBQVM0RyxVQUFVdkgsR0FFdkIsSUFBSyxJQUFJNUMsS0FBT3VELEVBQ1YyRSxPQUFPNUcsVUFBVW1OLGVBQWVsSSxLQUFLaEQsRUFBUXZELEtBQy9Dd0gsRUFBT3hILEdBQU91RCxFQUFPdkQsSUFLM0IsT0FBT3dILEdBR0YsRUFBU3pDLE1BQU03QyxLQUFNaUksV0NmOUIsU0FBUzgxRixFQUFXcHpGLEdBQ2xCLE1BQThCLE1BQXZCQSxFQUFTQyxPQUFPLEdBSXpCLFNBQVNvekYsRUFBVXptRixFQUFNcFcsR0FDdkIsSUFBSyxJQUFJVCxFQUFJUyxFQUFPK1osRUFBSXhhLEVBQUksRUFBRzBhLEVBQUk3RCxFQUFLM1csT0FBUXNhLEVBQUlFLEVBQUcxYSxHQUFLLEVBQUd3YSxHQUFLLEVBQ2xFM0QsRUFBSzdXLEdBQUs2VyxFQUFLMkQsR0FHakIzRCxFQUFLcXpDLE1DUlAsU0FBUyxFQUFVaDVCLEVBQVc3eEIsR0FDMUIsSUFBSTZ4QixFQUlBLE1BQU0sSUFBSTF0QixNQU5MLG9CQ0tiLFNBQVMrNUYsRUFBZ0JwMUYsR0FDdkIsTUFBMEIsTUFBbkJBLEVBQUsrQixPQUFPLEdBQWEvQixFQUFPLElBQU1BLEVBUS9DLFNBQVNxMUYsRUFBY3IxRixFQUFNbXNELEdBQzNCLE9BSkYsU0FBcUJuc0QsRUFBTW1zRCxHQUN6QixPQUE0RCxJQUFyRG5zRCxFQUFLOUssY0FBY2xCLFFBQVFtNEQsRUFBT2ozRCxpQkFBdUUsSUFBL0MsTUFBTWxCLFFBQVFnTSxFQUFLK0IsT0FBT29xRCxFQUFPcDBELFNBRzNGdTlGLENBQVl0MUYsRUFBTW1zRCxHQUFVbnNELEVBQUt3QyxPQUFPMnBELEVBQU9wMEQsUUFBVWlJLEVBRWxFLFNBQVN1MUYsRUFBbUJ2MUYsR0FDMUIsTUFBd0MsTUFBakNBLEVBQUsrQixPQUFPL0IsRUFBS2pJLE9BQVMsR0FBYWlJLEVBQUtwRCxNQUFNLEdBQUksR0FBS29ELEVBMEJwRSxTQUFTdzFGLEVBQVd2ekYsR0FDbEIsSUFBSUgsRUFBV0csRUFBU0gsU0FDcEJKLEVBQVNPLEVBQVNQLE9BQ2xCQyxFQUFPTSxFQUFTTixLQUNoQjNCLEVBQU84QixHQUFZLElBR3ZCLE9BRklKLEdBQXFCLE1BQVhBLElBQWdCMUIsR0FBNkIsTUFBckIwQixFQUFPSyxPQUFPLEdBQWFMLEVBQVMsSUFBTUEsR0FDNUVDLEdBQWlCLE1BQVRBLElBQWMzQixHQUEyQixNQUFuQjJCLEVBQUtJLE9BQU8sR0FBYUosRUFBTyxJQUFNQSxHQUNqRTNCLEVBR1QsU0FBUyxFQUFlQSxFQUFNNlYsRUFBTzVnQixFQUFLd2dHLEdBQ3hDLElBQUl4ekYsRUFFZ0IsaUJBQVRqQyxHQUVUaUMsRUF2Q0osU0FBbUJqQyxHQUNqQixJQUFJOEIsRUFBVzlCLEdBQVEsSUFDbkIwQixFQUFTLEdBQ1RDLEVBQU8sR0FDUCt6RixFQUFZNXpGLEVBQVM5TixRQUFRLE1BRWQsSUFBZjBoRyxJQUNGL3pGLEVBQU9HLEVBQVNVLE9BQU9rekYsR0FDdkI1ekYsRUFBV0EsRUFBU1UsT0FBTyxFQUFHa3pGLElBR2hDLElBQUlDLEVBQWM3ekYsRUFBUzlOLFFBQVEsS0FPbkMsT0FMcUIsSUFBakIyaEcsSUFDRmowRixFQUFTSSxFQUFTVSxPQUFPbXpGLEdBQ3pCN3pGLEVBQVdBLEVBQVNVLE9BQU8sRUFBR216RixJQUd6QixDQUNMN3pGLFNBQVVBLEVBQ1ZKLE9BQW1CLE1BQVhBLEVBQWlCLEdBQUtBLEVBQzlCQyxLQUFlLE1BQVRBLEVBQWUsR0FBS0EsR0FrQmZpMEYsQ0FBVTUxRixHQUNyQmlDLEVBQVM0VCxNQUFRQSxTQUlTaGhCLEtBRDFCb04sRUFBVyxFQUFTLEdBQUlqQyxJQUNYOEIsV0FBd0JHLEVBQVNILFNBQVcsSUFFckRHLEVBQVNQLE9BQ3VCLE1BQTlCTyxFQUFTUCxPQUFPSyxPQUFPLEtBQVlFLEVBQVNQLE9BQVMsSUFBTU8sRUFBU1AsUUFFeEVPLEVBQVNQLE9BQVMsR0FHaEJPLEVBQVNOLEtBQ3FCLE1BQTVCTSxFQUFTTixLQUFLSSxPQUFPLEtBQVlFLEVBQVNOLEtBQU8sSUFBTU0sRUFBU04sTUFFcEVNLEVBQVNOLEtBQU8sUUFHSjlNLElBQVZnaEIsUUFBMENoaEIsSUFBbkJvTixFQUFTNFQsUUFBcUI1VCxFQUFTNFQsTUFBUUEsSUFHNUUsSUFDRTVULEVBQVNILFNBQVcrekYsVUFBVTV6RixFQUFTSCxVQUN2QyxNQUFPbEQsR0FDUCxNQUFJQSxhQUFhbzhDLFNBQ1QsSUFBSUEsU0FBUyxhQUFlLzRDLEVBQVNILFNBQXhCLGlGQUVibEQsRUFvQlYsT0FoQkkzSixJQUFLZ04sRUFBU2hOLElBQU1BLEdBRXBCd2dHLEVBRUd4ekYsRUFBU0gsU0FFNkIsTUFBaENHLEVBQVNILFNBQVNDLE9BQU8sS0FDbENFLEVBQVNILFNGckZmLFNBQXlCa00sRUFBSUMsUUFDZHBaLElBQVRvWixJQUFvQkEsRUFBTyxJQUUvQixJQWtCSTZuRixFQWxCQUMsRUFBVy9uRixHQUFNQSxFQUFHMUwsTUFBTSxNQUFTLEdBQ25DMHpGLEVBQWEvbkYsR0FBUUEsRUFBSzNMLE1BQU0sTUFBUyxHQUV6QzJ6RixFQUFVam9GLEdBQU1rbkYsRUFBV2xuRixHQUMzQmtvRixFQUFZam9GLEdBQVFpbkYsRUFBV2puRixHQUMvQmtvRixFQUFhRixHQUFXQyxFQVc1QixHQVRJbG9GLEdBQU1rbkYsRUFBV2xuRixHQUVuQmdvRixFQUFZRCxFQUNIQSxFQUFRaCtGLFNBRWpCaStGLEVBQVVqMEMsTUFDVmkwQyxFQUFZQSxFQUFVLzdGLE9BQU84N0YsS0FHMUJDLEVBQVVqK0YsT0FBUSxNQUFPLElBRzlCLEdBQUlpK0YsRUFBVWorRixPQUFRLENBQ3BCLElBQUl5ZCxFQUFPd2dGLEVBQVVBLEVBQVVqK0YsT0FBUyxHQUN4Qys5RixFQUE0QixNQUFUdGdGLEdBQXlCLE9BQVRBLEdBQTBCLEtBQVRBLE9BRXBEc2dGLEdBQW1CLEVBSXJCLElBREEsSUFBSU0sRUFBSyxFQUNBditGLEVBQUltK0YsRUFBVWorRixPQUFRRixHQUFLLEVBQUdBLElBQUssQ0FDMUMsSUFBSSsvQyxFQUFPbytDLEVBQVVuK0YsR0FFUixNQUFUKy9DLEVBQ0Z1OUMsRUFBVWEsRUFBV24rRixHQUNILE9BQVQrL0MsR0FDVHU5QyxFQUFVYSxFQUFXbitGLEdBQ3JCdStGLEtBQ1NBLElBQ1RqQixFQUFVYSxFQUFXbitGLEdBQ3JCdStGLEtBSUosSUFBS0QsRUFBWSxLQUFPQyxJQUFNQSxFQUFJSixFQUFVdDhGLFFBQVEsT0FHbER5OEYsR0FDaUIsS0FBakJILEVBQVUsSUFDUkEsRUFBVSxJQUFPZCxFQUFXYyxFQUFVLEtBRXhDQSxFQUFVdDhGLFFBQVEsSUFFcEIsSUFBSTRKLEVBQVMweUYsRUFBVXIyRixLQUFLLEtBSTVCLE9BRkltMkYsR0FBMEMsTUFBdEJ4eUYsRUFBT2QsUUFBUSxLQUFZYyxHQUFVLEtBRXREQSxFRTRCaUIsQ0FBZ0JyQixFQUFTSCxTQUFVMnpGLEVBQWdCM3pGLFdBRnZFRyxFQUFTSCxTQUFXMnpGLEVBQWdCM3pGLFNBTWpDRyxFQUFTSCxXQUNaRyxFQUFTSCxTQUFXLEtBSWpCRyxFQU1ULFNBQVNvMEYsSUFDUCxJQUFJQyxFQUFTLEtBaUNUL3JCLEVBQVksR0E0QmhCLE1BQU8sQ0FDTGdzQixVQTVERixTQUFtQkMsR0FHakIsT0FEQUYsRUFBU0UsRUFDRixXQUNERixJQUFXRSxJQUFZRixFQUFTLFFBeUR0Q0csb0JBckRGLFNBQTZCeDBGLEVBQVVxNUUsRUFBUW9iLEVBQXFCajBGLEdBSWxFLEdBQWMsTUFBVjZ6RixFQUFnQixDQUNsQixJQUFJaHpGLEVBQTJCLG1CQUFYZ3pGLEVBQXdCQSxFQUFPcjBGLEVBQVVxNUUsR0FBVWdiLEVBRWpELGlCQUFYaHpGLEVBQzBCLG1CQUF4Qm96RixFQUNUQSxFQUFvQnB6RixFQUFRYixHQUc1QkEsR0FBUyxHQUlYQSxHQUFvQixJQUFYYSxRQUdYYixHQUFTLElBbUNYazBGLGVBN0JGLFNBQXdCNzdGLEdBQ3RCLElBQUk4N0YsR0FBVyxFQUVmLFNBQVN4K0YsSUFDSHcrRixHQUFVOTdGLEVBQUdkLFdBQU0sRUFBUW9GLFdBSWpDLE9BREFtckUsRUFBVWx5RSxLQUFLRCxHQUNSLFdBQ0x3K0YsR0FBVyxFQUNYcnNCLEVBQVlBLEVBQVV6NUQsUUFBTyxTQUFVZ2dCLEdBQ3JDLE9BQU9BLElBQVMxNEIsT0FtQnBCeStGLGdCQWRGLFdBQ0UsSUFBSyxJQUFJQyxFQUFPMTNGLFVBQVVySCxPQUFRb0gsRUFBTyxJQUFJcEYsTUFBTSs4RixHQUFPQyxFQUFPLEVBQUdBLEVBQU9ELEVBQU1DLElBQy9FNTNGLEVBQUs0M0YsR0FBUTMzRixVQUFVMjNGLEdBR3pCeHNCLEVBQVV4MUUsU0FBUSxTQUFVcUQsR0FDMUIsT0FBT0EsRUFBUzRCLFdBQU0sRUFBUW1GLFFBWXBDLElBQUk2M0YsSUFBaUMsb0JBQVhoMUYsU0FBMEJBLE9BQU96QixXQUFZeUIsT0FBT3pCLFNBQVNhLGVBQ3ZGLFNBQVM2MUYsRUFBZ0IvL0YsRUFBU3VMLEdBQ2hDQSxFQUFTVCxPQUFPazFGLFFBQVFoZ0csSUF3QzFCLElBQUlpZ0csRUFBZ0IsV0FDaEJDLEVBQWtCLGFBRXRCLFNBQVNDLElBQ1AsSUFDRSxPQUFPcjFGLE9BQU9zMUYsUUFBUXpoRixPQUFTLEdBQy9CLE1BQU9qWCxHQUdQLE1BQU8sSUFTWCxTQUFTMjRGLEVBQXFCem9FLFFBQ2QsSUFBVkEsSUFDRkEsRUFBUSxJQUdUa29FLEdBQXNHLEdBQVUsR0FDakgsSUFyREkzbEMsRUFxREFtbUMsRUFBZ0J4MUYsT0FBT3MxRixRQUN2QkcsSUFyRCtCLEtBRC9CcG1DLEVBQUtydkQsT0FBT2YsVUFBVUMsV0FDbEJsTixRQUFRLGdCQUF1RCxJQUEvQnE5RCxFQUFHcjlELFFBQVEsaUJBQTJELElBQWpDcTlELEVBQUdyOUQsUUFBUSxtQkFBcUQsSUFBMUJxOUQsRUFBR3I5RCxRQUFRLFlBQXFELElBQWpDcTlELEVBQUdyOUQsUUFBUSxtQkFDdEpnTyxPQUFPczFGLFNBQVcsY0FBZXQxRixPQUFPczFGLFFBcUQzQ0ksS0E3Q3NELElBQW5EMTFGLE9BQU9mLFVBQVVDLFVBQVVsTixRQUFRLFlBOEN0QzJqRyxFQUFTN29FLEVBQ1Q4b0UsRUFBc0JELEVBQU9FLGFBQzdCQSxPQUF1QyxJQUF4QkQsR0FBeUNBLEVBQ3hERSxFQUF3QkgsRUFBT2pCLG9CQUMvQkEsT0FBZ0QsSUFBMUJvQixFQUFtQ2IsRUFBa0JhLEVBQzNFQyxFQUFtQkosRUFBT0ssVUFDMUJBLE9BQWlDLElBQXJCRCxFQUE4QixFQUFJQSxFQUM5Q0UsRUFBV25wRSxFQUFNbXBFLFNBQVcxQyxFQUFtQkgsRUFBZ0J0bUUsRUFBTW1wRSxXQUFhLEdBRXRGLFNBQVNDLEVBQWVDLEdBQ3RCLElBQUlDLEVBQU9ELEdBQWdCLEdBQ3ZCbGpHLEVBQU1takcsRUFBS25qRyxJQUNYNGdCLEVBQVF1aUYsRUFBS3ZpRixNQUVid2lGLEVBQW1CcjJGLE9BQU9DLFNBSTFCakMsRUFIV3E0RixFQUFpQnYyRixTQUNuQnUyRixFQUFpQjMyRixPQUNuQjIyRixFQUFpQjEyRixLQUk1QixPQURJczJGLElBQVVqNEYsRUFBT3ExRixFQUFjcjFGLEVBQU1pNEYsSUFDbEMsRUFBZWo0RixFQUFNNlYsRUFBTzVnQixHQUdyQyxTQUFTcWpHLElBQ1AsT0FBTzFxRixLQUFLb2lCLFNBQVM1NEIsU0FBUyxJQUFJb0wsT0FBTyxFQUFHdzFGLEdBRzlDLElBQUlPLEVBQW9CbEMsSUFFeEIsU0FBU3BKLEVBQVN1TCxHQUNoQixFQUFTbEIsRUFBU2tCLEdBRWxCbEIsRUFBUXYvRixPQUFTeS9GLEVBQWN6L0YsT0FDL0J3Z0csRUFBa0IxQixnQkFBZ0JTLEVBQVFyMUYsU0FBVXExRixFQUFRaGMsUUFHOUQsU0FBU21kLEVBQWV6aEUsSUFwRTFCLFNBQW1DQSxHQUNqQyxZQUF1Qm5pQyxJQUFoQm1pQyxFQUFNbmhCLFFBQWlFLElBQTFDNVUsVUFBVUMsVUFBVWxOLFFBQVEsVUFxRTFEMGtHLENBQTBCMWhFLElBQzlCMmhFLEVBQVVULEVBQWVsaEUsRUFBTW5oQixRQUdqQyxTQUFTK2lGLElBQ1BELEVBQVVULEVBQWViLE1BRzNCLElBQUl3QixHQUFlLEVBRW5CLFNBQVNGLEVBQVUxMkYsR0FDYjQyRixHQUNGQSxHQUFlLEVBQ2Y1TCxLQUdBc0wsRUFBa0I5QixvQkFBb0J4MEYsRUFEekIsTUFDMkN5MEYsR0FBcUIsU0FBVXJ0RCxHQUNqRkEsRUFDRjRqRCxFQUFTLENBQ1AzUixPQUpPLE1BS1ByNUUsU0FBVUEsSUFTcEIsU0FBbUI2MkYsR0FDakIsSUFBSUMsRUFBYXpCLEVBQVFyMUYsU0FJckJrSCxFQUFVNnZGLEVBQVFobEcsUUFBUStrRyxFQUFXOWpHLE1BQ3hCLElBQWJrVSxJQUFnQkEsRUFBVSxHQUM5QixJQUFJMEcsRUFBWW1wRixFQUFRaGxHLFFBQVE4a0csRUFBYTdqRyxNQUMxQixJQUFmNGEsSUFBa0JBLEVBQVksR0FDbEMsSUFBSWdsQixFQUFRMXJCLEVBQVUwRyxFQUVsQmdsQixJQUNGZ2tFLEdBQWUsRUFDZkksRUFBR3BrRSxJQW5CQ3FrRSxDQUFVajNGLE1BdUJsQixJQUFJazNGLEVBQWtCakIsRUFBZWIsS0FDakMyQixFQUFVLENBQUNHLEVBQWdCbGtHLEtBRS9CLFNBQVNta0csRUFBV24zRixHQUNsQixPQUFPZzJGLEVBQVd6QyxFQUFXdnpGLEdBdUUvQixTQUFTZzNGLEVBQUcxbUYsR0FDVmlsRixFQUFjeUIsR0FBRzFtRixHQVduQixJQUFJOG1GLEVBQWdCLEVBRXBCLFNBQVNDLEVBQWtCemtFLEdBR0gsS0FGdEJ3a0UsR0FBaUJ4a0UsSUFFb0IsSUFBVkEsR0FDekI3eUIsT0FBTzFNLGlCQUFpQjZoRyxFQUFlc0IsR0FDbkNmLEdBQXlCMTFGLE9BQU8xTSxpQkFBaUI4aEcsRUFBaUJ3QixJQUMzQyxJQUFsQlMsSUFDVHIzRixPQUFPaFEsb0JBQW9CbWxHLEVBQWVzQixHQUN0Q2YsR0FBeUIxMUYsT0FBT2hRLG9CQUFvQm9sRyxFQUFpQndCLElBSTdFLElBQUlXLEdBQVksRUFpQ1pqQyxFQUFVLENBQ1p2L0YsT0FBUXkvRixFQUFjei9GLE9BQ3RCdWpGLE9BQVEsTUFDUnI1RSxTQUFVazNGLEVBQ1ZDLFdBQVlBLEVBQ1ovZ0csS0FwSUYsU0FBYzJILEVBQU02VixHQUVsQixJQUFJeWxFLEVBQVMsT0FDVHI1RSxFQUFXLEVBQWVqQyxFQUFNNlYsRUFBT3lpRixJQUFhaEIsRUFBUXIxRixVQUNoRXMyRixFQUFrQjlCLG9CQUFvQngwRixFQUFVcTVFLEVBQVFvYixHQUFxQixTQUFVcnRELEdBQ3JGLEdBQUtBLEVBQUwsQ0FDQSxJQUFJL25DLEVBQU84M0YsRUFBV24zRixHQUNsQmhOLEVBQU1nTixFQUFTaE4sSUFDZjRnQixFQUFRNVQsRUFBUzRULE1BRXJCLEdBQUk0aEYsRUFNRixHQUxBRCxFQUFjZ0MsVUFBVSxDQUN0QnZrRyxJQUFLQSxFQUNMNGdCLE1BQU9BLEdBQ04sS0FBTXZVLEdBRUx1MkYsRUFDRjcxRixPQUFPQyxTQUFTWCxLQUFPQSxNQUNsQixDQUNMLElBQUltNEYsRUFBWVQsRUFBUWhsRyxRQUFRc2pHLEVBQVFyMUYsU0FBU2hOLEtBQzdDeWtHLEVBQVdWLEVBQVFwOEYsTUFBTSxFQUFHNjhGLEVBQVksR0FDNUNDLEVBQVNyaEcsS0FBSzRKLEVBQVNoTixLQUN2QitqRyxFQUFVVSxFQUNWek0sRUFBUyxDQUNQM1IsT0FBUUEsRUFDUnI1RSxTQUFVQSxTQUtkRCxPQUFPQyxTQUFTWCxLQUFPQSxPQXVHM0I5RyxRQWxHRixTQUFpQndGLEVBQU02VixHQUVyQixJQUFJeWxFLEVBQVMsVUFDVHI1RSxFQUFXLEVBQWVqQyxFQUFNNlYsRUFBT3lpRixJQUFhaEIsRUFBUXIxRixVQUNoRXMyRixFQUFrQjlCLG9CQUFvQngwRixFQUFVcTVFLEVBQVFvYixHQUFxQixTQUFVcnRELEdBQ3JGLEdBQUtBLEVBQUwsQ0FDQSxJQUFJL25DLEVBQU84M0YsRUFBV24zRixHQUNsQmhOLEVBQU1nTixFQUFTaE4sSUFDZjRnQixFQUFRNVQsRUFBUzRULE1BRXJCLEdBQUk0aEYsRUFNRixHQUxBRCxFQUFjbUMsYUFBYSxDQUN6QjFrRyxJQUFLQSxFQUNMNGdCLE1BQU9BLEdBQ04sS0FBTXZVLEdBRUx1MkYsRUFDRjcxRixPQUFPQyxTQUFTekgsUUFBUThHLE9BQ25CLENBQ0wsSUFBSW00RixFQUFZVCxFQUFRaGxHLFFBQVFzakcsRUFBUXIxRixTQUFTaE4sTUFDOUIsSUFBZndrRyxJQUFrQlQsRUFBUVMsR0FBYXgzRixFQUFTaE4sS0FDcERnNEYsRUFBUyxDQUNQM1IsT0FBUUEsRUFDUnI1RSxTQUFVQSxTQUtkRCxPQUFPQyxTQUFTekgsUUFBUThHLFFBdUU1QjIzRixHQUFJQSxFQUNKVyxPQS9ERixXQUNFWCxHQUFJLElBK0RKWSxVQTVERixXQUNFWixFQUFHLElBNERIbGdELE1BekNGLFNBQWV1OUMsUUFDRSxJQUFYQSxJQUNGQSxHQUFTLEdBR1gsSUFBSXdELEVBQVV2QixFQUFrQmhDLFVBQVVELEdBTzFDLE9BTEtpRCxJQUNIRCxFQUFrQixHQUNsQkMsR0FBWSxHQUdQLFdBTUwsT0FMSUEsSUFDRkEsR0FBWSxFQUNaRCxHQUFtQixJQUdkUSxNQXdCVEMsT0FwQkYsU0FBZ0IzaEcsR0FDZCxJQUFJNGhHLEVBQVd6QixFQUFrQjVCLGVBQWV2K0YsR0FFaEQsT0FEQWtoRyxFQUFrQixHQUNYLFdBQ0xBLEdBQW1CLEdBQ25CVSxPQWlCSixPQUFPMUMseUJDaGVMMkMsRUFBd0IsV0FDeEJDLEVBQXVDLG9CQUFmdDFFLFdBQTZCQSxXQUErQixvQkFBWDVpQixPQUF5QkEsWUFBMkIsSUFBWCxFQUFBNmlCLEVBQXlCLEVBQUFBLEVBQVMsR0FleEosU0FBU3MxRSxFQUFtQjltRyxHQUMxQixJQUFJb0gsRUFBVyxHQUNmLE1BQU8sQ0FDTDIvRixHQUFJLFNBQVlqakUsR0FDZDE4QixFQUFTcEMsS0FBSzgrQixJQUVoQmtqRSxJQUFLLFNBQWFsakUsR0FDaEIxOEIsRUFBV0EsRUFBU3FXLFFBQU8sU0FBVS9WLEdBQ25DLE9BQU9BLElBQU1vOEIsTUFHakJsdkIsSUFBSyxXQUNILE9BQU81VSxHQUVUMlcsSUFBSyxTQUFhc3dGLEVBQVVDLEdBQzFCbG5HLEVBQVFpbkcsRUFDUjcvRixFQUFTMUYsU0FBUSxTQUFVb2lDLEdBQ3pCLE9BQU9BLEVBQVE5akMsRUFBT2tuRyxRQXlJOUIsUUFGWSxpQkE3SFosU0FBNEJybUMsRUFBY3NtQyxHQUN4QyxJQUFJQyxFQUF1QkMsRUF4Q3ZCemxHLEVBMENBMGxHLEVBQWMsNEJBekNYVCxFQURIamxHLEVBQU0seUJBQ29CaWxHLEVBQWVqbEcsSUFBUSxHQUFLLEdBeUNJLE1BRTFEKzRGLEVBQXdCLFNBQVU0TSxHQUdwQyxTQUFTNU0sSUFDUCxJQUFJNk0sRUFJSixPQUZBQSxFQUFRRCxFQUFXNWdHLE1BQU03QyxLQUFNaUksWUFBY2pJLE1BQ3ZDMmpHLFFBQVVYLEVBQW1CVSxFQUFNL3JFLE1BQU16N0IsT0FDeEN3bkcsRUFQVDlGLEVBQWUvRyxFQUFVNE0sR0FVekIsSUFBSUcsRUFBUy9NLEVBQVN6M0YsVUFvQ3RCLE9BbENBd2tHLEVBQU83cEIsZ0JBQWtCLFdBQ3ZCLElBQUlrbkIsRUFFSixPQUFPQSxFQUFPLElBQVN1QyxHQUFleGpHLEtBQUsyakcsUUFBUzFDLEdBR3REMkMsRUFBT2prQiwwQkFBNEIsU0FBbUNra0IsR0FDcEUsR0FBSTdqRyxLQUFLMjNCLE1BQU16N0IsUUFBVTJuRyxFQUFVM25HLE1BQU8sQ0FDeEMsSUFFSWtuRyxFQUZBVSxFQUFXOWpHLEtBQUsyM0IsTUFBTXo3QixNQUN0QmluRyxFQUFXVSxFQUFVM25HLFFBOURmbTJCLEVBaUVHeXhFLE1BakVBbm9FLEVBaUVVd25FLEdBL0RkLElBQU45d0UsR0FBVyxFQUFJQSxHQUFNLEVBQUlzSixFQUV6QnRKLEdBQU1BLEdBQUtzSixHQUFNQSxHQThEbEJ5bkUsRUFBYyxHQUVkQSxFQUE4QyxtQkFBekJDLEVBQXNDQSxFQUFxQlMsRUFBVVgsR0FBWUwsRUFRbEYsSUFGcEJNLEdBQWUsSUFHYnBqRyxLQUFLMmpHLFFBQVE5d0YsSUFBSWd4RixFQUFVM25HLE1BQU9rbkcsSUE3RTlDLElBQWtCL3dFLEVBQUdzSixHQW1GakJpb0UsRUFBTzl2QyxPQUFTLFdBQ2QsT0FBTzl6RCxLQUFLMjNCLE1BQU1nbUMsVUFHYms1QixFQS9DbUIsQ0FnRDFCLEVBQUFwWSxXQUVGb1ksRUFBU25rQyxvQkFBcUI0d0MsRUFBd0IsSUFBMEJFLEdBQWUsc0JBQTZCRixHQUU1SCxJQUFJeE0sRUFBd0IsU0FBVWlOLEdBR3BDLFNBQVNqTixJQUNQLElBQUlrTixFQWlCSixPQWZBQSxFQUFTRCxFQUFZbGhHLE1BQU03QyxLQUFNaUksWUFBY2pJLE1BQ3hDMGUsTUFBUSxDQUNieGlCLE1BQU84bkcsRUFBTzNuQyxZQUdoQjJuQyxFQUFPQyxTQUFXLFNBQVVkLEVBQVVDLEdBR0MsS0FGSSxFQUF0QlksRUFBTzFtQixjQUVOOGxCLElBQ2xCWSxFQUFPbE8sU0FBUyxDQUNkNTVGLE1BQU84bkcsRUFBTzNuQyxjQUtiMm5DLEVBcEJUcEcsRUFBZTlHLEVBQVVpTixHQXVCekIsSUFBSUcsRUFBVXBOLEVBQVMxM0YsVUFrQ3ZCLE9BaENBOGtHLEVBQVF2a0IsMEJBQTRCLFNBQW1Da2tCLEdBQ3JFLElBQUl2bUIsRUFBZXVtQixFQUFVdm1CLGFBQzdCdDlFLEtBQUtzOUUsYUFBZUEsTUFBQUEsRUFBc0R3bEIsRUFBd0J4bEIsR0FHcEc0bUIsRUFBUWprQixrQkFBb0IsV0FDdEJqZ0YsS0FBS2QsUUFBUXNrRyxJQUNmeGpHLEtBQUtkLFFBQVFza0csR0FBYVAsR0FBR2pqRyxLQUFLaWtHLFVBR3BDLElBQUkzbUIsRUFBZXQ5RSxLQUFLMjNCLE1BQU0ybEQsYUFDOUJ0OUUsS0FBS3M5RSxhQUFlQSxNQUFBQSxFQUFzRHdsQixFQUF3QnhsQixHQUdwRzRtQixFQUFRblkscUJBQXVCLFdBQ3pCL3JGLEtBQUtkLFFBQVFza0csSUFDZnhqRyxLQUFLZCxRQUFRc2tHLEdBQWFOLElBQUlsakcsS0FBS2lrRyxXQUl2Q0MsRUFBUTduQyxTQUFXLFdBQ2pCLE9BQUlyOEQsS0FBS2QsUUFBUXNrRyxHQUNSeGpHLEtBQUtkLFFBQVFza0csR0FBYTF5RixNQUUxQmlzRCxHQUlYbW5DLEVBQVFwd0MsT0FBUyxXQUNmLE9BcEhhNkosRUFvSEkzOUQsS0FBSzIzQixNQUFNZ21DLFNBbkh6Qi82RCxNQUFNNEMsUUFBUW00RCxHQUFZQSxFQUFTLEdBQUtBLEdBbUhMMzlELEtBQUswZSxNQUFNeGlCLE9BcEh2RCxJQUFtQnloRSxHQXVIUm01QixFQTFEbUIsQ0EyRDFCLEVBQUFyWSxXQUdGLE9BREFxWSxFQUFTbGtDLGVBQWdCMndDLEVBQXdCLElBQTBCQyxHQUFlLFdBQWtCRCxHQUNyRyxDQUNMMU0sU0FBVUEsRUFDVkMsU0FBVUEsMkJDektDLFNBQVMsRUFBOEJ6MUYsRUFBUThpRyxHQUM1RCxHQUFjLE1BQVY5aUcsRUFBZ0IsTUFBTyxHQUMzQixJQUVJdkQsRUFBSzRDLEVBRkw0RSxFQUFTLEdBQ1Q4K0YsRUFBYXArRixPQUFPQyxLQUFLNUUsR0FHN0IsSUFBS1gsRUFBSSxFQUFHQSxFQUFJMGpHLEVBQVd4akcsT0FBUUYsSUFDakM1QyxFQUFNc21HLEVBQVcxakcsR0FDYnlqRyxFQUFTdG5HLFFBQVFpQixJQUFRLElBQzdCd0gsRUFBT3hILEdBQU91RCxFQUFPdkQsSUFHdkIsT0FBT3dILHNCQ0dMKytGLEVBQXFCLFNBQTRCei9GLEdBQ25ELElBQUkxRixFQUFVLElBRWQsT0FEQUEsRUFBUTR6RCxZQUFjbHVELEVBQ2YxRixHQUdMb2xHLEVBQThCRCxFQUFtQixrQkFFakRubEcsRUFBdUJtbEcsRUFBbUIsVUFNMUNFLEVBQXNCLFNBQVVDLEdBWWxDLFNBQVNELEVBQU81c0UsR0FDZCxJQUFJK3JFLEVBMEJKLE9BeEJBQSxFQUFRYyxFQUFpQm5nRyxLQUFLckUsS0FBTTIzQixJQUFVMzNCLE1BQ3hDMGUsTUFBUSxDQUNaNVQsU0FBVTZzQixFQUFNd29FLFFBQVFyMUYsVUFPMUI0NEYsRUFBTWUsWUFBYSxFQUNuQmYsRUFBTWdCLGlCQUFtQixLQUVwQi9zRSxFQUFNZ3RFLGdCQUNUakIsRUFBTWIsU0FBV2xyRSxFQUFNd29FLFFBQVF5QyxRQUFPLFNBQVU5M0YsR0FDMUM0NEYsRUFBTWUsV0FDUmYsRUFBTTVOLFNBQVMsQ0FDYmhyRixTQUFVQSxJQUdaNDRGLEVBQU1nQixpQkFBbUI1NUYsTUFLeEI0NEYsRUF0Q1Q5RixFQUFlMkcsRUFBUUMsR0FFdkJELEVBQU9LLGlCQUFtQixTQUEwQmo2RixHQUNsRCxNQUFPLENBQ0w5QixLQUFNLElBQ05uTixJQUFLLElBQ0xhLE9BQVEsR0FDUnNvRyxRQUFzQixNQUFibDZGLElBa0NiLElBQUlpNUYsRUFBU1csRUFBT25sRyxVQWtDcEIsT0FoQ0F3a0csRUFBTzNqQixrQkFBb0IsV0FDekJqZ0YsS0FBS3lrRyxZQUFhLEVBRWR6a0csS0FBSzBrRyxrQkFDUDFrRyxLQUFLODFGLFNBQVMsQ0FDWmhyRixTQUFVOUssS0FBSzBrRyxvQkFLckJkLEVBQU83WCxxQkFBdUIsV0FDeEIvckYsS0FBSzZpRyxXQUNQN2lHLEtBQUs2aUcsV0FDTDdpRyxLQUFLeWtHLFlBQWEsRUFDbEJ6a0csS0FBSzBrRyxpQkFBbUIsT0FJNUJkLEVBQU85dkMsT0FBUyxXQUNkLE9BQW9CLGdCQUFvQjUwRCxFQUFRMjNGLFNBQVUsQ0FDeEQzNkYsTUFBTyxDQUNMaWtHLFFBQVNuZ0csS0FBSzIzQixNQUFNd29FLFFBQ3BCcjFGLFNBQVU5SyxLQUFLMGUsTUFBTTVULFNBQ3JCekIsTUFBT2s3RixFQUFPSyxpQkFBaUI1a0csS0FBSzBlLE1BQU01VCxTQUFTSCxVQUNuRGc2RixjQUFlM2tHLEtBQUsyM0IsTUFBTWd0RSxnQkFFZCxnQkFBb0JMLEVBQWV6TixTQUFVLENBQzNEbDVCLFNBQVUzOUQsS0FBSzIzQixNQUFNZ21DLFVBQVksS0FDakN6aEUsTUFBTzhELEtBQUsyM0IsTUFBTXdvRSxZQUlmb0UsRUE1RWlCLENBNkV4QixhQTJDQSxZQTBDQSxZQTRIRixJQUFJTyxFQUFVLEdBRVZDLEVBQWUsRUFvSWpCLFlBZ0pBLFlBdURBLFlBNkNlLGFDdHFCakIsSUFBSUMsRUFBNkIsU0FBVVIsR0FHekMsU0FBU1EsSUFHUCxJQUZBLElBQUl0QixFQUVLL0QsRUFBTzEzRixVQUFVckgsT0FBUW9ILEVBQU8sSUFBSXBGLE1BQU0rOEYsR0FBT0MsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUMvRTUzRixFQUFLNDNGLEdBQVEzM0YsVUFBVTIzRixHQUt6QixPQUZBOEQsRUFBUWMsRUFBaUJuZ0csS0FBS3hCLE1BQU0yaEcsRUFBa0IsQ0FBQ3hrRyxNQUFNOEMsT0FBT2tGLEtBQVVoSSxNQUN4RW1nRyxRQUFVQyxFQUFxQnNELEVBQU0vckUsT0FDcEMrckUsRUFZVCxPQXZCQTlGLEVBQWVvSCxFQUFlUixHQWNqQlEsRUFBYzVsRyxVQUVwQjAwRCxPQUFTLFdBQ2QsT0FBb0IsZ0JBQW9CeXdDLEVBQVEsQ0FDOUNwRSxRQUFTbmdHLEtBQUttZ0csUUFDZHhpQyxTQUFVMzlELEtBQUsyM0IsTUFBTWdtQyxZQUlsQnFuQyxFQXhCd0IsQ0F5Qi9CLGFBNkNBLFlBZUYsSUFBSUMsRUFBb0IsU0FBMkJwdUYsRUFBSXluRixHQUNyRCxNQUFxQixtQkFBUHpuRixFQUFvQkEsRUFBR3luRixHQUFtQnpuRixHQUV0RHF1RixFQUFzQixTQUE2QnJ1RixFQUFJeW5GLEdBQ3pELE1BQXFCLGlCQUFQem5GLEVBQWtCLEVBQWVBLEVBQUksS0FBTSxLQUFNeW5GLEdBQW1Cem5GLEdBR2hGc3VGLEVBQWlCLFNBQXdCbDBGLEdBQzNDLE9BQU9BLEdBR0xnbUYsRUFBYSxrQkFFUyxJQUFmQSxJQUNUQSxFQUFha08sR0FPZixJQUFJQyxFQUFhbk8sR0FBVyxTQUFVZ0ssRUFBTW9FLEdBQzFDLElBQUlDLEVBQVdyRSxFQUFLcUUsU0FDaEJDLEVBQVd0RSxFQUFLc0UsU0FDaEJDLEVBQVd2RSxFQUFLbFgsUUFDaEIwYixFQUFPLEVBQThCeEUsRUFBTSxDQUFDLFdBQVksV0FBWSxZQUVwRTM3RixFQUFTbWdHLEVBQUtuZ0csT0FFZHF5QixFQUFRLEVBQVMsR0FBSTh0RSxFQUFNLENBQzdCMWIsUUFBUyxTQUFpQmxxRCxHQUN4QixJQUNNMmxFLEdBQVVBLEVBQVMzbEUsR0FDdkIsTUFBTzZsRSxHQUVQLE1BREE3bEUsRUFBTWtzQyxpQkFDQTI1QixFQUdIN2xFLEVBQU0rckMsa0JBQ00sSUFBakIvckMsRUFBTWd1QyxRQUNMdm9FLEdBQXFCLFVBQVhBLEdBdkJqQixTQUF5QnU2QixHQUN2QixTQUFVQSxFQUFNNnRDLFNBQVc3dEMsRUFBTTR0QyxRQUFVNXRDLEVBQU0wdEMsU0FBVzF0QyxFQUFNMnRDLFVBdUI3RG00QixDQUFnQjlsRSxLQUViQSxFQUFNa3NDLGlCQUNOdzVCLFFBY1IsT0FQRTV0RSxFQUFNeW9ELElBREora0IsSUFBbUJsTyxHQUNUb08sR0FFQUMsRUFLTSxnQkFBb0IsSUFBSzN0RSxNQVczQ2l1RSxFQUFPM08sR0FBVyxTQUFVNE8sRUFBT1IsR0FDckMsSUFBSVMsRUFBa0JELEVBQU1seUMsVUFDeEJBLE9BQWdDLElBQXBCbXlDLEVBQTZCVixFQUFhVSxFQUN0RHppRyxFQUFVd2lHLEVBQU14aUcsUUFDaEJ3VCxFQUFLZ3ZGLEVBQU1odkYsR0FDWHl1RixFQUFXTyxFQUFNUCxTQUNqQkcsRUFBTyxFQUE4QkksRUFBTyxDQUFDLFlBQWEsVUFBVyxLQUFNLGFBRS9FLE9BQW9CLGdCQUFvQixXQUEwQixNQUFNLFNBQVUzbUcsR0FDL0VBLEdBQXFILEdBQVUsR0FDaEksSUFBSWloRyxFQUFVamhHLEVBQVFpaEcsUUFDbEJyMUYsRUFBV282RixFQUFvQkQsRUFBa0JwdUYsRUFBSTNYLEVBQVE0TCxVQUFXNUwsRUFBUTRMLFVBQ2hGWCxFQUFPVyxFQUFXcTFGLEVBQVE4QixXQUFXbjNGLEdBQVksR0FFakQ2c0IsRUFBUSxFQUFTLEdBQUk4dEUsRUFBTSxDQUM3QnQ3RixLQUFNQSxFQUNObzdGLFNBQVUsV0FDUixJQUFJejZGLEVBQVdtNkYsRUFBa0JwdUYsRUFBSTNYLEVBQVE0TCxVQUN6Q2k3RixFQUF3QjFILEVBQVduL0YsRUFBUTRMLFlBQWN1ekYsRUFBVzZHLEVBQW9CcDZGLEtBQy9FekgsR0FBVzBpRyxFQUF3QjVGLEVBQVE5OEYsUUFBVTg4RixFQUFRai9GLE1BQ25FNEosTUFXWCxPQU5JcTZGLElBQW1CbE8sRUFDckJ0L0QsRUFBTXlvRCxJQUFNaWxCLEdBQWdCQyxFQUU1QjN0RSxFQUFNMnRFLFNBQVdBLEVBR0MsZ0JBQW9CM3hDLEVBQVdoOEIsU0FtQm5EcXVFLEVBQW1CLFNBQXdCLzBGLEdBQzdDLE9BQU9BLEdBR0xnMUYsRUFBZSxrQkFFUyxJQUFqQkEsSUFDVEEsRUFBZUQsR0FpQkhDLEdBQWEsU0FBVWhGLEVBQU1vRSxHQUN6QyxJQUFJYSxFQUFtQmpGLEVBQUssZ0JBQ3hCa0YsT0FBbUMsSUFBckJELEVBQThCLE9BQVNBLEVBQ3JERSxFQUF1Qm5GLEVBQUtvRixnQkFDNUJBLE9BQTJDLElBQXpCRCxFQUFrQyxTQUFXQSxFQUMvREUsRUFBY3JGLEVBQUtxRixZQUNuQkMsRUFBZ0J0RixFQUFLdUYsVUFDckJ4dUMsRUFBUWlwQyxFQUFLanBDLE1BQ2J5dUMsRUFBZXhGLEVBQUt4QixTQUNwQmlILEVBQWV6RixFQUFLbjJGLFNBQ3BCeXJELEVBQVkwcUMsRUFBSzFxQyxVQUNqQkMsRUFBU3lxQyxFQUFLenFDLE9BQ2Rtd0MsRUFBWTFGLEVBQUs5cEUsTUFDakJ0Z0IsRUFBS29xRixFQUFLcHFGLEdBQ1Z5dUYsRUFBV3JFLEVBQUtxRSxTQUNoQkcsRUFBTyxFQUE4QnhFLEVBQU0sQ0FBQyxlQUFnQixrQkFBbUIsY0FBZSxZQUFhLFFBQVMsV0FBWSxXQUFZLFlBQWEsU0FBVSxRQUFTLEtBQU0sYUFFdEwsT0FBb0IsZ0JBQW9CLFdBQTBCLE1BQU0sU0FBVS9oRyxHQUMvRUEsR0FBd0gsR0FBVSxHQUNuSSxJQUFJby9GLEVBQWtCb0ksR0FBZ0J4bkcsRUFBUTRMLFNBQzFDODJGLEVBQWFzRCxFQUFvQkQsRUFBa0JwdUYsRUFBSXluRixHQUFrQkEsR0FDekV6MUYsRUFBTys0RixFQUFXajNGLFNBRWxCaThGLEVBQWMvOUYsR0FBUUEsRUFBS3hGLFFBQVEsNEJBQTZCLFFBQ2hFZ0csRUFBUXU5RixFRDJFaEIsU0FBbUJqOEYsRUFBVW5ILFFBQ1gsSUFBWkEsSUFDRkEsRUFBVSxLQUdXLGlCQUFaQSxHQUF3QlosTUFBTTRDLFFBQVFoQyxNQUMvQ0EsRUFBVSxDQUNScUYsS0FBTXJGLElBSVYsSUFBSXFqRyxFQUFXcmpHLEVBQ1hxRixFQUFPZytGLEVBQVNoK0YsS0FDaEJpK0YsRUFBaUJELEVBQVM3dUMsTUFDMUJBLE9BQTJCLElBQW5COHVDLEdBQW9DQSxFQUM1Q0MsRUFBa0JGLEVBQVNyd0MsT0FDM0JBLE9BQTZCLElBQXBCdXdDLEdBQXFDQSxFQUM5Q0MsRUFBcUJILEVBQVN0d0MsVUFDOUJBLE9BQW1DLElBQXZCeXdDLEdBQXdDQSxFQUV4RCxNQURZLEdBQUdsa0csT0FBTytGLEdBQ1RpK0IsUUFBTyxTQUFVL1osRUFBU2xrQixHQUNyQyxJQUFLQSxHQUFpQixLQUFUQSxFQUFhLE9BQU8sS0FDakMsR0FBSWtrQixFQUFTLE9BQU9BLEVBRXBCLElBQUlrNkUsRUEvQ1IsU0FBdUJwK0YsRUFBTXJGLEdBQzNCLElBQUkwakcsRUFBVyxHQUFLMWpHLEVBQVF1VCxJQUFNdlQsRUFBUWd6RCxPQUFTaHpELEVBQVEreUQsVUFDdkQ0d0MsRUFBWXJDLEVBQVFvQyxLQUFjcEMsRUFBUW9DLEdBQVksSUFDMUQsR0FBSUMsRUFBVXQrRixHQUFPLE9BQU9zK0YsRUFBVXQrRixHQUN0QyxJQUFJNUMsRUFBTyxHQUVQa0csRUFBUyxDQUNYbVYsT0FGVyxJQUFhelksRUFBTTVDLEVBQU16QyxHQUdwQ3lDLEtBQU1BLEdBUVIsT0FMSTgrRixFQWRhLE1BZWZvQyxFQUFVdCtGLEdBQVFzRCxFQUNsQjQ0RixLQUdLNTRGLEVBK0JjaTdGLENBQWN2K0YsRUFBTSxDQUNyQ2tPLElBQUtpaEQsRUFDTHhCLE9BQVFBLEVBQ1JELFVBQVdBLElBRVRqMUMsRUFBUzJsRixFQUFhM2xGLE9BQ3RCcmIsRUFBT2doRyxFQUFhaGhHLEtBRXBCb0QsRUFBUWlZLEVBQU81RSxLQUFLL1IsR0FDeEIsSUFBS3RCLEVBQU8sT0FBTyxLQUNuQixJQUFJM04sRUFBTTJOLEVBQU0sR0FDWnliLEVBQVN6YixFQUFNNUQsTUFBTSxHQUNyQm8vRixFQUFVbDZGLElBQWFqUCxFQUMzQixPQUFJczhELElBQVU2c0MsRUFBZ0IsS0FDdkIsQ0FDTGg4RixLQUFNQSxFQUVObk4sSUFBYyxNQUFUbU4sR0FBd0IsS0FBUm5OLEVBQWEsSUFBTUEsRUFFeENtcEcsUUFBU0EsRUFFVHRvRyxPQUFRMEosRUFBSzZnQyxRQUFPLFNBQVVoc0IsRUFBTWhkLEVBQUtxRCxHQUV2QyxPQURBMlosRUFBS2hkLEVBQUk4RyxNQUFRa2dCLEVBQU8zakIsR0FDakIyWixJQUNOLE9BRUosTUM3SHlCdXNGLENBQVUvSSxFQUFnQjN6RixTQUFVLENBQzVEOUIsS0FBTSs5RixFQUNONXVDLE1BQU9BLEVBQ1B6QixVQUFXQSxFQUNYQyxPQUFRQSxJQUNMLEtBQ0RpcEMsS0FBY2dILEVBQWVBLEVBQWFwOUYsRUFBT2kxRixHQUFtQmoxRixHQUNwRW05RixFQUFxQyxtQkFBbEJELEVBQStCQSxFQUFjOUcsR0FBWThHLEVBQzVFcHZFLEVBQTZCLG1CQUFkd3ZFLEVBQTJCQSxFQUFVbEgsR0FBWWtILEVBRWhFbEgsSUFDRitHLEVBakROLFdBQ0UsSUFBSyxJQUFJN0csRUFBTzEzRixVQUFVckgsT0FBUTBtRyxFQUFhLElBQUkxa0csTUFBTSs4RixHQUFPQyxFQUFPLEVBQUdBLEVBQU9ELEVBQU1DLElBQ3JGMEgsRUFBVzFILEdBQVEzM0YsVUFBVTIzRixHQUcvQixPQUFPMEgsRUFBVzN0RixRQUFPLFNBQVVqWixHQUNqQyxPQUFPQSxLQUNOOEgsS0FBSyxLQTBDUSsrRixDQUFlZixFQUFXSCxHQUN0Q2x2RSxFQUFRLEVBQVMsR0FBSUEsRUFBT212RSxJQUc5QixJQUFJM3VFLEVBQVEsRUFBUyxDQUNuQixlQUFnQjhuRSxHQUFZMEcsR0FBZSxLQUMzQ0ssVUFBV0EsRUFDWHJ2RSxNQUFPQSxFQUNQdGdCLEdBQUkrcUYsR0FDSDZELEdBU0gsT0FOSU8sSUFBcUJDLEVBQ3ZCdHVFLEVBQU15b0QsSUFBTWlsQixHQUFnQkMsRUFFNUIzdEUsRUFBTTJ0RSxTQUFXQSxFQUdDLGdCQUFvQk0sRUFBTWp1RSxTQXJEbEQsdUJDN09BLFFBSlksV0FDVixPQUFPLHlDQ01UNTRCLElBQUFBLFNBQUFBLGlCQUFpQyxFQUNqQ0EsSUFBQUEsU0FBQUEsUUFBaUUsK0JBRWpFKzBELEVBQUFBLEVBQUFBLFFBQ0UsZ0JBQUNreEMsRUFBRCxLQUNFLGdCQUFDLEVBQUQsT0FFRjU3RixTQUFTbytGLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20tY29uc3RydWN0b3ItYW5kLWxpc3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNvcnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9iYXNlNjQtbWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2suanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWh0bWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tZXhjZXB0aW9uLWNvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXJyb3ItdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZyZWV6aW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1hcHBseS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWVlZTc1NC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWZyb3VuZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1sb2cxMC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1zaWduLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtdXJsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcXVldWUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC13ZWJraXQtYnVnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcGFkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2Zmc2V0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wb3NpdGl2ZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS1ub2RlLXJlcXVpcmUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS1zcGVjaWVzLWFuZC1saXN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuY2F1c2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmF0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJldmVyc2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQtbWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUuZ2V0LXllYXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUuc2V0LXllYXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWdtdC1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5lcnJvci50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmdsb2JhbC10aGlzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jb3NoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaWduLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaW5oLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50YW5oLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1leHBvbmVudGlhbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaGFzLW93bi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbnkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3kuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudGVzdC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmF0LWFsdGVybmF0aXZlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5saW5rLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3Vic3RyLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLWVuZC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLXN0YXJ0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmlzLWNvbmNhdC1zcHJlYWRhYmxlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5yZXBsYWNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGVjaWVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNwbGl0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuYXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnVuZXNjYXBlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5hdG9iLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmJ0b2EuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24uc3RhY2suanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuc3RydWN0dXJlZC1jbG9uZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL3N0YWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbGF5b3V0cy9BcHAudHN4Iiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL2NsaWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zcG9ydCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBzQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdjYW5jZWxUb2tlbic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3NvY2tldFBhdGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZUVuY29kaW5nJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndmFsaWRhdGVTdGF0dXMnOiBtZXJnZURpcmVjdEtleXNcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgdmFyIG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICB2YXIgY29uZmlnVmFsdWUgPSBtZXJnZShwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9lbmhhbmNlRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4vdHJhbnNpdGlvbmFsJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICB2YXIgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgIHZhciBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgdmFyIHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcgfHwgKGZvcmNlZEpTT05QYXJzaW5nICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGVuaGFuY2VFcnJvcihlLCB0aGlzLCAnRV9KU09OX1BBUlNFJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI2LjFcIlxufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0KTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGb3JtRGF0YV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgVVJMU2VhcmNoUGFyYW1zXSc7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkgaXMgdHJ1ZWBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhhcmd1bWVudCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gY2hhckF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFByb3RvdHlwZSkge1xuICBpZiAoaXNQcm90b3R5cGVPZihQcm90b3R5cGUsIGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby10eXBlZC1hcnJheXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIERhdGFWaWV3ICE9ICd1bmRlZmluZWQnO1xuIiwiLy8gRkYyNi0gYnVnOiBBcnJheUJ1ZmZlcnMgYXJlIG5vbi1leHRlbnNpYmxlLCBidXQgT2JqZWN0LmlzRXh0ZW5zaWJsZSBkb2VzIG5vdCByZXBvcnQgaXRcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZShidWZmZXIpKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoYnVmZmVyLCAnYScsIHsgdmFsdWU6IDggfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciBVaW50OENsYW1wZWRBcnJheSA9IGdsb2JhbC5VaW50OENsYW1wZWRBcnJheTtcbnZhciBVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSA9IFVpbnQ4Q2xhbXBlZEFycmF5ICYmIFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZTtcbnZhciBUeXBlZEFycmF5ID0gSW50OEFycmF5ICYmIGdldFByb3RvdHlwZU9mKEludDhBcnJheSk7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IEludDhBcnJheVByb3RvdHlwZSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXlQcm90b3R5cGUpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgVFlQRURfQVJSQVlfVEFHID0gdWlkKCdUWVBFRF9BUlJBWV9UQUcnKTtcbnZhciBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiA9IHVpZCgnVFlQRURfQVJSQVlfQ09OU1RSVUNUT1InKTtcbi8vIEZpeGluZyBuYXRpdmUgdHlwZWQgYXJyYXlzIGluIE9wZXJhIFByZXN0byBjcmFzaGVzIHRoZSBicm93c2VyLCBzZWUgIzU5NVxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBOQVRJVkVfQVJSQVlfQlVGRkVSICYmICEhc2V0UHJvdG90eXBlT2YgJiYgY2xhc3NvZihnbG9iYWwub3BlcmEpICE9PSAnT3BlcmEnO1xudmFyIFRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCA9IGZhbHNlO1xudmFyIE5BTUUsIENvbnN0cnVjdG9yLCBQcm90b3R5cGU7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgSW50OEFycmF5OiAxLFxuICBVaW50OEFycmF5OiAxLFxuICBVaW50OENsYW1wZWRBcnJheTogMSxcbiAgSW50MTZBcnJheTogMixcbiAgVWludDE2QXJyYXk6IDIsXG4gIEludDMyQXJyYXk6IDQsXG4gIFVpbnQzMkFycmF5OiA0LFxuICBGbG9hdDMyQXJyYXk6IDQsXG4gIEZsb2F0NjRBcnJheTogOFxufTtcblxudmFyIEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgQmlnSW50NjRBcnJheTogOCxcbiAgQmlnVWludDY0QXJyYXk6IDhcbn07XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBrbGFzcyA9PT0gJ0RhdGFWaWV3J1xuICAgIHx8IGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzT3duKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzT3duKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGFUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5Jyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChDKSB7XG4gIGlmIChpc0NhbGxhYmxlKEMpICYmICghc2V0UHJvdG90eXBlT2YgfHwgaXNQcm90b3R5cGVPZihUeXBlZEFycmF5LCBDKSkpIHJldHVybiBDO1xuICB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoQykgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yJyk7XG59O1xuXG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQsIG9wdGlvbnMpIHtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuO1xuICBpZiAoZm9yY2VkKSBmb3IgKHZhciBBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIEtFWSkpIHRyeSB7XG4gICAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBvbGQgV2ViS2l0IGJ1ZyAtIHNvbWUgbWV0aG9kcyBhcmUgbm9uLWNvbmZpZ3VyYWJsZVxuICAgICAgdHJ5IHtcbiAgICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldID0gcHJvcGVydHk7XG4gICAgICB9IGNhdGNoIChlcnJvcjIpIHsgLyogZW1wdHkgKi8gfVxuICAgIH1cbiAgfVxuICBpZiAoIVR5cGVkQXJyYXlQcm90b3R5cGVbS0VZXSB8fCBmb3JjZWQpIHtcbiAgICByZWRlZmluZShUeXBlZEFycmF5UHJvdG90eXBlLCBLRVksIGZvcmNlZCA/IHByb3BlcnR5XG4gICAgICA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgSW50OEFycmF5UHJvdG90eXBlW0tFWV0gfHwgcHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQpIHtcbiAgdmFyIEFSUkFZLCBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybjtcbiAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgaWYgKGZvcmNlZCkgZm9yIChBUlJBWSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZKSkgdHJ5IHtcbiAgICAgICAgZGVsZXRlIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIH1cbiAgICBpZiAoIVR5cGVkQXJyYXlbS0VZXSB8fCBmb3JjZWQpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21lIDQ5LTUwIGAlVHlwZWRBcnJheSVgIG1ldGhvZHMgYXJlIG5vbi13cml0YWJsZSBub24tY29uZmlndXJhYmxlXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVkZWZpbmUoVHlwZWRBcnJheSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eSA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgVHlwZWRBcnJheVtLRVldIHx8IHByb3BlcnR5KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9IGVsc2UgcmV0dXJuO1xuICB9XG4gIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKCFUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXSB8fCBmb3JjZWQpKSB7XG4gICAgICByZWRlZmluZShUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSwgcHJvcGVydHkpO1xuICAgIH1cbiAgfVxufTtcblxuZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gIENvbnN0cnVjdG9yID0gZ2xvYmFsW05BTUVdO1xuICBQcm90b3R5cGUgPSBDb25zdHJ1Y3RvciAmJiBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIGlmIChQcm90b3R5cGUpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShQcm90b3R5cGUsIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SLCBDb25zdHJ1Y3Rvcik7XG4gIGVsc2UgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IGZhbHNlO1xufVxuXG5mb3IgKE5BTUUgaW4gQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gIENvbnN0cnVjdG9yID0gZ2xvYmFsW05BTUVdO1xuICBQcm90b3R5cGUgPSBDb25zdHJ1Y3RvciAmJiBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIGlmIChQcm90b3R5cGUpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShQcm90b3R5cGUsIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SLCBDb25zdHJ1Y3Rvcik7XG59XG5cbi8vIFdlYktpdCBidWcgLSB0eXBlZCBhcnJheXMgY29uc3RydWN0b3JzIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIWlzQ2FsbGFibGUoVHlwZWRBcnJheSkgfHwgVHlwZWRBcnJheSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3cgLS0gc2FmZVxuICBUeXBlZEFycmF5ID0gZnVuY3Rpb24gVHlwZWRBcnJheSgpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG4gIH07XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0sIFR5cGVkQXJyYXkpO1xuICB9XG59XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhVHlwZWRBcnJheVByb3RvdHlwZSB8fCBUeXBlZEFycmF5UHJvdG90eXBlID09PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkucHJvdG90eXBlO1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLnByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gIH1cbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIG9uZSBtb3JlIG9iamVjdCBpbiBVaW50OENsYW1wZWRBcnJheSBwcm90b3R5cGUgY2hhaW5cbmlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlKSAhPT0gVHlwZWRBcnJheVByb3RvdHlwZSkge1xuICBzZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7XG59XG5cbmlmIChERVNDUklQVE9SUyAmJiAhaGFzT3duKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gIFRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCA9IHRydWU7XG4gIGRlZmluZVByb3BlcnR5KFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaXMpID8gdGhpc1tUWVBFRF9BUlJBWV9UQUddIDogdW5kZWZpbmVkO1xuICB9IH0pO1xuICBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIGlmIChnbG9iYWxbTkFNRV0pIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsW05BTUVdLCBUWVBFRF9BUlJBWV9UQUcsIE5BTUUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTLFxuICBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUjogVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IsXG4gIFRZUEVEX0FSUkFZX1RBRzogVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEICYmIFRZUEVEX0FSUkFZX1RBRyxcbiAgYVR5cGVkQXJyYXk6IGFUeXBlZEFycmF5LFxuICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yOiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yLFxuICBleHBvcnRUeXBlZEFycmF5TWV0aG9kOiBleHBvcnRUeXBlZEFycmF5TWV0aG9kLFxuICBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kOiBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kLFxuICBpc1ZpZXc6IGlzVmlldyxcbiAgaXNUeXBlZEFycmF5OiBpc1R5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXk6IFR5cGVkQXJyYXksXG4gIFR5cGVkQXJyYXlQcm90b3R5cGU6IFR5cGVkQXJyYXlQcm90b3R5cGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG52YXIgRnVuY3Rpb25OYW1lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleCcpO1xudmFyIElFRUU3NTQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWVlZTc1NCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4JztcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICRBcnJheUJ1ZmZlciA9IE5hdGl2ZUFycmF5QnVmZmVyO1xudmFyIEFycmF5QnVmZmVyUHJvdG90eXBlID0gJEFycmF5QnVmZmVyICYmICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIERhdGFWaWV3UHJvdG90eXBlID0gJERhdGFWaWV3ICYmICREYXRhVmlld1tQUk9UT1RZUEVdO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIGZpbGwgPSB1bmN1cnJ5VGhpcyhhcnJheUZpbGwpO1xudmFyIHJldmVyc2UgPSB1bmN1cnJ5VGhpcyhbXS5yZXZlcnNlKTtcblxudmFyIHBhY2tJRUVFNzU0ID0gSUVFRTc1NC5wYWNrO1xudmFyIHVucGFja0lFRUU3NTQgPSBJRUVFNzU0LnVucGFjaztcblxudmFyIHBhY2tJbnQ4ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQxNiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkYsIG51bWJlciA+PiAxNiAmIDB4RkYsIG51bWJlciA+PiAyNCAmIDB4RkZdO1xufTtcblxudmFyIHVucGFja0ludDMyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyWzNdIDw8IDI0IHwgYnVmZmVyWzJdIDw8IDE2IHwgYnVmZmVyWzFdIDw8IDggfCBidWZmZXJbMF07XG59O1xuXG52YXIgcGFja0Zsb2F0MzIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDIzLCA0KTtcbn07XG5cbnZhciBwYWNrRmxvYXQ2NCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgNTIsIDgpO1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChDb25zdHJ1Y3Rvciwga2V5KSB7XG4gIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcylba2V5XTsgfSB9KTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbiAodmlldywgY291bnQsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gYXJyYXlTbGljZShieXRlcywgc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcmV2ZXJzZShwYWNrKTtcbn07XG5cbnZhciBzZXQgPSBmdW5jdGlvbiAodmlldywgY291bnQsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChpbmRleCk7XG4gIHZhciBzdG9yZSA9IGdldEludGVybmFsU3RhdGUodmlldyk7XG4gIGlmIChpbnRJbmRleCArIGNvdW50ID4gc3RvcmUuYnl0ZUxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBieXRlcyA9IGdldEludGVybmFsU3RhdGUoc3RvcmUuYnVmZmVyKS5ieXRlcztcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyBzdG9yZS5ieXRlT2Zmc2V0O1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSBieXRlc1tzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBjb3VudCAtIGkgLSAxXTtcbn07XG5cbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIEFycmF5QnVmZmVyUHJvdG90eXBlKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ5dGVzOiBmaWxsKEFycmF5KGJ5dGVMZW5ndGgpLCAwKSxcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGhcbiAgICB9KTtcbiAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIEFycmF5QnVmZmVyUHJvdG90eXBlID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBEYXRhVmlld1Byb3RvdHlwZSk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsIEFycmF5QnVmZmVyUHJvdG90eXBlKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gZ2V0SW50ZXJuYWxTdGF0ZShidWZmZXIpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlck9ySW5maW5pdHkoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aCxcbiAgICAgIGJ5dGVPZmZzZXQ6IG9mZnNldFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IG9mZnNldDtcbiAgICB9XG4gIH07XG5cbiAgRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXdbUFJPVE9UWVBFXTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdidWZmZXInKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlT2Zmc2V0Jyk7XG4gIH1cblxuICByZWRlZmluZUFsbChEYXRhVmlld1Byb3RvdHlwZSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSW50MzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCksIDIzKTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgNTIpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSW50OCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0ludDE2LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSW50MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRmxvYXQ2NCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgdmFyIElOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSA9IFBST1BFUl9GVU5DVElPTl9OQU1FICYmIE5hdGl2ZUFycmF5QnVmZmVyLm5hbWUgIT09IEFSUkFZX0JVRkZFUjtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIE5hdGl2ZUFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigtMSk7XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoKTtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoMS41KTtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoTmFOKTtcbiAgICByZXR1cm4gSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FICYmICFDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRTtcbiAgfSkpIHtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG5cbiAgICAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEFycmF5QnVmZmVyUHJvdG90eXBlO1xuXG4gICAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlQXJyYXlCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkQXJyYXlCdWZmZXIsIGtleSwgTmF0aXZlQXJyYXlCdWZmZXJba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQXJyYXlCdWZmZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH0gZWxzZSBpZiAoSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FICYmIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE5hdGl2ZUFycmF5QnVmZmVyLCAnbmFtZScsIEFSUkFZX0JVRkZFUik7XG4gIH1cblxuICAvLyBXZWJLaXQgYnVnIC0gdGhlIHNhbWUgcGFyZW50IHByb3RvdHlwZSBmb3IgdHlwZWQgYXJyYXlzIGFuZCBkYXRhIHZpZXdcbiAgaWYgKHNldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKERhdGFWaWV3UHJvdG90eXBlKSAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgc2V0UHJvdG90eXBlT2YoRGF0YVZpZXdQcm90b3R5cGUsIE9iamVjdFByb3RvdHlwZSk7XG4gIH1cblxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHRlc3RWaWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gdW5jdXJyeVRoaXMoRGF0YVZpZXdQcm90b3R5cGUuc2V0SW50OCk7XG4gIHRlc3RWaWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHRlc3RWaWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh0ZXN0Vmlldy5nZXRJbnQ4KDApIHx8ICF0ZXN0Vmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbChEYXRhVmlld1Byb3RvdHlwZSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4KHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDgodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIsXG4gIERhdGFWaWV3OiAkRGF0YVZpZXdcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29weXdpdGhpblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1jb3B5d2l0aGluIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IG1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICFTVFJJQ1RfTUVUSE9EID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbn0gOiBbXS5mb3JFYWNoO1xuIiwidmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBsaXN0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShsaXN0KTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDb25zdHJ1Y3RvcihsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBJU19DT05TVFJVQ1RPUiA9IGlzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhKHRoaXMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKE8sIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKCkgOiBbXTtcbiAgICBmb3IgKDshKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcyhsZW5ndGgpIDogQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtbGFzdGluZGV4b2YgLS0gc2FmZSAqL1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xudmFyICRsYXN0SW5kZXhPZiA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRsYXN0SW5kZXhPZiAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2xhc3RJbmRleE9mJyk7XG52YXIgRk9SQ0VEID0gTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiBhcHBseSgkbGFzdEluZGV4T2YsIHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IG1pbihpbmRleCwgdG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudHNbMV0pKTtcbiAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8gJiYgT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICByZXR1cm4gLTE7XG59IDogJGxhc3RJbmRleE9mO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gIHZhciByZXN1bHQgPSBBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxudmFyIG1lcmdlU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBtaWRkbGUgPSBmbG9vcihsZW5ndGggLyAyKTtcbiAgcmV0dXJuIGxlbmd0aCA8IDggPyBpbnNlcnRpb25Tb3J0KGFycmF5LCBjb21wYXJlZm4pIDogbWVyZ2UoXG4gICAgYXJyYXksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIDAsIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgbWVyZ2VTb3J0KGFycmF5U2xpY2UoYXJyYXksIG1pZGRsZSksIGNvbXBhcmVmbiksXG4gICAgY29tcGFyZWZuXG4gICk7XG59O1xuXG52YXIgaW5zZXJ0aW9uU29ydCA9IGZ1bmN0aW9uIChhcnJheSwgY29tcGFyZWZuKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBpID0gMTtcbiAgdmFyIGVsZW1lbnQsIGo7XG5cbiAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICBqID0gaTtcbiAgICBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7XG4gICAgICBhcnJheVtqXSA9IGFycmF5Wy0tal07XG4gICAgfVxuICAgIGlmIChqICE9PSBpKyspIGFycmF5W2pdID0gZWxlbWVudDtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYXJyYXksIGxlZnQsIHJpZ2h0LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxsZW5ndGggPSBsZWZ0Lmxlbmd0aDtcbiAgdmFyIHJsZW5ndGggPSByaWdodC5sZW5ndGg7XG4gIHZhciBsaW5kZXggPSAwO1xuICB2YXIgcmluZGV4ID0gMDtcblxuICB3aGlsZSAobGluZGV4IDwgbGxlbmd0aCB8fCByaW5kZXggPCBybGVuZ3RoKSB7XG4gICAgYXJyYXlbbGluZGV4ICsgcmluZGV4XSA9IChsaW5kZXggPCBsbGVuZ3RoICYmIHJpbmRleCA8IHJsZW5ndGgpXG4gICAgICA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXVxuICAgICAgOiBsaW5kZXggPCBsbGVuZ3RoID8gbGVmdFtsaW5kZXgrK10gOiByaWdodFtyaW5kZXgrK107XG4gIH0gcmV0dXJuIGFycmF5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZVNvcnQ7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKGlzQ29uc3RydWN0b3IoQykgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBpdG9jID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcbnZhciBjdG9pID0ge307XG5cbmZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCA2NjsgaW5kZXgrKykgY3RvaVtpdG9jLmNoYXJBdChpbmRleCldID0gaW5kZXg7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpdG9jOiBpdG9jLFxuICBjdG9pOiBjdG9pXG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKHt9LnRvU3RyaW5nKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHN0cmluZ1NsaWNlKHRvU3RyaW5nKGl0KSwgOCwgLTEpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcblxudmFyIFRFU1QgPSAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gU3RyaW5nKEVycm9yKGFyZykuc3RhY2spOyB9KSgnenhjYXNkJyk7XG52YXIgVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZID0gL1xcblxccyphdCBbXjpdKjpbXlxcbl0qLztcbnZhciBJU19WOF9PUl9DSEFLUkFfU1RBQ0sgPSBWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlkudGVzdChURVNUKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RhY2ssIGRyb3BFbnRyaWVzKSB7XG4gIGlmIChJU19WOF9PUl9DSEFLUkFfU1RBQ0sgJiYgdHlwZW9mIHN0YWNrID09ICdzdHJpbmcnKSB7XG4gICAgd2hpbGUgKGRyb3BFbnRyaWVzLS0pIHN0YWNrID0gcmVwbGFjZShzdGFjaywgVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLCAnJyk7XG4gIH0gcmV0dXJuIHN0YWNrO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5mYXN0S2V5O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBQcm90b3R5cGUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGluZGV4OiBjcmVhdGUobnVsbCksXG4gICAgICAgIGZpcnN0OiB1bmRlZmluZWQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfSk7XG4gICAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGF0LnNpemUgPSAwO1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICB2YXIgcHJldmlvdXMsIGluZGV4O1xuICAgICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgZW50cnkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmxhc3QgPSBlbnRyeSA9IHtcbiAgICAgICAgICBpbmRleDogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksXG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHByZXZpb3VzOiBwcmV2aW91cyA9IHN0YXRlLmxhc3QsXG4gICAgICAgICAgbmV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJlbW92ZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGlmICghc3RhdGUuZmlyc3QpIHN0YXRlLmZpcnN0ID0gZW50cnk7XG4gICAgICAgIGlmIChwcmV2aW91cykgcHJldmlvdXMubmV4dCA9IGVudHJ5O1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUrKztcbiAgICAgICAgZWxzZSB0aGF0LnNpemUrKztcbiAgICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSBzdGF0ZS5pbmRleFtpbmRleF0gPSBlbnRyeTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfTtcblxuICAgIHZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAvLyBmYXN0IGNhc2VcbiAgICAgIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgICAgIHZhciBlbnRyeTtcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gc3RhdGUuaW5kZXhbaW5kZXhdO1xuICAgICAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gICAgICBmb3IgKGVudHJ5ID0gc3RhdGUuZmlyc3Q7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm5leHQpIHtcbiAgICAgICAgaWYgKGVudHJ5LmtleSA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVkZWZpbmVBbGwoUHJvdG90eXBlLCB7XG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5jbGVhcigpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuY2xlYXJcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5jbGVhclxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBkYXRhID0gc3RhdGUuaW5kZXg7XG4gICAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmZpcnN0O1xuICAgICAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucHJldmlvdXMpIGVudHJ5LnByZXZpb3VzID0gZW50cnkucHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmZpcnN0ID0gc3RhdGUubGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplID0gMDtcbiAgICAgICAgZWxzZSB0aGF0LnNpemUgPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmRlbGV0ZShrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubmV4dDtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5pbmRleFtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubmV4dCA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucHJldmlvdXMgPSBwcmV2O1xuICAgICAgICAgIGlmIChzdGF0ZS5maXJzdCA9PSBlbnRyeSkgc3RhdGUuZmlyc3QgPSBuZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0ID09IGVudHJ5KSBzdGF0ZS5sYXN0ID0gcHJldjtcbiAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUtLTtcbiAgICAgICAgICBlbHNlIHRoYXQuc2l6ZS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLmZpcnN0KSB7XG4gICAgICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkgZW50cnkgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0fS5wcm90b3R5cGUuaGFzKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5oYXNcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVkZWZpbmVBbGwoUHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5nZXQoa2V5KWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZ2V0XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICAgICAgfSxcbiAgICAgIC8vIGBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuc2V0XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyBgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5hZGRcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkoUHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zaXplO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCkge1xuICAgIHZhciBJVEVSQVRPUl9OQU1FID0gQ09OU1RSVUNUT1JfTkFNRSArICcgSXRlcmF0b3InO1xuICAgIHZhciBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgdmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoSVRFUkFUT1JfTkFNRSk7XG4gICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUueyBrZXlzLCB2YWx1ZXMsIGVudHJpZXMsIEBAaXRlcmF0b3IgfSgpYCBtZXRob2RzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmVudHJpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUua2V5c1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS52YWx1ZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUtQEBpdGVyYXRvclxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5lbnRyaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmtleXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUudmFsdWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgICBkZWZpbmVJdGVyYXRvcihDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgICAgdHlwZTogSVRFUkFUT1JfTkFNRSxcbiAgICAgICAgdGFyZ2V0OiBpdGVyYXRlZCxcbiAgICAgICAgc3RhdGU6IGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlKGl0ZXJhdGVkKSxcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgbGFzdDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUodGhpcyk7XG4gICAgICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gICAgICB2YXIgZW50cnkgPSBzdGF0ZS5sYXN0O1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkgZW50cnkgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXN0YXRlLnRhcmdldCB8fCAhKHN0YXRlLmxhc3QgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLnN0YXRlLmZpcnN0KSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LmtleSwgZG9uZTogZmFsc2UgfTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogZW50cnkudmFsdWUsIGRvbmU6IGZhbHNlIH07XG4gICAgICByZXR1cm4geyB2YWx1ZTogW2VudHJ5LmtleSwgZW50cnkudmFsdWVdLCBkb25lOiBmYWxzZSB9O1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlW0BAc3BlY2llc11gIGFjY2Vzc29yc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LW1hcC1AQHNwZWNpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1zZXQtQEBzcGVjaWVzXG4gICAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrRGF0YSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmdldFdlYWtEYXRhO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBBcnJheUl0ZXJhdGlvbk1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG52YXIgZmluZCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmQ7XG52YXIgZmluZEluZGV4ID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZEluZGV4O1xudmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBzdG9yZS5mcm96ZW4gfHwgKHN0b3JlLmZyb3plbiA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcblxudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW50cmllcyA9IFtdO1xufTtcblxudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBmaW5kKHN0b3JlLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5cblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmVudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgc3BsaWNlKHRoaXMuZW50cmllcywgaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIFByb3RvdHlwZSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaWQ6IGlkKyssXG4gICAgICAgIGZyb3plbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLnNldChrZXksIHZhbHVlKTtcbiAgICAgIGVsc2UgZGF0YVtzdGF0ZS5pZF0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICByZWRlZmluZUFsbChQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IFdlYWtNYXAsIFdlYWtTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgaGFzT3duKGRhdGEsIHN0YXRlLmlkKSAmJiBkZWxldGUgZGF0YVtzdGF0ZS5pZF07XG4gICAgICB9LFxuICAgICAgLy8gYHsgV2Vha01hcCwgV2Vha1NldCB9LnByb3RvdHlwZS5oYXMoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgaGFzT3duKGRhdGEsIHN0YXRlLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuZ2V0XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5nZXQoa2V5KTtcbiAgICAgICAgICByZXR1cm4gZGF0YSA/IGRhdGFbc3RhdGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyBgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7XG4gIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgdmFyIElTX1dFQUsgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ1dlYWsnKSAhPT0gLTE7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgdmFyIE5hdGl2ZVByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yICYmIE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7XG4gIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKE5hdGl2ZVByb3RvdHlwZVtLRVldKTtcbiAgICByZWRlZmluZShOYXRpdmVQcm90b3R5cGUsIEtFWSxcbiAgICAgIEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gOiBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IHVuZGVmaW5lZCA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICB2YXIgUkVQTEFDRSA9IGlzRm9yY2VkKFxuICAgIENPTlNUUlVDVE9SX05BTUUsXG4gICAgIWlzQ2FsbGFibGUoTmF0aXZlQ29uc3RydWN0b3IpIHx8ICEoSVNfV0VBSyB8fCBOYXRpdmVQcm90b3R5cGUuZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCkuZW50cmllcygpLm5leHQoKTtcbiAgICB9KSlcbiAgKTtcblxuICBpZiAoUkVQTEFDRSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQ29uc3RydWN0b3IgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgfSBlbHNlIGlmIChpc0ZvcmNlZChDT05TVFJVQ1RPUl9OQU1FLCB0cnVlKSkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihpdGVyYWJsZSk7IH0pO1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UoZHVtbXksIE5hdGl2ZVByb3RvdHlwZSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCksIGR1bW15LCBDb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE5hdGl2ZVByb3RvdHlwZTtcbiAgICAgIE5hdGl2ZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cblxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuXG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBOYXRpdmVQcm90b3R5cGUuY2xlYXIpIGRlbGV0ZSBOYXRpdmVQcm90b3R5cGUuY2xlYXI7XG4gIH1cblxuICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IENvbnN0cnVjdG9yO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IENvbnN0cnVjdG9yICE9IE5hdGl2ZUNvbnN0cnVjdG9yIH0sIGV4cG9ydGVkKTtcblxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgcXVvdCA9IC9cIi9nO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcblxuLy8gYENyZWF0ZUhUTUxgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVodG1sXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgcmVwbGFjZSh0b1N0cmluZyh2YWx1ZSksIHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCwgRU5VTUVSQUJMRV9ORVhUKSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgcGFkU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLnN0YXJ0O1xuXG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbnZhciBuJERhdGVUb0lTT1N0cmluZyA9IERhdGVQcm90b3R5cGUudG9JU09TdHJpbmc7XG52YXIgZ2V0VGltZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgZ2V0VVRDRGF0ZSA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDRGF0ZSk7XG52YXIgZ2V0VVRDRnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyKTtcbnZhciBnZXRVVENIb3VycyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDSG91cnMpO1xudmFyIGdldFVUQ01pbGxpc2Vjb25kcyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTWlsbGlzZWNvbmRzKTtcbnZhciBnZXRVVENNaW51dGVzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENNaW51dGVzKTtcbnZhciBnZXRVVENNb250aCA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDTW9udGgpO1xudmFyIGdldFVUQ1NlY29uZHMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ1NlY29uZHMpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2lzb3N0cmluZ1xuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBmYWlscyBoZXJlOlxubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbiREYXRlVG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG4kRGF0ZVRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkYXRlID0gdGhpcztcbiAgdmFyIHllYXIgPSBnZXRVVENGdWxsWWVhcihkYXRlKTtcbiAgdmFyIG1pbGxpc2Vjb25kcyA9IGdldFVUQ01pbGxpc2Vjb25kcyhkYXRlKTtcbiAgdmFyIHNpZ24gPSB5ZWFyIDwgMCA/ICctJyA6IHllYXIgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzaWduICsgcGFkU3RhcnQoYWJzKHllYXIpLCBzaWduID8gNiA6IDQsIDApICtcbiAgICAnLScgKyBwYWRTdGFydChnZXRVVENNb250aChkYXRlKSArIDEsIDIsIDApICtcbiAgICAnLScgKyBwYWRTdGFydChnZXRVVENEYXRlKGRhdGUpLCAyLCAwKSArXG4gICAgJ1QnICsgcGFkU3RhcnQoZ2V0VVRDSG91cnMoZGF0ZSksIDIsIDApICtcbiAgICAnOicgKyBwYWRTdGFydChnZXRVVENNaW51dGVzKGRhdGUpLCAyLCAwKSArXG4gICAgJzonICsgcGFkU3RhcnQoZ2V0VVRDU2Vjb25kcyhkYXRlKSwgMiwgMCkgK1xuICAgICcuJyArIHBhZFN0YXJ0KG1pbGxpc2Vjb25kcywgMywgMCkgK1xuICAgICdaJztcbn0gOiBuJERhdGVUb0lTT1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgYW5PYmplY3QodGhpcyk7XG4gIGlmIChoaW50ID09PSAnc3RyaW5nJyB8fCBoaW50ID09PSAnZGVmYXVsdCcpIGhpbnQgPSAnc3RyaW5nJztcbiAgZWxzZSBpZiAoaGludCAhPT0gJ251bWJlcicpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUodGhpcywgaGludCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgRnVuY3Rpb25OYW1lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuUFJPUEVSO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLkNPTkZJR1VSQUJMRTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNDYWxsYWJsZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICAgICAgICAgIHJlZGVmaW5lKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5LnByb3RvdHlwZS57IHZhbHVlcywgQEBpdGVyYXRvciB9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgaWYgKCFJU19QVVJFICYmIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsICduYW1lJywgVkFMVUVTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIGNhbGwobmF0aXZlSXRlcmF0b3IsIHRoaXMpOyB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvciwgeyBuYW1lOiBERUZBVUxUIH0pO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhc093bihTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEluZGV4U2l6ZUVycm9yOiB7IHM6ICdJTkRFWF9TSVpFX0VSUicsIGM6IDEsIG06IDEgfSxcbiAgRE9NU3RyaW5nU2l6ZUVycm9yOiB7IHM6ICdET01TVFJJTkdfU0laRV9FUlInLCBjOiAyLCBtOiAwIH0sXG4gIEhpZXJhcmNoeVJlcXVlc3RFcnJvcjogeyBzOiAnSElFUkFSQ0hZX1JFUVVFU1RfRVJSJywgYzogMywgbTogMSB9LFxuICBXcm9uZ0RvY3VtZW50RXJyb3I6IHsgczogJ1dST05HX0RPQ1VNRU5UX0VSUicsIGM6IDQsIG06IDEgfSxcbiAgSW52YWxpZENoYXJhY3RlckVycm9yOiB7IHM6ICdJTlZBTElEX0NIQVJBQ1RFUl9FUlInLCBjOiA1LCBtOiAxIH0sXG4gIE5vRGF0YUFsbG93ZWRFcnJvcjogeyBzOiAnTk9fREFUQV9BTExPV0VEX0VSUicsIGM6IDYsIG06IDAgfSxcbiAgTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3I6IHsgczogJ05PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUicsIGM6IDcsIG06IDEgfSxcbiAgTm90Rm91bmRFcnJvcjogeyBzOiAnTk9UX0ZPVU5EX0VSUicsIGM6IDgsIG06IDEgfSxcbiAgTm90U3VwcG9ydGVkRXJyb3I6IHsgczogJ05PVF9TVVBQT1JURURfRVJSJywgYzogOSwgbTogMSB9LFxuICBJblVzZUF0dHJpYnV0ZUVycm9yOiB7IHM6ICdJTlVTRV9BVFRSSUJVVEVfRVJSJywgYzogMTAsIG06IDEgfSxcbiAgSW52YWxpZFN0YXRlRXJyb3I6IHsgczogJ0lOVkFMSURfU1RBVEVfRVJSJywgYzogMTEsIG06IDEgfSxcbiAgU3ludGF4RXJyb3I6IHsgczogJ1NZTlRBWF9FUlInLCBjOiAxMiwgbTogMSB9LFxuICBJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3I6IHsgczogJ0lOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUicsIGM6IDEzLCBtOiAxIH0sXG4gIE5hbWVzcGFjZUVycm9yOiB7IHM6ICdOQU1FU1BBQ0VfRVJSJywgYzogMTQsIG06IDEgfSxcbiAgSW52YWxpZEFjY2Vzc0Vycm9yOiB7IHM6ICdJTlZBTElEX0FDQ0VTU19FUlInLCBjOiAxNSwgbTogMSB9LFxuICBWYWxpZGF0aW9uRXJyb3I6IHsgczogJ1ZBTElEQVRJT05fRVJSJywgYzogMTYsIG06IDAgfSxcbiAgVHlwZU1pc21hdGNoRXJyb3I6IHsgczogJ1RZUEVfTUlTTUFUQ0hfRVJSJywgYzogMTcsIG06IDEgfSxcbiAgU2VjdXJpdHlFcnJvcjogeyBzOiAnU0VDVVJJVFlfRVJSJywgYzogMTgsIG06IDEgfSxcbiAgTmV0d29ya0Vycm9yOiB7IHM6ICdORVRXT1JLX0VSUicsIGM6IDE5LCBtOiAxIH0sXG4gIEFib3J0RXJyb3I6IHsgczogJ0FCT1JUX0VSUicsIGM6IDIwLCBtOiAxIH0sXG4gIFVSTE1pc21hdGNoRXJyb3I6IHsgczogJ1VSTF9NSVNNQVRDSF9FUlInLCBjOiAyMSwgbTogMSB9LFxuICBRdW90YUV4Y2VlZGVkRXJyb3I6IHsgczogJ1FVT1RBX0VYQ0VFREVEX0VSUicsIGM6IDIyLCBtOiAxIH0sXG4gIFRpbWVvdXRFcnJvcjogeyBzOiAnVElNRU9VVF9FUlInLCBjOiAyMywgbTogMSB9LFxuICBJbnZhbGlkTm9kZVR5cGVFcnJvcjogeyBzOiAnSU5WQUxJRF9OT0RFX1RZUEVfRVJSJywgYzogMjQsIG06IDEgfSxcbiAgRGF0YUNsb25lRXJyb3I6IHsgczogJ0RBVEFfQ0xPTkVfRVJSJywgYzogMjUsIG06IDEgfVxufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiLy8gaW4gb2xkIFdlYktpdCB2ZXJzaW9ucywgYGVsZW1lbnQuY2xhc3NMaXN0YCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgZ2xvYmFsIGBET01Ub2tlbkxpc3RgXG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbnZhciBjbGFzc0xpc3QgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ3NwYW4nKS5jbGFzc0xpc3Q7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3RvciAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVRva2VuTGlzdFByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSA/IHVuZGVmaW5lZCA6IERPTVRva2VuTGlzdFByb3RvdHlwZTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIGZpcmVmb3ggPSB1c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvaSk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFmaXJlZm94ICYmICtmaXJlZm94WzFdO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnO1xuIiwidmFyIFVBID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL01TSUV8VHJpZGVudC8udGVzdChVQSk7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9pcGFkfGlwaG9uZXxpcG9kL2kudGVzdCh1c2VyQWdlbnQpICYmIGdsb2JhbC5QZWJibGUgIT09IHVuZGVmaW5lZDtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKD86aXBhZHxpcGhvbmV8aXBvZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGVubyA9IGdsb2JhbC5EZW5vO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIC8vIGluIG9sZCBDaHJvbWUsIHZlcnNpb25zIG9mIFY4IGlzbid0IFY4ID0gQ2hyb21lIC8gMTBcbiAgLy8gYnV0IHRoZWlyIGNvcnJlY3QgdmVyc2lvbnMgYXJlIG5vdCBpbnRlcmVzdGluZyBmb3IgdXNcbiAgdmVyc2lvbiA9IG1hdGNoWzBdID4gMCAmJiBtYXRjaFswXSA8IDQgPyAxIDogKyhtYXRjaFswXSArIG1hdGNoWzFdKTtcbn1cblxuLy8gQnJvd3NlckZTIE5vZGVKUyBgcHJvY2Vzc2AgcG9seWZpbGwgaW5jb3JyZWN0bHkgc2V0IGAudjhgIHRvIGAwLjBgXG4vLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDBcbmlmICghdmVyc2lvbiAmJiB1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSArbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgd2Via2l0ID0gdXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8pO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhd2Via2l0ICYmICt3ZWJraXRbMV07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKCdhJyk7XG4gIGlmICghKCdzdGFjaycgaW4gZXJyb3IpKSByZXR1cm4gdHJ1ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIDcpKTtcbiAgcmV0dXJuIGVycm9yLnN0YWNrICE9PSA3O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xuXG52YXIgbmF0aXZlRXJyb3JUb1N0cmluZyA9IEVycm9yLnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIENocm9tZSAzMi0gaW5jb3JyZWN0bHkgY2FsbCBhY2Nlc3NvclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIHZhciBvYmplY3QgPSBjcmVhdGUoT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnbmFtZScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcyA9PT0gb2JqZWN0O1xuICAgIH0gfSkpO1xuICAgIGlmIChuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwob2JqZWN0KSAhPT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBGRjEwLSBkb2VzIG5vdCBwcm9wZXJseSBoYW5kbGUgbm9uLXN0cmluZ3NcbiAgcmV0dXJuIG5hdGl2ZUVycm9yVG9TdHJpbmcuY2FsbCh7IG1lc3NhZ2U6IDEsIG5hbWU6IDIgfSkgIT09ICcyOiAxJ1xuICAgIC8vIElFOCBkb2VzIG5vdCBwcm9wZXJseSBoYW5kbGUgZGVmYXVsdHNcbiAgICB8fCBuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwoe30pICE9PSAnRXJyb3InO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSU5DT1JSRUNUX1RPX1NUUklORyA/IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICB2YXIgTyA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgbmFtZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KE8ubmFtZSwgJ0Vycm9yJyk7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoTy5tZXNzYWdlKTtcbiAgcmV0dXJuICFuYW1lID8gbWVzc2FnZSA6ICFtZXNzYWdlID8gbmFtZSA6IG5hbWUgKyAnOiAnICsgbWVzc2FnZTtcbn0gOiBuYXRpdmVFcnJvclRvU3RyaW5nO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kID0gdW5jdXJyeVRoaXMoLy4vW1NZTUJPTF0pO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgbWV0aG9kc1swXSk7XG4gICAgcmVkZWZpbmUoUmVnRXhwUHJvdG90eXBlLCBTWU1CT0wsIG1ldGhvZHNbMV0pO1xuICB9XG5cbiAgaWYgKFNIQU0pIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgRmxhdHRlbkludG9BcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgZmxhdHRlbkludG9BcnJheSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGJpbmQobWFwcGVyLCB0aGlzQXJnKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgZWxlbWVudExlbjtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgaWYgKGRlcHRoID4gMCAmJiBpc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgICAgIGVsZW1lbnRMZW4gPSBsZW5ndGhPZkFycmF5TGlrZShlbGVtZW50KTtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIGVsZW1lbnRMZW4sIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFGRkZGRkZGRkZGRkZGKSB0aHJvdyBUeXBlRXJyb3IoJ0V4Y2VlZCB0aGUgYWNjZXB0YWJsZSBhcnJheSBsZW5ndGgnKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzL25vLW9iamVjdC1wcmV2ZW50ZXh0ZW5zaW9ucyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghaGFzT3duKGZhY3RvcmllcywgYXJnc0xlbmd0aCkpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gRnVuY3Rpb24oJ0MsYScsICdyZXR1cm4gbmV3IEMoJyArIGpvaW4obGlzdCwgJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1thcmdzTGVuZ3RoXShDLCBhcmdzKTtcbn07XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gRnVuY3Rpb24uYmluZCA6IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIEYgPSBhQ2FsbGFibGUodGhpcyk7XG4gIHZhciBQcm90b3R5cGUgPSBGLnByb3RvdHlwZTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IGNvbmNhdChwYXJ0QXJncywgYXJyYXlTbGljZShhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoRiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogRi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KFByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gUHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGNhbGwuYmluZChjYWxsKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0RGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBFWElTVFMgPSBoYXNPd24oRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7XG4vLyBhZGRpdGlvbmFsIHByb3RlY3Rpb24gZnJvbSBtaW5pZmllZCAvIG1hbmdsZWQgLyBkcm9wcGVkIGZ1bmN0aW9uIG5hbWVzXG52YXIgUFJPUEVSID0gRVhJU1RTICYmIChmdW5jdGlvbiBzb21ldGhpbmcoKSB7IC8qIGVtcHR5ICovIH0pLm5hbWUgPT09ICdzb21ldGhpbmcnO1xudmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IChERVNDUklQVE9SUyAmJiBnZXREZXNjcmlwdG9yKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpLmNvbmZpZ3VyYWJsZSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRVhJU1RTOiBFWElTVFMsXG4gIFBST1BFUjogUFJPUEVSLFxuICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYmluZCA9IEZ1bmN0aW9uUHJvdG90eXBlLmJpbmQ7XG52YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG52YXIgdW5jdXJyeVRoaXMgPSBOQVRJVkVfQklORCAmJiBiaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuICYmIHVuY3VycnlUaGlzKGZuKTtcbn0gOiBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuICYmIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbC5hcHBseShmbiwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNDYWxsYWJsZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSkgOiBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gZ2V0TWV0aG9kKGl0LCBJVEVSQVRPUilcbiAgICB8fCBnZXRNZXRob2QoaXQsICdAQGl0ZXJhdG9yJylcbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBnZXRJdGVyYXRvck1ldGhvZChhcmd1bWVudCkgOiB1c2luZ0l0ZXJhdG9yO1xuICBpZiAoYUNhbGxhYmxlKGl0ZXJhdG9yTWV0aG9kKSkgcmV0dXJuIGFuT2JqZWN0KGNhbGwoaXRlcmF0b3JNZXRob2QsIGFyZ3VtZW50KSk7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xufTtcbiIsInZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFDYWxsYWJsZShmdW5jKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJidgXXxcXGR7MSwyfXw8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkezEsMn0pL2c7XG5cbi8vIGBHZXRTdWJzdGl0dXRpb25gIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgfVxuICByZXR1cm4gcmVwbGFjZShyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgIHZhciBjYXB0dXJlO1xuICAgIHN3aXRjaCAoY2hhckF0KGNoLCAwKSkge1xuICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICBjYXNlICdgJzogcmV0dXJuIHN0cmluZ1NsaWNlKHN0ciwgMCwgcG9zaXRpb24pO1xuICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0cmluZ1NsaWNlKHN0ciwgdGFpbFBvcyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbc3RyaW5nU2xpY2UoY2gsIDEsIC0xKV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2hhckF0KGNoLCAxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoYXJBdChjaCwgMSk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gIH0pO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBjID0gcG93KDIsIC1leHBvbmVudCk7XG4gICAgaWYgKG51bWJlciAqIGMgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG1hbnRpc3NhTGVuZ3RoID49IDgpIHtcbiAgICBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NTtcbiAgICBtYW50aXNzYSAvPSAyNTY7XG4gICAgbWFudGlzc2FMZW5ndGggLT0gODtcbiAgfVxuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICB3aGlsZSAoZXhwb25lbnRMZW5ndGggPiAwKSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTU7XG4gICAgZXhwb25lbnQgLz0gMjU2O1xuICAgIGV4cG9uZW50TGVuZ3RoIC09IDg7XG4gIH1cbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKG5CaXRzID4gMCkge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXgtLV07XG4gICAgbkJpdHMgLT0gODtcbiAgfVxuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZyhpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbi8vIGBJbnN0YWxsRXJyb3JDYXVzZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtZXJyb3ItY2F1c2UvI3NlYy1lcnJvcm9iamVjdHMtaW5zdGFsbC1lcnJvci1jYXVzZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgb3B0aW9ucykge1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NhdXNlJyBpbiBvcHRpb25zKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sICdjYXVzZScsIG9wdGlvbnMuY2F1c2UpO1xuICB9XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGlzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgUkVRVUlSRUQgPSBmYWxzZTtcbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxudmFyIHNldE1ldGFkYXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIGRlZmluZVByb3BlcnR5KGl0LCBNRVRBREFUQSwgeyB2YWx1ZToge1xuICAgIG9iamVjdElEOiAnTycgKyBpZCsrLCAvLyBvYmplY3QgSURcbiAgICB3ZWFrRGF0YToge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG5cbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIGEgcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBREFUQV0ub2JqZWN0SUQ7XG59O1xuXG52YXIgZ2V0V2Vha0RhdGEgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIHRoZSBzdG9yZSBvZiB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBREFUQV0ud2Vha0RhdGE7XG59O1xuXG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpJTkcgJiYgUkVRVUlSRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzT3duKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxudmFyIGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgbWV0YS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIFJFUVVJUkVEID0gdHJ1ZTtcbiAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmY7XG4gIHZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xuICB2YXIgdGVzdCA9IHt9O1xuICB0ZXN0W01FVEFEQVRBXSA9IDE7XG5cbiAgLy8gcHJldmVudCBleHBvc2luZyBvZiBtZXRhZGF0YSBrZXlcbiAgaWYgKGdldE93blByb3BlcnR5TmFtZXModGVzdCkubGVuZ3RoKSB7XG4gICAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZXN1bHRbaV0gPT09IE1FVEFEQVRBKSB7XG4gICAgICAgICAgc3BsaWNlKHJlc3VsdCwgaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUuZlxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBlbmFibGU6IGVuYWJsZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHVuY3VycnlUaGlzKHN0b3JlLmdldCk7XG4gIHZhciB3bWhhcyA9IHVuY3VycnlUaGlzKHN0b3JlLmhhcyk7XG4gIHZhciB3bXNldCA9IHVuY3VycnlUaGlzKHN0b3JlLnNldCk7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAod21oYXMoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgZW1wdHkgPSBbXTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBlbXB0eSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICByZXR1cm4gZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkICYmIChoYXNPd24oZGVzY3JpcHRvciwgJ3ZhbHVlJykgfHwgaGFzT3duKGRlc2NyaXB0b3IsICd3cml0YWJsZScpKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBJc0ludGVncmFsTnVtYmVyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNpbnRlZ3JhbG51bWJlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1pc2ludGVnZXIgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgUmVzdWx0UHJvdG90eXBlID0gUmVzdWx0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoaXRlcmFibGUpICsgJyBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGl0ZXJhYmxlKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgaXNQcm90b3R5cGVPZihSZXN1bHRQcm90b3R5cGUsIHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSwgaXRlckZuKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWtleXMgLS0gc2FmZSAqL1xuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG52YXIgTkVXX0lURVJBVE9SX1BST1RPVFlQRSA9IEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIHJlZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWV4cG0xIC0tIHNhZmVcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZXhwbTFcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBleHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZnJvdW5kIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBhYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsInZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cxMEUgPSBNYXRoLkxPRzEwRTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMTAgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzEwIHx8IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgcmV0dXJuIGxvZyh4KSAqIExPRzEwRTtcbn07XG4iLCJ2YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtbG9nMXAgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogbG9nKDEgKyB4KTtcbn07XG4iLCIvLyBgTWF0aC5zaWduYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaWduIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX0lPU19QRUJCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoIUlTX0lPU19QRUJCTEUgJiYgUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAvLyB3b3JrYXJvdW5kIG9mIFdlYktpdCB+IGlPUyBTYWZhcmkgMTAuMSBidWdcbiAgICBwcm9taXNlLmNvbnN0cnVjdG9yID0gUHJvbWlzZTtcbiAgICB0aGVuID0gYmluZChwcm9taXNlLnRoZW4sIHByb21pc2UpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIE5vZGUuanMgd2l0aG91dCBwcm9taXNlc1xuICB9IGVsc2UgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmJpbmQoZ2xvYmFsKVxuICAgIG1hY3JvdGFzayA9IGJpbmQobWFjcm90YXNrLCBnbG9iYWwpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1hY3JvdGFzayhmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcmVsYXRpdmUtdXJsLXN0eWxlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7XG4gIHNlYXJjaFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgc2VhcmNoUGFyYW1zWydkZWxldGUnXSgnYicpO1xuICAgIHJlc3VsdCArPSBrZXkgKyB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiAoSVNfUFVSRSAmJiAhdXJsLnRvSlNPTilcbiAgICB8fCAhc2VhcmNoUGFyYW1zLnNvcnRcbiAgICB8fCB1cmwuaHJlZiAhPT0gJ2h0dHA6Ly9hL2MlMjBkP2E9MSZjPTMnXG4gICAgfHwgc2VhcmNoUGFyYW1zLmdldCgnYycpICE9PSAnMydcbiAgICB8fCBTdHJpbmcobmV3IFVSTFNlYXJjaFBhcmFtcygnP2E9MScpKSAhPT0gJ2E9MSdcbiAgICB8fCAhc2VhcmNoUGFyYW1zW0lURVJBVE9SXVxuICAgIC8vIHRocm93cyBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hQGInKS51c2VybmFtZSAhPT0gJ2EnXG4gICAgfHwgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPWInKSkuZ2V0KCdhJykgIT09ICdiJ1xuICAgIC8vIG5vdCBwdW55Y29kZWQgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJ1xuICAgIC8vIG5vdCBlc2NhcGVkIGluIENocm9tZSA2Mi1cbiAgICB8fCBuZXcgVVJMKCdodHRwOi8vYSPQsScpLmhhc2ggIT09ICcjJUQwJUIxJ1xuICAgIC8vIGZhaWxzIGluIENocm9tZSA2Ni1cbiAgICB8fCByZXN1bHQgIT09ICdhMWMzJ1xuICAgIC8vIHRocm93cyBpbiBTYWZhcmlcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8veCcsIHVuZGVmaW5lZCkuaG9zdCAhPT0gJ3gnO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFDYWxsYWJsZShyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhQ2FsbGFibGUocmVqZWN0KTtcbn07XG5cbi8vIGBOZXdQcm9taXNlQ2FwYWJpbGl0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5ld3Byb21pc2VjYXBhYmlsaXR5XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCAkZGVmYXVsdCkge1xuICByZXR1cm4gYXJndW1lbnQgPT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gJycgOiAkZGVmYXVsdCA6IHRvU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGdsb2JhbElzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLWlzZmluaXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgZ2xvYmFsSXNGaW5pdGUoaXQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBuJFBhcnNlRmxvYXQgPSBnbG9iYWwucGFyc2VGbG9hdDtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIElURVJBVE9SID0gU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGT1JDRUQgPSAxIC8gbiRQYXJzZUZsb2F0KHdoaXRlc3BhY2VzICsgJy0wJykgIT09IC1JbmZpbml0eVxuICAvLyBNUyBFZGdlIDE4LSBicm9rZW4gd2l0aCBib3hlZCBzeW1ib2xzXG4gIHx8IChJVEVSQVRPUiAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgeyBuJFBhcnNlRmxvYXQoT2JqZWN0KElURVJBVE9SKSk7IH0pKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykge1xuICB2YXIgdHJpbW1lZFN0cmluZyA9IHRyaW0odG9TdHJpbmcoc3RyaW5nKSk7XG4gIHZhciByZXN1bHQgPSBuJFBhcnNlRmxvYXQodHJpbW1lZFN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgY2hhckF0KHRyaW1tZWRTdHJpbmcsIDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6IG4kUGFyc2VGbG9hdDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgJHBhcnNlSW50ID0gZ2xvYmFsLnBhcnNlSW50O1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgSVRFUkFUT1IgPSBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIGhleCA9IC9eWystXT8weC9pO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhoZXguZXhlYyk7XG52YXIgRk9SQ0VEID0gJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzB4MTYnKSAhPT0gMjJcbiAgLy8gTVMgRWRnZSAxOC0gYnJva2VuIHdpdGggYm94ZWQgc3ltYm9sc1xuICB8fCAoSVRFUkFUT1IgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsgJHBhcnNlSW50KE9iamVjdChJVEVSQVRPUikpOyB9KSk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4KSB7XG4gIHZhciBTID0gdHJpbSh0b1N0cmluZyhzdHJpbmcpKTtcbiAgcmV0dXJuICRwYXJzZUludChTLCAocmFkaXggPj4+IDApIHx8IChleGVjKGhleCwgUykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gc2FmZVxudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiAkYXNzaWduKHsgYjogMSB9LCAkYXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKSByZXR1cm4gdHJ1ZTtcbiAgLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zeW1ib2wgLS0gc2FmZVxuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KG9iamVjdEtleXMoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlLCBTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgJiYgIVY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBwcm9wc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xudmFyIENPTkZJR1VSQUJMRSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkge1xuICAgICAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLFxuICAgICAgICBlbnVtZXJhYmxlOiBFTlVNRVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0VOVU1FUkFCTEVdIDogY3VycmVudFtFTlVNRVJBQkxFXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xufSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhc093bihPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLCBPLCBQKSwgT1tQXSk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGFycmF5U2xpY2Uod2luZG93TmFtZXMpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZihpdCkgPT0gJ1dpbmRvdydcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbm1vZHVsZS5leHBvcnRzID0gKEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFKSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWU7XG59IDogJGlzRXh0ZW5zaWJsZTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpICYmIGhhc093bihPLCBrZXkpICYmIHB1c2gocmVzdWx0LCBrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzT3duKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHB1c2gocmVzdWx0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbi8vIEZvcmNlZCByZXBsYWNlbWVudCBvYmplY3QgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IElTX1BVUkUgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhpcyBmZWF0dXJlIGRldGVjdGlvbiBjcmFzaGVzIG9sZCBXZWJLaXRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzIzMlxuICBpZiAoV0VCS0lUICYmIFdFQktJVCA8IDUzNSkgcmV0dXJuO1xuICB2YXIga2V5ID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIGtleSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIGdsb2JhbFtrZXldO1xufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpcyhPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKS5mO1xuXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcygkcHJvcGVydHlJc0VudW1lcmFibGUpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYE9iamVjdC57IGVudHJpZXMsIHZhbHVlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRPX0VOVFJJRVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZShPLCBrZXkpKSB7XG4gICAgICAgIHB1c2gocmVzdWx0LCBUT19FTlRSSUVTID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuICBlbnRyaWVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKGlzQ2FsbGFibGUoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHByZWYgIT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaGVhZCA9IG51bGw7XG4gIHRoaXMudGFpbCA9IG51bGw7XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgZW50cnkgPSB7IGl0ZW06IGl0ZW0sIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5oZWFkKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O1xuICAgIGVsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuaGVhZDtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHRoaXMuaGVhZCA9IGVudHJ5Lm5leHQ7XG4gICAgICBpZiAodGhpcy50YWlsID09PSBlbnRyeSkgdGhpcy50YWlsID0gbnVsbDtcbiAgICAgIHJldHVybiBlbnRyeS5pdGVtO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWV1ZTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuQ09ORklHVVJBQkxFO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBuYW1lID0gb3B0aW9ucyAmJiBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgdmFyIHN0YXRlO1xuICBpZiAoaXNDYWxsYWJsZSh2YWx1ZSkpIHtcbiAgICBpZiAoU3RyaW5nKG5hbWUpLnNsaWNlKDAsIDcpID09PSAnU3ltYm9sKCcpIHtcbiAgICAgIG5hbWUgPSAnWycgKyBTdHJpbmcobmFtZSkucmVwbGFjZSgvXlN5bWJvbFxcKChbXildKilcXCkvLCAnJDEnKSArICddJztcbiAgICB9XG4gICAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywgbmFtZSk7XG4gICAgfVxuICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgIGlmICghc3RhdGUuc291cmNlKSB7XG4gICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnID8gbmFtZSA6ICcnKTtcbiAgICB9XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1lbXB0eS1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCwgcmVnZXhwL25vLWxhenktZW5kcyAtLSB0ZXN0aW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tdXNlbGVzcy1xdWFudGlmaWVyIC0tIHRlc3RpbmcgKi9cbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBuYXRpdmVSZXBsYWNlID0gc2hhcmVkKCduYXRpdmUtc3RyaW5nLXJlcGxhY2UnLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgY2FsbChuYXRpdmVFeGVjLCByZTEsICdhJyk7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWSB8fCBVTlNVUFBPUlRFRF9ET1RfQUxMIHx8IFVOU1VQUE9SVEVEX05DRztcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHJpbmcpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocmUpO1xuICAgIHZhciBzdHIgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgIHZhciByYXcgPSBzdGF0ZS5yYXc7XG4gICAgdmFyIHJlc3VsdCwgcmVDb3B5LCBsYXN0SW5kZXgsIG1hdGNoLCBpLCBvYmplY3QsIGdyb3VwO1xuXG4gICAgaWYgKHJhdykge1xuICAgICAgcmF3Lmxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgIHJlc3VsdCA9IGNhbGwocGF0Y2hlZEV4ZWMsIHJhdywgc3RyKTtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJhdy5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBncm91cHMgPSBzdGF0ZS5ncm91cHM7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IGNhbGwocmVnZXhwRmxhZ3MsIHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gcmVwbGFjZShmbGFncywgJ3knLCAnJyk7XG4gICAgICBpZiAoaW5kZXhPZihmbGFncywgJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gc3RyaW5nU2xpY2Uoc3RyLCByZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgY2hhckF0KHN0ciwgcmUubGFzdEluZGV4IC0gMSkgIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IGNhbGwobmF0aXZlRXhlYywgc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gc3RyaW5nU2xpY2UobWF0Y2guaW5wdXQsIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IHN0cmluZ1NsaWNlKG1hdGNoWzBdLCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwobmF0aXZlUmVwbGFjZSwgbWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG4vLyBVQyBCcm93c2VyIGJ1Z1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzEwMDhcbnZhciBNSVNTRURfU1RJQ0tZID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhJFJlZ0V4cCgnYScsICd5Jykuc3RpY2t5O1xufSk7XG5cbnZhciBCUk9LRU5fQ0FSRVQgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9ICRSZWdFeHAoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCUk9LRU5fQ0FSRVQ6IEJST0tFTl9DQVJFVCxcbiAgTUlTU0VEX1NUSUNLWTogTUlTU0VEX1NUSUNLWSxcbiAgVU5TVVBQT1JURURfWTogVU5TVVBQT1JURURfWVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUuZXhlYygnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcoPzxhPmIpJywgJ2cnKSAtPiAvKD88YT5iKS9nIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJyg/PGE+YiknLCAnZycpO1xuICByZXR1cm4gcmUuZXhlYygnYicpLmdyb3Vwcy5hICE9PSAnYicgfHxcbiAgICAnYicucmVwbGFjZShyZSwgJyQ8YT5jJykgIT09ICdiYyc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNhbWV2YWx1ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pcyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjEuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMjEuMS9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUNvbnN0cnVjdG9yKFMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGEgbWV0aG9kLCBsb3dlcmNhc2Vcbi8vIG9mIGEgdGFnIGFuZCBlc2NhcGluZyBxdW90ZXMgaW4gYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTUVUSE9EX05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlck9ySW5maW5pdHkocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gY2hhckF0KFMsIHBvc2l0aW9uKVxuICAgICAgICAgIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gc3RyaW5nU2xpY2UoUywgcG9zaXRpb24sIHBvc2l0aW9uICsgMilcbiAgICAgICAgICA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL1ZlcnNpb25cXC8xMCg/OlxcLlxcZCspezEsMn0oPzogW1xcdy4vXSspPyg/OiBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyICRyZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19FTkQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gICAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogdG9TdHJpbmcoZmlsbFN0cmluZyk7XG4gICAgdmFyIGZpbGxMZW4sIHN0cmluZ0ZpbGxlcjtcbiAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgICBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICAgIHN0cmluZ0ZpbGxlciA9IHJlcGVhdChmaWxsU3RyLCBjZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICAgIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nU2xpY2Uoc3RyaW5nRmlsbGVyLCAwLCBmaWxsTGVuKTtcbiAgICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMvYmxvYi9tYXN0ZXIvcHVueWNvZGUuanNcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxcMC1cXHUwMDdFXS87IC8vIG5vbi1BU0NJSSBjaGFyc1xudmFyIHJlZ2V4U2VwYXJhdG9ycyA9IC9bLlxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xudmFyIE9WRVJGTE9XX0VSUk9SID0gJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJztcbnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKHJlZ2V4U2VwYXJhdG9ycy5leGVjKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgdG9Mb3dlckNhc2UgPSB1bmN1cnJ5VGhpcygnJy50b0xvd2VyQ2FzZSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICovXG52YXIgdWNzMmRlY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBjb3VudGVyKyspO1xuICAgIGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICB2YXIgZXh0cmEgPSBjaGFyQ29kZUF0KHN0cmluZywgY291bnRlcisrKTtcbiAgICAgIGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBMb3cgc3Vycm9nYXRlLlxuICAgICAgICBwdXNoKG91dHB1dCwgKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0J3MgYW4gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgIC8vIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBwdXNoKG91dHB1dCwgdmFsdWUpO1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gob3V0cHV0LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqL1xudmFyIGRpZ2l0VG9CYXNpYyA9IGZ1bmN0aW9uIChkaWdpdCkge1xuICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuICAvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcbiAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KTtcbn07XG5cbi8qKlxuICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG4gKi9cbnZhciBhZGFwdCA9IGZ1bmN0aW9uIChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcbiAgdmFyIGsgPSAwO1xuICBkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuICBkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG4gIHdoaWxlIChkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDEpIHtcbiAgICBkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG4gICAgayArPSBiYXNlO1xuICB9XG4gIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqL1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cbiAgaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuICAvLyBDYWNoZSB0aGUgbGVuZ3RoLlxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG4gIHZhciBuID0gaW5pdGlhbE47XG4gIHZhciBkZWx0YSA9IDA7XG4gIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG4gIHZhciBpLCBjdXJyZW50VmFsdWU7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgd2l0aCBhIGRlbGltaXRlciB1bmxlc3MgaXQncyBlbXB0eS5cbiAgaWYgKGJhc2ljTGVuZ3RoKSB7XG4gICAgcHVzaChvdXRwdXQsIGRlbGltaXRlcik7XG4gIH1cblxuICAvLyBNYWluIGVuY29kaW5nIGxvb3A6XG4gIHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG4gICAgLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dCBsYXJnZXIgb25lOlxuICAgIHZhciBtID0gbWF4SW50O1xuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuICAgICAgICBtID0gY3VycmVudFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPiwgYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cuXG4gICAgdmFyIGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcbiAgICBpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgfVxuXG4gICAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcbiAgICBuID0gbTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG4gICAgICAgIC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxuICAgICAgICB2YXIgcSA9IGRlbHRhO1xuICAgICAgICB2YXIgayA9IGJhc2U7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkgYnJlYWs7XG4gICAgICAgICAgdmFyIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICB2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuICAgICAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICAgIGsgKz0gYmFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEpKSk7XG4gICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG4gICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgaGFuZGxlZENQQ291bnQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWx0YSsrO1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gam9pbihvdXRwdXQsICcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIHZhciBsYWJlbHMgPSBzcGxpdChyZXBsYWNlKHRvTG93ZXJDYXNlKGlucHV0KSwgcmVnZXhTZXBhcmF0b3JzLCAnXFx1MDAyRScpLCAnLicpO1xuICB2YXIgaSwgbGFiZWw7XG4gIGZvciAoaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICBwdXNoKGVuY29kZWQsIGV4ZWMocmVnZXhOb25BU0NJSSwgbGFiZWwpID8gJ3huLS0nICsgZW5jb2RlKGxhYmVsKSA6IGxhYmVsKTtcbiAgfVxuICByZXR1cm4gam9pbihlbmNvZGVkLCAnLicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlck9ySW5maW5pdHkoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5vbiA9ICdcXHUyMDBCXFx1MDA4NVxcdTE4MEUnO1xuXG4vLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdFxuLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0oKVxuICAgICAgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9PSBub25cbiAgICAgIHx8IChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUUpO1xuICB9KTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHdoaXRlc3BhY2UgPSAnWycgKyB3aGl0ZXNwYWNlcyArICddJztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAod2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKiQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgcnRyaW0sICcnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgbG9jYXRpb24sIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG50cnkge1xuICAvLyBEZW5vIHRocm93cyBhIFJlZmVyZW5jZUVycm9yIG9uIGBsb2NhdGlvbmAgYWNjZXNzIHdpdGhvdXQgYC0tbG9jYXRpb25gIGZsYWdcbiAgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKGhhc093bihxdWV1ZSwgaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoaGFuZGxlcikge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBmbiA9IGlzQ2FsbGFibGUoaGFuZGxlcikgPyBoYW5kbGVyIDogRnVuY3Rpb24oaGFuZGxlcik7XG4gICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwcGx5KGZuLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIGlzQ2FsbGFibGUoZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG4vLyBgdGhpc051bWJlclZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKDEuMC52YWx1ZU9mKTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbi8vIGBUb0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCBvciBpbmRleCcpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIG51bWJlciA9ICthcmd1bWVudDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBzYWZlXG4gIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogKG51bWJlciA+IDAgPyBmbG9vciA6IGNlaWwpKG51bWJlcik7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0b1Bvc2l0aXZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wb3NpdGl2ZS1pbnRlZ2VyJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICB2YXIgb2Zmc2V0ID0gdG9Qb3NpdGl2ZUludGVnZXIoaXQpO1xuICBpZiAob2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICByZXR1cm4gb2Zmc2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSB0b0ludGVnZXJPckluZmluaXR5KGl0KTtcbiAgaWYgKHJlc3VsdCA8IDApIHRocm93IFJhbmdlRXJyb3IoXCJUaGUgYXJndW1lbnQgY2FuJ3QgYmUgbGVzcyB0aGFuIDBcIik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kKGlucHV0LCBUT19QUklNSVRJVkUpO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltKSB7XG4gICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JztcbiAgICByZXN1bHQgPSBjYWxsKGV4b3RpY1RvUHJpbSwgaW5wdXQsIHByZWYpO1xuICAgIGlmICghaXNPYmplY3QocmVzdWx0KSB8fCBpc1N5bWJvbChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7XG4gIHJldHVybiBpc1N5bWJvbChrZXkpID8ga2V5IDoga2V5ICsgJyc7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGNsYXNzb2YoYXJndW1lbnQpID09PSAnU3ltYm9sJykgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuICByZXR1cm4gU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNhZmVcbiAgICBpZiAoSVNfTk9ERSkgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gcmVxdWlyZShcIicgKyBuYW1lICsgJ1wiKScpKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gU3RyaW5nKGFyZ3VtZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBpc0ludGVncmFsTnVtYmVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXgnKTtcbnZhciB0b09mZnNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vZmZzZXQnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIHR5cGVkQXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20nKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSBBcnJheUJ1ZmZlci5wcm90b3R5cGU7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xudmFyIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9DT05TVFJVQ1RPUjtcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX1RBRztcbnZhciBUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5O1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXlQcm90b3R5cGU7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBpc1R5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVHlwZWRBcnJheTtcbnZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG5cbnZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXNQcm90b3R5cGVPZihBcnJheUJ1ZmZlclByb3RvdHlwZSwgaXQpIHx8IChrbGFzcyA9IGNsYXNzb2YoaXQpKSA9PSAnQXJyYXlCdWZmZXInIHx8IGtsYXNzID09ICdTaGFyZWRBcnJheUJ1ZmZlcic7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5SW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheSh0YXJnZXQpXG4gICAgJiYgIWlzU3ltYm9sKGtleSlcbiAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgJiYgaXNJbnRlZ3JhbE51bWJlcigra2V5KVxuICAgICYmIGtleSA+PSAwO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICByZXR1cm4gaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkpXG4gICAgPyBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMiwgdGFyZ2V0W2tleV0pXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xufTtcblxudmFyIHdyYXBwZWREZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5KVxuICAgICYmIGlzT2JqZWN0KGRlc2NyaXB0b3IpXG4gICAgJiYgaGFzT3duKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgJiYgIWhhc093bihkZXNjcmlwdG9yLCAnZ2V0JylcbiAgICAmJiAhaGFzT3duKGRlc2NyaXB0b3IsICdzZXQnKVxuICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlXG4gICAgJiYgKCFoYXNPd24oZGVzY3JpcHRvciwgJ3dyaXRhYmxlJykgfHwgZGVzY3JpcHRvci53cml0YWJsZSlcbiAgICAmJiAoIWhhc093bihkZXNjcmlwdG9yLCAnZW51bWVyYWJsZScpIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSlcbiAgKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9IHdyYXBwZWREZWZpbmVQcm9wZXJ0eTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZU9mZnNldCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnbGVuZ3RoJyk7XG4gIH1cblxuICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGRlZmluZVByb3BlcnR5OiB3cmFwcGVkRGVmaW5lUHJvcGVydHlcbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIHZhciBCWVRFUyA9IFRZUEUubWF0Y2goL1xcZCskLylbMF0gLyA4O1xuICAgIHZhciBDT05TVFJVQ1RPUl9OQU1FID0gVFlQRSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBUWVBFO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIFRZUEU7XG4gICAgdmFyIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHJldHVybiBkYXRhLnZpZXdbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IHJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhGRiA/IDB4RkYgOiB2YWx1ZSAmIDB4RkY7XG4gICAgICBkYXRhLnZpZXdbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsIG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIGJ5dGVPZmZzZXQgPSB0b09mZnNldChvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIGJ5dGVPZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIGluaGVyaXRJZlJlcXVpcmVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogdHlwZWRBcnJheU9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSgpLCBkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBmb3JFYWNoKGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3IsIGtleSwgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGU7XG4gICAgfVxuXG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZS5jb25zdHJ1Y3RvciAhPT0gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuXG4gICAgaWYgKFRZUEVEX0FSUkFZX1RBRykge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfVEFHLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB9XG5cbiAgICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuICAgICQoe1xuICAgICAgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAhPSBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IsIHNoYW06ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTXG4gICAgfSwgZXhwb3J0ZWQpO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcblxudmFyIEFycmF5QnVmZmVyID0gZ2xvYmFsLkFycmF5QnVmZmVyO1xudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgSW50OEFycmF5KDEpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmV3IEludDhBcnJheSgtMSk7XG59KSB8fCAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBuZXcgSW50OEFycmF5KCk7XG4gIG5ldyBJbnQ4QXJyYXkobnVsbCk7XG4gIG5ldyBJbnQ4QXJyYXkoMS41KTtcbiAgbmV3IEludDhBcnJheShpdGVyYWJsZSk7XG59LCB0cnVlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFNhZmFyaSAoMTErKSBidWcgLSBhIHJlYXNvbiB3aHkgZXZlbiBTYWZhcmkgMTMgc2hvdWxkIGxvYWQgYSB0eXBlZCBhcnJheSBwb2x5ZmlsbFxuICByZXR1cm4gbmV3IEludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoMiksIDEsIHVuZGVmaW5lZCkubGVuZ3RoICE9PSAxO1xufSk7XG4iLCJ2YXIgYXJyYXlGcm9tQ29uc3RydWN0b3JBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20tY29uc3RydWN0b3ItYW5kLWxpc3QnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGxpc3QpIHtcbiAgcmV0dXJuIGFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCh0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKGluc3RhbmNlKSwgbGlzdCk7XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBDID0gYUNvbnN0cnVjdG9yKHRoaXMpO1xuICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaSwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0O1xuICBpZiAoaXRlcmF0b3JNZXRob2QgJiYgIWlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpIHtcbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKE8sIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICBPID0gW107XG4gICAgd2hpbGUgKCEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgICBPLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChtYXBwaW5nICYmIGFyZ3VtZW50c0xlbmd0aCA+IDIpIHtcbiAgICBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c1syXSk7XG4gIH1cbiAgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbi8vIGEgcGFydCBvZiBgVHlwZWRBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3R5cGVkYXJyYXktc3BlY2llcy1jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgcmV0dXJuIGFUeXBlZEFycmF5Q29uc3RydWN0b3Ioc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXksIG9yaWdpbmFsQXJyYXlbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdKSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ3Byb3RvdHlwZScsIHtcbiAgICB2YWx1ZTogNDIsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pLnByb3RvdHlwZSAhPSA0Mjtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHtcbiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XG4gIHJldHVybiBwYXNzZWQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN5bWJvbEZvciA9IFN5bWJvbCAmJiBTeW1ib2xbJ2ZvciddO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICdTeW1ib2wuJyArIG5hbWU7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2UgaWYgKFVTRV9TWU1CT0xfQVNfVUlEICYmIHN5bWJvbEZvcikge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gc3ltYm9sRm9yKGRlc2NyaXB0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIGluc3RhbGxFcnJvckNhdXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3RhbGwtZXJyb3ItY2F1c2UnKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2snKTtcbnZhciBFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZScpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChGVUxMX05BTUUsIHdyYXBwZXIsIEZPUkNFRCwgSVNfQUdHUkVHQVRFX0VSUk9SKSB7XG4gIHZhciBPUFRJT05TX1BPU0lUSU9OID0gSVNfQUdHUkVHQVRFX0VSUk9SID8gMiA6IDE7XG4gIHZhciBwYXRoID0gRlVMTF9OQU1FLnNwbGl0KCcuJyk7XG4gIHZhciBFUlJPUl9OQU1FID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICB2YXIgT3JpZ2luYWxFcnJvciA9IGdldEJ1aWx0SW4uYXBwbHkobnVsbCwgcGF0aCk7XG5cbiAgaWYgKCFPcmlnaW5hbEVycm9yKSByZXR1cm47XG5cbiAgdmFyIE9yaWdpbmFsRXJyb3JQcm90b3R5cGUgPSBPcmlnaW5hbEVycm9yLnByb3RvdHlwZTtcblxuICAvLyBWOCA5LjMtIGJ1ZyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMjAwNlxuICBpZiAoIUlTX1BVUkUgJiYgaGFzT3duKE9yaWdpbmFsRXJyb3JQcm90b3R5cGUsICdjYXVzZScpKSBkZWxldGUgT3JpZ2luYWxFcnJvclByb3RvdHlwZS5jYXVzZTtcblxuICBpZiAoIUZPUkNFRCkgcmV0dXJuIE9yaWdpbmFsRXJyb3I7XG5cbiAgdmFyIEJhc2VFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG5cbiAgdmFyIFdyYXBwZWRFcnJvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KElTX0FHR1JFR0FURV9FUlJPUiA/IGIgOiBhLCB1bmRlZmluZWQpO1xuICAgIHZhciByZXN1bHQgPSBJU19BR0dSRUdBVEVfRVJST1IgPyBuZXcgT3JpZ2luYWxFcnJvcihhKSA6IG5ldyBPcmlnaW5hbEVycm9yKCk7XG4gICAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHJlc3VsdCwgJ21lc3NhZ2UnLCBtZXNzYWdlKTtcbiAgICBpZiAoRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdzdGFjaycsIGNsZWFyRXJyb3JTdGFjayhyZXN1bHQuc3RhY2ssIDIpKTtcbiAgICBpZiAodGhpcyAmJiBpc1Byb3RvdHlwZU9mKE9yaWdpbmFsRXJyb3JQcm90b3R5cGUsIHRoaXMpKSBpbmhlcml0SWZSZXF1aXJlZChyZXN1bHQsIHRoaXMsIFdyYXBwZWRFcnJvcik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiBPUFRJT05TX1BPU0lUSU9OKSBpbnN0YWxsRXJyb3JDYXVzZShyZXN1bHQsIGFyZ3VtZW50c1tPUFRJT05TX1BPU0lUSU9OXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG5cbiAgV3JhcHBlZEVycm9yLnByb3RvdHlwZSA9IE9yaWdpbmFsRXJyb3JQcm90b3R5cGU7XG5cbiAgaWYgKEVSUk9SX05BTUUgIT09ICdFcnJvcicpIHtcbiAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFdyYXBwZWRFcnJvciwgQmFzZUVycm9yKTtcbiAgICBlbHNlIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoV3JhcHBlZEVycm9yLCBCYXNlRXJyb3IsIHsgbmFtZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoV3JhcHBlZEVycm9yLCBPcmlnaW5hbEVycm9yKTtcblxuICBpZiAoIUlTX1BVUkUpIHRyeSB7XG4gICAgLy8gU2FmYXJpIDEzLSBidWc6IFdlYkFzc2VtYmx5IGVycm9ycyBkb2VzIG5vdCBoYXZlIGEgcHJvcGVyIGAubmFtZWBcbiAgICBpZiAoT3JpZ2luYWxFcnJvclByb3RvdHlwZS5uYW1lICE9PSBFUlJPUl9OQU1FKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoT3JpZ2luYWxFcnJvclByb3RvdHlwZSwgJ25hbWUnLCBFUlJPUl9OQU1FKTtcbiAgICB9XG4gICAgT3JpZ2luYWxFcnJvclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdyYXBwZWRFcnJvcjtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gIHJldHVybiBXcmFwcGVkRXJyb3I7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd3JhcC1lcnJvci1jb25zdHJ1Y3Rvci13aXRoLWNhdXNlJyk7XG5cbnZhciBBR0dSRUdBVEVfRVJST1IgPSAnQWdncmVnYXRlRXJyb3InO1xudmFyICRBZ2dyZWdhdGVFcnJvciA9IGdldEJ1aWx0SW4oQUdHUkVHQVRFX0VSUk9SKTtcbnZhciBGT1JDRUQgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJEFnZ3JlZ2F0ZUVycm9yKFsxXSkuZXJyb3JzWzBdICE9PSAxO1xufSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJEFnZ3JlZ2F0ZUVycm9yKFsxXSwgQUdHUkVHQVRFX0VSUk9SLCB7IGNhdXNlOiA3IH0pLmNhdXNlICE9PSA3O1xufSk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWVycm9yLWNhdXNlXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIEFnZ3JlZ2F0ZUVycm9yOiB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZShBR0dSRUdBVEVfRVJST1IsIGZ1bmN0aW9uIChpbml0KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBmdW5jdGlvbnMgYC5sZW5ndGhgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbiAgfSwgRk9SQ0VELCB0cnVlKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY2xlYXJFcnJvclN0YWNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsZWFyLWVycm9yLXN0YWNrJyk7XG52YXIgaW5zdGFsbEVycm9yQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zdGFsbC1lcnJvci1jYXVzZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZScpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciBwdXNoID0gW10ucHVzaDtcblxudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSAvKiAsIG9wdGlvbnMgKi8pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGlzSW5zdGFuY2UgPSBpc1Byb3RvdHlwZU9mKEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlLCB0aGlzKTtcbiAgdmFyIHRoYXQ7XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIHRoYXQgPSBzZXRQcm90b3R5cGVPZihuZXcgRXJyb3IoKSwgaXNJbnN0YW5jZSA/IGdldFByb3RvdHlwZU9mKHRoaXMpIDogQWdncmVnYXRlRXJyb3JQcm90b3R5cGUpO1xuICB9IGVsc2Uge1xuICAgIHRoYXQgPSBpc0luc3RhbmNlID8gdGhpcyA6IGNyZWF0ZShBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSk7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsIFRPX1NUUklOR19UQUcsICdFcnJvcicpO1xuICB9XG4gIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCAnbWVzc2FnZScsIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KG1lc3NhZ2UpKTtcbiAgaWYgKEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgJ3N0YWNrJywgY2xlYXJFcnJvclN0YWNrKHRoYXQuc3RhY2ssIDEpKTtcbiAgaW5zdGFsbEVycm9yQ2F1c2UodGhhdCwgb3B0aW9ucyk7XG4gIHZhciBlcnJvcnNBcnJheSA9IFtdO1xuICBpdGVyYXRlKGVycm9ycywgcHVzaCwgeyB0aGF0OiBlcnJvcnNBcnJheSB9KTtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdlcnJvcnMnLCBlcnJvcnNBcnJheSk7XG4gIHJldHVybiB0aGF0O1xufTtcblxuaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZigkQWdncmVnYXRlRXJyb3IsIEVycm9yKTtcbmVsc2UgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcygkQWdncmVnYXRlRXJyb3IsIEVycm9yLCB7IG5hbWU6IHRydWUgfSk7XG5cbnZhciBBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSA9ICRBZ2dyZWdhdGVFcnJvci5wcm90b3R5cGUgPSBjcmVhdGUoRXJyb3IucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJEFnZ3JlZ2F0ZUVycm9yKSxcbiAgbWVzc2FnZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICcnKSxcbiAgbmFtZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICdBZ2dyZWdhdGVFcnJvcicpXG59KTtcblxuLy8gYEFnZ3JlZ2F0ZUVycm9yYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZ2dyZWdhdGUtZXJyb3ItY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICBBZ2dyZWdhdGVFcnJvcjogJEFnZ3JlZ2F0ZUVycm9yXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG5cbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIEFycmF5QnVmZmVyID0gYXJyYXlCdWZmZXJNb2R1bGVbQVJSQVlfQlVGRkVSXTtcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xuXG4vLyBgQXJyYXlCdWZmZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLWNvbnN0cnVjdG9yXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IE5hdGl2ZUFycmF5QnVmZmVyICE9PSBBcnJheUJ1ZmZlciB9LCB7XG4gIEFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlclxufSk7XG5cbnNldFNwZWNpZXMoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xuXG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyA9IEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUztcblxuLy8gYEFycmF5QnVmZmVyLmlzVmlld2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLmlzdmlld1xuJCh7IHRhcmdldDogJ0FycmF5QnVmZmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCB7XG4gIGlzVmlldzogQXJyYXlCdWZmZXJWaWV3Q29yZS5pc1ZpZXdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIERhdGFWaWV3UHJvdG90eXBlID0gRGF0YVZpZXcucHJvdG90eXBlO1xudmFyIHVuJEFycmF5QnVmZmVyU2xpY2UgPSB1bmN1cnJ5VGhpcyhBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UpO1xudmFyIGdldFVpbnQ4ID0gdW5jdXJyeVRoaXMoRGF0YVZpZXdQcm90b3R5cGUuZ2V0VWludDgpO1xudmFyIHNldFVpbnQ4ID0gdW5jdXJyeVRoaXMoRGF0YVZpZXdQcm90b3R5cGUuc2V0VWludDgpO1xuXG52YXIgSU5DT1JSRUNUX1NMSUNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyBBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KTtcblxuLy8gYEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5YnVmZmVyLnByb3RvdHlwZS5zbGljZVxuJCh7IHRhcmdldDogJ0FycmF5QnVmZmVyJywgcHJvdG86IHRydWUsIHVuc2FmZTogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfU0xJQ0UgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICh1biRBcnJheUJ1ZmZlclNsaWNlICYmIGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW4kQXJyYXlCdWZmZXJTbGljZShhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1NvdXJjZSA9IG5ldyBEYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1RhcmdldCA9IG5ldyBEYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICBzZXRVaW50OCh2aWV3VGFyZ2V0LCBpbmRleCsrLCBnZXRVaW50OCh2aWV3U291cmNlLCBmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5hdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1yZWxhdGl2ZS1pbmRleGluZy1tZXRob2RcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KGluZGV4KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIHJlbGF0aXZlSW5kZXggPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgICB2YXIgayA9IHJlbGF0aXZlSW5kZXggPj0gMCA/IHJlbGF0aXZlSW5kZXggOiBsZW4gKyByZWxhdGl2ZUluZGV4O1xuICAgIHJldHVybiAoayA8IDAgfHwgayA+PSBsZW4pID8gdW5kZWZpbmVkIDogT1trXTtcbiAgfVxufSk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2F0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKEUpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29weXdpdGhpblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBjb3B5V2l0aGluOiBjb3B5V2l0aGluXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnY29weVdpdGhpbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmV2ZXJ5O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2V2ZXJ5Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmlsbDogZmlsbFxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORF9JTkRFWCA9ICdmaW5kSW5kZXgnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChGSU5EX0lOREVYIGluIFtdKSBBcnJheSgxKVtGSU5EX0lOREVYXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kaW5kZXhcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmRJbmRleCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkRfSU5ERVgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdE1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0bWFwXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgQTtcbiAgICBhQ2FsbGFibGUoY2FsbGJhY2tmbik7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZsYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmxhdFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmbGF0OiBmdW5jdGlvbiBmbGF0KC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgQS5sZW5ndGggPSBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXJPckluZmluaXR5KGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFtdLmZvckVhY2ggIT0gZm9yRWFjaCB9LCB7XG4gIGZvckVhY2g6IGZvckVhY2hcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyICRJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHVuJEluZGV4T2YgPSB1bmN1cnJ5VGhpcyhbXS5pbmRleE9mKTtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIXVuJEluZGV4T2YgJiYgMSAvIHVuJEluZGV4T2YoWzFdLCAxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdpbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHZhciBmcm9tSW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyB1biRJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkgfHwgMFxuICAgICAgOiAkSW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxuLy8gYEFycmF5LmlzQXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5pc2FycmF5XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNBcnJheTogaXNBcnJheVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBpbmRleCwgZG9uZTogZmFsc2UgfTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiB0YXJnZXRbaW5kZXhdLCBkb25lOiBmYWxzZSB9O1xuICByZXR1cm4geyB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZG9uZTogZmFsc2UgfTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoIUlTX1BVUkUgJiYgREVTQ1JJUFRPUlMgJiYgdmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB0cnkge1xuICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsICduYW1lJywgeyB2YWx1ZTogJ3ZhbHVlcycgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciB1biRKb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbnZhciBFUzNfU1RSSU5HUyA9IEluZGV4ZWRPYmplY3QgIT0gT2JqZWN0O1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdqb2luJywgJywnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmpvaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEVTM19TVFJJTkdTIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gdW4kSm9pbih0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtbGFzdGluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGxhc3RJbmRleE9mICE9PSBbXS5sYXN0SW5kZXhPZiB9LCB7XG4gIGxhc3RJbmRleE9mOiBsYXN0SW5kZXhPZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbnZhciBJU05UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbi8vIGBBcnJheS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5Lm9mXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU05UX0dFTkVSSUMgfSwge1xuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoaXNDb25zdHJ1Y3Rvcih0aGlzKSA/IHRoaXMgOiBBcnJheSkoYXJndW1lbnRzTGVuZ3RoKTtcbiAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFyZ3VtZW50c0xlbmd0aDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2VSaWdodCcpO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlUmlnaHQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykubGVmdDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbnZhciB1biRSZXZlcnNlID0gdW5jdXJyeVRoaXMoW10ucmV2ZXJzZSk7XG52YXIgdGVzdCA9IFsxLCAyXTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZXZlcnNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJldmVyc2Vcbi8vIGZpeCBmb3IgU2FmYXJpIDEyLjAgYnVnXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTg4Nzk0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTdHJpbmcodGVzdCkgPT09IFN0cmluZyh0ZXN0LnJldmVyc2UoKSkgfSwge1xuICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWFzc2lnbiAtLSBkaXJ0eSBoYWNrXG4gICAgaWYgKGlzQXJyYXkodGhpcykpIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHVuJFJldmVyc2UodGhpcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgdW4kU2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW4kU2xpY2UoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29tZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfSwge1xuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpbnRlcm5hbFNvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc29ydCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIEZGID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uJyk7XG52YXIgSUVfT1JfRURHRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaWUtb3ItZWRnZScpO1xudmFyIFY4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG52YXIgdGVzdCA9IFtdO1xudmFyIHVuJFNvcnQgPSB1bmN1cnJ5VGhpcyh0ZXN0LnNvcnQpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyh0ZXN0LnB1c2gpO1xuXG4vLyBJRTgtXG52YXIgRkFJTFNfT05fVU5ERUZJTkVEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pO1xuLy8gVjggYnVnXG52YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KG51bGwpO1xufSk7XG4vLyBPbGQgV2ViS2l0XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3NvcnQnKTtcblxudmFyIFNUQUJMRV9TT1JUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZmVhdHVyZSBkZXRlY3Rpb24gY2FuIGJlIHRvbyBzbG93LCBzbyBjaGVjayBlbmdpbmVzIHZlcnNpb25zXG4gIGlmIChWOCkgcmV0dXJuIFY4IDwgNzA7XG4gIGlmIChGRiAmJiBGRiA+IDMpIHJldHVybjtcbiAgaWYgKElFX09SX0VER0UpIHJldHVybiB0cnVlO1xuICBpZiAoV0VCS0lUKSByZXR1cm4gV0VCS0lUIDwgNjAzO1xuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGNvZGUsIGNociwgdmFsdWUsIGluZGV4O1xuXG4gIC8vIGdlbmVyYXRlIGFuIGFycmF5IHdpdGggbW9yZSA1MTIgZWxlbWVudHMgKENoYWtyYSBhbmQgb2xkIFY4IGZhaWxzIG9ubHkgaW4gdGhpcyBjYXNlKVxuICBmb3IgKGNvZGUgPSA2NTsgY29kZSA8IDc2OyBjb2RlKyspIHtcbiAgICBjaHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuXG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICBjYXNlIDY2OiBjYXNlIDY5OiBjYXNlIDcwOiBjYXNlIDcyOiB2YWx1ZSA9IDM7IGJyZWFrO1xuICAgICAgY2FzZSA2ODogY2FzZSA3MTogdmFsdWUgPSA0OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHZhbHVlID0gMjtcbiAgICB9XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA0NzsgaW5kZXgrKykge1xuICAgICAgdGVzdC5wdXNoKHsgazogY2hyICsgaW5kZXgsIHY6IHZhbHVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHRlc3Quc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYi52IC0gYS52OyB9KTtcblxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0ZXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNociA9IHRlc3RbaW5kZXhdLmsuY2hhckF0KDApO1xuICAgIGlmIChyZXN1bHQuY2hhckF0KHJlc3VsdC5sZW5ndGggLSAxKSAhPT0gY2hyKSByZXN1bHQgKz0gY2hyO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCAhPT0gJ0RHQkVGSEFDSUpLJztcbn0pO1xuXG52YXIgRk9SQ0VEID0gRkFJTFNfT05fVU5ERUZJTkVEIHx8ICFGQUlMU19PTl9OVUxMIHx8ICFTVFJJQ1RfTUVUSE9EIHx8ICFTVEFCTEVfU09SVDtcblxudmFyIGdldFNvcnRDb21wYXJlID0gZnVuY3Rpb24gKGNvbXBhcmVmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gLTE7XG4gICAgaWYgKHggPT09IHVuZGVmaW5lZCkgcmV0dXJuIDE7XG4gICAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSByZXR1cm4gK2NvbXBhcmVmbih4LCB5KSB8fCAwO1xuICAgIHJldHVybiB0b1N0cmluZyh4KSA+IHRvU3RyaW5nKHkpID8gMSA6IC0xO1xuICB9O1xufTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvcnRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSBhQ2FsbGFibGUoY29tcGFyZWZuKTtcblxuICAgIHZhciBhcnJheSA9IHRvT2JqZWN0KHRoaXMpO1xuXG4gICAgaWYgKFNUQUJMRV9TT1JUKSByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWQgPyB1biRTb3J0KGFycmF5KSA6IHVuJFNvcnQoYXJyYXksIGNvbXBhcmVmbik7XG5cbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB2YXIgYXJyYXlMZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShhcnJheSk7XG4gICAgdmFyIGl0ZW1zTGVuZ3RoLCBpbmRleDtcblxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGFycmF5TGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoaW5kZXggaW4gYXJyYXkpIHB1c2goaXRlbXMsIGFycmF5W2luZGV4XSk7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxTb3J0KGl0ZW1zLCBnZXRTb3J0Q29tcGFyZShjb21wYXJlZm4pKTtcblxuICAgIGl0ZW1zTGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuICAgIGluZGV4ID0gMDtcblxuICAgIHdoaWxlIChpbmRleCA8IGl0ZW1zTGVuZ3RoKSBhcnJheVtpbmRleF0gPSBpdGVtc1tpbmRleCsrXTtcbiAgICB3aGlsZSAoaW5kZXggPCBhcnJheUxlbmd0aCkgZGVsZXRlIGFycmF5W2luZGV4KytdO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG59KTtcbiIsInZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG5cbi8vIGBBcnJheVtAQHNwZWNpZXNdYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LWFycmF5LUBAc3BlY2llc1xuc2V0U3BlY2llcygnQXJyYXknKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgbGVuZ3RoIGV4Y2VlZGVkJztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc3BsaWNlXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBBLCBrLCBmcm9tLCB0bztcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFjdHVhbERlbGV0ZUNvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBsZW4gLSBhY3R1YWxTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhcmd1bWVudHNMZW5ndGggLSAyO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlck9ySW5maW5pdHkoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBpZiAobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEKTtcbiAgICB9XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGUgT1trIC0gMV07XG4gICAgfSBlbHNlIGlmIChpbnNlcnRDb3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgayA+IGFjdHVhbFN0YXJ0OyBrLS0pIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDE7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50IC0gMTtcbiAgICAgICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvLyB0aGlzIG1ldGhvZCB3YXMgYWRkZWQgdG8gdW5zY29wYWJsZXMgYWZ0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGluIHBvcHVsYXIgZW5naW5lcywgc28gaXQncyBtb3ZlZCB0byBhIHNlcGFyYXRlIG1vZHVsZVxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZsYXRNYXAnKTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdCcpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG5cbi8vIGBEYXRhVmlld2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0YXZpZXctY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVIgfSwge1xuICBEYXRhVmlldzogQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKDE2ZTExKS5nZXRZZWFyKCkgIT09IDEyMDtcbn0pO1xuXG52YXIgZ2V0RnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhcik7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS5nZXRZZWFyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUuZ2V0eWVhclxuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRZZWFyOiBmdW5jdGlvbiBnZXRZZWFyKCkge1xuICAgIHJldHVybiBnZXRGdWxsWWVhcih0aGlzKSAtIDE5MDA7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgRGF0ZSA9IGdsb2JhbC5EYXRlO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlLnByb3RvdHlwZS5nZXRUaW1lKTtcblxuLy8gYERhdGUubm93YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5ub3dcbiQoeyB0YXJnZXQ6ICdEYXRlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBnZXRUaW1lKG5ldyBEYXRlKCkpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xudmFyIHNldEZ1bGxZZWFyID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5zZXRGdWxsWWVhcik7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS5zZXRZZWFyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUuc2V0eWVhclxuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHNldFllYXI6IGZ1bmN0aW9uIHNldFllYXIoeWVhcikge1xuICAgIC8vIHZhbGlkYXRlXG4gICAgZ2V0VGltZSh0aGlzKTtcbiAgICB2YXIgeWkgPSB0b0ludGVnZXJPckluZmluaXR5KHllYXIpO1xuICAgIHZhciB5eXl5ID0gMCA8PSB5aSAmJiB5aSA8PSA5OSA/IHlpICsgMTkwMCA6IHlpO1xuICAgIHJldHVybiBzZXRGdWxsWWVhcih0aGlzLCB5eXl5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvR01UU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9nbXRzdHJpbmdcbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUgfSwge1xuICB0b0dNVFN0cmluZzogRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmdcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnRvaXNvc3RyaW5nXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nIH0sIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9qc29uXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTywgJ251bWJlcicpO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBkYXRlVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghaGFzT3duKERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSkpIHtcbiAgcmVkZWZpbmUoRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBkYXRlVG9QcmltaXRpdmUpO1xufVxuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciB1biREYXRlVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlW1RPX1NUUklOR10pO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKFN0cmluZyhuZXcgRGF0ZShOYU4pKSAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVkZWZpbmUoRGF0ZVByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHVuJERhdGVUb1N0cmluZyh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgZnVuY3Rpb25zIGAubGVuZ3RoYCAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd3JhcC1lcnJvci1jb25zdHJ1Y3Rvci13aXRoLWNhdXNlJyk7XG5cbnZhciBXRUJfQVNTRU1CTFkgPSAnV2ViQXNzZW1ibHknO1xudmFyIFdlYkFzc2VtYmx5ID0gZ2xvYmFsW1dFQl9BU1NFTUJMWV07XG5cbnZhciBGT1JDRUQgPSBFcnJvcignZScsIHsgY2F1c2U6IDcgfSkuY2F1c2UgIT09IDc7XG5cbnZhciBleHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlciA9IGZ1bmN0aW9uIChFUlJPUl9OQU1FLCB3cmFwcGVyKSB7XG4gIHZhciBPID0ge307XG4gIE9bRVJST1JfTkFNRV0gPSB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZShFUlJPUl9OQU1FLCB3cmFwcGVyLCBGT1JDRUQpO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCBPKTtcbn07XG5cbnZhciBleHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyID0gZnVuY3Rpb24gKEVSUk9SX05BTUUsIHdyYXBwZXIpIHtcbiAgaWYgKFdlYkFzc2VtYmx5ICYmIFdlYkFzc2VtYmx5W0VSUk9SX05BTUVdKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW0VSUk9SX05BTUVdID0gd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UoV0VCX0FTU0VNQkxZICsgJy4nICsgRVJST1JfTkFNRSwgd3JhcHBlciwgRk9SQ0VEKTtcbiAgICAkKHsgdGFyZ2V0OiBXRUJfQVNTRU1CTFksIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIE8pO1xuICB9XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ0Vycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdFdmFsRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRXZhbEVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdSYW5nZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFJhbmdlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1JlZmVyZW5jZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFJlZmVyZW5jZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdTeW50YXhFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTeW50YXhFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignVHlwZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFR5cGVFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignVVJJRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVVJJRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlcignQ29tcGlsZUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIENvbXBpbGVFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyKCdMaW5rRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gTGlua0Vycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIoJ1J1bnRpbWVFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBSdW50aW1lRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZXJyb3JUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci10by1zdHJpbmcnKTtcblxudmFyIEVycm9yUHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG4vLyBgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgZml4XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWVycm9yLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKEVycm9yUHJvdG90eXBlLnRvU3RyaW5nICE9PSBlcnJvclRvU3RyaW5nKSB7XG4gIHJlZGVmaW5lKEVycm9yUHJvdG90eXBlLCAndG9TdHJpbmcnLCBlcnJvclRvU3RyaW5nKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG52YXIgdG9VcHBlckNhc2UgPSB1bmN1cnJ5VGhpcygnJy50b1VwcGVyQ2FzZSk7XG5cbnZhciByYXcgPSAvW1xcdyorXFwtLi9AXS87XG5cbnZhciBoZXggPSBmdW5jdGlvbiAoY29kZSwgbGVuZ3RoKSB7XG4gIHZhciByZXN1bHQgPSBudW1iZXJUb1N0cmluZyhjb2RlLCAxNik7XG4gIHdoaWxlIChyZXN1bHQubGVuZ3RoIDwgbGVuZ3RoKSByZXN1bHQgPSAnMCcgKyByZXN1bHQ7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgZXNjYXBlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZXNjYXBlLXN0cmluZ1xuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgIHZhciBzdHIgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjaHIsIGNvZGU7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaHIgPSBjaGFyQXQoc3RyLCBpbmRleCsrKTtcbiAgICAgIGlmIChleGVjKHJhdywgY2hyKSkge1xuICAgICAgICByZXN1bHQgKz0gY2hyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29kZSA9IGNoYXJDb2RlQXQoY2hyLCAwKTtcbiAgICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgICByZXN1bHQgKz0gJyUnICsgaGV4KGNvZGUsIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCArPSAnJXUnICsgdG9VcHBlckNhc2UoaGV4KGNvZGUsIDQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZ1bmN0aW9uLmJpbmQgIT09IGJpbmQgfSwge1xuICBiaW5kOiBiaW5kXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBIQVNfSU5TVEFOQ0UgPSB3ZWxsS25vd25TeW1ib2woJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUtQEBoYXNpbnN0YW5jZVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEZ1bmN0aW9uUHJvdG90eXBlLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gICAgaWYgKCFpc0NhbGxhYmxlKHRoaXMpIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBQID0gdGhpcy5wcm90b3R5cGU7XG4gICAgaWYgKCFpc09iamVjdChQKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAgIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gICAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKFAgPT09IE8pIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSB9KTtcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZVTkNUSU9OX05BTUVfRVhJU1RTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5FWElTVFM7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIG5hbWVSRSA9IC9mdW5jdGlvblxcYig/Olxcc3xcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcL1xcL1teXFxuXFxyXSpbXFxuXFxyXSspKihbXlxccygvXSopLztcbnZhciByZWdFeHBFeGVjID0gdW5jdXJyeVRoaXMobmFtZVJFLmV4ZWMpO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIUZVTkNUSU9OX05BTUVfRVhJU1RTKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEV4ZWMobmFtZVJFLCBmdW5jdGlvblRvU3RyaW5nKHRoaXMpKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBgZ2xvYmFsVGhpc2Agb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdsb2JhbHRoaXNcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICBnbG9iYWxUaGlzOiBnbG9iYWxcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG52YXIgdGVzdGVyID0gL1tcXHVEODAwLVxcdURGRkZdL2c7XG52YXIgbG93ID0gL15bXFx1RDgwMC1cXHVEQkZGXSQvO1xudmFyIGhpID0gL15bXFx1REMwMC1cXHVERkZGXSQvO1xuXG52YXIgZml4ID0gZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICB2YXIgcHJldiA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCAtIDEpO1xuICB2YXIgbmV4dCA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCArIDEpO1xuICBpZiAoKGV4ZWMobG93LCBtYXRjaCkgJiYgIWV4ZWMoaGksIG5leHQpKSB8fCAoZXhlYyhoaSwgbWF0Y2gpICYmICFleGVjKGxvdywgcHJldikpKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyBudW1iZXJUb1N0cmluZyhjaGFyQ29kZUF0KG1hdGNoLCAwKSwgMTYpO1xuICB9IHJldHVybiBtYXRjaDtcbn07XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkc3RyaW5naWZ5KCdcXHVERjA2XFx1RDgzNCcpICE9PSAnXCJcXFxcdWRmMDZcXFxcdWQ4MzRcIidcbiAgICB8fCAkc3RyaW5naWZ5KCdcXHVERUFEJykgIT09ICdcIlxcXFx1ZGVhZFwiJztcbn0pO1xuXG5pZiAoJHN0cmluZ2lmeSkge1xuICAvLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXdlbGwtZm9ybWVkLXN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KGwpOyBpIDwgbDsgaSsrKSBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgdmFyIHJlc3VsdCA9IGFwcGx5KCRzdHJpbmdpZnksIG51bGwsIGFyZ3MpO1xuICAgICAgcmV0dXJuIHR5cGVvZiByZXN1bHQgPT0gJ3N0cmluZycgPyByZXBsYWNlKHJlc3VsdCwgdGVzdGVyLCBmaXgpIDogcmVzdWx0O1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIEpTT05bQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC1vYmplY3RzXG5jb2xsZWN0aW9uKCdNYXAnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25TdHJvbmcpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1sb2cxcCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hY29zaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIEZPUkNFRCA9ICEkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICB8fCBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgIT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gIHx8ICRhY29zaChJbmZpbml0eSkgIT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmFjb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hY29zaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBsb2coeCkgKyBMTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtYXNpbmggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBsb2coeCArIHNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIGBNYXRoLmFzaW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hc2luaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApIH0sIHtcbiAgYXNpbmg6IGFzaW5oXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hdGFuaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG5cbi8vIGBNYXRoLmF0YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hdGFuaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSB9LCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogbG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXNpZ24nKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xuXG4vLyBgTWF0aC5jYnJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jYnJ0XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogcG93KGFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExPRzJFID0gTWF0aC5MT0cyRTtcblxuLy8gYE1hdGguY2x6MzJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNsejMyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBmbG9vcihsb2coeCArIDAuNSkgKiBMT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWNvc2ggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkY29zaCA9IE1hdGguY29zaDtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBFID0gTWF0aC5FO1xuXG4vLyBgTWF0aC5jb3NoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jb3NoXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogISRjb3NoIHx8ICRjb3NoKDcxMCkgPT09IEluZmluaXR5IH0sIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgdmFyIHQgPSBleHBtMShhYnMoeCkgLSAxKSArIDE7XG4gICAgcmV0dXJuICh0ICsgMSAvICh0ICogRSAqIEUpKSAqIChFIC8gMik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG4vLyBgTWF0aC5leHBtMWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZXhwbTFcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWV4cG0xIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZXhwbTEgIT0gTWF0aC5leHBtMSB9LCB7IGV4cG0xOiBleHBtMSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWZyb3VuZCcpO1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHsgZnJvdW5kOiBmcm91bmQgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtaHlwb3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkaHlwb3QgPSBNYXRoLmh5cG90O1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbi8vIENocm9tZSA3NyBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTk1NDZcbnZhciBCVUdHWSA9ICEhJGh5cG90ICYmICRoeXBvdChJbmZpbml0eSwgTmFOKSAhPT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmh5cG90YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5oeXBvdFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEJVR0dZIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBzcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtaW11bCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhGRkZGRkZGRiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KTtcblxuLy8gYE1hdGguaW11bGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguaW11bFxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhGRkZGO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbG9nMTAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1sb2cxMCcpO1xuXG4vLyBgTWF0aC5sb2cxMGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMTBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGxvZzEwOiBsb2cxMFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzFwJyk7XG5cbi8vIGBNYXRoLmxvZzFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxcFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHsgbG9nMXA6IGxvZzFwIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxuLy8gYE1hdGgubG9nMmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIGxvZyh4KSAvIExOMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG4vLyBgTWF0aC5zaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBzaWduOiBzaWduXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1leHBtMScpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgZXhwID0gTWF0aC5leHA7XG52YXIgRSA9IE1hdGguRTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtc2luaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSk7XG5cbi8vIGBNYXRoLnNpbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpbmhcbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBhYnMoeCA9ICt4KSA8IDEgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMiA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKEUgLyAyKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gYE1hdGgudGFuaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgudGFuaFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIE1hdGhbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgTnVtYmVyUHJvdG90eXBlID0gTmF0aXZlTnVtYmVyLnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGFycmF5U2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xuXG4vLyBgVG9OdW1lcmljYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1lcmljXG52YXIgdG9OdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmltVmFsdWUgPSB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICByZXR1cm4gdHlwZW9mIHByaW1WYWx1ZSA9PSAnYmlnaW50JyA/IHByaW1WYWx1ZSA6IHRvTnVtYmVyKHByaW1WYWx1ZSk7XG59O1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmIChpc1N5bWJvbChpdCkpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoaXQsIDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGNoYXJDb2RlQXQoaXQsIDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoY2hhckNvZGVBdChpdCwgMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IGFycmF5U2xpY2UoaXQsIDIpO1xuICAgICAgbGVuZ3RoID0gZGlnaXRzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChkaWdpdHMsIGluZGV4KTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKE5VTUJFUiwgIU5hdGl2ZU51bWJlcignIDBvMScpIHx8ICFOYXRpdmVOdW1iZXIoJzBiMScpIHx8IE5hdGl2ZU51bWJlcignKzB4MScpKSkge1xuICB2YXIgTnVtYmVyV3JhcHBlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogTmF0aXZlTnVtYmVyKHRvTnVtZXJpYyh2YWx1ZSkpO1xuICAgIHZhciBkdW1teSA9IHRoaXM7XG4gICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgcmV0dXJuIGlzUHJvdG90eXBlT2YoTnVtYmVyUHJvdG90eXBlLCBkdW1teSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyB0aGlzTnVtYmVyVmFsdWUoZHVtbXkpOyB9KVxuICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChPYmplY3QobiksIGR1bW15LCBOdW1iZXJXcmFwcGVyKSA6IG47XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlTnVtYmVyKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixwYXJzZUZsb2F0LHBhcnNlSW50LCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhc093bihOYXRpdmVOdW1iZXIsIGtleSA9IGtleXNbal0pICYmICFoYXNPd24oTnVtYmVyV3JhcHBlciwga2V5KSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkoTnVtYmVyV3JhcHBlciwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTmF0aXZlTnVtYmVyLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgTnVtYmVyV3JhcHBlci5wcm90b3R5cGUgPSBOdW1iZXJQcm90b3R5cGU7XG4gIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG4gIHJlZGVmaW5lKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyKTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLkVQU0lMT05gIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5lcHNpbG9uXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIEVQU0lMT046IE1hdGgucG93KDIsIC01Milcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZScpO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7IGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdyYWxOdW1iZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdyYWwtbnVtYmVyJyk7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc0ludGVnZXI6IGlzSW50ZWdyYWxOdW1iZXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuaXNOYU5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNuYW5cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xuXG4vLyBgTnVtYmVyLmlzU2FmZUludGVnZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNzYWZlaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVncmFsTnVtYmVyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxRkZGRkZGRkZGRkZGRjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBNQVhfU0FGRV9JTlRFR0VSOiAweDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJgIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5taW5fc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIE1JTl9TQUZFX0lOVEVHRVI6IC0weDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBOdW1iZXIucGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZUZsb2F0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLXBhcnNlZmxvYXQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUZsb2F0ICE9IHBhcnNlRmxvYXQgfSwge1xuICBwYXJzZUZsb2F0OiBwYXJzZUZsb2F0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQnKTtcblxuLy8gYE51bWJlci5wYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZWludFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1wYXJzZWludCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlSW50ICE9IHBhcnNlSW50IH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGlzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgdW4kVG9FeHBvbmVudGlhbCA9IHVuY3VycnlUaGlzKDEuMC50b0V4cG9uZW50aWFsKTtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gRWRnZSAxNy1cbnZhciBST1VORFNfUFJPUEVSTFkgPSB1biRUb0V4cG9uZW50aWFsKC02LjllLTExLCA0KSA9PT0gJy02LjkwMDBlLTExJ1xuICAvLyBJRTExLSAmJiBFZGdlIDE0LVxuICAmJiB1biRUb0V4cG9uZW50aWFsKDEuMjU1LCAyKSA9PT0gJzEuMjVlKzAnXG4gIC8vIEZGODYtLCBWOCB+IENocm9tZSA0OS01MFxuICAmJiB1biRUb0V4cG9uZW50aWFsKDEyMzQ1LCAzKSA9PT0gJzEuMjM1ZSs0J1xuICAvLyBGRjg2LSwgVjggfiBDaHJvbWUgNDktNTBcbiAgJiYgdW4kVG9FeHBvbmVudGlhbCgyNSwgMCkgPT09ICczZSsxJztcblxuLy8gSUU4LVxudmFyIFRIUk9XU19PTl9JTkZJTklUWV9GUkFDVElPTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdW4kVG9FeHBvbmVudGlhbCgxLCBJbmZpbml0eSk7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHVuJFRvRXhwb25lbnRpYWwoMSwgLUluZmluaXR5KTtcbn0pO1xuXG4vLyBTYWZhcmkgPDExICYmIEZGIDw1MFxudmFyIFBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0sgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRUb0V4cG9uZW50aWFsKEluZmluaXR5LCBJbmZpbml0eSk7XG59KSAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRUb0V4cG9uZW50aWFsKE5hTiwgSW5maW5pdHkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSAhUk9VTkRTX1BST1BFUkxZIHx8ICFUSFJPV1NfT05fSU5GSU5JVFlfRlJBQ1RJT04gfHwgIVBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0s7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRXhwb25lbnRpYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZXhwb25lbnRpYWxcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0V4cG9uZW50aWFsOiBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgaWYgKGZyYWN0aW9uRGlnaXRzID09PSB1bmRlZmluZWQpIHJldHVybiB1biRUb0V4cG9uZW50aWFsKHgpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgaWYgKCFpc0Zpbml0ZSh4KSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICAvLyBUT0RPOiBFUzIwMTggaW5jcmVhc2VkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBmcmFjdGlvbiBkaWdpdHMgdG8gMTAwLCBuZWVkIHRvIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcignSW5jb3JyZWN0IGZyYWN0aW9uIGRpZ2l0cycpO1xuICAgIGlmIChST1VORFNfUFJPUEVSTFkpIHJldHVybiB1biRUb0V4cG9uZW50aWFsKHgsIGYpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSAnJztcbiAgICB2YXIgZSA9IDA7XG4gICAgdmFyIGMgPSAnJztcbiAgICB2YXIgZCA9ICcnO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIGUgPSAwO1xuICAgICAgbSA9IHJlcGVhdCgnMCcsIGYgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhpcyBibG9jayBpcyBiYXNlZCBvbiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9TaGVldEpTRGV2LzExMDBhZDU2YjlmODU2Yzk1Mjk5ZWQwZTA2OGVlYTA4XG4gICAgICAvLyBUT0RPOiBpbXByb3ZlIGFjY3VyYWN5IHdpdGggYmlnIGZyYWN0aW9uIGRpZ2l0c1xuICAgICAgdmFyIGwgPSBsb2cxMCh4KTtcbiAgICAgIGUgPSBmbG9vcihsKTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciB3ID0gcG93KDEwLCBlIC0gZik7XG4gICAgICBuID0gcm91bmQoeCAvIHcpO1xuICAgICAgaWYgKDIgKiB4ID49ICgyICogbiArIDEpICogdykge1xuICAgICAgICBuICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAobiA+PSBwb3coMTAsIGYgKyAxKSkge1xuICAgICAgICBuIC89IDEwO1xuICAgICAgICBlICs9IDE7XG4gICAgICB9XG4gICAgICBtID0gU3RyaW5nKG4pO1xuICAgIH1cbiAgICBpZiAoZiAhPT0gMCkge1xuICAgICAgbSA9IHN0cmluZ1NsaWNlKG0sIDAsIDEpICsgJy4nICsgc3RyaW5nU2xpY2UobSwgMSk7XG4gICAgfVxuICAgIGlmIChlID09PSAwKSB7XG4gICAgICBjID0gJysnO1xuICAgICAgZCA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgYyA9IGUgPiAwID8gJysnIDogJy0nO1xuICAgICAgZCA9IFN0cmluZyhhYnMoZSkpO1xuICAgIH1cbiAgICBtICs9ICdlJyArIGMgKyBkO1xuICAgIHJldHVybiBzICsgbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciB1biRUb0ZpeGVkID0gdW5jdXJyeVRoaXMoMS4wLnRvRml4ZWQpO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaW5kZXhdKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0KCcwJywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHVuJFRvRml4ZWQoMC4wMDAwOCwgMykgIT09ICcwLjAwMCcgfHxcbiAgICB1biRUb0ZpeGVkKDAuOSwgMCkgIT09ICcxJyB8fFxuICAgIHVuJFRvRml4ZWQoMS4yNTUsIDIpICE9PSAnMS4yNScgfHxcbiAgICB1biRUb0ZpeGVkKDEwMDAwMDAwMDAwMDAwMDAxMjguMCwgMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4Jztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIHVuJFRvRml4ZWQoe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZml4ZWRcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIG51bWJlciA9IHRoaXNOdW1iZXJWYWx1ZSh0aGlzKTtcbiAgICB2YXIgZnJhY3REaWdpdHMgPSB0b0ludGVnZXJPckluZmluaXR5KGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgc2lnbiA9ICcnO1xuICAgIHZhciByZXN1bHQgPSAnMCc7XG4gICAgdmFyIGUsIHosIGosIGs7XG5cbiAgICAvLyBUT0RPOiBFUzIwMTggaW5jcmVhc2VkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBmcmFjdGlvbiBkaWdpdHMgdG8gMTAwLCBuZWVkIHRvIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgaWYgKGZyYWN0RGlnaXRzIDwgMCB8fCBmcmFjdERpZ2l0cyA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKCdJbmNvcnJlY3QgZnJhY3Rpb24gZGlnaXRzJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAobnVtYmVyICE9IG51bWJlcikgcmV0dXJuICdOYU4nO1xuICAgIGlmIChudW1iZXIgPD0gLTFlMjEgfHwgbnVtYmVyID49IDFlMjEpIHJldHVybiBTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0KCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogc3RyaW5nU2xpY2UocmVzdWx0LCAwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgc3RyaW5nU2xpY2UocmVzdWx0LCBrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcblxudmFyIHVuJFRvUHJlY2lzaW9uID0gdW5jdXJyeVRoaXMoMS4wLnRvUHJlY2lzaW9uKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gdW4kVG9QcmVjaXNpb24oMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgdW4kVG9QcmVjaXNpb24oe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b3ByZWNpc2lvblxuJCh7IHRhcmdldDogJ051bWJlcicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWRcbiAgICAgID8gdW4kVG9QcmVjaXNpb24odGhpc051bWJlclZhbHVlKHRoaXMpKVxuICAgICAgOiB1biRUb1ByZWNpc2lvbih0aGlzTnVtYmVyVmFsdWUodGhpcyksIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBjcmVhdGU6IGNyZWF0ZVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUNhbGxhYmxlKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpLmY7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgIT09IGRlZmluZVByb3BlcnRpZXMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFDYWxsYWJsZShzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLmVudHJpZXM7XG5cbi8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuICAgIHJldHVybiAkZW50cmllcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1mcmVlemUgLS0gc2FmZVxudmFyICRmcmVlemUgPSBPYmplY3QuZnJlZXplO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRmcmVlemUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmZyZWV6ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5mcmVlemVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIGZyZWV6ZTogZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZnJvbUVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWZyb20tZW50cmllc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBmcm9tRW50cmllczogZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KG9iaiwgaywgdik7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKS5mO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuaGFzT3duYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFjY2Vzc2libGUtb2JqZWN0LWhhc293bnByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhc093bjogaGFzT3duXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcblxuLy8gYE9iamVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNleHRlbnNpYmxlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuaXNFeHRlbnNpYmxlICE9PSAkaXNFeHRlbnNpYmxlIH0sIHtcbiAgaXNFeHRlbnNpYmxlOiAkaXNFeHRlbnNpYmxlXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2Zyb3plbiAtLSBzYWZlXG52YXIgJGlzRnJvemVuID0gT2JqZWN0LmlzRnJvemVuO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0Zyb3plbigxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNGcm96ZW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIH0sIHtcbiAgaXNGcm96ZW46IGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgJiYgY2xhc3NvZihpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNzZWFsZWQgLS0gc2FmZVxudmFyICRpc1NlYWxlZCA9IE9iamVjdC5pc1NlYWxlZDtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNTZWFsZWQoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzU2VhbGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0Lmlzc2VhbGVkXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIHx8IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSB9LCB7XG4gIGlzU2VhbGVkOiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xuXG4vLyBgT2JqZWN0LmlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzOiBpc1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgICAgIHZhciBkZXNjO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoZGVzYyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkpKSByZXR1cm4gZGVzYy5nZXQ7XG4gICAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2Muc2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtcHJldmVudGV4dGVuc2lvbnMgLS0gc2FmZVxudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkcHJldmVudEV4dGVuc2lvbnMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByZXZlbnRleHRlbnNpb25zXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2VhbCAtLSBzYWZlXG52YXIgJHNlYWwgPSBPYmplY3Quc2VhbDtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkc2VhbCgxKTsgfSk7XG5cbi8vIGBPYmplY3Quc2VhbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZWFsXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBzZWFsOiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZlxufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykudmFsdWVzO1xuXG4vLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykge1xuICAgIHJldHVybiAkdmFsdWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdCcpO1xuXG4vLyBgcGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlZmxvYXQtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQgfSwge1xuICBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VJbnQgIT0gJHBhcnNlSW50IH0sIHtcbiAgcGFyc2VJbnQ6ICRwYXJzZUludFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFByb21pc2UuYWxsU2V0dGxlZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsc2V0dGxlZFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlIH0sIHtcbiAgYWxsU2V0dGxlZDogZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlcnJvciB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbnZhciBQUk9NSVNFX0FOWV9FUlJPUiA9ICdObyBvbmUgcHJvbWlzZSByZXNvbHZlZCc7XG5cbi8vIGBQcm9taXNlLmFueWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYW55XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgQWdncmVnYXRlRXJyb3IgPSBnZXRCdWlsdEluKCdBZ2dyZWdhdGVFcnJvcicpO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIHZhciBhbHJlYWR5UmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlSZWplY3RlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbChwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChhbHJlYWR5UmVqZWN0ZWQgfHwgYWxyZWFkeVJlc29sdmVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeVJlamVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvcnNbaW5kZXhdID0gZXJyb3I7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZWplY3QobmV3IEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxuLy8gU2FmYXJpIGJ1ZyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjAwODI5XG52YXIgTk9OX0dFTkVSSUMgPSAhIU5hdGl2ZVByb21pc2UgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGVuYWJsZSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddLmNhbGwoeyB0aGVuOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmZpbmFsbHlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogTk9OX0dFTkVSSUMgfSwge1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBnZXRCdWlsdEluKCdQcm9taXNlJykpO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gaXNDYWxsYWJsZShvbkZpbmFsbHkpO1xuICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseSxcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHlcbiAgICApO1xuICB9XG59KTtcblxuLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjZmluYWxseWAgcHJvcGVybHkgd29ya3Mgd2l0aCBwYXRjaGVkIGBQcm9taXNlI3RoZW5gXG5pZiAoIUlTX1BVUkUgJiYgaXNDYWxsYWJsZShOYXRpdmVQcm9taXNlKSkge1xuICB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddO1xuICBpZiAoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSAhPT0gbWV0aG9kKSB7XG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICdmaW5hbGx5JywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgUXVldWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcXVldWUnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfQlJPV1NFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3NlcicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBOYXRpdmVQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZSAmJiBOYXRpdmVQcm9taXNlLnByb3RvdHlwZTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3IgPSBOYXRpdmVQcm9taXNlO1xudmFyIFByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcblxudmFyIERJU1BBVENIX0VWRU5UID0gISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsLmRpc3BhdGNoRXZlbnQpO1xudmFyIE5BVElWRV9SRUpFQ1RJT05fRVZFTlQgPSBpc0NhbGxhYmxlKGdsb2JhbC5Qcm9taXNlUmVqZWN0aW9uRXZlbnQpO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xudmFyIFNVQkNMQVNTSU5HID0gZmFsc2U7XG5cbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICB2YXIgUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3Rvcik7XG4gIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQUk9NSVNFX0NPTlNUUlVDVE9SX1NPVVJDRSkpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUoMSk7IH0pO1xuICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICB9O1xuICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gIFNVQkNMQVNTSU5HID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgaWYgKCFTVUJDTEFTU0lORykgcmV0dXJuIHRydWU7XG4gIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgcmV0dXJuICFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIElTX0JST1dTRVIgJiYgIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQ7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiBpc0NhbGxhYmxlKHRoZW4gPSBpdC50aGVuKSA/IHRoZW4gOiBmYWxzZTtcbn07XG5cbnZhciBjYWxsUmVhY3Rpb24gPSBmdW5jdGlvbiAocmVhY3Rpb24sIHN0YXRlKSB7XG4gIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICB2YXIgb2sgPSBzdGF0ZS5zdGF0ZSA9PSBGVUxGSUxMRUQ7XG4gIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICB0cnkge1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBpZiAoIW9rKSB7XG4gICAgICAgIGlmIChzdGF0ZS5yZWplY3Rpb24gPT09IFVOSEFORExFRCkgb25IYW5kbGVVbmhhbmRsZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgfVxuICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gY2FuIHRocm93XG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICBjYWxsKHRoZW4sIHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgIHJlamVjdChlcnJvcik7XG4gIH1cbn07XG5cbnZhciBub3RpZnkgPSBmdW5jdGlvbiAoc3RhdGUsIGlzUmVqZWN0KSB7XG4gIGlmIChzdGF0ZS5ub3RpZmllZCkgcmV0dXJuO1xuICBzdGF0ZS5ub3RpZmllZCA9IHRydWU7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlYWN0aW9ucyA9IHN0YXRlLnJlYWN0aW9ucztcbiAgICB2YXIgcmVhY3Rpb247XG4gICAgd2hpbGUgKHJlYWN0aW9uID0gcmVhY3Rpb25zLmdldCgpKSB7XG4gICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUubm90aWZpZWQgPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXN0YXRlLnJlamVjdGlvbikgb25VbmhhbmRsZWQoc3RhdGUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIHByb21pc2UsIHJlYXNvbikge1xuICB2YXIgZXZlbnQsIGhhbmRsZXI7XG4gIGlmIChESVNQQVRDSF9FVkVOVCkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQucHJvbWlzZSA9IHByb21pc2U7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50LmluaXRFdmVudChuYW1lLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2UgZXZlbnQgPSB7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcmVhc29uIH07XG4gIGlmICghTkFUSVZFX1JFSkVDVElPTl9FVkVOVCAmJiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIGNhbGwodGFzaywgZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FsbCh0aGVuLCB2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QoeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICBhQ2FsbGFibGUoZXhlY3V0b3IpO1xuICAgIGNhbGwoSW50ZXJuYWwsIHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuICBQcm9taXNlUHJvdG90eXBlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICB0eXBlOiBQUk9NSVNFLFxuICAgICAgZG9uZTogZmFsc2UsXG4gICAgICBub3RpZmllZDogZmFsc2UsXG4gICAgICBwYXJlbnQ6IGZhbHNlLFxuICAgICAgcmVhY3Rpb25zOiBuZXcgUXVldWUoKSxcbiAgICAgIHJlamVjdGlvbjogZmFsc2UsXG4gICAgICBzdGF0ZTogUEVORElORyxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoUHJvbWlzZVByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGVuYWJsZSAtLSBzYWZlXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgcmVhY3Rpb24ub2sgPSBpc0NhbGxhYmxlKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSBpc0NhbGxhYmxlKG9uUmVqZWN0ZWQpICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgPT0gUEVORElORykgc3RhdGUucmVhY3Rpb25zLmFkZChyZWFjdGlvbik7XG4gICAgICBlbHNlIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxSZWFjdGlvbihyZWFjdGlvbiwgc3RhdGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZSkgJiYgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLnRoZW47XG5cbiAgICBpZiAoIVNVQkNMQVNTSU5HKSB7XG4gICAgICAvLyBtYWtlIGBQcm9taXNlI3RoZW5gIHJldHVybiBhIHBvbHlmaWxsZWQgYFByb21pc2VgIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgICByZWRlZmluZShOYXRpdmVQcm9taXNlUHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgY2FsbChuYXRpdmVUaGVuLCB0aGF0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICAgIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xuXG4gICAgICAvLyBtYWtlcyBzdXJlIHRoYXQgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJcyBgUHJvbWlzZSNjYXRjaGAgcHJvcGVybHkgd29ya3Mgd2l0aCBwYXRjaGVkIGBQcm9taXNlI3RoZW5gXG4gICAgICByZWRlZmluZShOYXRpdmVQcm9taXNlUHJvdG90eXBlLCAnY2F0Y2gnLCBQcm9taXNlUHJvdG90eXBlWydjYXRjaCddLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIGAuY29uc3RydWN0b3IgPT09IFByb21pc2VgIHdvcmsgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIE5hdGl2ZVByb21pc2VQcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgLy8gbWFrZSBgaW5zdGFuY2VvZiBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICBzZXRQcm90b3R5cGVPZihOYXRpdmVQcm9taXNlUHJvdG90eXBlLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gZ2V0QnVpbHRJbihQUk9NSVNFKTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhbGwoY2FwYWJpbGl0eS5yZWplY3QsIHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZXNvbHZlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZ1bmN0aW9uQXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxudmFyIE9QVElPTkFMX0FSR1VNRU5UU19MSVNUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgUmVmbGVjdC5hcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGBSZWZsZWN0LmFwcGx5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5hcHBseVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9QVElPTkFMX0FSR1VNRU5UU19MSVNUIH0sIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uQXBwbHkoYUNhbGxhYmxlKHRhcmdldCksIHRoaXNBcmd1bWVudCwgYW5PYmplY3QoYXJndW1lbnRzTGlzdCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYFJlZmxlY3QuY29uc3RydWN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbnZhciBGT1JDRUQgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogRk9SQ0VEIH0sIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUNvbnN0cnVjdG9yKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUNvbnN0cnVjdG9yKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICBhcHBseShwdXNoLCAkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChhcHBseShiaW5kLCBUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3RQcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBhcHBseShUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxudmFyIEVSUk9SX0lOU1RFQURfT0ZfRkFMU0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZGVmaW5lUHJvcGVydHlNb2R1bGUuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBFUlJPUl9JTlNURUFEX09GX0ZBTFNFLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRhcmdldCwga2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYFJlZmxlY3QuZGVsZXRlUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlbGV0ZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbi8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBvYmplY3RHZXRQcm90b3R5cGVPZihhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWRhdGEtZGVzY3JpcHRvcicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3QuZ2V0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRcbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjcmlwdG9yLCBwcm90b3R5cGU7XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZih0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IpIHJldHVybiBpc0RhdGFEZXNjcmlwdG9yKGRlc2NyaXB0b3IpXG4gICAgPyBkZXNjcmlwdG9yLnZhbHVlXG4gICAgOiBkZXNjcmlwdG9yLmdldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogY2FsbChkZXNjcmlwdG9yLmdldCwgcmVjZWl2ZXIpO1xuICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBnZXQ6IGdldFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFJlZmxlY3QuaGFzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5oYXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcblxuLy8gYFJlZmxlY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG93bktleXM6IG93bktleXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG4vLyBgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QucHJldmVudGV4dGVuc2lvbnNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdwcmV2ZW50RXh0ZW5zaW9ucycpO1xuICAgICAgaWYgKG9iamVjdFByZXZlbnRFeHRlbnNpb25zKSBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG52YXIgb2JqZWN0U2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldHByb3RvdHlwZW9mXG5pZiAob2JqZWN0U2V0UHJvdG90eXBlT2YpICQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBvYmplY3RTZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldFxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvdHlwZSwgc2V0dGVyO1xuICBpZiAoIW93bkRlc2NyaXB0b3IpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG90eXBlLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjcmlwdG9yID0gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDApO1xuICB9XG4gIGlmIChpc0RhdGFEZXNjcmlwdG9yKG93bkRlc2NyaXB0b3IpKSB7XG4gICAgaWYgKG93bkRlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgVikpO1xuICB9IGVsc2Uge1xuICAgIHNldHRlciA9IG93bkRlc2NyaXB0b3Iuc2V0O1xuICAgIGlmIChzZXR0ZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlO1xuICAgIGNhbGwoc2V0dGVyLCByZWNlaXZlciwgVik7XG4gIH0gcmV0dXJuIHRydWU7XG59XG5cbi8vIE1TIEVkZ2UgMTctMTggUmVmbGVjdC5zZXQgYWxsb3dzIHNldHRpbmcgdGhlIHByb3BlcnR5IHRvIG9iamVjdFxuLy8gd2l0aCBub24td3JpdGFibGUgcHJvcGVydHkgb24gdGhlIHByb3RvdHlwZVxudmFyIE1TX0VER0VfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIHZhciBvYmplY3QgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG5ldyBDb25zdHJ1Y3RvcigpLCAnYScsIHsgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gUmVmbGVjdC5zZXQoQ29uc3RydWN0b3IucHJvdG90eXBlLCAnYScsIDEsIG9iamVjdCkgIT09IGZhbHNlO1xufSk7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBNU19FREdFX0JVRyB9LCB7XG4gIHNldDogc2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHsgUmVmbGVjdDoge30gfSk7XG5cbi8vIFJlZmxlY3RbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuUmVmbGVjdCwgJ1JlZmxlY3QnLCB0cnVlKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xudmFyIE5hdGl2ZVJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gTmF0aXZlUmVnRXhwLnByb3RvdHlwZTtcbnZhciBTeW50YXhFcnJvciA9IGdsb2JhbC5TeW50YXhFcnJvcjtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoUmVnRXhwUHJvdG90eXBlLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbi8vIFRPRE86IFVzZSBvbmx5IHByb3BwZXIgUmVnRXhwSWRlbnRpZmllck5hbWVcbnZhciBJU19OQ0cgPSAvXlxcPzxbXlxcc1xcZCEjJSYqKzw9PkBeXVteXFxzISMlJiorPD0+QF5dKj4vO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgTUlTU0VEX1NUSUNLWSA9IHN0aWNreUhlbHBlcnMuTUlTU0VEX1NUSUNLWTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgQkFTRV9GT1JDRUQgPSBERVNDUklQVE9SUyAmJlxuICAoIUNPUlJFQ1RfTkVXIHx8IE1JU1NFRF9TVElDS1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0cgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICAgIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT0gcmUyIHx8IE5hdGl2ZVJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xuICB9KSk7XG5cbnZhciBoYW5kbGVEb3RBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgcmVzdWx0ICs9IGNociArIGNoYXJBdChzdHJpbmcsICsraW5kZXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghYnJhY2tldHMgJiYgY2hyID09PSAnLicpIHtcbiAgICAgIHJlc3VsdCArPSAnW1xcXFxzXFxcXFNdJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICAgIH0gcmVzdWx0ICs9IGNocjtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBoYW5kbGVOQ0cgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuYW1lZCA9IFtdO1xuICB2YXIgbmFtZXMgPSB7fTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICBjaHIgPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWJyYWNrZXRzKSBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgY2hyID09PSAnWyc6XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGNociA9PT0gJygnOlxuICAgICAgICBpZiAoZXhlYyhJU19OQ0csIHN0cmluZ1NsaWNlKHN0cmluZywgaW5kZXggKyAxKSkpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIG5jZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgZ3JvdXBpZCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgY2hyID09PSAnPicgJiYgbmNnOlxuICAgICAgICBpZiAoZ3JvdXBuYW1lID09PSAnJyB8fCBoYXNPd24obmFtZXMsIGdyb3VwbmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZXNbZ3JvdXBuYW1lXSA9IHRydWU7XG4gICAgICAgIG5hbWVkW25hbWVkLmxlbmd0aF0gPSBbZ3JvdXBuYW1lLCBncm91cGlkXTtcbiAgICAgICAgbmNnID0gZmFsc2U7XG4gICAgICAgIGdyb3VwbmFtZSA9ICcnO1xuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5jZykgZ3JvdXBuYW1lICs9IGNocjtcbiAgICBlbHNlIHJlc3VsdCArPSBjaHI7XG4gIH0gcmV0dXJuIFtyZXN1bHQsIG5hbWVkXTtcbn07XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKCdSZWdFeHAnLCBCQVNFX0ZPUkNFRCkpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBwYXR0ZXJuKSkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9ICdmbGFncycgaW4gcmF3UGF0dGVybiA/IHJhd1BhdHRlcm4uZmxhZ3MgOiBnZXRGbGFncyhyYXdQYXR0ZXJuKTtcbiAgICB9XG5cbiAgICBwYXR0ZXJuID0gcGF0dGVybiA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhwYXR0ZXJuKTtcbiAgICBmbGFncyA9IGZsYWdzID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKGZsYWdzKTtcbiAgICByYXdQYXR0ZXJuID0gcGF0dGVybjtcblxuICAgIGlmIChVTlNVUFBPUlRFRF9ET1RfQUxMICYmICdkb3RBbGwnIGluIHJlMSkge1xuICAgICAgZG90QWxsID0gISFmbGFncyAmJiBzdHJpbmdJbmRleE9mKGZsYWdzLCAncycpID4gLTE7XG4gICAgICBpZiAoZG90QWxsKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC9zL2csICcnKTtcbiAgICB9XG5cbiAgICByYXdGbGFncyA9IGZsYWdzO1xuXG4gICAgaWYgKE1JU1NFRF9TVElDS1kgJiYgJ3N0aWNreScgaW4gcmUxKSB7XG4gICAgICBzdGlja3kgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICd5JykgPiAtMTtcbiAgICAgIGlmIChzdGlja3kgJiYgVU5TVVBQT1JURURfWSkgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAveS9nLCAnJyk7XG4gICAgfVxuXG4gICAgaWYgKFVOU1VQUE9SVEVEX05DRykge1xuICAgICAgaGFuZGxlZCA9IGhhbmRsZU5DRyhwYXR0ZXJuKTtcbiAgICAgIHBhdHRlcm4gPSBoYW5kbGVkWzBdO1xuICAgICAgZ3JvdXBzID0gaGFuZGxlZFsxXTtcbiAgICB9XG5cbiAgICByZXN1bHQgPSBpbmhlcml0SWZSZXF1aXJlZChOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpLCB0aGlzSXNSZWdFeHAgPyB0aGlzIDogUmVnRXhwUHJvdG90eXBlLCBSZWdFeHBXcmFwcGVyKTtcblxuICAgIGlmIChkb3RBbGwgfHwgc3RpY2t5IHx8IGdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUocmVzdWx0KTtcbiAgICAgIGlmIChkb3RBbGwpIHtcbiAgICAgICAgc3RhdGUuZG90QWxsID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucmF3ID0gUmVnRXhwV3JhcHBlcihoYW5kbGVEb3RBbGwocGF0dGVybiksIHJhd0ZsYWdzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGlja3kpIHN0YXRlLnN0aWNreSA9IHRydWU7XG4gICAgICBpZiAoZ3JvdXBzLmxlbmd0aCkgc3RhdGUuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIH1cblxuICAgIGlmIChwYXR0ZXJuICE9PSByYXdQYXR0ZXJuKSB0cnkge1xuICAgICAgLy8gZmFpbHMgaW4gb2xkIGVuZ2luZXMsIGJ1dCB3ZSBoYXZlIG5vIGFsdGVybmF0aXZlcyBmb3IgdW5zdXBwb3J0ZWQgcmVnZXggc3ludGF4XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnc291cmNlJywgcmF3UGF0dGVybiA9PT0gJycgPyAnKD86KScgOiByYXdQYXR0ZXJuKTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gUmVnRXhwV3JhcHBlciB8fCBkZWZpbmVQcm9wZXJ0eShSZWdFeHBXcmFwcGVyLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTmF0aXZlUmVnRXhwW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBOYXRpdmVSZWdFeHBba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKSwgaW5kZXggPSAwOyBrZXlzLmxlbmd0aCA+IGluZGV4Oykge1xuICAgIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICB9XG5cbiAgUmVnRXhwUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVnRXhwV3JhcHBlcjtcbiAgUmVnRXhwV3JhcHBlci5wcm90b3R5cGUgPSBSZWdFeHBQcm90b3R5cGU7XG4gIHJlZGVmaW5lKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIpO1xufVxuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmRvdEFsbGAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmRvdGFsbFxuaWYgKERFU0NSSVBUT1JTICYmIFVOU1VQUE9SVEVEX0RPVF9BTEwpIHtcbiAgZGVmaW5lUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlLCAnZG90QWxsJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzID09PSBSZWdFeHBQcm90b3R5cGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IgYmVjYXVzZVxuICAgICAgLy8gd2UgZG9uJ3QgYWRkIG1ldGFkYXRhIGZvciByZWdleHBzIGNyZWF0ZWQgYnkgYSBsaXRlcmFsLlxuICAgICAgaWYgKGNsYXNzb2YodGhpcykgPT09ICdSZWdFeHAnKSB7XG4gICAgICAgIHJldHVybiAhIWdldEludGVybmFsU3RhdGUodGhpcykuZG90QWxsO1xuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsIFJlZ0V4cCByZXF1aXJlZCcpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0RGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJlZ0V4cFByb3RvdHlwZSwgJ2ZsYWdzJykuZ2V0LmNhbGwoeyBkb3RBbGw6IHRydWUsIHN0aWNreTogdHJ1ZSB9KSAhPT0gJ3N5Jztcbn0pO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5pZiAoRk9SQ0VEKSBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKFJlZ0V4cFByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVnRXhwRmxhZ3Ncbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE1JU1NFRF9TVElDS1kgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJykuTUlTU0VEX1NUSUNLWTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuc3RpY2t5YCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuc3RpY2t5XG5pZiAoREVTQ1JJUFRPUlMgJiYgTUlTU0VEX1NUSUNLWSkge1xuICBkZWZpbmVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGUsICdzdGlja3knLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMgPT09IFJlZ0V4cFByb3RvdHlwZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvciBiZWNhdXNlXG4gICAgICAvLyB3ZSBkb24ndCBhZGQgbWV0YWRhdGEgZm9yIHJlZ2V4cHMgY3JlYXRlZCBieSBhIGxpdGVyYWwuXG4gICAgICBpZiAoY2xhc3NvZih0aGlzKSA9PT0gJ1JlZ0V4cCcpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zdGlja3k7XG4gICAgICB9XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgUmVnRXhwIHJlcXVpcmVkJyk7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gIHZhciByZSA9IC9bYWNdLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBleGVjQ2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gLy4vLmV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgcmV0dXJuIHJlLnRlc3QoJ2FiYycpID09PSB0cnVlICYmIGV4ZWNDYWxsZWQ7XG59KCk7XG5cbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciB1biRUZXN0ID0gdW5jdXJyeVRoaXMoLy4vLnRlc3QpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50ZXN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50ZXN0XG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogIURFTEVHQVRFU19UT19FWEVDIH0sIHtcbiAgdGVzdDogZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciBleGVjID0gdGhpcy5leGVjO1xuICAgIGlmICghaXNDYWxsYWJsZShleGVjKSkgcmV0dXJuIHVuJFRlc3QodGhpcywgc3RyKTtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbChleGVjLCB0aGlzLCBzdHIpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwgJiYgIWlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiAhIXJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG4kVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbiRUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuJFRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSAkdG9TdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgUikgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBnZXRGbGFncyhSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYFNldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcbmNvbGxlY3Rpb24oJ1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYW5jaG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5hbmNob3JcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdhbmNob3InKSB9LCB7XG4gIGFuY2hvcjogZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICfwoK63Jy5hdCgtMikgIT09ICdcXHVEODQyJztcbn0pO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1yZWxhdGl2ZS1pbmRleGluZy1tZXRob2RcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBhdDogZnVuY3Rpb24gYXQoaW5kZXgpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIHZhciBsZW4gPSBTLmxlbmd0aDtcbiAgICB2YXIgcmVsYXRpdmVJbmRleCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICAgIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gICAgcmV0dXJuIChrIDwgMCB8fCBrID49IGxlbikgPyB1bmRlZmluZWQgOiBjaGFyQXQoUywgayk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJpZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmlnXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYmlnJykgfSwge1xuICBiaWc6IGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmxpbmtgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJsaW5rXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYmxpbmsnKSB9LCB7XG4gIGJsaW5rOiBmdW5jdGlvbiBibGluaygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ib2xkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5ib2xkXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYm9sZCcpIH0sIHtcbiAgYm9sZDogZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY29kZUF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jb2RlQXQ7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiBjb2RlQXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLWVuZHN3aXRoIC0tIHNhZmVcbnZhciB1biRFbmRzV2l0aCA9IHVuY3VycnlUaGlzKCcnLmVuZHNXaXRoKTtcbnZhciBzbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ2VuZHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgbm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpO1xuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBsZW4gPSB0aGF0Lmxlbmd0aDtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHVuJEVuZHNXaXRoXG4gICAgICA/IHVuJEVuZHNXaXRoKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiBzbGljZSh0aGF0LCBlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5maXhlZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZpeGVkJykgfSwge1xuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3JcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdmb250Y29sb3InKSB9LCB7XG4gIGZvbnRjb2xvcjogZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRzaXplJykgfSwge1xuICBmb250c2l6ZTogZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctZnJvbWNvZGVwb2ludCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG52YXIgSU5DT1JSRUNUX0xFTkdUSCA9ICEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDE7XG5cbi8vIGBTdHJpbmcuZnJvbUNvZGVQb2ludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5mcm9tY29kZXBvaW50XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfTEVOR1RIIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwRkZGRikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgZWxlbWVudHNbaV0gPSBjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhEODAwLCBjb2RlICUgMHg0MDAgKyAweERDMDApO1xuICAgIH0gcmV0dXJuIGpvaW4oZWxlbWVudHMsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5zdHJpbmdJbmRleE9mKFxuICAgICAgdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSksXG4gICAgICB0b1N0cmluZyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICApO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnaXRhbGljcycpIH0sIHtcbiAgaXRhbGljczogZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiB0b1N0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5saW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5saW5rXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnbGluaycpIH0sIHtcbiAgbGluazogZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLW1hdGNoYWxsIC0tIHNhZmUgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIE1BVENIX0FMTCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbnZhciBSRUdFWFBfU1RSSU5HID0gJ1JlZ0V4cCBTdHJpbmcnO1xudmFyIFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IgPSBSRUdFWFBfU1RSSU5HICsgJyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihSRUdFWFBfU1RSSU5HX0lURVJBVE9SKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZ2V0RmxhZ3MgPSB1bmN1cnJ5VGhpcyhyZWdFeHBGbGFncyk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHVuJE1hdGNoQWxsID0gdW5jdXJyeVRoaXMoJycubWF0Y2hBbGwpO1xuXG52YXIgV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYID0gISF1biRNYXRjaEFsbCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRNYXRjaEFsbCgnYScsIC8uLyk7XG59KTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gUmVnRXhwU3RyaW5nSXRlcmF0b3IocmVnZXhwLCBzdHJpbmcsICRnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiAkZ2xvYmFsLFxuICAgIHVuaWNvZGU6IGZ1bGxVbmljb2RlLFxuICAgIGRvbmU6IGZhbHNlXG4gIH0pO1xufSwgUkVHRVhQX1NUUklORywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgdmFyIFIgPSBzdGF0ZS5yZWdleHA7XG4gIHZhciBTID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgbWF0Y2ggPSByZWdFeHBFeGVjKFIsIFMpO1xuICBpZiAobWF0Y2ggPT09IG51bGwpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHN0YXRlLmRvbmUgPSB0cnVlIH07XG4gIGlmIChzdGF0ZS5nbG9iYWwpIHtcbiAgICBpZiAodG9TdHJpbmcobWF0Y2hbMF0pID09PSAnJykgUi5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgoUi5sYXN0SW5kZXgpLCBzdGF0ZS51bmljb2RlKTtcbiAgICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IGZhbHNlIH07XG4gIH1cbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG52YXIgJG1hdGNoQWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDLCBmbGFnc1ZhbHVlLCBmbGFncywgbWF0Y2hlciwgJGdsb2JhbCwgZnVsbFVuaWNvZGU7XG4gIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IoUiwgUmVnRXhwKTtcbiAgZmxhZ3NWYWx1ZSA9IFIuZmxhZ3M7XG4gIGlmIChmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgJiYgaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIFIpICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpKSB7XG4gICAgZmxhZ3NWYWx1ZSA9IGdldEZsYWdzKFIpO1xuICB9XG4gIGZsYWdzID0gZmxhZ3NWYWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhmbGFnc1ZhbHVlKTtcbiAgbWF0Y2hlciA9IG5ldyBDKEMgPT09IFJlZ0V4cCA/IFIuc291cmNlIDogUiwgZmxhZ3MpO1xuICAkZ2xvYmFsID0gISF+c3RyaW5nSW5kZXhPZihmbGFncywgJ2cnKTtcbiAgZnVsbFVuaWNvZGUgPSAhIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAndScpO1xuICBtYXRjaGVyLmxhc3RJbmRleCA9IHRvTGVuZ3RoKFIubGFzdEluZGV4KTtcbiAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IobWF0Y2hlciwgUywgJGdsb2JhbCwgZnVsbFVuaWNvZGUpO1xufTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYIH0sIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICB2YXIgZmxhZ3MsIFMsIG1hdGNoZXIsIHJ4O1xuICAgIGlmIChyZWdleHAgIT0gbnVsbCkge1xuICAgICAgaWYgKGlzUmVnRXhwKHJlZ2V4cCkpIHtcbiAgICAgICAgZmxhZ3MgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyByZWdleHAuZmxhZ3NcbiAgICAgICAgICA6IGdldEZsYWdzKHJlZ2V4cClcbiAgICAgICAgKSk7XG4gICAgICAgIGlmICghfnN0cmluZ0luZGV4T2YoZmxhZ3MsICdnJykpIHRocm93IFR5cGVFcnJvcignYC5tYXRjaEFsbGAgZG9lcyBub3QgYWxsb3cgbm9uLWdsb2JhbCByZWdleGVzJyk7XG4gICAgICB9XG4gICAgICBpZiAoV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYKSByZXR1cm4gdW4kTWF0Y2hBbGwoTywgcmVnZXhwKTtcbiAgICAgIG1hdGNoZXIgPSBnZXRNZXRob2QocmVnZXhwLCBNQVRDSF9BTEwpO1xuICAgICAgaWYgKG1hdGNoZXIgPT09IHVuZGVmaW5lZCAmJiBJU19QVVJFICYmIGNsYXNzb2YocmVnZXhwKSA9PSAnUmVnRXhwJykgbWF0Y2hlciA9ICRtYXRjaEFsbDtcbiAgICAgIGlmIChtYXRjaGVyKSByZXR1cm4gY2FsbChtYXRjaGVyLCByZWdleHAsIE8pO1xuICAgIH0gZWxzZSBpZiAoV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYKSByZXR1cm4gdW4kTWF0Y2hBbGwoTywgcmVnZXhwKTtcbiAgICBTID0gdG9TdHJpbmcoTyk7XG4gICAgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcbiAgICByZXR1cm4gSVNfUFVSRSA/IGNhbGwoJG1hdGNoQWxsLCByeCwgUykgOiByeFtNQVRDSF9BTExdKFMpO1xuICB9XG59KTtcblxuSVNfUFVSRSB8fCBNQVRDSF9BTEwgaW4gUmVnRXhwUHJvdG90eXBlIHx8IHJlZGVmaW5lKFJlZ0V4cFByb3RvdHlwZSwgTUFUQ0hfQUxMLCAkbWF0Y2hBbGwpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgbWF0Y2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBNQVRDSCk7XG4gICAgICByZXR1cm4gbWF0Y2hlciA/IGNhbGwobWF0Y2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0odG9TdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByeCwgUyk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRFbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLmVuZDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgU3RyaW5nLnJhd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5yYXdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlIH0sIHtcbiAgcmF3OiBmdW5jdGlvbiByYXcodGVtcGxhdGUpIHtcbiAgICB2YXIgcmF3VGVtcGxhdGUgPSB0b0luZGV4ZWRPYmplY3QodG9PYmplY3QodGVtcGxhdGUpLnJhdyk7XG4gICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IGxlbmd0aE9mQXJyYXlMaWtlKHJhd1RlbXBsYXRlKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxpdGVyYWxTZWdtZW50cyA+IGkpIHtcbiAgICAgIHB1c2goZWxlbWVudHMsIHRvU3RyaW5nKHJhd1RlbXBsYXRlW2krK10pKTtcbiAgICAgIGlmIChpID09PSBsaXRlcmFsU2VnbWVudHMpIHJldHVybiBqb2luKGVsZW1lbnRzLCAnJyk7XG4gICAgICBpZiAoaSA8IGFyZ3VtZW50c0xlbmd0aCkgcHVzaChlbGVtZW50cywgdG9TdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICByZXBlYXQ6IHJlcGVhdFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciByZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBpbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG52YXIgc3RyaW5nSW5kZXhPZiA9IGZ1bmN0aW9uIChzdHJpbmcsIHNlYXJjaFZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgaWYgKGZyb21JbmRleCA+IHN0cmluZy5sZW5ndGgpIHJldHVybiAtMTtcbiAgaWYgKHNlYXJjaFZhbHVlID09PSAnJykgcmV0dXJuIGZyb21JbmRleDtcbiAgcmV0dXJuIGluZGV4T2Yoc3RyaW5nLCBzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KTtcbn07XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGxhY2VBbGw6IGZ1bmN0aW9uIHJlcGxhY2VBbGwoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICB2YXIgSVNfUkVHX0VYUCwgZmxhZ3MsIHJlcGxhY2VyLCBzdHJpbmcsIHNlYXJjaFN0cmluZywgZnVuY3Rpb25hbFJlcGxhY2UsIHNlYXJjaExlbmd0aCwgYWR2YW5jZUJ5LCByZXBsYWNlbWVudDtcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBlbmRPZkxhc3RNYXRjaCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIGlmIChzZWFyY2hWYWx1ZSAhPSBudWxsKSB7XG4gICAgICBJU19SRUdfRVhQID0gaXNSZWdFeHAoc2VhcmNoVmFsdWUpO1xuICAgICAgaWYgKElTX1JFR19FWFApIHtcbiAgICAgICAgZmxhZ3MgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyBzZWFyY2hWYWx1ZS5mbGFnc1xuICAgICAgICAgIDogZ2V0RmxhZ3Moc2VhcmNoVmFsdWUpXG4gICAgICAgICkpO1xuICAgICAgICBpZiAoIX5pbmRleE9mKGZsYWdzLCAnZycpKSB0aHJvdyBUeXBlRXJyb3IoJ2AucmVwbGFjZUFsbGAgZG9lcyBub3QgYWxsb3cgbm9uLWdsb2JhbCByZWdleGVzJyk7XG4gICAgICB9XG4gICAgICByZXBsYWNlciA9IGdldE1ldGhvZChzZWFyY2hWYWx1ZSwgUkVQTEFDRSk7XG4gICAgICBpZiAocmVwbGFjZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChJU19QVVJFICYmIElTX1JFR19FWFApIHtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2UodG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdHJpbmcgPSB0b1N0cmluZyhPKTtcbiAgICBzZWFyY2hTdHJpbmcgPSB0b1N0cmluZyhzZWFyY2hWYWx1ZSk7XG4gICAgZnVuY3Rpb25hbFJlcGxhY2UgPSBpc0NhbGxhYmxlKHJlcGxhY2VWYWx1ZSk7XG4gICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gdG9TdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICBzZWFyY2hMZW5ndGggPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICAgIGFkdmFuY2VCeSA9IG1heCgxLCBzZWFyY2hMZW5ndGgpO1xuICAgIHBvc2l0aW9uID0gc3RyaW5nSW5kZXhPZihzdHJpbmcsIHNlYXJjaFN0cmluZywgMCk7XG4gICAgd2hpbGUgKHBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgcmVwbGFjZW1lbnQgPSBmdW5jdGlvbmFsUmVwbGFjZVxuICAgICAgICA/IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZShzZWFyY2hTdHJpbmcsIHBvc2l0aW9uLCBzdHJpbmcpKVxuICAgICAgICA6IGdldFN1YnN0aXR1dGlvbihzZWFyY2hTdHJpbmcsIHN0cmluZywgcG9zaXRpb24sIFtdLCB1bmRlZmluZWQsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nU2xpY2Uoc3RyaW5nLCBlbmRPZkxhc3RNYXRjaCwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICBlbmRPZkxhc3RNYXRjaCA9IHBvc2l0aW9uICsgc2VhcmNoTGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBzdHJpbmdJbmRleE9mKHN0cmluZywgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiArIGFkdmFuY2VCeSk7XG4gICAgfVxuICAgIGlmIChlbmRPZkxhc3RNYXRjaCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCArPSBzdHJpbmdTbGljZShzdHJpbmcsIGVuZE9mTGFzdE1hdGNoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIHJldHVybiByZXBsYWNlclxuICAgICAgICA/IGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogY2FsbChuYXRpdmVSZXBsYWNlLCB0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVwbGFjZVZhbHVlID09ICdzdHJpbmcnICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCBVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCAnJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICBwdXNoKHJlc3VsdHMsIHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlck9ySW5maW5pdHkocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgcHVzaChjYXB0dXJlcywgbWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gY29uY2F0KFttYXRjaGVkXSwgY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSBwdXNoKHJlcGxhY2VyQXJncywgbmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gdG9TdHJpbmcoYXBwbHkocmVwbGFjZVZhbHVlLCB1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcbn0sICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyB8fCAhUkVQTEFDRV9LRUVQU18kMCB8fCBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBTRUFSQ0gpO1xuICAgICAgcmV0dXJuIHNlYXJjaGVyID8gY2FsbChzZWFyY2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKHRvU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVNlYXJjaCwgcngsIFMpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zbWFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc21hbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzbWFsbCcpIH0sIHtcbiAgc21hbGw6IGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcbnZhciBNQVhfVUlOVDMyID0gMHhGRkZGRkZGRjtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoJHB1c2gpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoICE9PSAyIHx8IHJlc3VsdFswXSAhPT0gJ2EnIHx8IHJlc3VsdFsxXSAhPT0gJ2InO1xufSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzcGxpdCcsIGZ1bmN0aW9uIChTUExJVCwgbmF0aXZlU3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJy5zcGxpdCgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAndGVzdCcuc3BsaXQoLyg/OikvLCAtMSkubGVuZ3RoICE9IDQgfHxcbiAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9IDIgfHxcbiAgICAnLicuc3BsaXQoLyguPykoLj8pLykubGVuZ3RoICE9IDQgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJy4nLnNwbGl0KC8oKSgpLykubGVuZ3RoID4gMSB8fFxuICAgICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBjYWxsKG5hdGl2ZVNwbGl0LCBzdHJpbmcsIHNlcGFyYXRvciwgbGltKTtcbiAgICAgIH1cbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gY2FsbChyZWdleHBFeGVjLCBzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHkubGFzdEluZGV4O1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIHB1c2gob3V0cHV0LCBzdHJpbmdTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSBhcHBseSgkcHVzaCwgb3V0cHV0LCBhcnJheVNsaWNlKG1hdGNoLCAxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IGxpbSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIWV4ZWMoc2VwYXJhdG9yQ29weSwgJycpKSBwdXNoKG91dHB1dCwgJycpO1xuICAgICAgfSBlbHNlIHB1c2gob3V0cHV0LCBzdHJpbmdTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltID8gYXJyYXlTbGljZShvdXRwdXQsIDAsIGxpbSkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJy5zcGxpdCh1bmRlZmluZWQsIDApLmxlbmd0aCkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBjYWxsKG5hdGl2ZVNwbGl0LCB0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2Qoc2VwYXJhdG9yLCBTUExJVCk7XG4gICAgICByZXR1cm4gc3BsaXR0ZXJcbiAgICAgICAgPyBjYWxsKHNwbGl0dGVyLCBzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGNhbGwoaW50ZXJuYWxTcGxpdCwgdG9TdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIGxpbWl0KSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcngsIFMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoVU5TVVBQT1JURURfWSA/ICdnJyA6ICd5Jyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhVTlNVUFBPUlRFRF9ZID8gJ14oPzonICsgcnguc291cmNlICsgJyknIDogcngsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBVTlNVUFBPUlRFRF9ZID8gMCA6IHE7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFVOU1VQUE9SVEVEX1kgPyBzdHJpbmdTbGljZShTLCBxKSA6IFMpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9IG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoVU5TVVBQT1JURURfWSA/IHEgOiAwKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2goQSwgc3RyaW5nU2xpY2UoUywgcCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgcHVzaChBLCB6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwdXNoKEEsIHN0cmluZ1NsaWNlKFMsIHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0sICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMsIFVOU1VQUE9SVEVEX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciB1biRTdGFydHNXaXRoID0gdW5jdXJyeVRoaXMoJycuc3RhcnRzV2l0aCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHVuJFN0YXJ0c1dpdGhcbiAgICAgID8gdW4kU3RhcnRzV2l0aCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiBzdHJpbmdTbGljZSh0aGF0LCBpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0cmlrZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N0cmlrZScpIH0sIHtcbiAgc3RyaWtlOiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN1YmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3ViXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3ViJykgfSwge1xuICBzdWI6IGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZWZlci1zdHJpbmctc2xpY2UgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGT1JDRUQgPSAhJycuc3Vic3RyIHx8ICdhYicuc3Vic3RyKC0xKSAhPT0gJ2InO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdWJzdHJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1YnN0clxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIHZhciBzaXplID0gdGhhdC5sZW5ndGg7XG4gICAgdmFyIGludFN0YXJ0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShzdGFydCk7XG4gICAgdmFyIGludExlbmd0aCwgaW50RW5kO1xuICAgIGlmIChpbnRTdGFydCA9PT0gSW5maW5pdHkpIGludFN0YXJ0ID0gMDtcbiAgICBpZiAoaW50U3RhcnQgPCAwKSBpbnRTdGFydCA9IG1heChzaXplICsgaW50U3RhcnQsIDApO1xuICAgIGludExlbmd0aCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gc2l6ZSA6IHRvSW50ZWdlck9ySW5maW5pdHkobGVuZ3RoKTtcbiAgICBpZiAoaW50TGVuZ3RoIDw9IDAgfHwgaW50TGVuZ3RoID09PSBJbmZpbml0eSkgcmV0dXJuICcnO1xuICAgIGludEVuZCA9IG1pbihpbnRTdGFydCArIGludExlbmd0aCwgc2l6ZSk7XG4gICAgcmV0dXJuIGludFN0YXJ0ID49IGludEVuZCA/ICcnIDogc3RyaW5nU2xpY2UodGhhdCwgaW50U3RhcnQsIGludEVuZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN1cGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3VwXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3VwJykgfSwge1xuICBzdXA6IGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLmVuZDtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG52YXIgRk9SQ0VEID0gZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbUVuZCcpO1xuXG52YXIgdHJpbUVuZCA9IEZPUkNFRCA/IGZ1bmN0aW9uIHRyaW1FbmQoKSB7XG4gIHJldHVybiAkdHJpbUVuZCh0aGlzKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1zdGFydC10cmltZW5kIC0tIHNhZmVcbn0gOiAnJy50cmltRW5kO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1FbmQsIHRyaW1SaWdodCB9YCBtZXRob2RzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI1N0cmluZy5wcm90b3R5cGUudHJpbXJpZ2h0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIG5hbWU6ICd0cmltRW5kJywgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0cmltRW5kOiB0cmltRW5kLFxuICB0cmltUmlnaHQ6IHRyaW1FbmRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW1TdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnN0YXJ0O1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbnZhciBGT1JDRUQgPSBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltU3RhcnQnKTtcblxudmFyIHRyaW1TdGFydCA9IEZPUkNFRCA/IGZ1bmN0aW9uIHRyaW1TdGFydCgpIHtcbiAgcmV0dXJuICR0cmltU3RhcnQodGhpcyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG59IDogJycudHJpbVN0YXJ0O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1TdGFydCwgdHJpbUxlZnQgfWAgbWV0aG9kc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI1N0cmluZy5wcm90b3R5cGUudHJpbWxlZnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgbmFtZTogJ3RyaW1TdGFydCcsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdHJpbVN0YXJ0OiB0cmltU3RhcnQsXG4gIHRyaW1MZWZ0OiB0cmltU3RhcnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltJykgfSwge1xuICB0cmltOiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzKTtcbiAgfVxufSk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmFzeW5jSXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5hc3luY2l0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jSXRlcmF0b3InKTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgdmFyIHN5bWJvbFZhbHVlT2YgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gc3ltYm9sVmFsdWVPZih0aGlzKTtcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZyhzeW1ib2wpO1xuICAgICAgaWYgKGhhc093bihFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmhhc0luc3RhbmNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaGFzaW5zdGFuY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXNjb25jYXRzcHJlYWRhYmxlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2wgJiYgJFN5bWJvbFtQUk9UT1RZUEVdO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKFN5bWJvbFByb3RvdHlwZSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhc093bihPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24odGhpcywgSElEREVOKSAmJiBoYXNPd24odGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgcmVkZWZpbmUoU3ltYm9sUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydGllcztcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICByZWRlZmluZShPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYFN5bWJvbC5mb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gJHRvU3RyaW5nKGtleSk7XG4gICAgaWYgKGhhc093bihTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKSByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddO1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9LFxuICAvLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXNPd24oU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpO1xuICAgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gICAgcmV0dXJuICRzdHJpbmdpZnkoW3N5bWJvbF0pICE9ICdbbnVsbF0nXG4gICAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICAgIHx8ICRzdHJpbmdpZnkoeyBhOiBzeW1ib2wgfSkgIT0gJ3t9J1xuICAgICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG4gIH0pO1xuXG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfSlNPTl9TVFJJTkdJRlkgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0NhbGxhYmxlKCRyZXBsYWNlcikpIHZhbHVlID0gY2FsbCgkcmVwbGFjZXIsIHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICAgIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCFTeW1ib2xQcm90b3R5cGVbVE9fUFJJTUlUSVZFXSkge1xuICB2YXIgdmFsdWVPZiA9IFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIC5sZW5ndGhcbiAgcmVkZWZpbmUoU3ltYm9sUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgLy8gVE9ETzogaW1wcm92ZSBoaW50IGxvZ2ljXG4gICAgcmV0dXJuIGNhbGwodmFsdWVPZiwgdGhpcyk7XG4gIH0pO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hBbGxgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaGFsbFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5tYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLm1hdGNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnJlcGxhY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5yZXBsYWNlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuc2VhcmNoYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc2VhcmNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NlYXJjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zcGVjaWVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BlY2llc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNwbGl0YCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuc3BsaXRcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BsaXQnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wudG9QcmltaXRpdmVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3ByaW1pdGl2ZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvc3RyaW5ndGFnXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnVuc2NvcGFibGVzYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudW5zY29wYWJsZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnYXQnLCBmdW5jdGlvbiBhdChpbmRleCkge1xuICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gIHJldHVybiAoayA8IDAgfHwgayA+PSBsZW4pID8gdW5kZWZpbmVkIDogT1trXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRBcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIHUkQXJyYXlDb3B5V2l0aGluID0gdW5jdXJyeVRoaXMoJEFycmF5Q29weVdpdGhpbik7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmNvcHl3aXRoaW5cbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2NvcHlXaXRoaW4nLCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgcmV0dXJuIHUkQXJyYXlDb3B5V2l0aGluKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmV2ZXJ5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdldmVyeScsIGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZXZlcnkoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyICRmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWxsJywgZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHJldHVybiBjYWxsKFxuICAgICRmaWxsLFxuICAgIGFUeXBlZEFycmF5KHRoaXMpLFxuICAgIHZhbHVlLFxuICAgIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsXG4gICAgbGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgZnJvbVNwZWNpZXNBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsdGVyXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxpc3QgPSAkZmlsdGVyKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBmcm9tU3BlY2llc0FuZExpc3QodGhpcywgbGlzdCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRpbmRleFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZEluZGV4JywgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kSW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaW5kJywgZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZChhVHlwZWRBcnJheSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0NjRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0NjQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZvcmVhY2hcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZvckVhY2gnLCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICRmb3JFYWNoKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG5cbi8vIGAlVHlwZWRBcnJheSUuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5mcm9tXG5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kKCdmcm9tJywgdHlwZWRBcnJheUZyb20sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5jbHVkZXMnLCBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5jbHVkZXMoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmRleG9mXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmRleE9mJywgZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5kZXhPZihhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgYXJyYXlWYWx1ZXMgPSB1bmN1cnJ5VGhpcyhBcnJheUl0ZXJhdG9ycy52YWx1ZXMpO1xudmFyIGFycmF5S2V5cyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmtleXMpO1xudmFyIGFycmF5RW50cmllcyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmVudHJpZXMpO1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlO1xuXG52YXIgR0VORVJJQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwoWzFdKTtcbn0pO1xuXG52YXIgSVRFUkFUT1JfSVNfVkFMVUVTID0gISFUeXBlZEFycmF5UHJvdG90eXBlXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlc1xuICAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlcy5uYW1lID09PSAndmFsdWVzJztcblxudmFyIHR5cGVkQXJyYXlWYWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHJldHVybiBhcnJheVZhbHVlcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5lbnRyaWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdlbnRyaWVzJywgZnVuY3Rpb24gZW50cmllcygpIHtcbiAgcmV0dXJuIGFycmF5RW50cmllcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59LCBHRU5FUklDKTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmtleXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2tleXMnLCBmdW5jdGlvbiBrZXlzKCkge1xuICByZXR1cm4gYXJyYXlLZXlzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0sIEdFTkVSSUMpO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS52YWx1ZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3ZhbHVlcycsIHR5cGVkQXJyYXlWYWx1ZXMsIEdFTkVSSUMgfHwgIUlURVJBVE9SX0lTX1ZBTFVFUywgeyBuYW1lOiAndmFsdWVzJyB9KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKElURVJBVE9SLCB0eXBlZEFycmF5VmFsdWVzLCBHRU5FUklDIHx8ICFJVEVSQVRPUl9JU19WQUxVRVMsIHsgbmFtZTogJ3ZhbHVlcycgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5qb2luXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdqb2luJywgZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgcmV0dXJuICRqb2luKGFUeXBlZEFycmF5KHRoaXMpLCBzZXBhcmF0b3IpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciAkbGFzdEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gYXBwbHkoJGxhc3RJbmRleE9mLCBhVHlwZWRBcnJheSh0aGlzKSwgbGVuZ3RoID4gMSA/IFtzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV1dIDogW3NlYXJjaEVsZW1lbnRdKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubWFwXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdtYXAnLCBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkbWFwKGFUeXBlZEFycmF5KHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3ICh0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKE8pKShsZW5ndGgpO1xuICB9KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMnKTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5vZlxuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnb2YnLCBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSwgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZVJpY2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlUmlnaHQnLCBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gJHJlZHVjZVJpZ2h0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuICRyZWR1Y2UoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciAkc2V0ID0gSW50OEFycmF5UHJvdG90eXBlICYmIEludDhBcnJheVByb3RvdHlwZS5zZXQ7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciBhcnJheSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgyKTtcbiAgY2FsbCgkc2V0LCBhcnJheSwgeyBsZW5ndGg6IDEsIDA6IDMgfSwgMSk7XG4gIHJldHVybiBhcnJheVsxXSAhPT0gMztcbn0pO1xuXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMTI5NCBhbmQgb3RoZXJcbnZhciBUT19PQkpFQ1RfQlVHID0gV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTICYmIEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IG5ldyBJbnQ4QXJyYXkoMik7XG4gIGFycmF5LnNldCgxKTtcbiAgYXJyYXkuc2V0KCcyJywgMSk7XG4gIHJldHVybiBhcnJheVswXSAhPT0gMCB8fCBhcnJheVsxXSAhPT0gMjtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIHNyYyA9IHRvSW5kZXhlZE9iamVjdChhcnJheUxpa2UpO1xuICBpZiAoV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTKSByZXR1cm4gY2FsbCgkc2V0LCB0aGlzLCBzcmMsIG9mZnNldCk7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKHNyYyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgIVdPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyB8fCBUT19PQkpFQ1RfQlVHKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2xpY2UoKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9IGFycmF5U2xpY2UoYVR5cGVkQXJyYXkodGhpcyksIHN0YXJ0LCBlbmQpO1xuICB2YXIgQyA9IHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29tZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29tZScsIGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRzb21lKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGludGVybmFsU29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgRkYgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24nKTtcbnZhciBJRV9PUl9FREdFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlJyk7XG52YXIgVjggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBVaW50MTZBcnJheSA9IGdsb2JhbC5VaW50MTZBcnJheTtcbnZhciB1biRTb3J0ID0gVWludDE2QXJyYXkgJiYgdW5jdXJyeVRoaXMoVWludDE2QXJyYXkucHJvdG90eXBlLnNvcnQpO1xuXG4vLyBXZWJLaXRcbnZhciBBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyA9ICEhdW4kU29ydCAmJiAhKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdW4kU29ydChuZXcgVWludDE2QXJyYXkoMiksIG51bGwpO1xufSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRTb3J0KG5ldyBVaW50MTZBcnJheSgyKSwge30pO1xufSkpO1xuXG52YXIgU1RBQkxFX1NPUlQgPSAhIXVuJFNvcnQgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZmVhdHVyZSBkZXRlY3Rpb24gY2FuIGJlIHRvbyBzbG93LCBzbyBjaGVjayBlbmdpbmVzIHZlcnNpb25zXG4gIGlmIChWOCkgcmV0dXJuIFY4IDwgNzQ7XG4gIGlmIChGRikgcmV0dXJuIEZGIDwgNjc7XG4gIGlmIChJRV9PUl9FREdFKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFdFQktJVCkgcmV0dXJuIFdFQktJVCA8IDYwMjtcblxuICB2YXIgYXJyYXkgPSBuZXcgVWludDE2QXJyYXkoNTE2KTtcbiAgdmFyIGV4cGVjdGVkID0gQXJyYXkoNTE2KTtcbiAgdmFyIGluZGV4LCBtb2Q7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNTE2OyBpbmRleCsrKSB7XG4gICAgbW9kID0gaW5kZXggJSA0O1xuICAgIGFycmF5W2luZGV4XSA9IDUxNSAtIGluZGV4O1xuICAgIGV4cGVjdGVkW2luZGV4XSA9IGluZGV4IC0gMiAqIG1vZCArIDM7XG4gIH1cblxuICB1biRTb3J0KGFycmF5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYSAvIDQgfCAwKSAtIChiIC8gNCB8IDApO1xuICB9KTtcblxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA1MTY7IGluZGV4KyspIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdICE9PSBleHBlY3RlZFtpbmRleF0pIHJldHVybiB0cnVlO1xuICB9XG59KTtcblxudmFyIGdldFNvcnRDb21wYXJlID0gZnVuY3Rpb24gKGNvbXBhcmVmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoeSAhPT0geSkgcmV0dXJuIC0xO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKHggIT09IHgpIHJldHVybiAxO1xuICAgIGlmICh4ID09PSAwICYmIHkgPT09IDApIHJldHVybiAxIC8geCA+IDAgJiYgMSAvIHkgPCAwID8gMSA6IC0xO1xuICAgIHJldHVybiB4ID4geTtcbiAgfTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNvcnRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NvcnQnLCBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlZm4pO1xuICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiB1biRTb3J0KHRoaXMsIGNvbXBhcmVmbik7XG5cbiAgcmV0dXJuIGludGVybmFsU29ydChhVHlwZWRBcnJheSh0aGlzKSwgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG59LCAhU1RBQkxFX1NPUlQgfHwgQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnN1YmFycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zdWJhcnJheVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc3ViYXJyYXknLCBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gIHZhciBPID0gYVR5cGVkQXJyYXkodGhpcyk7XG4gIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgdmFyIGJlZ2luSW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gIHZhciBDID0gdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihPKTtcbiAgcmV0dXJuIG5ldyBDKFxuICAgIE8uYnVmZmVyLFxuICAgIE8uYnl0ZU9mZnNldCArIGJlZ2luSW5kZXggKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gYmVnaW5JbmRleClcbiAgKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkdG9Mb2NhbGVTdHJpbmcgPSBbXS50b0xvY2FsZVN0cmluZztcblxuLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxudmFyIFRPX0xPQ0FMRV9TVFJJTkdfQlVHID0gISFJbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgSW50OEFycmF5KDEpKTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IEludDhBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9sb2NhbGVzdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvTG9jYWxlU3RyaW5nJywgZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gIHJldHVybiBhcHBseShcbiAgICAkdG9Mb2NhbGVTdHJpbmcsXG4gICAgVE9fTE9DQUxFX1NUUklOR19CVUcgPyBhcnJheVNsaWNlKGFUeXBlZEFycmF5KHRoaXMpKSA6IGFUeXBlZEFycmF5KHRoaXMpLFxuICAgIGFycmF5U2xpY2UoYXJndW1lbnRzKVxuICApO1xufSwgRk9SQ0VEKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xudmFyIFVpbnQ4QXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlIHx8IHt9O1xudmFyIGFycmF5VG9TdHJpbmcgPSBbXS50b1N0cmluZztcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gIGFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gam9pbih0aGlzKTtcbiAgfTtcbn1cblxudmFyIElTX05PVF9BUlJBWV9NRVRIT0QgPSBVaW50OEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmc7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS50b3N0cmluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9TdHJpbmcnLCBhcnJheVRvU3RyaW5nLCBJU19OT1RfQVJSQVlfTUVUSE9EKTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDE2JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdVaW50OCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQ4Q2xhbXBlZEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGhleDIgPSAvXltcXGRhLWZdezJ9JC9pO1xudmFyIGhleDQgPSAvXltcXGRhLWZdezR9JC9pO1xuXG4vLyBgdW5lc2NhcGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy11bmVzY2FwZS1zdHJpbmdcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICB1bmVzY2FwZTogZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNociwgcGFydDtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNociA9IGNoYXJBdChzdHIsIGluZGV4KyspO1xuICAgICAgaWYgKGNociA9PT0gJyUnKSB7XG4gICAgICAgIGlmIChjaGFyQXQoc3RyLCBpbmRleCkgPT09ICd1Jykge1xuICAgICAgICAgIHBhcnQgPSBzdHJpbmdTbGljZShzdHIsIGluZGV4ICsgMSwgaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoZXhlYyhoZXg0LCBwYXJ0KSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZShwYXJzZUludChwYXJ0LCAxNikpO1xuICAgICAgICAgICAgaW5kZXggKz0gNTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0ID0gc3RyaW5nU2xpY2Uoc3RyLCBpbmRleCwgaW5kZXggKyAyKTtcbiAgICAgICAgICBpZiAoZXhlYyhoZXgyLCBwYXJ0KSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZShwYXJzZUludChwYXJ0LCAxNikpO1xuICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcblxudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG4vLyBgV2Vha01hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC1jb25zdHJ1Y3RvclxudmFyICRXZWFrTWFwID0gY29sbGVjdGlvbignV2Vha01hcCcsIHdyYXBwZXIsIGNvbGxlY3Rpb25XZWFrKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuLy8gV2UgY2FuJ3QgdXNlIGZlYXR1cmUgZGV0ZWN0aW9uIGJlY2F1c2UgaXQgY3Jhc2ggc29tZSBvbGQgSUUgYnVpbGRzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDg1XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxXZWFrTWFwID0gY29sbGVjdGlvbldlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgJ1dlYWtNYXAnLCB0cnVlKTtcbiAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXSk7XG4gIHZhciBuYXRpdmVIYXMgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmhhcyk7XG4gIHZhciBuYXRpdmVHZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmdldCk7XG4gIHZhciBuYXRpdmVTZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLnNldCk7XG4gIHJlZGVmaW5lQWxsKFdlYWtNYXBQcm90b3R5cGUsIHtcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXModGhpcywga2V5KSA/IG5hdGl2ZUdldCh0aGlzLCBrZXkpIDogc3RhdGUuZnJvemVuLmdldChrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlR2V0KHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcyh0aGlzLCBrZXkpID8gbmF0aXZlU2V0KHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciBjdG9pID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Jhc2U2NC1tYXAnKS5jdG9pO1xuXG52YXIgZGlzYWxsb3dlZCA9IC9bXlxcZCsvYS16XS9pO1xudmFyIHdoaXRlc3BhY2VzID0gL1tcXHRcXG5cXGZcXHIgXSsvZztcbnZhciBmaW5hbEVxID0gL1s9XSskLztcblxudmFyICRhdG9iID0gZ2V0QnVpbHRJbignYXRvYicpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGRpc2FsbG93ZWQuZXhlYyk7XG5cbnZhciBOT19TUEFDRVNfSUdOT1JFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXRvYignICcpICE9PSAnJztcbn0pO1xuXG52YXIgTk9fQVJHX1JFQ0VJVklOR19DSEVDSyA9ICFOT19TUEFDRVNfSUdOT1JFICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICRhdG9iKCk7XG59KTtcblxuLy8gYGF0b2JgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2RvbS1hdG9iXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IE5PX1NQQUNFU19JR05PUkUgfHwgTk9fQVJHX1JFQ0VJVklOR19DSEVDSyB9LCB7XG4gIGF0b2I6IGZ1bmN0aW9uIGF0b2IoZGF0YSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIGlmIChOT19BUkdfUkVDRUlWSU5HX0NIRUNLKSByZXR1cm4gJGF0b2IoZGF0YSk7XG4gICAgdmFyIHN0cmluZyA9IHJlcGxhY2UodG9TdHJpbmcoZGF0YSksIHdoaXRlc3BhY2VzLCAnJyk7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGJjID0gMDtcbiAgICB2YXIgY2hyLCBicztcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCAlIDQgPT0gMCkge1xuICAgICAgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGZpbmFsRXEsICcnKTtcbiAgICB9XG4gICAgaWYgKHN0cmluZy5sZW5ndGggJSA0ID09IDEgfHwgZXhlYyhkaXNhbGxvd2VkLCBzdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgKGdldEJ1aWx0SW4oJ0RPTUV4Y2VwdGlvbicpKSgnVGhlIHN0cmluZyBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQnLCAnSW52YWxpZENoYXJhY3RlckVycm9yJyk7XG4gICAgfVxuICAgIHdoaWxlIChjaHIgPSBjaGFyQXQoc3RyaW5nLCBwb3NpdGlvbisrKSkge1xuICAgICAgaWYgKGhhc093bihjdG9pLCBjaHIpKSB7XG4gICAgICAgIGJzID0gYmMgJSA0ID8gYnMgKiA2NCArIGN0b2lbY2hyXSA6IGN0b2lbY2hyXTtcbiAgICAgICAgaWYgKGJjKysgJSA0KSBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDI1NSAmIGJzID4+ICgtMiAqIGJjICYgNikpO1xuICAgICAgfVxuICAgIH0gcmV0dXJuIG91dHB1dDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIGl0b2MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmFzZTY0LW1hcCcpLml0b2M7XG5cbnZhciAkYnRvYSA9IGdldEJ1aWx0SW4oJ2J0b2EnKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcblxudmFyIE5PX0FSR19SRUNFSVZJTkdfQ0hFQ0sgPSAhISRidG9hICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICRidG9hKCk7XG59KTtcblxuLy8gYGJ0b2FgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2RvbS1idG9hXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IE5PX0FSR19SRUNFSVZJTkdfQ0hFQ0sgfSwge1xuICBidG9hOiBmdW5jdGlvbiBidG9hKGRhdGEpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICBpZiAoTk9fQVJHX1JFQ0VJVklOR19DSEVDSykgcmV0dXJuICRidG9hKGRhdGEpO1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhkYXRhKTtcbiAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgbWFwID0gaXRvYztcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlO1xuICAgIHdoaWxlIChjaGFyQXQoc3RyaW5nLCBwb3NpdGlvbikgfHwgKG1hcCA9ICc9JywgcG9zaXRpb24gJSAxKSkge1xuICAgICAgY2hhckNvZGUgPSBjaGFyQ29kZUF0KHN0cmluZywgcG9zaXRpb24gKz0gMyAvIDQpO1xuICAgICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgICB0aHJvdyBuZXcgKGdldEJ1aWx0SW4oJ0RPTUV4Y2VwdGlvbicpKSgnVGhlIHN0cmluZyBjb250YWlucyBjaGFyYWN0ZXJzIG91dHNpZGUgb2YgdGhlIExhdGluMSByYW5nZScsICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICAgICAgb3V0cHV0ICs9IGNoYXJBdChtYXAsIDYzICYgYmxvY2sgPj4gOCAtIHBvc2l0aW9uICUgMSAqIDgpO1xuICAgIH0gcmV0dXJuIG91dHB1dDtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSB7XG4gICAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKTtcbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSwgJ0RPTVRva2VuTGlzdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJ5Tm9kZVJlcXVpcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LW5vZGUtcmVxdWlyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJykuZjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGVycm9yVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3ItdG8tc3RyaW5nJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIERPTUV4Y2VwdGlvbkNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tZXhjZXB0aW9uLWNvbnN0YW50cycpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGVhci1lcnJvci1zdGFjaycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nO1xudmFyIERBVEFfQ0xPTkVfRVJSID0gJ0RBVEFfQ0xPTkVfRVJSJztcbnZhciBFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG4vLyBOb2RlSlMgPCAxNy4wIGRvZXMgbm90IGV4cG9zZSBgRE9NRXhjZXB0aW9uYCB0byBnbG9iYWxcbnZhciBOYXRpdmVET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pIHx8IChmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gTm9kZUpTIDwgMTUuMCBkb2VzIG5vdCBleHBvc2UgYE1lc3NhZ2VDaGFubmVsYCB0byBnbG9iYWxcbiAgICB2YXIgTWVzc2FnZUNoYW5uZWwgPSBnZXRCdWlsdEluKCdNZXNzYWdlQ2hhbm5lbCcpIHx8IHRyeU5vZGVSZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpLk1lc3NhZ2VDaGFubmVsO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby13ZWFrLW1hcCwgdW5pY29ybi9yZXF1aXJlLXBvc3QtbWVzc2FnZS10YXJnZXQtb3JpZ2luIC0tIHNhZmVcbiAgICBuZXcgTWVzc2FnZUNoYW5uZWwoKS5wb3J0MS5wb3N0TWVzc2FnZShuZXcgV2Vha01hcCgpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IubmFtZSA9PSBEQVRBX0NMT05FX0VSUiAmJiBlcnJvci5jb2RlID09IDI1KSByZXR1cm4gZXJyb3IuY29uc3RydWN0b3I7XG4gIH1cbn0pKCk7XG52YXIgTmF0aXZlRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gTmF0aXZlRE9NRXhjZXB0aW9uICYmIE5hdGl2ZURPTUV4Y2VwdGlvbi5wcm90b3R5cGU7XG52YXIgRXJyb3JQcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihET01fRVhDRVBUSU9OKTtcbnZhciBIQVNfU1RBQ0sgPSAnc3RhY2snIGluIEVycm9yKERPTV9FWENFUFRJT04pO1xuXG52YXIgY29kZUZvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBoYXNPd24oRE9NRXhjZXB0aW9uQ29uc3RhbnRzLCBuYW1lKSAmJiBET01FeGNlcHRpb25Db25zdGFudHNbbmFtZV0ubSA/IERPTUV4Y2VwdGlvbkNvbnN0YW50c1tuYW1lXS5jIDogMDtcbn07XG5cbnZhciAkRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24gRE9NRXhjZXB0aW9uKCkge1xuICBhbkluc3RhbmNlKHRoaXMsIERPTUV4Y2VwdGlvblByb3RvdHlwZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KGFyZ3VtZW50c0xlbmd0aCA8IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICB2YXIgbmFtZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KGFyZ3VtZW50c0xlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sICdFcnJvcicpO1xuICB2YXIgY29kZSA9IGNvZGVGb3IobmFtZSk7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IERPTV9FWENFUFRJT04sXG4gICAgbmFtZTogbmFtZSxcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGNvZGU6IGNvZGVcbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxuICBpZiAoSEFTX1NUQUNLKSB7XG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyb3IubmFtZSA9IERPTV9FWENFUFRJT047XG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIGNsZWFyRXJyb3JTdGFjayhlcnJvci5zdGFjaywgMSkpKTtcbiAgfVxufTtcblxudmFyIERPTUV4Y2VwdGlvblByb3RvdHlwZSA9ICRET01FeGNlcHRpb24ucHJvdG90eXBlID0gY3JlYXRlKEVycm9yUHJvdG90eXBlKTtcblxudmFyIGNyZWF0ZUdldHRlckRlc2NyaXB0b3IgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZ2V0OiBnZXQgfTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBjcmVhdGVHZXR0ZXJEZXNjcmlwdG9yKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9KTtcbn07XG5cbmlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydGllcyhET01FeGNlcHRpb25Qcm90b3R5cGUsIHtcbiAgbmFtZTogZ2V0dGVyRm9yKCduYW1lJyksXG4gIG1lc3NhZ2U6IGdldHRlckZvcignbWVzc2FnZScpLFxuICBjb2RlOiBnZXR0ZXJGb3IoJ2NvZGUnKVxufSk7XG5cbmRlZmluZVByb3BlcnR5KERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICRET01FeGNlcHRpb24pKTtcblxuLy8gRkYzNi0gRE9NRXhjZXB0aW9uIGlzIGEgZnVuY3Rpb24sIGJ1dCBjYW4ndCBiZSBjb25zdHJ1Y3RlZFxudmFyIElOQ09SUkVDVF9DT05TVFJVQ1RPUiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEobmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigpIGluc3RhbmNlb2YgRXJyb3IpO1xufSk7XG5cbi8vIFNhZmFyaSAxMC4xIC8gQ2hyb21lIDMyLSAvIElFOC0gRE9NRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyBidWdzXG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9IElOQ09SUkVDVF9DT05TVFJVQ1RPUiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBFcnJvclByb3RvdHlwZS50b1N0cmluZyAhPT0gZXJyb3JUb1N0cmluZyB8fCBTdHJpbmcobmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigxLCAyKSkgIT09ICcyOiAxJztcbn0pO1xuXG4vLyBEZW5vIDEuNi4zLSBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvZGUganVzdCBtaXNzZWRcbnZhciBJTkNPUlJFQ1RfQ09ERSA9IElOQ09SUkVDVF9DT05TVFJVQ1RPUiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsICdEYXRhQ2xvbmVFcnJvcicpLmNvZGUgIT09IDI1O1xufSk7XG5cbi8vIERlbm8gMS42LjMtIERPTUV4Y2VwdGlvbiBjb25zdGFudHMganVzdCBtaXNzZWRcbnZhciBNSVNTRURfQ09OU1RBTlRTID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SXG4gIHx8IE5hdGl2ZURPTUV4Y2VwdGlvbltEQVRBX0NMT05FX0VSUl0gIT09IDI1XG4gIHx8IE5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZVtEQVRBX0NMT05FX0VSUl0gIT09IDI1O1xuXG52YXIgRk9SQ0VEX0NPTlNUUlVDVE9SID0gSVNfUFVSRSA/IElOQ09SUkVDVF9UT19TVFJJTkcgfHwgSU5DT1JSRUNUX0NPREUgfHwgTUlTU0VEX0NPTlNUQU5UUyA6IElOQ09SUkVDVF9DT05TVFJVQ1RPUjtcblxuLy8gYERPTUV4Y2VwdGlvbmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vd2ViaWRsLnNwZWMud2hhdHdnLm9yZy8jaWRsLURPTUV4Y2VwdGlvblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfQ09OU1RSVUNUT1IgfSwge1xuICBET01FeGNlcHRpb246IEZPUkNFRF9DT05TVFJVQ1RPUiA/ICRET01FeGNlcHRpb24gOiBOYXRpdmVET01FeGNlcHRpb25cbn0pO1xuXG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7XG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSA9IFBvbHlmaWxsZWRET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG5pZiAoSU5DT1JSRUNUX1RPX1NUUklORyAmJiAoSVNfUFVSRSB8fCBOYXRpdmVET01FeGNlcHRpb24gPT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pKSB7XG4gIHJlZGVmaW5lKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICd0b1N0cmluZycsIGVycm9yVG9TdHJpbmcpO1xufVxuXG5pZiAoSU5DT1JSRUNUX0NPREUgJiYgREVTQ1JJUFRPUlMgJiYgTmF0aXZlRE9NRXhjZXB0aW9uID09PSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSB7XG4gIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb2RlJywgY3JlYXRlR2V0dGVyRGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvZGVGb3IoYW5PYmplY3QodGhpcykubmFtZSk7XG4gIH0pKTtcbn1cblxuZm9yICh2YXIga2V5IGluIERPTUV4Y2VwdGlvbkNvbnN0YW50cykgaWYgKGhhc093bihET01FeGNlcHRpb25Db25zdGFudHMsIGtleSkpIHtcbiAgdmFyIGNvbnN0YW50ID0gRE9NRXhjZXB0aW9uQ29uc3RhbnRzW2tleV07XG4gIHZhciBjb25zdGFudE5hbWUgPSBjb25zdGFudC5zO1xuICB2YXIgZGVzY3JpcHRvciA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig2LCBjb25zdGFudC5jKTtcbiAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lKSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSwgZGVzY3JpcHRvcik7XG4gIH1cbiAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgY29uc3RhbnROYW1lKSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsIGNvbnN0YW50TmFtZSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciBET01FeGNlcHRpb25Db25zdGFudHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWV4Y2VwdGlvbi1jb25zdGFudHMnKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2snKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIERPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJztcbnZhciBFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG52YXIgTmF0aXZlRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKTtcblxudmFyICRET01FeGNlcHRpb24gPSBmdW5jdGlvbiBET01FeGNlcHRpb24oKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgRE9NRXhjZXB0aW9uUHJvdG90eXBlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIHZhciBuYW1lID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgJ0Vycm9yJyk7XG4gIHZhciB0aGF0ID0gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbihtZXNzYWdlLCBuYW1lKTtcbiAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XG4gIGVycm9yLm5hbWUgPSBET01fRVhDRVBUSU9OO1xuICBkZWZpbmVQcm9wZXJ0eSh0aGF0LCAnc3RhY2snLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgY2xlYXJFcnJvclN0YWNrKGVycm9yLnN0YWNrLCAxKSkpO1xuICBpbmhlcml0SWZSZXF1aXJlZCh0aGF0LCB0aGlzLCAkRE9NRXhjZXB0aW9uKTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG52YXIgRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gJERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBOYXRpdmVET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG52YXIgRVJST1JfSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBFcnJvcihET01fRVhDRVBUSU9OKTtcbnZhciBET01fRVhDRVBUSU9OX0hBU19TVEFDSyA9ICdzdGFjaycgaW4gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigxLCAyKTtcbnZhciBGT1JDRURfQ09OU1RSVUNUT1IgPSBFUlJPUl9IQVNfU1RBQ0sgJiYgIURPTV9FWENFUFRJT05fSEFTX1NUQUNLO1xuXG4vLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvciBwYXRjaCBmb3IgYC5zdGFja2Agd2hlcmUgaXQncyByZXF1aXJlZFxuLy8gaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNlcy1ET01FeGNlcHRpb24tc3BlY2lhbG5lc3NcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRURfQ09OU1RSVUNUT1IgfSwgeyAvLyBUT0RPOiBmaXggZXhwb3J0IGxvZ2ljXG4gIERPTUV4Y2VwdGlvbjogRk9SQ0VEX0NPTlNUUlVDVE9SID8gJERPTUV4Y2VwdGlvbiA6IE5hdGl2ZURPTUV4Y2VwdGlvblxufSk7XG5cbnZhciBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKTtcbnZhciBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbi5wcm90b3R5cGU7XG5cbmlmIChQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSB7XG4gIGlmICghSVNfUFVSRSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gRE9NRXhjZXB0aW9uQ29uc3RhbnRzKSBpZiAoaGFzT3duKERPTUV4Y2VwdGlvbkNvbnN0YW50cywga2V5KSkge1xuICAgIHZhciBjb25zdGFudCA9IERPTUV4Y2VwdGlvbkNvbnN0YW50c1trZXldO1xuICAgIHZhciBjb25zdGFudE5hbWUgPSBjb25zdGFudC5zO1xuICAgIGlmICghaGFzT3duKFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDYsIGNvbnN0YW50LmMpKTtcbiAgICB9XG4gIH1cbn1cbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbnZhciBET01fRVhDRVBUSU9OID0gJ0RPTUV4Y2VwdGlvbic7XG5cbnNldFRvU3RyaW5nVGFnKGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTiksIERPTV9FWENFUFRJT04pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpO1xuXG52YXIgRk9SQ0VEID0gIWdsb2JhbC5zZXRJbW1lZGlhdGUgfHwgIWdsb2JhbC5jbGVhckltbWVkaWF0ZTtcblxuLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlL1xuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgc2V0SW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1zZXRJbW1lZGlhdGVcbiAgc2V0SW1tZWRpYXRlOiB0YXNrLnNldCxcbiAgLy8gYGNsZWFySW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1jbGVhckltbWVkaWF0ZVxuICBjbGVhckltbWVkaWF0ZTogdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcblxuLy8gYHF1ZXVlTWljcm90YXNrYCBtZXRob2Rcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXF1ZXVlbWljcm90YXNrXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBub1RhcmdldEdldDogdHJ1ZSB9LCB7XG4gIHF1ZXVlTWljcm90YXNrOiBmdW5jdGlvbiBxdWV1ZU1pY3JvdGFzayhmbikge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIGFDYWxsYWJsZShmbik7XG4gICAgdmFyIGRvbWFpbiA9IElTX05PREUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xudmFyIERhdGUgPSBnbG9iYWwuRGF0ZTtcbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciBFdmFsRXJyb3IgPSBnbG9iYWwuRXZhbEVycm9yO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBSZWZlcmVuY2VFcnJvciA9IGdsb2JhbC5SZWZlcmVuY2VFcnJvcjtcbnZhciBTeW50YXhFcnJvciA9IGdsb2JhbC5TeW50YXhFcnJvcjtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFVSSUVycm9yID0gZ2xvYmFsLlVSSUVycm9yO1xudmFyIFBlcmZvcm1hbmNlTWFyayA9IGdsb2JhbC5QZXJmb3JtYW5jZU1hcms7XG52YXIgV2ViQXNzZW1ibHkgPSBnbG9iYWwuV2ViQXNzZW1ibHk7XG52YXIgQ29tcGlsZUVycm9yID0gV2ViQXNzZW1ibHkgJiYgV2ViQXNzZW1ibHkuQ29tcGlsZUVycm9yIHx8IEVycm9yO1xudmFyIExpbmtFcnJvciA9IFdlYkFzc2VtYmx5ICYmIFdlYkFzc2VtYmx5LkxpbmtFcnJvciB8fCBFcnJvcjtcbnZhciBSdW50aW1lRXJyb3IgPSBXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IgfHwgRXJyb3I7XG52YXIgRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRpbignRE9NRXhjZXB0aW9uJyk7XG52YXIgU2V0ID0gZ2V0QnVpbHRpbignU2V0Jyk7XG52YXIgTWFwID0gZ2V0QnVpbHRpbignTWFwJyk7XG52YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbnZhciBtYXBIYXMgPSB1bmN1cnJ5VGhpcyhNYXBQcm90b3R5cGUuaGFzKTtcbnZhciBtYXBHZXQgPSB1bmN1cnJ5VGhpcyhNYXBQcm90b3R5cGUuZ2V0KTtcbnZhciBtYXBTZXQgPSB1bmN1cnJ5VGhpcyhNYXBQcm90b3R5cGUuc2V0KTtcbnZhciBzZXRBZGQgPSB1bmN1cnJ5VGhpcyhTZXQucHJvdG90eXBlLmFkZCk7XG52YXIgb2JqZWN0S2V5cyA9IGdldEJ1aWx0aW4oJ09iamVjdCcsICdrZXlzJyk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIGJvb2xlYW5WYWx1ZU9mID0gdW5jdXJyeVRoaXModHJ1ZS52YWx1ZU9mKTtcbnZhciBudW1iZXJWYWx1ZU9mID0gdW5jdXJyeVRoaXMoMS4wLnZhbHVlT2YpO1xudmFyIHN0cmluZ1ZhbHVlT2YgPSB1bmN1cnJ5VGhpcygnJy52YWx1ZU9mKTtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBnZXRUaW1lID0gdW5jdXJyeVRoaXMoRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgUEVSRk9STUFOQ0VfTUFSSyA9IHVpZCgnc3RydWN0dXJlZENsb25lJyk7XG52YXIgREFUQV9DTE9ORV9FUlJPUiA9ICdEYXRhQ2xvbmVFcnJvcic7XG52YXIgVFJBTlNGRVJSSU5HID0gJ1RyYW5zZmVycmluZyc7XG5cbnZhciBjaGVja0Jhc2ljU2VtYW50aWMgPSBmdW5jdGlvbiAoc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24pIHtcbiAgcmV0dXJuICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNldDEgPSBuZXcgZ2xvYmFsLlNldChbN10pO1xuICAgIHZhciBzZXQyID0gc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24oc2V0MSk7XG4gICAgdmFyIG51bWJlciA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKE9iamVjdCg3KSk7XG4gICAgcmV0dXJuIHNldDIgPT0gc2V0MSB8fCAhc2V0Mi5oYXMoNykgfHwgdHlwZW9mIG51bWJlciAhPSAnb2JqZWN0JyB8fCBudW1iZXIgIT0gNztcbiAgfSkgJiYgc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb247XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvcHVsbC81NzQ5XG52YXIgY2hlY2tOZXdFcnJvcnNTZW1hbnRpYyA9IGZ1bmN0aW9uIChzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbikge1xuICByZXR1cm4gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKG5ldyBnbG9iYWwuQWdncmVnYXRlRXJyb3IoWzFdLCBQRVJGT1JNQU5DRV9NQVJLLCB7IGNhdXNlOiAzIH0pKTtcbiAgICByZXR1cm4gdGVzdC5uYW1lICE9ICdBZ2dyZWdhdGVFcnJvcicgfHwgdGVzdC5lcnJvcnNbMF0gIT0gMSB8fCB0ZXN0Lm1lc3NhZ2UgIT0gUEVSRk9STUFOQ0VfTUFSSyB8fCB0ZXN0LmNhdXNlICE9IDM7XG4gIH0pICYmIHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uO1xufTtcblxuLy8gRkY5NCssIFNhZmFyaSBUUDEzNCssIENocm9tZSBDYW5hcnkgOTgrLCBOb2RlSlMgMTcuMCssIERlbm8gMS4xMytcbi8vIGN1cnJlbnQgRkYgYW5kIFNhZmFyaSBpbXBsZW1lbnRhdGlvbnMgY2FuJ3QgY2xvbmUgZXJyb3JzXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTU2NjA0XG4vLyBubyBvbmUgb2YgY3VycmVudCBpbXBsZW1lbnRhdGlvbnMgc3VwcG9ydHMgbmV3IChodG1sLzU3NDkpIGVycm9yIGNsb25pbmcgc2VtYW50aWNcbnZhciBuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUgPSBnbG9iYWwuc3RydWN0dXJlZENsb25lO1xuXG52YXIgRk9SQ0VEX1JFUExBQ0VNRU5UID0gSVNfUFVSRSB8fCAhY2hlY2tOZXdFcnJvcnNTZW1hbnRpYyhuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUpO1xuXG4vLyBDaHJvbWUgODIrLCBTYWZhcmkgMTQuMSssIERlbm8gMS4xMStcbi8vIENocm9tZSA3OC04MSBpbXBsZW1lbnRhdGlvbiBzd2FwcyBgLm5hbWVgIGFuZCBgLm1lc3NhZ2VgIG9mIGNsb25lZCBgRE9NRXhjZXB0aW9uYFxuLy8gU2FmYXJpIDE0LjEgaW1wbGVtZW50YXRpb24gZG9lc24ndCBjbG9uZSBzb21lIGBSZWdFeHBgIGZsYWdzLCBzbyByZXF1aXJlcyBhIHdvcmthcm91bmRcbi8vIGN1cnJlbnQgU2FmYXJpIGltcGxlbWVudGF0aW9uIGNhbid0IGNsb25lIGVycm9yc1xuLy8gRGVubyAxLjItMS4xMCBpbXBsZW1lbnRhdGlvbnMgdG9vIG5haXZlXG4vLyBOb2RlSlMgMTYuMCsgZG9lcyBub3QgaGF2ZSBgUGVyZm9ybWFuY2VNYXJrYCBjb25zdHJ1Y3Rvciwgc3RydWN0dXJlZCBjbG9uaW5nIGltcGxlbWVudGF0aW9uXG4vLyAgIGZyb20gYHBlcmZvcm1hbmNlLm1hcmtgIGlzIHRvbyBuYWl2ZSBhbmQgY2FuJ3QgY2xvbmUsIGZvciBleGFtcGxlLCBgUmVnRXhwYCBvciBzb21lIGJveGVkIHByaW1pdGl2ZXNcbi8vICAgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy80MDg0MFxuLy8gbm8gb25lIG9mIGN1cnJlbnQgaW1wbGVtZW50YXRpb25zIHN1cHBvcnRzIG5ldyAoaHRtbC81NzQ5KSBlcnJvciBjbG9uaW5nIHNlbWFudGljXG52YXIgc3RydWN0dXJlZENsb25lRnJvbU1hcmsgPSAhbmF0aXZlU3RydWN0dXJlZENsb25lICYmIGNoZWNrQmFzaWNTZW1hbnRpYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQZXJmb3JtYW5jZU1hcmsoUEVSRk9STUFOQ0VfTUFSSywgeyBkZXRhaWw6IHZhbHVlIH0pLmRldGFpbDtcbn0pO1xuXG52YXIgbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSA9IGNoZWNrQmFzaWNTZW1hbnRpYyhuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUpIHx8IHN0cnVjdHVyZWRDbG9uZUZyb21NYXJrO1xuXG52YXIgdGhyb3dVbmNsb25lYWJsZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1VuY2xvbmVhYmxlIHR5cGU6ICcgKyB0eXBlLCBEQVRBX0NMT05FX0VSUk9SKTtcbn07XG5cbnZhciB0aHJvd1VucG9seWZpbGxhYmxlID0gZnVuY3Rpb24gKHR5cGUsIGtpbmQpIHtcbiAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigoa2luZCB8fCAnQ2xvbmluZycpICsgJyBvZiAnICsgdHlwZSArICcgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gdGhpcyBlbmdpbmUnLCBEQVRBX0NMT05FX0VSUk9SKTtcbn07XG5cbnZhciBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWFwKSB7XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHRocm93VW5jbG9uZWFibGUoJ1N5bWJvbCcpO1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAvLyBlZmZlY3RpdmVseSBwcmVzZXJ2ZXMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICBpZiAobWFwKSB7XG4gICAgaWYgKG1hcEhhcyhtYXAsIHZhbHVlKSkgcmV0dXJuIG1hcEdldChtYXAsIHZhbHVlKTtcbiAgfSBlbHNlIG1hcCA9IG5ldyBNYXAoKTtcblxuICB2YXIgdHlwZSA9IGNsYXNzb2YodmFsdWUpO1xuICB2YXIgZGVlcCA9IGZhbHNlO1xuICB2YXIgQywgbmFtZSwgY2xvbmVkLCBkYXRhVHJhbnNmZXIsIGksIGxlbmd0aCwga2V5cywga2V5LCBzb3VyY2UsIHRhcmdldDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBcnJheSc6XG4gICAgICBjbG9uZWQgPSBbXTtcbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgIGNsb25lZCA9IHt9O1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdNYXAnOlxuICAgICAgY2xvbmVkID0gbmV3IE1hcCgpO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTZXQnOlxuICAgICAgY2xvbmVkID0gbmV3IFNldCgpO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgLy8gaW4gdGhpcyBibG9jayBiZWNhdXNlIG9mIGEgU2FmYXJpIDE0LjEgYnVnXG4gICAgICAvLyBvbGQgRkYgZG9lcyBub3QgY2xvbmUgcmVnZXhlcyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLCBzbyBnZXQgdGhlIHNvdXJjZSBhbmQgZmxhZ3MgZGlyZWN0bHlcbiAgICAgIGNsb25lZCA9IG5ldyBSZWdFeHAodmFsdWUuc291cmNlLCAnZmxhZ3MnIGluIHZhbHVlID8gdmFsdWUuZmxhZ3MgOiBnZXRGbGFncyh2YWx1ZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgbmFtZSA9IHZhbHVlLm5hbWU7XG4gICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgY2FzZSAnQWdncmVnYXRlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IGdldEJ1aWx0aW4oJ0FnZ3JlZ2F0ZUVycm9yJykoW10pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFdmFsRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IEV2YWxFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdSYW5nZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSYW5nZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1JlZmVyZW5jZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSZWZlcmVuY2VFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTeW50YXhFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gU3ludGF4RXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVHlwZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBUeXBlRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVVJJRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFVSSUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NvbXBpbGVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gQ29tcGlsZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0xpbmtFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gTGlua0Vycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1J1bnRpbWVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gUnVudGltZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY2xvbmVkID0gRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRE9NRXhjZXB0aW9uJzpcbiAgICAgIGNsb25lZCA9IG5ldyBET01FeGNlcHRpb24odmFsdWUubWVzc2FnZSwgdmFsdWUubmFtZSk7XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RhdGFWaWV3JzpcbiAgICBjYXNlICdJbnQ4QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQ4QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQ4Q2xhbXBlZEFycmF5JzpcbiAgICBjYXNlICdJbnQxNkFycmF5JzpcbiAgICBjYXNlICdVaW50MTZBcnJheSc6XG4gICAgY2FzZSAnSW50MzJBcnJheSc6XG4gICAgY2FzZSAnVWludDMyQXJyYXknOlxuICAgIGNhc2UgJ0Zsb2F0MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQ2NEFycmF5JzpcbiAgICBjYXNlICdCaWdJbnQ2NEFycmF5JzpcbiAgICBjYXNlICdCaWdVaW50NjRBcnJheSc6XG4gICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgLy8gaW4gc29tZSBvbGQgZW5naW5lcyBsaWtlIFNhZmFyaSA5LCB0eXBlb2YgQyBpcyAnb2JqZWN0J1xuICAgICAgLy8gb24gVWludDhDbGFtcGVkQXJyYXkgb3Igc29tZSBvdGhlciBjb25zdHJ1Y3RvcnNcbiAgICAgIGlmICghaXNPYmplY3QoQykpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICBjbG9uZWQgPSBuZXcgQyhcbiAgICAgICAgLy8gdGhpcyBpcyBzYWZlLCBzaW5jZSBhcnJheWJ1ZmZlciBjYW5ub3QgaGF2ZSBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLmJ1ZmZlciwgbWFwKSxcbiAgICAgICAgdmFsdWUuYnl0ZU9mZnNldCxcbiAgICAgICAgdHlwZSA9PT0gJ0RhdGFWaWV3JyA/IHZhbHVlLmJ5dGVMZW5ndGggOiB2YWx1ZS5sZW5ndGhcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdET01RdWFkJzpcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZCA9IG5ldyBET01RdWFkKFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAxLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAyLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAzLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnA0LCBtYXApXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICAgIGNsb25lZCA9IG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpO1xuICAgICAgICB9IGVsc2UgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ZpbGVMaXN0JzpcbiAgICAgIEMgPSBnbG9iYWwuRGF0YVRyYW5zZmVyO1xuICAgICAgaWYgKGlzQ29uc3RydWN0b3IoQykpIHtcbiAgICAgICAgZGF0YVRyYW5zZmVyID0gbmV3IEMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UodmFsdWUpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkYXRhVHJhbnNmZXIuaXRlbXMuYWRkKHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlW2ldLCBtYXApKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZWQgPSBkYXRhVHJhbnNmZXIuZmlsZXM7XG4gICAgICB9IGVsc2UgaWYgKG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUpIHtcbiAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ltYWdlRGF0YSc6XG4gICAgICAvLyBTYWZhcmkgOSBJbWFnZURhdGEgaXMgYSBjb25zdHJ1Y3RvciwgYnV0IHR5cGVvZiBJbWFnZURhdGEgaXMgJ29iamVjdCdcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZCA9IG5ldyBJbWFnZURhdGEoXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuZGF0YSwgbWFwKSxcbiAgICAgICAgICB2YWx1ZS53aWR0aCxcbiAgICAgICAgICB2YWx1ZS5oZWlnaHQsXG4gICAgICAgICAgeyBjb2xvclNwYWNlOiB2YWx1ZS5jb2xvclNwYWNlIH1cbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKSB7XG4gICAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgfSBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUpIHtcbiAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Ugc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ0JpZ0ludCc6XG4gICAgICAgICAgLy8gY2FuIGJlIGEgM3JkIHBhcnR5IHBvbHlmaWxsXG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KHZhbHVlLnZhbHVlT2YoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgICAgICAgIGNsb25lZCA9IE9iamVjdChib29sZWFuVmFsdWVPZih2YWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdOdW1iZXInOlxuICAgICAgICAgIGNsb25lZCA9IE9iamVjdChudW1iZXJWYWx1ZU9mKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KHN0cmluZ1ZhbHVlT2YodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgY2xvbmVkID0gbmV3IERhdGUoZ2V0VGltZSh2YWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICAgICAgQyA9IGdsb2JhbC5EYXRhVmlldztcbiAgICAgICAgICAvLyBgQXJyYXlCdWZmZXIjc2xpY2VgIGlzIG5vdCBhdmFpbGFibGUgaW4gSUUxMFxuICAgICAgICAgIC8vIGBBcnJheUJ1ZmZlciNzbGljZWAgYW5kIGBEYXRhVmlld2AgYXJlIG5vdCBhdmFpbGFibGUgaW4gb2xkIEZGXG4gICAgICAgICAgaWYgKCFDICYmIHR5cGVvZiB2YWx1ZS5zbGljZSAhPSAnZnVuY3Rpb24nKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIC8vIGRldGFjaGVkIGJ1ZmZlcnMgdGhyb3dzIGluIGBEYXRhVmlld2AgYW5kIGAuc2xpY2VgXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUuc2xpY2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjbG9uZWQgPSB2YWx1ZS5zbGljZSgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxlbmd0aCA9IHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgIGNsb25lZCA9IG5ldyBBcnJheUJ1ZmZlcihsZW5ndGgpO1xuICAgICAgICAgICAgICBzb3VyY2UgPSBuZXcgQyh2YWx1ZSk7XG4gICAgICAgICAgICAgIHRhcmdldCA9IG5ldyBDKGNsb25lZCk7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRhcmdldC5zZXRVaW50OChpLCBzb3VyY2UuZ2V0VWludDgoaSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ0FycmF5QnVmZmVyIGlzIGRldGFjaGVkJywgREFUQV9DTE9ORV9FUlJPUik7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnU2hhcmVkQXJyYXlCdWZmZXInOlxuICAgICAgICAgIC8vIFNoYXJlZEFycmF5QnVmZmVyIHNob3VsZCB1c2Ugc2hhcmVkIG1lbW9yeSwgd2UgY2FuJ3QgcG9seWZpbGwgaXQsIHNvIHJldHVybiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICBjbG9uZWQgPSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQmxvYic6XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IHZhbHVlLnNsaWNlKDAsIHZhbHVlLnNpemUsIHZhbHVlLnR5cGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0RPTVBvaW50JzpcbiAgICAgICAgY2FzZSAnRE9NUG9pbnRSZWFkT25seSc6XG4gICAgICAgICAgQyA9IGdsb2JhbFt0eXBlXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gQy5mcm9tUG9pbnRcbiAgICAgICAgICAgICAgPyBDLmZyb21Qb2ludCh2YWx1ZSlcbiAgICAgICAgICAgICAgOiBuZXcgQyh2YWx1ZS54LCB2YWx1ZS55LCB2YWx1ZS56LCB2YWx1ZS53KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdET01SZWN0JzpcbiAgICAgICAgY2FzZSAnRE9NUmVjdFJlYWRPbmx5JzpcbiAgICAgICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBDLmZyb21SZWN0XG4gICAgICAgICAgICAgID8gQy5mcm9tUmVjdCh2YWx1ZSlcbiAgICAgICAgICAgICAgOiBuZXcgQyh2YWx1ZS54LCB2YWx1ZS55LCB2YWx1ZS53aWR0aCwgdmFsdWUuaGVpZ2h0KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdET01NYXRyaXgnOlxuICAgICAgICBjYXNlICdET01NYXRyaXhSZWFkT25seSc6XG4gICAgICAgICAgQyA9IGdsb2JhbFt0eXBlXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gQy5mcm9tTWF0cml4XG4gICAgICAgICAgICAgID8gQy5mcm9tTWF0cml4KHZhbHVlKVxuICAgICAgICAgICAgICA6IG5ldyBDKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdBdWRpb0RhdGEnOlxuICAgICAgICBjYXNlICdWaWRlb0ZyYW1lJzpcbiAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUodmFsdWUuY2xvbmUpKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSB2YWx1ZS5jbG9uZSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VuY2xvbmVhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0ZpbGUnOlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBuZXcgRmlsZShbdmFsdWVdLCB2YWx1ZS5uYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnQ3J5cHRvS2V5JzpcbiAgICAgICAgY2FzZSAnR1BVQ29tcGlsYXRpb25NZXNzYWdlJzpcbiAgICAgICAgY2FzZSAnR1BVQ29tcGlsYXRpb25JbmZvJzpcbiAgICAgICAgY2FzZSAnSW1hZ2VCaXRtYXAnOlxuICAgICAgICBjYXNlICdSVENDZXJ0aWZpY2F0ZSc6XG4gICAgICAgIGNhc2UgJ1dlYkFzc2VtYmx5Lk1vZHVsZSc6XG4gICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICAvLyBicmVhayBvbWl0dGVkXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3dVbmNsb25lYWJsZSh0eXBlKTtcbiAgICAgIH1cbiAgfVxuXG4gIG1hcFNldChtYXAsIHZhbHVlLCBjbG9uZWQpO1xuXG4gIGlmIChkZWVwKSBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBcnJheSc6XG4gICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgIGtleXMgPSBvYmplY3RLZXlzKHZhbHVlKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGtleXMpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoY2xvbmVkLCBrZXksIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlW2tleV0sIG1hcCkpO1xuICAgICAgfSBicmVhaztcbiAgICBjYXNlICdNYXAnOlxuICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodiwgaykge1xuICAgICAgICBtYXBTZXQoY2xvbmVkLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbChrLCBtYXApLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2LCBtYXApKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgc2V0QWRkKGNsb25lZCwgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodiwgbWFwKSk7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0Vycm9yJzpcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShjbG9uZWQsICdtZXNzYWdlJywgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUubWVzc2FnZSwgbWFwKSk7XG4gICAgICBpZiAoaGFzT3duKHZhbHVlLCAnY2F1c2UnKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoY2xvbmVkLCAnY2F1c2UnLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5jYXVzZSwgbWFwKSk7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PSAnQWdncmVnYXRlRXJyb3InKSB7XG4gICAgICAgIGNsb25lZC5lcnJvcnMgPSBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5lcnJvcnMsIG1hcCk7XG4gICAgICB9IC8vIGJyZWFrIG9taXR0ZWRcbiAgICBjYXNlICdET01FeGNlcHRpb24nOlxuICAgICAgaWYgKEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShjbG9uZWQsICdzdGFjaycsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnN0YWNrLCBtYXApKTtcbiAgICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZWQ7XG59O1xuXG52YXIgUFJPUEVSX1RSQU5TRkVSID0gbmF0aXZlU3RydWN0dXJlZENsb25lICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoOCk7XG4gIHZhciBjbG9uZSA9IG5hdGl2ZVN0cnVjdHVyZWRDbG9uZShidWZmZXIsIHsgdHJhbnNmZXI6IFtidWZmZXJdIH0pO1xuICByZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGggIT0gMCB8fCBjbG9uZS5ieXRlTGVuZ3RoICE9IDg7XG59KTtcblxudmFyIHRyeVRvVHJhbnNmZXIgPSBmdW5jdGlvbiAocmF3VHJhbnNmZXIsIG1hcCkge1xuICBpZiAoIWlzT2JqZWN0KHJhd1RyYW5zZmVyKSkgdGhyb3cgVHlwZUVycm9yKCdUcmFuc2ZlciBvcHRpb24gY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIHNlcXVlbmNlJyk7XG5cbiAgdmFyIHRyYW5zZmVyID0gW107XG5cbiAgaXRlcmF0ZShyYXdUcmFuc2ZlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcHVzaCh0cmFuc2ZlciwgYW5PYmplY3QodmFsdWUpKTtcbiAgfSk7XG5cbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UodHJhbnNmZXIpO1xuICB2YXIgdmFsdWUsIHR5cGUsIEMsIHRyYW5zZmVycmVkQXJyYXksIHRyYW5zZmVycmVkLCBjYW52YXMsIGNvbnRleHQ7XG5cbiAgaWYgKFBST1BFUl9UUkFOU0ZFUikge1xuICAgIHRyYW5zZmVycmVkQXJyYXkgPSBuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUodHJhbnNmZXIsIHsgdHJhbnNmZXI6IHRyYW5zZmVyIH0pO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSBtYXBTZXQobWFwLCB0cmFuc2ZlcltpXSwgdHJhbnNmZXJyZWRBcnJheVtpKytdKTtcbiAgfSBlbHNlIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgdmFsdWUgPSB0cmFuc2ZlcltpKytdO1xuICAgIGlmIChtYXBIYXMobWFwLCB2YWx1ZSkpIHRocm93IG5ldyBET01FeGNlcHRpb24oJ0R1cGxpY2F0ZSB0cmFuc2ZlcmFibGUnLCBEQVRBX0NMT05FX0VSUk9SKTtcblxuICAgIHR5cGUgPSBjbGFzc29mKHZhbHVlKTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnSW1hZ2VCaXRtYXAnOlxuICAgICAgICBDID0gZ2xvYmFsLk9mZnNjcmVlbkNhbnZhcztcbiAgICAgICAgaWYgKCFpc0NvbnN0cnVjdG9yKEMpKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUsIFRSQU5TRkVSUklORyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FudmFzID0gbmV3IEModmFsdWUud2lkdGgsIHZhbHVlLmhlaWdodCk7XG4gICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCdiaXRtYXByZW5kZXJlcicpO1xuICAgICAgICAgIGNvbnRleHQudHJhbnNmZXJGcm9tSW1hZ2VCaXRtYXAodmFsdWUpO1xuICAgICAgICAgIHRyYW5zZmVycmVkID0gY2FudmFzLnRyYW5zZmVyVG9JbWFnZUJpdG1hcCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXVkaW9EYXRhJzpcbiAgICAgIGNhc2UgJ1ZpZGVvRnJhbWUnOlxuICAgICAgICBpZiAoIWlzQ2FsbGFibGUodmFsdWUuY2xvbmUpIHx8ICFpc0NhbGxhYmxlKHZhbHVlLmNsb3NlKSkgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlLCBUUkFOU0ZFUlJJTkcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRyYW5zZmVycmVkID0gdmFsdWUuY2xvbmUoKTtcbiAgICAgICAgICB2YWx1ZS5jbG9zZSgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyYXlCdWZmZXInOlxuICAgICAgY2FzZSAnTWVzc2FnZVBvcnQnOlxuICAgICAgY2FzZSAnT2Zmc2NyZWVuQ2FudmFzJzpcbiAgICAgIGNhc2UgJ1JlYWRhYmxlU3RyZWFtJzpcbiAgICAgIGNhc2UgJ1RyYW5zZm9ybVN0cmVhbSc6XG4gICAgICBjYXNlICdXcml0YWJsZVN0cmVhbSc6XG4gICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSwgVFJBTlNGRVJSSU5HKTtcbiAgICB9XG5cbiAgICBpZiAodHJhbnNmZXJyZWQgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignVGhpcyBvYmplY3QgY2Fubm90IGJlIHRyYW5zZmVycmVkOiAnICsgdHlwZSwgREFUQV9DTE9ORV9FUlJPUik7XG4gICAgbWFwU2V0KG1hcCwgdmFsdWUsIHRyYW5zZmVycmVkKTtcbiAgfVxufTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgc2hhbTogIVBST1BFUl9UUkFOU0ZFUiwgZm9yY2VkOiBGT1JDRURfUkVQTEFDRU1FTlQgfSwge1xuICBzdHJ1Y3R1cmVkQ2xvbmU6IGZ1bmN0aW9uIHN0cnVjdHVyZWRDbG9uZSh2YWx1ZSAvKiAsIHsgdHJhbnNmZXIgfSAqLykge1xuICAgIHZhciBvcHRpb25zID0gdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSkgPiAxID8gYW5PYmplY3QoYXJndW1lbnRzWzFdKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdHJhbnNmZXIgPSBvcHRpb25zID8gb3B0aW9ucy50cmFuc2ZlciA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwO1xuXG4gICAgaWYgKHRyYW5zZmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIHRyeVRvVHJhbnNmZXIodHJhbnNmZXIsIG1hcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLCBtYXApO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xuXG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIEZ1bmN0aW9uID0gZ2xvYmFsLkZ1bmN0aW9uO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0IC8qICwgLi4uYXJndW1lbnRzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gMjtcbiAgICB2YXIgZm4gPSBpc0NhbGxhYmxlKGhhbmRsZXIpID8gaGFuZGxlciA6IEZ1bmN0aW9uKGhhbmRsZXIpO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gYXJyYXlTbGljZShhcmd1bWVudHMsIDIpIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBzY2hlZHVsZXIoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZW91dCk7XG4gIH07XG59O1xuXG4vLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI3RpbWVyc1xuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZm9yY2VkOiBNU0lFIH0sIHtcbiAgLy8gYHNldFRpbWVvdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXR0aW1lb3V0XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICAvLyBgc2V0SW50ZXJ2YWxgIG1ldGhvZFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXRpbnRlcnZhbFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TID0gJ1VSTFNlYXJjaFBhcmFtcyc7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IgPSBVUkxfU0VBUkNIX1BBUkFNUyArICdJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUGFyYW1zU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNUyk7XG52YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IpO1xuXG52YXIgbiRGZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgTiRSZXF1ZXN0ID0gZ2V0QnVpbHRJbignUmVxdWVzdCcpO1xudmFyIEhlYWRlcnMgPSBnZXRCdWlsdEluKCdIZWFkZXJzJyk7XG52YXIgUmVxdWVzdFByb3RvdHlwZSA9IE4kUmVxdWVzdCAmJiBOJFJlcXVlc3QucHJvdG90eXBlO1xudmFyIEhlYWRlcnNQcm90b3R5cGUgPSBIZWFkZXJzICYmIEhlYWRlcnMucHJvdG90eXBlO1xudmFyIFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkZWNvZGVVUklDb21wb25lbnQgPSBnbG9iYWwuZGVjb2RlVVJJQ29tcG9uZW50O1xudmFyIGVuY29kZVVSSUNvbXBvbmVudCA9IGdsb2JhbC5lbmNvZGVVUklDb21wb25lbnQ7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzaGlmdCA9IHVuY3VycnlUaGlzKFtdLnNoaWZ0KTtcbnZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgcGx1cyA9IC9cXCsvZztcbnZhciBzZXF1ZW5jZXMgPSBBcnJheSg0KTtcblxudmFyIHBlcmNlbnRTZXF1ZW5jZSA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gc2VxdWVuY2VzW2J5dGVzIC0gMV0gfHwgKHNlcXVlbmNlc1tieXRlcyAtIDFdID0gUmVnRXhwKCcoKD86JVtcXFxcZGEtZl17Mn0peycgKyBieXRlcyArICd9KScsICdnaScpKTtcbn07XG5cbnZhciBwZXJjZW50RGVjb2RlID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzZXF1ZW5jZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHNlcXVlbmNlO1xuICB9XG59O1xuXG52YXIgZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHJlcGxhY2UoaXQsIHBsdXMsICcgJyk7XG4gIHZhciBieXRlcyA9IDQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdoaWxlIChieXRlcykge1xuICAgICAgcmVzdWx0ID0gcmVwbGFjZShyZXN1bHQsIHBlcmNlbnRTZXF1ZW5jZShieXRlcy0tKSwgcGVyY2VudERlY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbnZhciBmaW5kID0gL1shJygpfl18JTIwL2c7XG5cbnZhciByZXBsYWNlbWVudHMgPSB7XG4gICchJzogJyUyMScsXG4gIFwiJ1wiOiAnJTI3JyxcbiAgJygnOiAnJTI4JyxcbiAgJyknOiAnJTI5JyxcbiAgJ34nOiAnJTdFJyxcbiAgJyUyMCc6ICcrJ1xufTtcblxudmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gIHJldHVybiByZXBsYWNlbWVudHNbbWF0Y2hdO1xufTtcblxudmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gcmVwbGFjZShlbmNvZGVVUklDb21wb25lbnQoaXQpLCBmaW5kLCByZXBsYWNlcik7XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIEl0ZXJhdG9yKHBhcmFtcywga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUixcbiAgICBpdGVyYXRvcjogZ2V0SXRlcmF0b3IoZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZShwYXJhbXMpLmVudHJpZXMpLFxuICAgIGtpbmQ6IGtpbmRcbiAgfSk7XG59LCAnSXRlcmF0b3InLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUodGhpcyk7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIHN0ZXAgPSBzdGF0ZS5pdGVyYXRvci5uZXh0KCk7XG4gIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gIGlmICghc3RlcC5kb25lKSB7XG4gICAgc3RlcC52YWx1ZSA9IGtpbmQgPT09ICdrZXlzJyA/IGVudHJ5LmtleSA6IGtpbmQgPT09ICd2YWx1ZXMnID8gZW50cnkudmFsdWUgOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV07XG4gIH0gcmV0dXJuIHN0ZXA7XG59LCB0cnVlKTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1N0YXRlID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG4gIHRoaXMudXJsID0gbnVsbDtcblxuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB0aGlzLnBhcnNlT2JqZWN0KGluaXQpO1xuICAgIGVsc2UgdGhpcy5wYXJzZVF1ZXJ5KHR5cGVvZiBpbml0ID09ICdzdHJpbmcnID8gY2hhckF0KGluaXQsIDApID09PSAnPycgPyBzdHJpbmdTbGljZShpbml0LCAxKSA6IGluaXQgOiAkdG9TdHJpbmcoaW5pdCkpO1xuICB9XG59O1xuXG5VUkxTZWFyY2hQYXJhbXNTdGF0ZS5wcm90b3R5cGUgPSB7XG4gIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TLFxuICBiaW5kVVJMOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfSxcbiAgcGFyc2VPYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChvYmplY3QpO1xuICAgIHZhciBpdGVyYXRvciwgbmV4dCwgc3RlcCwgZW50cnlJdGVyYXRvciwgZW50cnlOZXh0LCBmaXJzdCwgc2Vjb25kO1xuXG4gICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKG9iamVjdCwgaXRlcmF0b3JNZXRob2QpO1xuICAgICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgICAgZW50cnlJdGVyYXRvciA9IGdldEl0ZXJhdG9yKGFuT2JqZWN0KHN0ZXAudmFsdWUpKTtcbiAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKGZpcnN0ID0gY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgKHNlY29uZCA9IGNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fFxuICAgICAgICAgICFjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikuZG9uZVxuICAgICAgICApIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgc2VxdWVuY2Ugd2l0aCBsZW5ndGggMicpO1xuICAgICAgICBwdXNoKHRoaXMuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhmaXJzdC52YWx1ZSksIHZhbHVlOiAkdG9TdHJpbmcoc2Vjb25kLnZhbHVlKSB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgZm9yICh2YXIga2V5IGluIG9iamVjdCkgaWYgKGhhc093bihvYmplY3QsIGtleSkpIHtcbiAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleToga2V5LCB2YWx1ZTogJHRvU3RyaW5nKG9iamVjdFtrZXldKSB9KTtcbiAgICB9XG4gIH0sXG4gIHBhcnNlUXVlcnk6IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgIGlmIChxdWVyeSkge1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzcGxpdChxdWVyeSwgJyYnKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgYXR0cmlidXRlLCBlbnRyeTtcbiAgICAgIHdoaWxlIChpbmRleCA8IGF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXgrK107XG4gICAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgICAgZW50cnkgPSBzcGxpdChhdHRyaWJ1dGUsICc9Jyk7XG4gICAgICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHtcbiAgICAgICAgICAgIGtleTogZGVzZXJpYWxpemUoc2hpZnQoZW50cnkpKSxcbiAgICAgICAgICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShqb2luKGVudHJ5LCAnPScpKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzZXJpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIHB1c2gocmVzdWx0LCBzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpO1xuICAgIH0gcmV0dXJuIGpvaW4ocmVzdWx0LCAnJicpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudHJpZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnBhcnNlUXVlcnkodGhpcy51cmwucXVlcnkpO1xuICB9LFxuICB1cGRhdGVVUkw6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy51cmwpIHRoaXMudXJsLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtdXJsc2VhcmNocGFyYW1zXG52YXIgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkxTZWFyY2hQYXJhbXMoLyogaW5pdCAqLykge1xuICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSk7XG4gIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywgbmV3IFVSTFNlYXJjaFBhcmFtc1N0YXRlKGluaXQpKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnJlZGVmaW5lQWxsKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwge1xuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtYXBwZW5kXG4gIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBwdXNoKHN0YXRlLmVudHJpZXMsIHsga2V5OiAkdG9TdHJpbmcobmFtZSksIHZhbHVlOiAkdG9TdHJpbmcodmFsdWUpIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5kZWxldGVgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZGVsZXRlXG4gICdkZWxldGUnOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBzcGxpY2UoZW50cmllcywgaW5kZXgsIDEpO1xuICAgICAgZWxzZSBpbmRleCsrO1xuICAgIH1cbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldFxuICBnZXQ6IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJldHVybiBlbnRyaWVzW2luZGV4XS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldEFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRhbGxcbiAgZ2V0QWxsOiBmdW5jdGlvbiBnZXRBbGwobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcHVzaChyZXN1bHQsIGVudHJpZXNbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWhhc1xuICBoYXM6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleCsrXS5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNldFxuICBzZXQ6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIHZhbCA9ICR0b1N0cmluZyh2YWx1ZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGZvdW5kKSBzcGxpY2UoZW50cmllcywgaW5kZXgtLSwgMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBwdXNoKGVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiB2YWwgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc29ydFxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KCkge1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgYXJyYXlTb3J0KHN0YXRlLmVudHJpZXMsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5rZXkgPiBiLmtleSA/IDEgOiAtMTtcbiAgICB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2sgLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzYCBtZXRob2RcbiAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ3ZhbHVlcycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2RcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdlbnRyaWVzJyk7XG4gIH1cbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCBJVEVSQVRPUiwgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLmVudHJpZXMsIHsgbmFtZTogJ2VudHJpZXMnIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHNlYXJjaHBhcmFtcy1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCB9LCB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3Jcbn0pO1xuXG4vLyBXcmFwIGBmZXRjaGAgYW5kIGBSZXF1ZXN0YCBmb3IgY29ycmVjdCB3b3JrIHdpdGggcG9seWZpbGxlZCBgVVJMU2VhcmNoUGFyYW1zYFxuaWYgKCFVU0VfTkFUSVZFX1VSTCAmJiBpc0NhbGxhYmxlKEhlYWRlcnMpKSB7XG4gIHZhciBoZWFkZXJzSGFzID0gdW5jdXJyeVRoaXMoSGVhZGVyc1Byb3RvdHlwZS5oYXMpO1xuICB2YXIgaGVhZGVyc1NldCA9IHVuY3VycnlUaGlzKEhlYWRlcnNQcm90b3R5cGUuc2V0KTtcblxuICB2YXIgd3JhcFJlcXVlc3RPcHRpb25zID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHtcbiAgICAgIHZhciBib2R5ID0gaW5pdC5ib2R5O1xuICAgICAgdmFyIGhlYWRlcnM7XG4gICAgICBpZiAoY2xhc3NvZihib2R5KSA9PT0gVVJMX1NFQVJDSF9QQVJBTVMpIHtcbiAgICAgICAgaGVhZGVycyA9IGluaXQuaGVhZGVycyA/IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycykgOiBuZXcgSGVhZGVycygpO1xuICAgICAgICBpZiAoIWhlYWRlcnNIYXMoaGVhZGVycywgJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgICAgaGVhZGVyc1NldChoZWFkZXJzLCAnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZShpbml0LCB7XG4gICAgICAgICAgYm9keTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsICR0b1N0cmluZyhib2R5KSksXG4gICAgICAgICAgaGVhZGVyczogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGhlYWRlcnMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gcmV0dXJuIGluaXQ7XG4gIH07XG5cbiAgaWYgKGlzQ2FsbGFibGUobiRGZXRjaCkpIHtcbiAgICAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gbiRGZXRjaChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChpc0NhbGxhYmxlKE4kUmVxdWVzdCkpIHtcbiAgICB2YXIgUmVxdWVzdENvbnN0cnVjdG9yID0gZnVuY3Rpb24gUmVxdWVzdChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgUmVxdWVzdFByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3IE4kUmVxdWVzdChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICB9O1xuXG4gICAgUmVxdWVzdFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcXVlc3RDb25zdHJ1Y3RvcjtcbiAgICBSZXF1ZXN0Q29uc3RydWN0b3IucHJvdG90eXBlID0gUmVxdWVzdFByb3RvdHlwZTtcblxuICAgICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBSZXF1ZXN0OiBSZXF1ZXN0Q29uc3RydWN0b3JcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvcixcbiAgZ2V0U3RhdGU6IGdldEludGVybmFsUGFyYW1zU3RhdGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXVybCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJykuZjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG52YXIgYXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xudmFyIHRvQVNDSUkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIFVSTFNlYXJjaFBhcmFtc01vZHVsZSA9IHJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsVVJMU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcignVVJMJyk7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xuXG52YXIgTmF0aXZlVVJMID0gZ2xvYmFsLlVSTDtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHBhcnNlSW50ID0gZ2xvYmFsLnBhcnNlSW50O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcbnZhciBwb3AgPSB1bmN1cnJ5VGhpcyhbXS5wb3ApO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc2hpZnQgPSB1bmN1cnJ5VGhpcyhbXS5zaGlmdCk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgdG9Mb3dlckNhc2UgPSB1bmN1cnJ5VGhpcygnJy50b0xvd2VyQ2FzZSk7XG52YXIgdW5zaGlmdCA9IHVuY3VycnlUaGlzKFtdLnVuc2hpZnQpO1xuXG52YXIgSU5WQUxJRF9BVVRIT1JJVFkgPSAnSW52YWxpZCBhdXRob3JpdHknO1xudmFyIElOVkFMSURfU0NIRU1FID0gJ0ludmFsaWQgc2NoZW1lJztcbnZhciBJTlZBTElEX0hPU1QgPSAnSW52YWxpZCBob3N0JztcbnZhciBJTlZBTElEX1BPUlQgPSAnSW52YWxpZCBwb3J0JztcblxudmFyIEFMUEhBID0gL1thLXpdL2k7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLW9ic2N1cmUtcmFuZ2UgLS0gc2FmZVxudmFyIEFMUEhBTlVNRVJJQyA9IC9bXFxkKy0uYS16XS9pO1xudmFyIERJR0lUID0gL1xcZC87XG52YXIgSEVYX1NUQVJUID0gL14weC9pO1xudmFyIE9DVCA9IC9eWzAtN10rJC87XG52YXIgREVDID0gL15cXGQrJC87XG52YXIgSEVYID0gL15bXFxkYS1mXSskL2k7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tY29udHJvbC1jaGFyYWN0ZXIgLS0gc2FmZSAqL1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQgPSAvW1xcMFxcdFxcblxcciAjJS86PD4/QFtcXFxcXFxdXnxdLztcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcXDBcXHRcXG5cXHIgIy86PD4/QFtcXFxcXFxdXnxdLztcbnZhciBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFID0gL15bXFx1MDAwMC1cXHUwMDIwXSt8W1xcdTAwMDAtXFx1MDAyMF0rJC9nO1xudmFyIFRBQl9BTkRfTkVXX0xJTkUgPSAvW1xcdFxcblxccl0vZztcbi8qIGVzbGludC1lbmFibGUgcmVnZXhwL25vLWNvbnRyb2wtY2hhcmFjdGVyIC0tIHNhZmUgKi9cbnZhciBFT0Y7XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaXB2NC1udW1iZXItcGFyc2VyXG52YXIgcGFyc2VJUHY0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBwYXJ0cyA9IHNwbGl0KGlucHV0LCAnLicpO1xuICB2YXIgcGFydHNMZW5ndGgsIG51bWJlcnMsIGluZGV4LCBwYXJ0LCByYWRpeCwgbnVtYmVyLCBpcHY0O1xuICBpZiAocGFydHMubGVuZ3RoICYmIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdID09ICcnKSB7XG4gICAgcGFydHMubGVuZ3RoLS07XG4gIH1cbiAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChwYXJ0c0xlbmd0aCA+IDQpIHJldHVybiBpbnB1dDtcbiAgbnVtYmVycyA9IFtdO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIHBhcnQgPSBwYXJ0c1tpbmRleF07XG4gICAgaWYgKHBhcnQgPT0gJycpIHJldHVybiBpbnB1dDtcbiAgICByYWRpeCA9IDEwO1xuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgY2hhckF0KHBhcnQsIDApID09ICcwJykge1xuICAgICAgcmFkaXggPSBleGVjKEhFWF9TVEFSVCwgcGFydCkgPyAxNiA6IDg7XG4gICAgICBwYXJ0ID0gc3RyaW5nU2xpY2UocGFydCwgcmFkaXggPT0gOCA/IDEgOiAyKTtcbiAgICB9XG4gICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICBudW1iZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWV4ZWMocmFkaXggPT0gMTAgPyBERUMgOiByYWRpeCA9PSA4ID8gT0NUIDogSEVYLCBwYXJ0KSkgcmV0dXJuIGlucHV0O1xuICAgICAgbnVtYmVyID0gcGFyc2VJbnQocGFydCwgcmFkaXgpO1xuICAgIH1cbiAgICBwdXNoKG51bWJlcnMsIG51bWJlcik7XG4gIH1cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBudW1iZXIgPSBudW1iZXJzW2luZGV4XTtcbiAgICBpZiAoaW5kZXggPT0gcGFydHNMZW5ndGggLSAxKSB7XG4gICAgICBpZiAobnVtYmVyID49IHBvdygyNTYsIDUgLSBwYXJ0c0xlbmd0aCkpIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyID4gMjU1KSByZXR1cm4gbnVsbDtcbiAgfVxuICBpcHY0ID0gcG9wKG51bWJlcnMpO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBudW1iZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGlwdjQgKz0gbnVtYmVyc1tpbmRleF0gKiBwb3coMjU2LCAzIC0gaW5kZXgpO1xuICB9XG4gIHJldHVybiBpcHY0O1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWlwdjYtcGFyc2VyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xudmFyIHBhcnNlSVB2NiA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgYWRkcmVzcyA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwXTtcbiAgdmFyIHBpZWNlSW5kZXggPSAwO1xuICB2YXIgY29tcHJlc3MgPSBudWxsO1xuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciB2YWx1ZSwgbGVuZ3RoLCBudW1iZXJzU2VlbiwgaXB2NFBpZWNlLCBudW1iZXIsIHN3YXBzLCBzd2FwO1xuXG4gIHZhciBjaHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoYXJBdChpbnB1dCwgcG9pbnRlcik7XG4gIH07XG5cbiAgaWYgKGNocigpID09ICc6Jykge1xuICAgIGlmIChjaGFyQXQoaW5wdXQsIDEpICE9ICc6JykgcmV0dXJuO1xuICAgIHBvaW50ZXIgKz0gMjtcbiAgICBwaWVjZUluZGV4Kys7XG4gICAgY29tcHJlc3MgPSBwaWVjZUluZGV4O1xuICB9XG4gIHdoaWxlIChjaHIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHJldHVybjtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIHBpZWNlSW5kZXgrKztcbiAgICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IGxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKGxlbmd0aCA8IDQgJiYgZXhlYyhIRVgsIGNocigpKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZSAqIDE2ICsgcGFyc2VJbnQoY2hyKCksIDE2KTtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIGxlbmd0aCsrO1xuICAgIH1cbiAgICBpZiAoY2hyKCkgPT0gJy4nKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgIHBvaW50ZXIgLT0gbGVuZ3RoO1xuICAgICAgaWYgKHBpZWNlSW5kZXggPiA2KSByZXR1cm47XG4gICAgICBudW1iZXJzU2VlbiA9IDA7XG4gICAgICB3aGlsZSAoY2hyKCkpIHtcbiAgICAgICAgaXB2NFBpZWNlID0gbnVsbDtcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID4gMCkge1xuICAgICAgICAgIGlmIChjaHIoKSA9PSAnLicgJiYgbnVtYmVyc1NlZW4gPCA0KSBwb2ludGVyKys7XG4gICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFleGVjKERJR0lULCBjaHIoKSkpIHJldHVybjtcbiAgICAgICAgd2hpbGUgKGV4ZWMoRElHSVQsIGNocigpKSkge1xuICAgICAgICAgIG51bWJlciA9IHBhcnNlSW50KGNocigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIGlmICghY2hyKCkpIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGNocigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNob3N0LXNlcmlhbGl6aW5nXG52YXIgc2VyaWFsaXplSG9zdCA9IGZ1bmN0aW9uIChob3N0KSB7XG4gIHZhciByZXN1bHQsIGluZGV4LCBjb21wcmVzcywgaWdub3JlMDtcbiAgLy8gaXB2NFxuICBpZiAodHlwZW9mIGhvc3QgPT0gJ251bWJlcicpIHtcbiAgICByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICB1bnNoaWZ0KHJlc3VsdCwgaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcuJyk7XG4gIC8vIGlwdjZcbiAgfSBlbHNlIGlmICh0eXBlb2YgaG9zdCA9PSAnb2JqZWN0Jykge1xuICAgIHJlc3VsdCA9ICcnO1xuICAgIGNvbXByZXNzID0gZmluZExvbmdlc3RaZXJvU2VxdWVuY2UoaG9zdCk7XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgICAgaWYgKGlnbm9yZTAgJiYgaG9zdFtpbmRleF0gPT09IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKGlnbm9yZTApIGlnbm9yZTAgPSBmYWxzZTtcbiAgICAgIGlmIChjb21wcmVzcyA9PT0gaW5kZXgpIHtcbiAgICAgICAgcmVzdWx0ICs9IGluZGV4ID8gJzonIDogJzo6JztcbiAgICAgICAgaWdub3JlMCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gbnVtYmVyVG9TdHJpbmcoaG9zdFtpbmRleF0sIDE2KTtcbiAgICAgICAgaWYgKGluZGV4IDwgNykgcmVzdWx0ICs9ICc6JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdbJyArIHJlc3VsdCArICddJztcbiAgfSByZXR1cm4gaG9zdDtcbn07XG5cbnZhciBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0ID0ge307XG52YXIgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcgJzogMSwgJ1wiJzogMSwgJzwnOiAxLCAnPic6IDEsICdgJzogMVxufSk7XG52YXIgcGF0aFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCwge1xuICAnIyc6IDEsICc/JzogMSwgJ3snOiAxLCAnfSc6IDFcbn0pO1xudmFyIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgcGF0aFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJy8nOiAxLCAnOic6IDEsICc7JzogMSwgJz0nOiAxLCAnQCc6IDEsICdbJzogMSwgJ1xcXFwnOiAxLCAnXSc6IDEsICdeJzogMSwgJ3wnOiAxXG59KTtcblxudmFyIHBlcmNlbnRFbmNvZGUgPSBmdW5jdGlvbiAoY2hyLCBzZXQpIHtcbiAgdmFyIGNvZGUgPSBjb2RlQXQoY2hyLCAwKTtcbiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXNPd24oc2V0LCBjaHIpID8gY2hyIDogZW5jb2RlVVJJQ29tcG9uZW50KGNocik7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3NwZWNpYWwtc2NoZW1lXG52YXIgc3BlY2lhbFNjaGVtZXMgPSB7XG4gIGZ0cDogMjEsXG4gIGZpbGU6IG51bGwsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzXG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3dpbmRvd3MtZHJpdmUtbGV0dGVyXG52YXIgaXNXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nLCBub3JtYWxpemVkKSB7XG4gIHZhciBzZWNvbmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09IDIgJiYgZXhlYyhBTFBIQSwgY2hhckF0KHN0cmluZywgMCkpXG4gICAgJiYgKChzZWNvbmQgPSBjaGFyQXQoc3RyaW5nLCAxKSkgPT0gJzonIHx8ICghbm9ybWFsaXplZCAmJiBzZWNvbmQgPT0gJ3wnKSk7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3N0YXJ0LXdpdGgtYS13aW5kb3dzLWRyaXZlLWxldHRlclxudmFyIHN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciB0aGlyZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPiAxICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKHN0cmluZ1NsaWNlKHN0cmluZywgMCwgMikpICYmIChcbiAgICBzdHJpbmcubGVuZ3RoID09IDIgfHxcbiAgICAoKHRoaXJkID0gY2hhckF0KHN0cmluZywgMikpID09PSAnLycgfHwgdGhpcmQgPT09ICdcXFxcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpXG4gICk7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3NpbmdsZS1kb3QtcGF0aC1zZWdtZW50XG52YXIgaXNTaW5nbGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHRvTG93ZXJDYXNlKHNlZ21lbnQpID09PSAnJTJlJztcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG91YmxlLWRvdC1wYXRoLXNlZ21lbnRcbnZhciBpc0RvdWJsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHNlZ21lbnQgPSB0b0xvd2VyQ2FzZShzZWdtZW50KTtcbiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuLicgfHwgc2VnbWVudCA9PT0gJyUyZS4nIHx8IHNlZ21lbnQgPT09ICcuJTJlJyB8fCBzZWdtZW50ID09PSAnJTJlJTJlJztcbn07XG5cbi8vIFN0YXRlczpcbnZhciBTQ0hFTUVfU1RBUlQgPSB7fTtcbnZhciBTQ0hFTUUgPSB7fTtcbnZhciBOT19TQ0hFTUUgPSB7fTtcbnZhciBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFBBVEhfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUkVMQVRJVkUgPSB7fTtcbnZhciBSRUxBVElWRV9TTEFTSCA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMgPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyA9IHt9O1xudmFyIEFVVEhPUklUWSA9IHt9O1xudmFyIEhPU1QgPSB7fTtcbnZhciBIT1NUTkFNRSA9IHt9O1xudmFyIFBPUlQgPSB7fTtcbnZhciBGSUxFID0ge307XG52YXIgRklMRV9TTEFTSCA9IHt9O1xudmFyIEZJTEVfSE9TVCA9IHt9O1xudmFyIFBBVEhfU1RBUlQgPSB7fTtcbnZhciBQQVRIID0ge307XG52YXIgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSCA9IHt9O1xudmFyIFFVRVJZID0ge307XG52YXIgRlJBR01FTlQgPSB7fTtcblxudmFyIFVSTFN0YXRlID0gZnVuY3Rpb24gKHVybCwgaXNCYXNlLCBiYXNlKSB7XG4gIHZhciB1cmxTdHJpbmcgPSAkdG9TdHJpbmcodXJsKTtcbiAgdmFyIGJhc2VTdGF0ZSwgZmFpbHVyZSwgc2VhcmNoUGFyYW1zO1xuICBpZiAoaXNCYXNlKSB7XG4gICAgZmFpbHVyZSA9IHRoaXMucGFyc2UodXJsU3RyaW5nKTtcbiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIHRoaXMuc2VhcmNoUGFyYW1zID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSBiYXNlU3RhdGUgPSBuZXcgVVJMU3RhdGUoYmFzZSwgdHJ1ZSk7XG4gICAgZmFpbHVyZSA9IHRoaXMucGFyc2UodXJsU3RyaW5nLCBudWxsLCBiYXNlU3RhdGUpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgc2VhcmNoUGFyYW1zID0gZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZShuZXcgVVJMU2VhcmNoUGFyYW1zKCkpO1xuICAgIHNlYXJjaFBhcmFtcy5iaW5kVVJMKHRoaXMpO1xuICAgIHRoaXMuc2VhcmNoUGFyYW1zID0gc2VhcmNoUGFyYW1zO1xuICB9XG59O1xuXG5VUkxTdGF0ZS5wcm90b3R5cGUgPSB7XG4gIHR5cGU6ICdVUkwnLFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1wYXJzaW5nXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG4gIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlT3ZlcnJpZGUsIGJhc2UpIHtcbiAgICB2YXIgdXJsID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBzdGF0ZU92ZXJyaWRlIHx8IFNDSEVNRV9TVEFSVDtcbiAgICB2YXIgcG9pbnRlciA9IDA7XG4gICAgdmFyIGJ1ZmZlciA9ICcnO1xuICAgIHZhciBzZWVuQXQgPSBmYWxzZTtcbiAgICB2YXIgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICB2YXIgc2VlblBhc3N3b3JkVG9rZW4gPSBmYWxzZTtcbiAgICB2YXIgY29kZVBvaW50cywgY2hyLCBidWZmZXJDb2RlUG9pbnRzLCBmYWlsdXJlO1xuXG4gICAgaW5wdXQgPSAkdG9TdHJpbmcoaW5wdXQpO1xuXG4gICAgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICB1cmwuc2NoZW1lID0gJyc7XG4gICAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgICAgdXJsLmhvc3QgPSBudWxsO1xuICAgICAgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgdXJsLnBhdGggPSBbXTtcbiAgICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgICB1cmwuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSBmYWxzZTtcbiAgICAgIGlucHV0ID0gcmVwbGFjZShpbnB1dCwgTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSwgJycpO1xuICAgIH1cblxuICAgIGlucHV0ID0gcmVwbGFjZShpbnB1dCwgVEFCX0FORF9ORVdfTElORSwgJycpO1xuXG4gICAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG5cbiAgICB3aGlsZSAocG9pbnRlciA8PSBjb2RlUG9pbnRzLmxlbmd0aCkge1xuICAgICAgY2hyID0gY29kZVBvaW50c1twb2ludGVyXTtcbiAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgY2FzZSBTQ0hFTUVfU1RBUlQ6XG4gICAgICAgICAgaWYgKGNociAmJiBleGVjKEFMUEhBLCBjaHIpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gdG9Mb3dlckNhc2UoY2hyKTtcbiAgICAgICAgICAgIHN0YXRlID0gU0NIRU1FO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNDSEVNRTpcbiAgICAgICAgICBpZiAoY2hyICYmIChleGVjKEFMUEhBTlVNRVJJQywgY2hyKSB8fCBjaHIgPT0gJysnIHx8IGNociA9PSAnLScgfHwgY2hyID09ICcuJykpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSB0b0xvd2VyQ2FzZShjaHIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6Jykge1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgKFxuICAgICAgICAgICAgICAodXJsLmlzU3BlY2lhbCgpICE9IGhhc093bihzcGVjaWFsU2NoZW1lcywgYnVmZmVyKSkgfHxcbiAgICAgICAgICAgICAgKGJ1ZmZlciA9PSAnZmlsZScgJiYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSB8fFxuICAgICAgICAgICAgICAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5ob3N0KVxuICAgICAgICAgICAgKSkgcmV0dXJuO1xuICAgICAgICAgICAgdXJsLnNjaGVtZSA9IGJ1ZmZlcjtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0gPT0gdXJsLnBvcnQpIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBGSUxFO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSB1cmwuc2NoZW1lKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVybC5pc1NwZWNpYWwoKSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsICcnKTtcbiAgICAgICAgICAgICAgc3RhdGUgPSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgICBwb2ludGVyID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBOT19TQ0hFTUU6XG4gICAgICAgICAgaWYgKCFiYXNlIHx8IChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hyICE9ICcjJykpIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgICBpZiAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9IGJhc2Uuc2NoZW1lID09ICdmaWxlJyA/IEZJTEUgOiBSRUxBVElWRTtcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBjYXNlIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZOlxuICAgICAgICAgIGlmIChjaHIgPT0gJy8nICYmIGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBSRUxBVElWRTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIX09SX0FVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgUkVMQVRJVkU6XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgIGlmIChjaHIgPT0gRU9GKSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nIHx8IChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkVfU0xBU0g7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucGF0aC5sZW5ndGgtLTtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBSRUxBVElWRV9TTEFTSDpcbiAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTOlxuICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgaWYgKGNociAhPSAnLycgfHwgY2hhckF0KGJ1ZmZlciwgcG9pbnRlciArIDEpICE9ICcvJykgY29udGludWU7XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM6XG4gICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgY2hyICE9ICdcXFxcJykge1xuICAgICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQVVUSE9SSVRZOlxuICAgICAgICAgIGlmIChjaHIgPT0gJ0AnKSB7XG4gICAgICAgICAgICBpZiAoc2VlbkF0KSBidWZmZXIgPSAnJTQwJyArIGJ1ZmZlcjtcbiAgICAgICAgICAgIHNlZW5BdCA9IHRydWU7XG4gICAgICAgICAgICBidWZmZXJDb2RlUG9pbnRzID0gYXJyYXlGcm9tKGJ1ZmZlcik7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9IGJ1ZmZlckNvZGVQb2ludHNbaV07XG4gICAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT0gJzonICYmICFzZWVuUGFzc3dvcmRUb2tlbikge1xuICAgICAgICAgICAgICAgIHNlZW5QYXNzd29yZFRva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgZW5jb2RlZENvZGVQb2ludHMgPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludCwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICAgICAgaWYgKHNlZW5QYXNzd29yZFRva2VuKSB1cmwucGFzc3dvcmQgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgICAgIGVsc2UgdXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChzZWVuQXQgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9BVVRIT1JJVFk7XG4gICAgICAgICAgICBwb2ludGVyIC09IGFycmF5RnJvbShidWZmZXIpLmxlbmd0aCArIDE7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gSE9TVDtcbiAgICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEhPU1Q6XG4gICAgICAgIGNhc2UgSE9TVE5BTUU6XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgdXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJzonICYmICFzZWVuQnJhY2tldCkge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICAgIGZhaWx1cmUgPSB1cmwucGFyc2VIb3N0KGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUE9SVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlID09IEhPU1ROQU1FKSByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgYnVmZmVyID09ICcnICYmICh1cmwuaW5jbHVkZXNDcmVkZW50aWFscygpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgcmV0dXJuO1xuICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2hyID09ICdbJykgc2VlbkJyYWNrZXQgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2hyID09ICddJykgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFBPUlQ6XG4gICAgICAgICAgaWYgKGV4ZWMoRElHSVQsIGNocikpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkgfHxcbiAgICAgICAgICAgIHN0YXRlT3ZlcnJpZGVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChidWZmZXIgIT0gJycpIHtcbiAgICAgICAgICAgICAgdmFyIHBvcnQgPSBwYXJzZUludChidWZmZXIsIDEwKTtcbiAgICAgICAgICAgICAgaWYgKHBvcnQgPiAweEZGRkYpIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgICAgICAgIHVybC5wb3J0ID0gKHVybC5pc1NwZWNpYWwoKSAmJiBwb3J0ID09PSBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSkgPyBudWxsIDogcG9ydDtcbiAgICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGSUxFOlxuICAgICAgICAgIHVybC5zY2hlbWUgPSAnZmlsZSc7XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykgc3RhdGUgPSBGSUxFX1NMQVNIO1xuICAgICAgICAgIGVsc2UgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICBpZiAoY2hyID09IEVPRikge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGpvaW4oYXJyYXlTbGljZShjb2RlUG9pbnRzLCBwb2ludGVyKSwgJycpKSkge1xuICAgICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICAgIHVybC5zaG9ydGVuUGF0aCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGSUxFX1NMQVNIOlxuICAgICAgICAgIGlmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJyAmJiAhc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihqb2luKGFycmF5U2xpY2UoY29kZVBvaW50cywgcG9pbnRlciksICcnKSkpIHtcbiAgICAgICAgICAgIGlmIChpc1dpbmRvd3NEcml2ZUxldHRlcihiYXNlLnBhdGhbMF0sIHRydWUpKSBwdXNoKHVybC5wYXRoLCBiYXNlLnBhdGhbMF0pO1xuICAgICAgICAgICAgZWxzZSB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIGNhc2UgRklMRV9IT1NUOlxuICAgICAgICAgIGlmIChjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyID09ICcnKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUgPSB1cmwucGFyc2VIb3N0KGJ1ZmZlcik7XG4gICAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgICAgaWYgKHVybC5ob3N0ID09ICdsb2NhbGhvc3QnKSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgfSBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBBVEhfU1RBUlQ6XG4gICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgY2hyICE9ICdcXFxcJykgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBpZiAoY2hyICE9ICcvJykgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFBBVEg6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpIHx8XG4gICAgICAgICAgICAoIXN0YXRlT3ZlcnJpZGUgJiYgKGNociA9PSAnPycgfHwgY2hyID09ICcjJykpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoaXNEb3VibGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgICB1cmwuc2hvcnRlblBhdGgoKTtcbiAgICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgIShjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkpIHtcbiAgICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiAhKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsICcnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwucGF0aC5sZW5ndGggJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgICAgIGlmICh1cmwuaG9zdCkgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBjaGFyQXQoYnVmZmVyLCAwKSArICc6JzsgLy8gbm9ybWFsaXplIHdpbmRvd3MgZHJpdmUgbGV0dGVyXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmIChjaHIgPT0gRU9GIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJykpIHtcbiAgICAgICAgICAgICAgd2hpbGUgKHVybC5wYXRoLmxlbmd0aCA+IDEgJiYgdXJsLnBhdGhbMF0gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgc2hpZnQodXJsLnBhdGgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBwYXRoUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg6XG4gICAgICAgICAgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICAgIHVybC5wYXRoWzBdICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUVVFUlk6XG4gICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gXCInXCIgJiYgdXJsLmlzU3BlY2lhbCgpKSB1cmwucXVlcnkgKz0gJyUyNyc7XG4gICAgICAgICAgICBlbHNlIGlmIChjaHIgPT0gJyMnKSB1cmwucXVlcnkgKz0gJyUyMyc7XG4gICAgICAgICAgICBlbHNlIHVybC5xdWVyeSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEZSQUdNRU5UOlxuICAgICAgICAgIGlmIChjaHIgIT0gRU9GKSB1cmwuZnJhZ21lbnQgKz0gcGVyY2VudEVuY29kZShjaHIsIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHBvaW50ZXIrKztcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaG9zdC1wYXJzaW5nXG4gIHBhcnNlSG9zdDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHJlc3VsdCwgY29kZVBvaW50cywgaW5kZXg7XG4gICAgaWYgKGNoYXJBdChpbnB1dCwgMCkgPT0gJ1snKSB7XG4gICAgICBpZiAoY2hhckF0KGlucHV0LCBpbnB1dC5sZW5ndGggLSAxKSAhPSAnXScpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICByZXN1bHQgPSBwYXJzZUlQdjYoc3RyaW5nU2xpY2UoaW5wdXQsIDEsIC0xKSk7XG4gICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDtcbiAgICAvLyBvcGFxdWUgaG9zdFxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTcGVjaWFsKCkpIHtcbiAgICAgIGlmIChleGVjKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQsIGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9ICcnO1xuICAgICAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2RlUG9pbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2luZGV4XSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0ID0gdG9BU0NJSShpbnB1dCk7XG4gICAgICBpZiAoZXhlYyhGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5ULCBpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICByZXN1bHQgPSBwYXJzZUlQdjQoaW5wdXQpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY2Fubm90LWhhdmUtYS11c2VybmFtZS1wYXNzd29yZC1wb3J0XG4gIGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhdGhpcy5ob3N0IHx8IHRoaXMuY2Fubm90QmVBQmFzZVVSTCB8fCB0aGlzLnNjaGVtZSA9PSAnZmlsZSc7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaW5jbHVkZS1jcmVkZW50aWFsc1xuICBpbmNsdWRlc0NyZWRlbnRpYWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcm5hbWUgIT0gJycgfHwgdGhpcy5wYXNzd29yZCAhPSAnJztcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpcy1zcGVjaWFsXG4gIGlzU3BlY2lhbDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoYXNPd24oc3BlY2lhbFNjaGVtZXMsIHRoaXMuc2NoZW1lKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzaG9ydGVuLWEtdXJscy1wYXRoXG4gIHNob3J0ZW5QYXRoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgdmFyIHBhdGhTaXplID0gcGF0aC5sZW5ndGg7XG4gICAgaWYgKHBhdGhTaXplICYmICh0aGlzLnNjaGVtZSAhPSAnZmlsZScgfHwgcGF0aFNpemUgIT0gMSB8fCAhaXNXaW5kb3dzRHJpdmVMZXR0ZXIocGF0aFswXSwgdHJ1ZSkpKSB7XG4gICAgICBwYXRoLmxlbmd0aC0tO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybC1zZXJpYWxpemVyXG4gIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciB1cmwgPSB0aGlzO1xuICAgIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICAgIHZhciB1c2VybmFtZSA9IHVybC51c2VybmFtZTtcbiAgICB2YXIgcGFzc3dvcmQgPSB1cmwucGFzc3dvcmQ7XG4gICAgdmFyIGhvc3QgPSB1cmwuaG9zdDtcbiAgICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICAgIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gdXJsLnF1ZXJ5O1xuICAgIHZhciBmcmFnbWVudCA9IHVybC5mcmFnbWVudDtcbiAgICB2YXIgb3V0cHV0ID0gc2NoZW1lICsgJzonO1xuICAgIGlmIChob3N0ICE9PSBudWxsKSB7XG4gICAgICBvdXRwdXQgKz0gJy8vJztcbiAgICAgIGlmICh1cmwuaW5jbHVkZXNDcmVkZW50aWFscygpKSB7XG4gICAgICAgIG91dHB1dCArPSB1c2VybmFtZSArIChwYXNzd29yZCA/ICc6JyArIHBhc3N3b3JkIDogJycpICsgJ0AnO1xuICAgICAgfVxuICAgICAgb3V0cHV0ICs9IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG4gICAgICBpZiAocG9ydCAhPT0gbnVsbCkgb3V0cHV0ICs9ICc6JyArIHBvcnQ7XG4gICAgfSBlbHNlIGlmIChzY2hlbWUgPT0gJ2ZpbGUnKSBvdXRwdXQgKz0gJy8vJztcbiAgICBvdXRwdXQgKz0gdXJsLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBqb2luKHBhdGgsICcvJykgOiAnJztcbiAgICBpZiAocXVlcnkgIT09IG51bGwpIG91dHB1dCArPSAnPycgKyBxdWVyeTtcbiAgICBpZiAoZnJhZ21lbnQgIT09IG51bGwpIG91dHB1dCArPSAnIycgKyBmcmFnbWVudDtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICBzZXRIcmVmOiBmdW5jdGlvbiAoaHJlZikge1xuICAgIHZhciBmYWlsdXJlID0gdGhpcy5wYXJzZShocmVmKTtcbiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIHRoaXMuc2VhcmNoUGFyYW1zLnVwZGF0ZSgpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gIGdldE9yaWdpbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY2hlbWUgPSB0aGlzLnNjaGVtZTtcbiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDtcbiAgICBpZiAoc2NoZW1lID09ICdibG9iJykgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgVVJMQ29uc3RydWN0b3Ioc2NoZW1lLnBhdGhbMF0pLm9yaWdpbjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgaWYgKHNjaGVtZSA9PSAnZmlsZScgfHwgIXRoaXMuaXNTcGVjaWFsKCkpIHJldHVybiAnbnVsbCc7XG4gICAgcmV0dXJuIHNjaGVtZSArICc6Ly8nICsgc2VyaWFsaXplSG9zdCh0aGlzLmhvc3QpICsgKHBvcnQgIT09IG51bGwgPyAnOicgKyBwb3J0IDogJycpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgZ2V0UHJvdG9jb2w6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2hlbWUgKyAnOic7XG4gIH0sXG4gIHNldFByb3RvY29sOiBmdW5jdGlvbiAocHJvdG9jb2wpIHtcbiAgICB0aGlzLnBhcnNlKCR0b1N0cmluZyhwcm90b2NvbCkgKyAnOicsIFNDSEVNRV9TVEFSVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICBnZXRVc2VybmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZXJuYW1lO1xuICB9LFxuICBzZXRVc2VybmFtZTogZnVuY3Rpb24gKHVzZXJuYW1lKSB7XG4gICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oJHRvU3RyaW5nKHVzZXJuYW1lKSk7XG4gICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjtcbiAgICB0aGlzLnVzZXJuYW1lID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICBnZXRQYXNzd29yZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnBhc3N3b3JkO1xuICB9LFxuICBzZXRQYXNzd29yZDogZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oJHRvU3RyaW5nKHBhc3N3b3JkKSk7XG4gICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjtcbiAgICB0aGlzLnBhc3N3b3JkID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnBhc3N3b3JkICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0XG4gIGdldEhvc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDtcbiAgICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnXG4gICAgICA6IHBvcnQgPT09IG51bGwgPyBzZXJpYWxpemVIb3N0KGhvc3QpXG4gICAgICA6IHNlcmlhbGl6ZUhvc3QoaG9zdCkgKyAnOicgKyBwb3J0O1xuICB9LFxuICBzZXRIb3N0OiBmdW5jdGlvbiAoaG9zdCkge1xuICAgIGlmICh0aGlzLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICB0aGlzLnBhcnNlKGhvc3QsIEhPU1QpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgZ2V0SG9zdG5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnIDogc2VyaWFsaXplSG9zdChob3N0KTtcbiAgfSxcbiAgc2V0SG9zdG5hbWU6IGZ1bmN0aW9uIChob3N0bmFtZSkge1xuICAgIGlmICh0aGlzLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICB0aGlzLnBhcnNlKGhvc3RuYW1lLCBIT1NUTkFNRSk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gIGdldFBvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDtcbiAgICByZXR1cm4gcG9ydCA9PT0gbnVsbCA/ICcnIDogJHRvU3RyaW5nKHBvcnQpO1xuICB9LFxuICBzZXRQb3J0OiBmdW5jdGlvbiAocG9ydCkge1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgcG9ydCA9ICR0b1N0cmluZyhwb3J0KTtcbiAgICBpZiAocG9ydCA9PSAnJykgdGhpcy5wb3J0ID0gbnVsbDtcbiAgICBlbHNlIHRoaXMucGFyc2UocG9ydCwgUE9SVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXRobmFtZVxuICBnZXRQYXRobmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgIHJldHVybiB0aGlzLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBqb2luKHBhdGgsICcvJykgOiAnJztcbiAgfSxcbiAgc2V0UGF0aG5hbWU6IGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgIGlmICh0aGlzLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICB0aGlzLnBhdGggPSBbXTtcbiAgICB0aGlzLnBhcnNlKHBhdGhuYW1lLCBQQVRIX1NUQVJUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaFxuICBnZXRTZWFyY2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgIHJldHVybiBxdWVyeSA/ICc/JyArIHF1ZXJ5IDogJyc7XG4gIH0sXG4gIHNldFNlYXJjaDogZnVuY3Rpb24gKHNlYXJjaCkge1xuICAgIHNlYXJjaCA9ICR0b1N0cmluZyhzZWFyY2gpO1xuICAgIGlmIChzZWFyY2ggPT0gJycpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJz8nID09IGNoYXJBdChzZWFyY2gsIDApKSBzZWFyY2ggPSBzdHJpbmdTbGljZShzZWFyY2gsIDEpO1xuICAgICAgdGhpcy5xdWVyeSA9ICcnO1xuICAgICAgdGhpcy5wYXJzZShzZWFyY2gsIFFVRVJZKTtcbiAgICB9XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMudXBkYXRlKCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgZ2V0U2VhcmNoUGFyYW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoUGFyYW1zLmZhY2FkZTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhhc2hcbiAgZ2V0SGFzaDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XG4gICAgcmV0dXJuIGZyYWdtZW50ID8gJyMnICsgZnJhZ21lbnQgOiAnJztcbiAgfSxcbiAgc2V0SGFzaDogZnVuY3Rpb24gKGhhc2gpIHtcbiAgICBoYXNoID0gJHRvU3RyaW5nKGhhc2gpO1xuICAgIGlmIChoYXNoID09ICcnKSB7XG4gICAgICB0aGlzLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCcjJyA9PSBjaGFyQXQoaGFzaCwgMCkpIGhhc2ggPSBzdHJpbmdTbGljZShoYXNoLCAxKTtcbiAgICB0aGlzLmZyYWdtZW50ID0gJyc7XG4gICAgdGhpcy5wYXJzZShoYXNoLCBGUkFHTUVOVCk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucXVlcnkgPSB0aGlzLnNlYXJjaFBhcmFtcy5zZXJpYWxpemUoKSB8fCBudWxsO1xuICB9XG59O1xuXG4vLyBgVVJMYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtY2xhc3NcbnZhciBVUkxDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTCh1cmwgLyogLCBiYXNlICovKSB7XG4gIHZhciB0aGF0ID0gYW5JbnN0YW5jZSh0aGlzLCBVUkxQcm90b3R5cGUpO1xuICB2YXIgYmFzZSA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHN0YXRlID0gc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCBuZXcgVVJMU3RhdGUodXJsLCBmYWxzZSwgYmFzZSkpO1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhhdC5ocmVmID0gc3RhdGUuc2VyaWFsaXplKCk7XG4gICAgdGhhdC5vcmlnaW4gPSBzdGF0ZS5nZXRPcmlnaW4oKTtcbiAgICB0aGF0LnByb3RvY29sID0gc3RhdGUuZ2V0UHJvdG9jb2woKTtcbiAgICB0aGF0LnVzZXJuYW1lID0gc3RhdGUuZ2V0VXNlcm5hbWUoKTtcbiAgICB0aGF0LnBhc3N3b3JkID0gc3RhdGUuZ2V0UGFzc3dvcmQoKTtcbiAgICB0aGF0Lmhvc3QgPSBzdGF0ZS5nZXRIb3N0KCk7XG4gICAgdGhhdC5ob3N0bmFtZSA9IHN0YXRlLmdldEhvc3RuYW1lKCk7XG4gICAgdGhhdC5wb3J0ID0gc3RhdGUuZ2V0UG9ydCgpO1xuICAgIHRoYXQucGF0aG5hbWUgPSBzdGF0ZS5nZXRQYXRobmFtZSgpO1xuICAgIHRoYXQuc2VhcmNoID0gc3RhdGUuZ2V0U2VhcmNoKCk7XG4gICAgdGhhdC5zZWFyY2hQYXJhbXMgPSBzdGF0ZS5nZXRTZWFyY2hQYXJhbXMoKTtcbiAgICB0aGF0Lmhhc2ggPSBzdGF0ZS5nZXRIYXNoKCk7XG4gIH1cbn07XG5cbnZhciBVUkxQcm90b3R5cGUgPSBVUkxDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnZhciBhY2Nlc3NvckRlc2NyaXB0b3IgPSBmdW5jdGlvbiAoZ2V0dGVyLCBzZXR0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpW2dldHRlcl0oKTtcbiAgICB9LFxuICAgIHNldDogc2V0dGVyICYmIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcylbc2V0dGVyXSh2YWx1ZSk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9O1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGRlZmluZVByb3BlcnRpZXMoVVJMUHJvdG90eXBlLCB7XG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaHJlZmAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICAgIGhyZWY6IGFjY2Vzc29yRGVzY3JpcHRvcignc2VyaWFsaXplJywgJ3NldEhyZWYnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5vcmlnaW5gIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgICBvcmlnaW46IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0T3JpZ2luJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucHJvdG9jb2xgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gICAgcHJvdG9jb2w6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UHJvdG9jb2wnLCAnc2V0UHJvdG9jb2wnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS51c2VybmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgICB1c2VybmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRVc2VybmFtZScsICdzZXRVc2VybmFtZScpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBhc3N3b3JkYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICAgIHBhc3N3b3JkOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBhc3N3b3JkJywgJ3NldFBhc3N3b3JkJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdFxuICAgIGhvc3Q6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdCcsICdzZXRIb3N0JyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gICAgaG9zdG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SG9zdG5hbWUnLCAnc2V0SG9zdG5hbWUnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gICAgcG9ydDogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQb3J0JywgJ3NldFBvcnQnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wYXRobmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWVcbiAgICBwYXRobmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQYXRobmFtZScsICdzZXRQYXRobmFtZScpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gICAgc2VhcmNoOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFNlYXJjaCcsICdzZXRTZWFyY2gnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hQYXJhbXNgIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgICBzZWFyY2hQYXJhbXM6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0U2VhcmNoUGFyYW1zJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICAgIGhhc2g6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0SGFzaCcsICdzZXRIYXNoJylcbiAgfSk7XG59XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG5yZWRlZmluZShVUkxQcm90b3R5cGUsICd0b0pTT04nLCBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI1VSTC1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5pZiAoTmF0aXZlVVJMKSB7XG4gIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMO1xuICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDtcbiAgLy8gYFVSTC5jcmVhdGVPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTFxuICBpZiAobmF0aXZlQ3JlYXRlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ2NyZWF0ZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlQ3JlYXRlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICBpZiAobmF0aXZlUmV2b2tlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlUmV2b2tlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoVVJMQ29uc3RydWN0b3IsICdVUkwnKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIFVSTDogVVJMQ29uc3RydWN0b3Jcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG4kKHsgdGFyZ2V0OiAnVVJMJywgcHJvdG86IHRydWUsIGVudW1lcmFibGU6IHRydWUgfSwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gY2FsbChVUkwucHJvdG90eXBlLnRvU3RyaW5nLCB0aGlzKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmlzLWNvbmNhdC1zcHJlYWRhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5lcnJvci5jYXVzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5lcnJvci50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5jYXVzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5jb25jYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZsYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmlzLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLmdldC15ZWFyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUuc2V0LXllYXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1nbXQtc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZXNjYXBlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIudG8tZXhwb25lbnRpYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5oYXMtb3duJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmFueScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QudG8tc3RyaW5nLXRhZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmRvdC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3knKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRlc3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmF0LWFsdGVybmF0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1YnN0cicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1lbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnVuZXNjYXBlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5hdG9iJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5idG9hJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5zdGFjaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnF1ZXVlLW1pY3JvdGFzaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuc3RydWN0dXJlZC1jbG9uZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHZhciBwcm92aWRlZCA9IHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nID8gbWVzc2FnZSgpIDogbWVzc2FnZTtcbiAgICB2YXIgdmFsdWUgPSBwcm92aWRlZCA/IHByZWZpeCArIFwiOiBcIiArIHByb3ZpZGVkIDogcHJlZml4O1xuICAgIHRocm93IG5ldyBFcnJvcih2YWx1ZSk7XG59XG5cbmV4cG9ydCB7IGludmFyaWFudCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxudmFyIGNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHtcbiAgICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pID09PSBjcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgfHwgaXNEdXBsaWNhdGVOYXZpZ2F0aW9uID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3NOYW1lUHJvcChpc0FjdGl2ZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChpc0FjdGl2ZSkgOiBzdHlsZVByb3A7XG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgcmV0dXJuIDxkaXY+7LSI6riwIOyEuO2MheyeheuLiOuLpC48L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwXG4iLCJpbXBvcnQgXCJjb3JlLWpzL3N0YWJsZVwiXG5pbXBvcnQgXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIlxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwicmVhY3QtZG9tXCJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCJcblxuaW1wb3J0IEFwcCBmcm9tIFwiLi9sYXlvdXRzL0FwcFwiXG5cbmF4aW9zLmRlZmF1bHRzLndpdGhDcmVkZW50aWFscyA9IHRydWVcbmF4aW9zLmRlZmF1bHRzLmJhc2VVUkwgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBcImh0dHBzOi8vc2xlYWN0Lm5vZGViaXJkLmNvbVwiIDogXCJodHRwOi8vbG9jYWxob3N0OjMwOTBcIlxuXG5yZW5kZXIoXG4gIDxCcm93c2VyUm91dGVyPlxuICAgIDxBcHAgLz5cbiAgPC9Ccm93c2VyUm91dGVyPixcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhcHBcIiksXG4pXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInV0aWxzIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJDYW5jZWwiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uQ2FuY2VsZWQiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJkb25lIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Zvcm1EYXRhIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwidXJsIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwidmFsdWUiLCJlcnIiLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJzZXRUaW1lb3V0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwidHJhbnNpdGlvbmFsIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNVbmRlZmluZWQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbCIsInR5cGUiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJzZW5kIiwiYmluZCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsInByb3RvdHlwZSIsImV4dGVuZCIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsIlZFUlNJT04iLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIm1lc3NhZ2UiLCJ0aGlzIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJ0b2tlbiIsInRoZW4iLCJfbGlzdGVuZXJzIiwiaSIsImwiLCJsZW5ndGgiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsImxpc3RlbmVyIiwicHVzaCIsImluZGV4Iiwic3BsaWNlIiwic291cmNlIiwiYyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJkZWZhdWx0cyIsImludGVyY2VwdG9ycyIsImNvbmZpZ09yVXJsIiwiYXNzZXJ0T3B0aW9ucyIsInNpbGVudEpTT05QYXJzaW5nIiwiYm9vbGVhbiIsImZvcmNlZEpTT05QYXJzaW5nIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJ1bldoZW4iLCJzeW5jaHJvbm91cyIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsImNoYWluIiwiQXJyYXkiLCJhcHBseSIsImNvbmNhdCIsInNoaWZ0IiwibmV3Q29uZmlnIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZXJyb3IiLCJnZXRVcmkiLCJyZXBsYWNlIiwiaGFuZGxlcnMiLCJ1c2UiLCJvcHRpb25zIiwiZWplY3QiLCJpZCIsImZuIiwiaCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJFcnJvciIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiY2FsbCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRvSlNPTiIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsInRhcmdldCIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5Iiwic2xpY2UiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJPYmplY3QiLCJrZXlzIiwiY29uZmlnVmFsdWUiLCJ2YWxpZGF0ZVN0YXR1cyIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc09iamVjdCIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZW5jb2RlciIsImlzU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwidHJpbSIsImUiLCJzdHJpbmdpZnkiLCJzdHJpbmdpZnlTYWZlbHkiLCJzdHJpY3RKU09OUGFyc2luZyIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidGhpc0FyZyIsImFyZ3MiLCJhcmd1bWVudHMiLCJlbmNvZGUiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ2IiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsInJlbGF0aXZlVVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiZG9jdW1lbnQiLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsInRlc3QiLCJwYXlsb2FkIiwib3JpZ2luVVJMIiwibXNpZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsImNhbGxiYWNrIiwiYXJyIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2ZXJzaW9uIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiY29uc29sZSIsIndhcm4iLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJyZXN1bHQiLCJnZXRQcm90b3R5cGVPZiIsImlzRnVuY3Rpb24iLCJvYmoiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwiYSIsImIiLCJzdHIiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiZ2xvYmFsIiwiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiYXJndW1lbnQiLCJpc0NvbnN0cnVjdG9yIiwiU3RyaW5nIiwid2VsbEtub3duU3ltYm9sIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiZiIsImNvbmZpZ3VyYWJsZSIsIlMiLCJ1bmljb2RlIiwiaXNQcm90b3R5cGVPZiIsIml0IiwiUHJvdG90eXBlIiwiRGF0YVZpZXciLCJmYWlscyIsImlzRXh0ZW5zaWJsZSIsImRlZmluZVByb3BlcnR5IiwiTkFNRSIsIkNvbnN0cnVjdG9yIiwiTkFUSVZFX0FSUkFZX0JVRkZFUiIsIkRFU0NSSVBUT1JTIiwiaGFzT3duIiwiY2xhc3NvZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0UHJvdG90eXBlT2YiLCJ1aWQiLCJJbnQ4QXJyYXkiLCJJbnQ4QXJyYXlQcm90b3R5cGUiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlIiwiVHlwZWRBcnJheSIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJPYmplY3RQcm90b3R5cGUiLCJUT19TVFJJTkdfVEFHIiwiVFlQRURfQVJSQVlfVEFHIiwiVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IiLCJOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIiwib3BlcmEiLCJUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIlVpbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJrbGFzcyIsIkZ1bmN0aW9uIiwiZ2V0IiwiYVR5cGVkQXJyYXkiLCJhVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiQyIsImV4cG9ydFR5cGVkQXJyYXlNZXRob2QiLCJLRVkiLCJwcm9wZXJ0eSIsImZvcmNlZCIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXJyb3IyIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsInVuY3VycnlUaGlzIiwiRnVuY3Rpb25OYW1lIiwicmVkZWZpbmVBbGwiLCJhbkluc3RhbmNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInRvTGVuZ3RoIiwidG9JbmRleCIsIklFRUU3NTQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlTbGljZSIsInNldFRvU3RyaW5nVGFnIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsIlBST1BFUl9GVU5DVElPTl9OQU1FIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJDT05GSUdVUkFCTEUiLCJnZXRJbnRlcm5hbFN0YXRlIiwic2V0SW50ZXJuYWxTdGF0ZSIsInNldCIsIkFSUkFZX0JVRkZFUiIsIldST05HX0lOREVYIiwiTmF0aXZlQXJyYXlCdWZmZXIiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlclByb3RvdHlwZSIsIiREYXRhVmlldyIsIkRhdGFWaWV3UHJvdG90eXBlIiwiUmFuZ2VFcnJvciIsImZpbGwiLCJyZXZlcnNlIiwicGFja0lFRUU3NTQiLCJwYWNrIiwidW5wYWNrSUVFRTc1NCIsInVucGFjayIsInBhY2tJbnQ4IiwicGFja0ludDE2IiwicGFja0ludDMyIiwidW5wYWNrSW50MzIiLCJwYWNrRmxvYXQzMiIsInBhY2tGbG9hdDY0IiwiYWRkR2V0dGVyIiwidmlldyIsImNvdW50IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsInN0b3JlIiwiYnl0ZUxlbmd0aCIsImJ5dGVzIiwic3RhcnQiLCJieXRlT2Zmc2V0IiwiY29udmVyc2lvbiIsIklOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSIsIk5hTiIsImoiLCJ0ZXN0VmlldyIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsInVuc2FmZSIsImJ1ZmZlckxlbmd0aCIsIm9mZnNldCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwidG9PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJsZW5ndGhPZkFycmF5TGlrZSIsIm1pbiIsIk1hdGgiLCJjb3B5V2l0aGluIiwiTyIsImxlbiIsInRvIiwiZnJvbSIsImVuZCIsImluYyIsImFyZ3VtZW50c0xlbmd0aCIsImVuZFBvcyIsIiRmb3JFYWNoIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJjYWxsYmFja2ZuIiwibGlzdCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJhcnJheUxpa2UiLCJJU19DT05TVFJVQ1RPUiIsIm1hcGZuIiwibWFwcGluZyIsInN0ZXAiLCJpdGVyYXRvciIsIm5leHQiLCJpdGVyYXRvck1ldGhvZCIsInRvSW5kZXhlZE9iamVjdCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiSW5kZXhlZE9iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwic2VsZiIsImJvdW5kRnVuY3Rpb24iLCJtYXAiLCJmaWx0ZXIiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiZmlsdGVyUmVqZWN0IiwiJGxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiRk9SQ0VEIiwic2VhcmNoRWxlbWVudCIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJhQ2FsbGFibGUiLCJJU19SSUdIVCIsIm1lbW8iLCJsZWZ0IiwicmlnaHQiLCJtYXgiLCJrIiwiZmluIiwibiIsImZsb29yIiwibWVyZ2VTb3J0IiwiY29tcGFyZWZuIiwibWlkZGxlIiwiaW5zZXJ0aW9uU29ydCIsImVsZW1lbnQiLCJsbGVuZ3RoIiwicmxlbmd0aCIsImxpbmRleCIsInJpbmRleCIsIm9yaWdpbmFsQXJyYXkiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsIml0b2MiLCJjdG9pIiwiYW5PYmplY3QiLCJpdGVyYXRvckNsb3NlIiwiRU5UUklFUyIsIklURVJBVE9SIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZXhlYyIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwib2JqZWN0Iiwic3RyaW5nU2xpY2UiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJURVNUIiwiVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZIiwiSVNfVjhfT1JfQ0hBS1JBX1NUQUNLIiwiZHJvcEVudHJpZXMiLCJpdGVyYXRlIiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRTcGVjaWVzIiwiZmFzdEtleSIsImludGVybmFsU3RhdGVHZXR0ZXJGb3IiLCJnZXR0ZXJGb3IiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQURERVIiLCJpdGVyYWJsZSIsImZpcnN0IiwibGFzdCIsInNpemUiLCJBU19FTlRSSUVTIiwiZGVmaW5lIiwicHJldmlvdXMiLCJzdGF0ZSIsImVudHJ5IiwiZ2V0RW50cnkiLCJyZW1vdmVkIiwiY2xlYXIiLCJwcmV2IiwiaGFzIiwiYWRkIiwic2V0U3Ryb25nIiwiSVRFUkFUT1JfTkFNRSIsImdldEludGVybmFsQ29sbGVjdGlvblN0YXRlIiwiZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiZ2V0V2Vha0RhdGEiLCJBcnJheUl0ZXJhdGlvbk1vZHVsZSIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmcm96ZW4iLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZW50cmllcyIsImZpbmRVbmNhdWdodEZyb3plbiIsIiQiLCJpc0ZvcmNlZCIsIkludGVybmFsTWV0YWRhdGFNb2R1bGUiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJpbmhlcml0SWZSZXF1aXJlZCIsIklTX1dFQUsiLCJOYXRpdmVDb25zdHJ1Y3RvciIsIk5hdGl2ZVByb3RvdHlwZSIsImV4cG9ydGVkIiwiZml4TWV0aG9kIiwidW5jdXJyaWVkTmF0aXZlTWV0aG9kIiwiZW5hYmxlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZHVtbXkiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZXhjZXB0aW9ucyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk1BVENIIiwicmVnZXhwIiwiZXJyb3IxIiwiRiIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJxdW90Iiwic3RyaW5nIiwiYXR0cmlidXRlIiwicDEiLCJJdGVyYXRvclByb3RvdHlwZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIkl0ZXJhdG9ycyIsInJldHVyblRoaXMiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiRU5VTUVSQUJMRV9ORVhUIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwidG9Qcm9wZXJ0eUtleSIsInByb3BlcnR5S2V5IiwicGFkU3RhcnQiLCJhYnMiLCJEYXRlUHJvdG90eXBlIiwibiREYXRlVG9JU09TdHJpbmciLCJnZXRUaW1lIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENTZWNvbmRzIiwiaXNGaW5pdGUiLCJkYXRlIiwieWVhciIsIm1pbGxpc2Vjb25kcyIsInNpZ24iLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiaGludCIsIklTX1BVUkUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSXRlcmF0b3JzQ29yZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiSXRlcmFibGUiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJ2YWx1ZXMiLCJwcm90byIsIndyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUiLCJTeW1ib2wiLCJFWElTVFMiLCJJbmRleFNpemVFcnJvciIsInMiLCJtIiwiRE9NU3RyaW5nU2l6ZUVycm9yIiwiSGllcmFyY2h5UmVxdWVzdEVycm9yIiwiV3JvbmdEb2N1bWVudEVycm9yIiwiSW52YWxpZENoYXJhY3RlckVycm9yIiwiTm9EYXRhQWxsb3dlZEVycm9yIiwiTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiTm90U3VwcG9ydGVkRXJyb3IiLCJJblVzZUF0dHJpYnV0ZUVycm9yIiwiSW52YWxpZFN0YXRlRXJyb3IiLCJTeW50YXhFcnJvciIsIkludmFsaWRNb2RpZmljYXRpb25FcnJvciIsIk5hbWVzcGFjZUVycm9yIiwiSW52YWxpZEFjY2Vzc0Vycm9yIiwiVmFsaWRhdGlvbkVycm9yIiwiVHlwZU1pc21hdGNoRXJyb3IiLCJTZWN1cml0eUVycm9yIiwiTmV0d29ya0Vycm9yIiwiQWJvcnRFcnJvciIsIlVSTE1pc21hdGNoRXJyb3IiLCJRdW90YUV4Y2VlZGVkRXJyb3IiLCJUaW1lb3V0RXJyb3IiLCJJbnZhbGlkTm9kZVR5cGVFcnJvciIsIkRhdGFDbG9uZUVycm9yIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjbGFzc0xpc3QiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJET01Ub2tlbkxpc3RQcm90b3R5cGUiLCJmaXJlZm94IiwiVUEiLCJQZWJibGUiLCJnZXRCdWlsdEluIiwiRGVubyIsInZlcnNpb25zIiwidjgiLCJ3ZWJraXQiLCJub3JtYWxpemVTdHJpbmdBcmd1bWVudCIsIm5hdGl2ZUVycm9yVG9TdHJpbmciLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0Iiwic2hhbSIsInJlZ2V4cEV4ZWMiLCJSZWdFeHBQcm90b3R5cGUiLCJTSEFNIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInJlIiwiZmxhZ3MiLCJ1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QiLCJuYXRpdmVNZXRob2QiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCIkZXhlYyIsImZsYXR0ZW5JbnRvQXJyYXkiLCJvcmlnaW5hbCIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwiZWxlbWVudExlbiIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsInByZXZlbnRFeHRlbnNpb25zIiwiTkFUSVZFX0JJTkQiLCJGdW5jdGlvblByb3RvdHlwZSIsIlJlZmxlY3QiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJhcmdzTGVuZ3RoIiwicGFydEFyZ3MiLCJnZXREZXNjcmlwdG9yIiwiYUZ1bmN0aW9uIiwibmFtZXNwYWNlIiwiZ2V0TWV0aG9kIiwidXNpbmdJdGVyYXRvciIsIlYiLCJQIiwiZnVuYyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlbWVudCIsInRhaWxQb3MiLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwiZyIsInBvdyIsImxvZyIsIkxOMiIsIm1hbnRpc3NhTGVuZ3RoIiwiZXhwb25lbnQiLCJtYW50aXNzYSIsImV4cG9uZW50TGVuZ3RoIiwiZU1heCIsImVCaWFzIiwicnQiLCJJbmZpbml0eSIsIm5CaXRzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJjYXVzZSIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlIiwiRlJFRVpJTkciLCJSRVFVSVJFRCIsIk1FVEFEQVRBIiwic2V0TWV0YWRhdGEiLCJvYmplY3RJRCIsIndlYWtEYXRhIiwibWV0YSIsIm9uRnJlZXplIiwiTkFUSVZFX1dFQUtfTUFQIiwic2hhcmVkIiwic2hhcmVkS2V5IiwiT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQiLCJXZWFrTWFwIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImVuZm9yY2UiLCJub29wIiwiZW1wdHkiLCJjb25zdHJ1Y3RvclJlZ0V4cCIsImlzQ29uc3RydWN0b3JNb2Rlcm4iLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaXNSZWdFeHAiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIiRTeW1ib2wiLCJSZXN1bHQiLCJzdG9wcGVkIiwiUmVzdWx0UHJvdG90eXBlIiwidW5ib3VuZEZ1bmN0aW9uIiwiaXRlckZuIiwiSVNfSVRFUkFUT1IiLCJJTlRFUlJVUFRFRCIsInN0b3AiLCJjb25kaXRpb24iLCJjYWxsRm4iLCJpbm5lclJlc3VsdCIsImlubmVyRXJyb3IiLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwiJGV4cG0xIiwiZXhwbTEiLCJleHAiLCJ4IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJMT0cxMEUiLCJsb2cxMCIsImxvZzFwIiwiZmx1c2giLCJoZWFkIiwibm90aWZ5IiwidG9nZ2xlIiwibm9kZSIsIm1hY3JvdGFzayIsIklTX0lPUyIsIklTX0lPU19QRUJCTEUiLCJJU19XRUJPU19XRUJLSVQiLCJJU19OT0RFIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsInBhcmVudCIsImV4aXQiLCJlbnRlciIsIm5leHRUaWNrIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInRhc2siLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2wiLCJVUkwiLCJzZWFyY2hQYXJhbXMiLCJzb3J0IiwiVVJMU2VhcmNoUGFyYW1zIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIiRkZWZhdWx0IiwiZ2xvYmFsSXNGaW5pdGUiLCJ3aGl0ZXNwYWNlcyIsIm4kUGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJ0cmltbWVkU3RyaW5nIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCJoZXgiLCJyYWRpeCIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIiRhc3NpZ24iLCJhc3NpZ24iLCJBIiwiQiIsImFscGhhYmV0IiwiY2hyIiwiVCIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXNNb2R1bGUiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJMVCIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJQcm9wZXJ0aWVzIiwiVjhfUFJPVE9UWVBFX0RFRklORV9CVUciLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJJRThfRE9NX0RFRklORSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJBdHRyaWJ1dGVzIiwiY3VycmVudCIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImludGVybmFsT2JqZWN0S2V5cyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIkFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSIsIiRpc0V4dGVuc2libGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwibmFtZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIldFQktJVCIsInJhbmRvbSIsIl9fZGVmaW5lU2V0dGVyX18iLCJhUG9zc2libGVQcm90b3R5cGUiLCJzZXR0ZXIiLCJDT1JSRUNUX1NFVFRFUiIsIl9fcHJvdG9fXyIsIlRPX0VOVFJJRVMiLCJpbnB1dCIsInByZWYiLCJ2YWx1ZU9mIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIlF1ZXVlIiwidGFpbCIsIml0ZW0iLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwic2ltcGxlIiwiUiIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIlVOU1VQUE9SVEVEX0RPVF9BTEwiLCJVTlNVUFBPUlRFRF9OQ0ciLCJuYXRpdmVSZXBsYWNlIiwibmF0aXZlRXhlYyIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJncm91cCIsInJhdyIsImdyb3VwcyIsInN0aWNreSIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsIiRSZWdFeHAiLCJNSVNTRURfU1RJQ0tZIiwiaXMiLCJ5IiwiVEFHIiwiU0hBUkVEIiwibW9kZSIsImNvcHlyaWdodCIsImxpY2Vuc2UiLCJhQ29uc3RydWN0b3IiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsInNlY29uZCIsImNvZGVBdCIsIiRyZXBlYXQiLCJyZXBlYXQiLCJjZWlsIiwiSVNfRU5EIiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpbnRNYXhMZW5ndGgiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwibWF4SW50IiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsIk9WRVJGTE9XX0VSUk9SIiwiZnJvbUNoYXJDb2RlIiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiYmFzZU1pbnVzVE1pbiIsImJhc2UiLCJvdXRwdXQiLCJjb3VudGVyIiwiZXh0cmEiLCJ1Y3MyZGVjb2RlIiwiY3VycmVudFZhbHVlIiwiaW5wdXRMZW5ndGgiLCJiaWFzIiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudCIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInEiLCJ0IiwicU1pbnVzVCIsImJhc2VNaW51c1QiLCJsYWJlbCIsImVuY29kZWQiLCJsYWJlbHMiLCJ3aGl0ZXNwYWNlIiwibHRyaW0iLCJydHJpbSIsImRlZmVyIiwiY2hhbm5lbCIsInZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJEaXNwYXRjaCIsIk1lc3NhZ2VDaGFubmVsIiwicXVldWUiLCJydW4iLCJydW5uZXIiLCJldmVudCIsInBvc3QiLCJwb3N0TWVzc2FnZSIsImhhbmRsZXIiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwiaW50ZWdlciIsInRvUG9zaXRpdmVJbnRlZ2VyIiwiQllURVMiLCJpc1N5bWJvbCIsIlRPX1BSSU1JVElWRSIsImV4b3RpY1RvUHJpbSIsInRvUHJpbWl0aXZlIiwiVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJBcnJheUJ1ZmZlck1vZHVsZSIsImlzSW50ZWdyYWxOdW1iZXIiLCJ0b09mZnNldCIsInR5cGVkQXJyYXlGcm9tIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc1R5cGVkQXJyYXlJbmRleCIsIndyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cmFwcGVkRGVmaW5lUHJvcGVydHkiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImdldHRlciIsInR5cGVkQXJyYXlPZmZzZXQiLCIkbGVuZ3RoIiwiJGxlbiIsImFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCIsInR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJwb3N0Zml4IiwiTkFUSVZFX1NZTUJPTCIsInBhc3NlZCIsInJlcXVpcmVkIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwic3ltYm9sRm9yIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImluc3RhbGxFcnJvckNhdXNlIiwiY2xlYXJFcnJvclN0YWNrIiwiRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUiLCJGVUxMX05BTUUiLCJJU19BR0dSRUdBVEVfRVJST1IiLCJPUFRJT05TX1BPU0lUSU9OIiwiRVJST1JfTkFNRSIsIk9yaWdpbmFsRXJyb3IiLCJPcmlnaW5hbEVycm9yUHJvdG90eXBlIiwiQmFzZUVycm9yIiwiV3JhcHBlZEVycm9yIiwid3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UiLCJBR0dSRUdBVEVfRVJST1IiLCIkQWdncmVnYXRlRXJyb3IiLCJlcnJvcnMiLCJBZ2dyZWdhdGVFcnJvciIsImluaXQiLCJpc0luc3RhbmNlIiwiQWdncmVnYXRlRXJyb3JQcm90b3R5cGUiLCJlcnJvcnNBcnJheSIsImFycmF5QnVmZmVyTW9kdWxlIiwidW4kQXJyYXlCdWZmZXJTbGljZSIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwiYWRkVG9VbnNjb3BhYmxlcyIsImF0IiwicmVsYXRpdmVJbmRleCIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsImFyZyIsIkUiLCIkZXZlcnkiLCIkZmlsdGVyIiwiJGZpbmRJbmRleCIsIkZJTkRfSU5ERVgiLCJTS0lQU19IT0xFUyIsIiRmaW5kIiwiRklORCIsImZsYXRNYXAiLCJmbGF0IiwiZGVwdGhBcmciLCIkaW5jbHVkZXMiLCIkSW5kZXhPZiIsInVuJEluZGV4T2YiLCJBUlJBWV9JVEVSQVRPUiIsIkFyZ3VtZW50cyIsInVuJEpvaW4iLCJFUzNfU1RSSU5HUyIsInNlcGFyYXRvciIsIiRtYXAiLCJvZiIsIiRyZWR1Y2VSaWdodCIsIkNIUk9NRV9WRVJTSU9OIiwicmVkdWNlUmlnaHQiLCIkcmVkdWNlIiwicmVkdWNlIiwidW4kUmV2ZXJzZSIsInVuJFNsaWNlIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIiRzb21lIiwiaW50ZXJuYWxTb3J0IiwiRkYiLCJJRV9PUl9FREdFIiwiVjgiLCJ1biRTb3J0IiwiRkFJTFNfT05fVU5ERUZJTkVEIiwiRkFJTFNfT05fTlVMTCIsIlNUQUJMRV9TT1JUIiwiaXRlbXNMZW5ndGgiLCJpdGVtcyIsImFycmF5TGVuZ3RoIiwiZ2V0U29ydENvbXBhcmUiLCJNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwiYWN0dWFsU3RhcnQiLCJnZXRZZWFyIiwiZ2V0RnVsbFllYXIiLCJzZXRGdWxsWWVhciIsInNldFllYXIiLCJ5aSIsInRvVVRDU3RyaW5nIiwicHYiLCJkYXRlVG9QcmltaXRpdmUiLCJJTlZBTElEX0RBVEUiLCJ1biREYXRlVG9TdHJpbmciLCJXZWJBc3NlbWJseSIsImV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyIiwiZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlciIsIldFQl9BU1NFTUJMWSIsImVycm9yVG9TdHJpbmciLCJFcnJvclByb3RvdHlwZSIsIm51bWJlclRvU3RyaW5nIiwiZXNjYXBlIiwiSEFTX0lOU1RBTkNFIiwiRlVOQ1RJT05fTkFNRV9FWElTVFMiLCJuYW1lUkUiLCJyZWdFeHBFeGVjIiwiJHN0cmluZ2lmeSIsInRlc3RlciIsImxvdyIsImhpIiwiZml4IiwicmVwbGFjZXIiLCJzcGFjZSIsImNvbGxlY3Rpb24iLCIkYWNvc2giLCJhY29zaCIsInNxcnQiLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsIkxPRzJFIiwiY2x6MzIiLCIkY29zaCIsImNvc2giLCIkaHlwb3QiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImFMZW4iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwiVUlOVDE2IiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsInRoaXNOdW1iZXJWYWx1ZSIsIk5VTUJFUiIsIk5hdGl2ZU51bWJlciIsIk51bWJlclByb3RvdHlwZSIsInRvTnVtZXJpYyIsInByaW1WYWx1ZSIsInRvTnVtYmVyIiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiTnVtYmVyV3JhcHBlciIsImlzTmFOIiwiaXNTYWZlSW50ZWdlciIsIk1JTl9TQUZFX0lOVEVHRVIiLCJ1biRUb0V4cG9uZW50aWFsIiwidG9FeHBvbmVudGlhbCIsIlJPVU5EU19QUk9QRVJMWSIsIlRIUk9XU19PTl9JTkZJTklUWV9GUkFDVElPTiIsIlBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0siLCJmcmFjdGlvbkRpZ2l0cyIsImQiLCJ3IiwidW4kVG9GaXhlZCIsInRvRml4ZWQiLCJhY2MiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwiZGF0YVRvU3RyaW5nIiwieiIsImZyYWN0RGlnaXRzIiwieDIiLCJ1biRUb1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiX19kZWZpbmVHZXR0ZXJfXyIsIiRlbnRyaWVzIiwiJGZyZWV6ZSIsImZyZWV6ZSIsImZyb21FbnRyaWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwiJGlzRnJvemVuIiwiaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCJpc1NlYWxlZCIsIm5hdGl2ZUtleXMiLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRzZWFsIiwic2VhbCIsIiR2YWx1ZXMiLCIkcGFyc2VGbG9hdCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsImFsbFNldHRsZWQiLCJjYXBhYmlsaXR5IiwicHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwiUFJPTUlTRV9BTllfRVJST1IiLCJhbnkiLCJhbHJlYWR5UmVzb2x2ZWQiLCJhbHJlYWR5UmVqZWN0ZWQiLCJOYXRpdmVQcm9taXNlIiwicmVhbCIsIm9uRmluYWxseSIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJtaWNyb3Rhc2siLCJob3N0UmVwb3J0RXJyb3JzIiwiSVNfQlJPV1NFUiIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIk5hdGl2ZVByb21pc2VQcm90b3R5cGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJQcm9taXNlUHJvdG90eXBlIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJOQVRJVkVfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsIlNVQkNMQVNTSU5HIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXNUaGVuYWJsZSIsImNhbGxSZWFjdGlvbiIsInJlYWN0aW9uIiwiZXhpdGVkIiwib2siLCJmYWlsIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwicmVhY3Rpb25zIiwib25VbmhhbmRsZWQiLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXAiLCJyIiwiJHByb21pc2VSZXNvbHZlIiwicmFjZSIsImZ1bmN0aW9uQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwibmF0aXZlQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5Iiwib2JqZWN0R2V0UHJvdG90eXBlT2YiLCJpc0RhdGFEZXNjcmlwdG9yIiwicmVjZWl2ZXIiLCJvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyIsIm9iamVjdFNldFByb3RvdHlwZU9mIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzY3JpcHRvciIsInJlZ0V4cEZsYWdzIiwiTmF0aXZlUmVnRXhwIiwiZ2V0RmxhZ3MiLCJzdHJpbmdJbmRleE9mIiwiSVNfTkNHIiwiQ09SUkVDVF9ORVciLCJSZWdFeHBXcmFwcGVyIiwicGF0dGVybiIsInJhd0ZsYWdzIiwiaGFuZGxlZCIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicmF3UGF0dGVybiIsIm5hbWVkIiwiYnJhY2tldHMiLCJuY2ciLCJncm91cGlkIiwiZ3JvdXBuYW1lIiwiaGFuZGxlTkNHIiwiaGFuZGxlRG90QWxsIiwicHJveHkiLCJvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInVuJFRlc3QiLCIkdG9TdHJpbmciLCJUT19TVFJJTkciLCJuJFRvU3RyaW5nIiwiTk9UX0dFTkVSSUMiLCJJTkNPUlJFQ1RfTkFNRSIsInAiLCJyZiIsImNyZWF0ZUhUTUwiLCJmb3JjZWRTdHJpbmdIVE1MTWV0aG9kIiwiYW5jaG9yIiwiYmlnIiwiYmxpbmsiLCJib2xkIiwiY29kZVBvaW50QXQiLCJub3RBUmVnRXhwIiwiY29ycmVjdElzUmVnRXhwTG9naWMiLCJ1biRFbmRzV2l0aCIsImVuZHNXaXRoIiwiQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMiLCJzZWFyY2hTdHJpbmciLCJlbmRQb3NpdGlvbiIsImZpeGVkIiwiZm9udGNvbG9yIiwiY29sb3IiLCJmb250c2l6ZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsImVsZW1lbnRzIiwiaXRhbGljcyIsIlNUUklOR19JVEVSQVRPUiIsInBvaW50IiwibGluayIsImFkdmFuY2VTdHJpbmdJbmRleCIsIk1BVENIX0FMTCIsIlJFR0VYUF9TVFJJTkdfSVRFUkFUT1IiLCJSRUdFWFBfU1RSSU5HIiwidW4kTWF0Y2hBbGwiLCJtYXRjaEFsbCIsIldPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIiRnbG9iYWwiLCJmdWxsVW5pY29kZSIsIiRtYXRjaEFsbCIsImZsYWdzVmFsdWUiLCJtYXRjaGVyIiwicngiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsIm5hdGl2ZU1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicmVzIiwibWF0Y2hTdHIiLCIkcGFkRW5kIiwicGFkRW5kIiwiJHBhZFN0YXJ0IiwidGVtcGxhdGUiLCJyYXdUZW1wbGF0ZSIsImxpdGVyYWxTZWdtZW50cyIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VBbGwiLCJyZXBsYWNlVmFsdWUiLCJJU19SRUdfRVhQIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJzZWFyY2hMZW5ndGgiLCJhZHZhbmNlQnkiLCJlbmRPZkxhc3RNYXRjaCIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIl8iLCJVTlNBRkVfU1VCU1RJVFVURSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIm5hdGl2ZVNlYXJjaCIsInNlYXJjaGVyIiwicHJldmlvdXNMYXN0SW5kZXgiLCJzbWFsbCIsImNhbGxSZWdFeHBFeGVjIiwiTUFYX1VJTlQzMiIsIiRwdXNoIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwib3JpZ2luYWxFeGVjIiwidW4kU3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzdHJpa2UiLCJzdWIiLCJpbnRMZW5ndGgiLCJpbnRFbmQiLCJpbnRTdGFydCIsInN1cCIsIiR0cmltRW5kIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsInRyaW1FbmQiLCJ0cmltUmlnaHQiLCIkdHJpbVN0YXJ0IiwidHJpbVN0YXJ0IiwidHJpbUxlZnQiLCIkdHJpbSIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsIk5hdGl2ZVN5bWJvbCIsIlN5bWJvbFByb3RvdHlwZSIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xUb1N0cmluZyIsInN5bWJvbFZhbHVlT2YiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJISURERU4iLCJRT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiJHJlcGxhY2VyIiwidSRBcnJheUNvcHlXaXRoaW4iLCIkZmlsbCIsImZyb21TcGVjaWVzQW5kTGlzdCIsInByZWRpY2F0ZSIsImNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIiRpbmRleE9mIiwiQXJyYXlJdGVyYXRvcnMiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsIkdFTkVSSUMiLCJJVEVSQVRPUl9JU19WQUxVRVMiLCJ0eXBlZEFycmF5VmFsdWVzIiwiJGpvaW4iLCIkc2V0IiwiV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTIiwiVE9fT0JKRUNUX0JVRyIsIkFDQ0VQVF9JTkNPUlJFQ1RfQVJHVU1FTlRTIiwibW9kIiwiZXhwZWN0ZWQiLCJiZWdpbiIsImJlZ2luSW5kZXgiLCIkdG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIlRPX0xPQ0FMRV9TVFJJTkdfQlVHIiwiVWludDhBcnJheVByb3RvdHlwZSIsImFycmF5VG9TdHJpbmciLCJJU19OT1RfQVJSQVlfTUVUSE9EIiwiaGV4MiIsImhleDQiLCJwYXJ0IiwiSW50ZXJuYWxXZWFrTWFwIiwiY29sbGVjdGlvbldlYWsiLCJJU19JRTExIiwiJFdlYWtNYXAiLCJXZWFrTWFwUHJvdG90eXBlIiwibmF0aXZlRGVsZXRlIiwibmF0aXZlSGFzIiwibmF0aXZlR2V0IiwibmF0aXZlU2V0IiwiZGlzYWxsb3dlZCIsImZpbmFsRXEiLCIkYXRvYiIsIk5PX1NQQUNFU19JR05PUkUiLCJhdG9iIiwiTk9fQVJHX1JFQ0VJVklOR19DSEVDSyIsImJzIiwiYmMiLCIkYnRvYSIsImJsb2NrIiwiY2hhckNvZGUiLCJET01JdGVyYWJsZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsInRyeU5vZGVSZXF1aXJlIiwiRE9NRXhjZXB0aW9uQ29uc3RhbnRzIiwiRE9NX0VYQ0VQVElPTiIsIk5hdGl2ZURPTUV4Y2VwdGlvbiIsIk5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZSIsIkhBU19TVEFDSyIsImNvZGVGb3IiLCIkRE9NRXhjZXB0aW9uIiwiRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiY3JlYXRlR2V0dGVyRGVzY3JpcHRvciIsIklOQ09SUkVDVF9DT05TVFJVQ1RPUiIsIklOQ09SUkVDVF9DT0RFIiwiTUlTU0VEX0NPTlNUQU5UUyIsIkZPUkNFRF9DT05TVFJVQ1RPUiIsIkRPTUV4Y2VwdGlvbiIsIlBvbHlmaWxsZWRET01FeGNlcHRpb24iLCJQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiY29uc3RhbnQiLCJjb25zdGFudE5hbWUiLCJFUlJPUl9IQVNfU1RBQ0siLCJET01fRVhDRVBUSU9OX0hBU19TVEFDSyIsInN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uIiwiZ2V0QnVpbHRpbiIsIkV2YWxFcnJvciIsIlJlZmVyZW5jZUVycm9yIiwiVVJJRXJyb3IiLCJQZXJmb3JtYW5jZU1hcmsiLCJDb21waWxlRXJyb3IiLCJMaW5rRXJyb3IiLCJSdW50aW1lRXJyb3IiLCJTZXQiLCJNYXAiLCJNYXBQcm90b3R5cGUiLCJtYXBIYXMiLCJtYXBHZXQiLCJtYXBTZXQiLCJzZXRBZGQiLCJib29sZWFuVmFsdWVPZiIsIm51bWJlclZhbHVlT2YiLCJzdHJpbmdWYWx1ZU9mIiwiUEVSRk9STUFOQ0VfTUFSSyIsIkRBVEFfQ0xPTkVfRVJST1IiLCJUUkFOU0ZFUlJJTkciLCJjaGVja0Jhc2ljU2VtYW50aWMiLCJzZXQxIiwic2V0MiIsIm5hdGl2ZVN0cnVjdHVyZWRDbG9uZSIsInN0cnVjdHVyZWRDbG9uZSIsIkZPUkNFRF9SRVBMQUNFTUVOVCIsInN0cnVjdHVyZWRDbG9uZUZyb21NYXJrIiwiZGV0YWlsIiwibmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSIsInRocm93VW5jbG9uZWFibGUiLCJ0aHJvd1VucG9seWZpbGxhYmxlIiwic3RydWN0dXJlZENsb25lSW50ZXJuYWwiLCJjbG9uZWQiLCJkYXRhVHJhbnNmZXIiLCJkZWVwIiwiRE9NUXVhZCIsInAyIiwicDMiLCJwNCIsIkRhdGFUcmFuc2ZlciIsImZpbGVzIiwiSW1hZ2VEYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJjb2xvclNwYWNlIiwiZnJvbVBvaW50IiwiZnJvbVJlY3QiLCJmcm9tTWF0cml4IiwiY2xvbmUiLCJGaWxlIiwiUFJPUEVSX1RSQU5TRkVSIiwidHJhbnNmZXIiLCJ0cnlUb1RyYW5zZmVyIiwicmF3VHJhbnNmZXIiLCJ0cmFuc2ZlcnJlZEFycmF5IiwidHJhbnNmZXJyZWQiLCJjYW52YXMiLCJPZmZzY3JlZW5DYW52YXMiLCJnZXRDb250ZXh0IiwidHJhbnNmZXJGcm9tSW1hZ2VCaXRtYXAiLCJ0cmFuc2ZlclRvSW1hZ2VCaXRtYXAiLCJNU0lFIiwic2NoZWR1bGVyIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCJVU0VfTkFUSVZFX1VSTCIsImFycmF5U29ydCIsIlVSTF9TRUFSQ0hfUEFSQU1TIiwiVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IiLCJnZXRJbnRlcm5hbFBhcmFtc1N0YXRlIiwibiRGZXRjaCIsIk4kUmVxdWVzdCIsIkhlYWRlcnMiLCJSZXF1ZXN0UHJvdG90eXBlIiwiSGVhZGVyc1Byb3RvdHlwZSIsInBsdXMiLCJzZXF1ZW5jZXMiLCJwZXJjZW50U2VxdWVuY2UiLCJwZXJjZW50RGVjb2RlIiwic2VxdWVuY2UiLCJkZXNlcmlhbGl6ZSIsInJlcGxhY2VtZW50cyIsInNlcmlhbGl6ZSIsIlVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yIiwiVVJMU2VhcmNoUGFyYW1zU3RhdGUiLCJwYXJzZU9iamVjdCIsInBhcnNlUXVlcnkiLCJiaW5kVVJMIiwidXBkYXRlIiwiZW50cnlJdGVyYXRvciIsImVudHJ5TmV4dCIsInF1ZXJ5IiwidXBkYXRlVVJMIiwiVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IiLCJVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUiLCJhcHBlbmQiLCJnZXRBbGwiLCJmb3VuZCIsImhlYWRlcnNIYXMiLCJoZWFkZXJzU2V0Iiwid3JhcFJlcXVlc3RPcHRpb25zIiwiYm9keSIsImZldGNoIiwiUmVxdWVzdENvbnN0cnVjdG9yIiwiUmVxdWVzdCIsImdldFN0YXRlIiwiRU9GIiwiYXJyYXlGcm9tIiwidG9BU0NJSSIsIlVSTFNlYXJjaFBhcmFtc01vZHVsZSIsImdldEludGVybmFsVVJMU3RhdGUiLCJnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlIiwiTmF0aXZlVVJMIiwicG9wIiwiSU5WQUxJRF9TQ0hFTUUiLCJJTlZBTElEX0hPU1QiLCJJTlZBTElEX1BPUlQiLCJBTFBIQSIsIkFMUEhBTlVNRVJJQyIsIkRJR0lUIiwiSEVYX1NUQVJUIiwiT0NUIiwiREVDIiwiSEVYIiwiRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQiLCJMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFIiwiVEFCX0FORF9ORVdfTElORSIsInNlcmlhbGl6ZUhvc3QiLCJjb21wcmVzcyIsImlnbm9yZTAiLCJpcHY2IiwibWF4SW5kZXgiLCJjdXJyU3RhcnQiLCJjdXJyTGVuZ3RoIiwiZmluZExvbmdlc3RaZXJvU2VxdWVuY2UiLCJDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0IiwiZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0IiwicGF0aFBlcmNlbnRFbmNvZGVTZXQiLCJ1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQiLCJwZXJjZW50RW5jb2RlIiwic3BlY2lhbFNjaGVtZXMiLCJmdHAiLCJmaWxlIiwiaHR0cCIsImh0dHBzIiwid3MiLCJ3c3MiLCJpc1dpbmRvd3NEcml2ZUxldHRlciIsIm5vcm1hbGl6ZWQiLCJzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyIiwiaXNTaW5nbGVEb3QiLCJzZWdtZW50IiwiU0NIRU1FX1NUQVJUIiwiU0NIRU1FIiwiTk9fU0NIRU1FIiwiU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkiLCJQQVRIX09SX0FVVEhPUklUWSIsIlJFTEFUSVZFIiwiUkVMQVRJVkVfU0xBU0giLCJTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTIiwiU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVMiLCJBVVRIT1JJVFkiLCJIT1NUIiwiSE9TVE5BTUUiLCJQT1JUIiwiRklMRSIsIkZJTEVfU0xBU0giLCJGSUxFX0hPU1QiLCJQQVRIX1NUQVJUIiwiUEFUSCIsIkNBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEgiLCJRVUVSWSIsIkZSQUdNRU5UIiwiVVJMU3RhdGUiLCJpc0Jhc2UiLCJiYXNlU3RhdGUiLCJmYWlsdXJlIiwidXJsU3RyaW5nIiwic3RhdGVPdmVycmlkZSIsImNvZGVQb2ludHMiLCJidWZmZXJDb2RlUG9pbnRzIiwicG9pbnRlciIsInNlZW5BdCIsInNlZW5CcmFja2V0Iiwic2VlblBhc3N3b3JkVG9rZW4iLCJzY2hlbWUiLCJmcmFnbWVudCIsImNhbm5vdEJlQUJhc2VVUkwiLCJpc1NwZWNpYWwiLCJpbmNsdWRlc0NyZWRlbnRpYWxzIiwiY29kZVBvaW50IiwiZW5jb2RlZENvZGVQb2ludHMiLCJwYXJzZUhvc3QiLCJzaG9ydGVuUGF0aCIsIm51bWJlcnNTZWVuIiwiaXB2NFBpZWNlIiwic3dhcHMiLCJzd2FwIiwiYWRkcmVzcyIsInBpZWNlSW5kZXgiLCJwYXJzZUlQdjYiLCJwYXJ0c0xlbmd0aCIsIm51bWJlcnMiLCJpcHY0IiwicGFyc2VJUHY0IiwiY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0IiwicGF0aFNpemUiLCJzZXRIcmVmIiwiZ2V0T3JpZ2luIiwiVVJMQ29uc3RydWN0b3IiLCJvcmlnaW4iLCJnZXRQcm90b2NvbCIsInNldFByb3RvY29sIiwiZ2V0VXNlcm5hbWUiLCJzZXRVc2VybmFtZSIsImdldFBhc3N3b3JkIiwic2V0UGFzc3dvcmQiLCJnZXRIb3N0Iiwic2V0SG9zdCIsImdldEhvc3RuYW1lIiwic2V0SG9zdG5hbWUiLCJnZXRQb3J0Iiwic2V0UG9ydCIsImdldFBhdGhuYW1lIiwic2V0UGF0aG5hbWUiLCJnZXRTZWFyY2giLCJzZXRTZWFyY2giLCJnZXRTZWFyY2hQYXJhbXMiLCJnZXRIYXNoIiwic2V0SGFzaCIsIlVSTFByb3RvdHlwZSIsImFjY2Vzc29yRGVzY3JpcHRvciIsIm5hdGl2ZUNyZWF0ZU9iamVjdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIm5hdGl2ZVJldm9rZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInByZWZpeCIsImRlbGltaXRlciIsIm9wdGlvbmFsIiwicGFydGlhbCIsImFzdGVyaXNrIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInRva2Vuc1RvUmVnRXhwIiwic3RyaW5nVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsIlBBVEhfUkVHRVhQIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImVzY2FwZWQiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwibWF0Y2hlcyIsInByZXR0eSIsInNlbnNpdGl2ZSIsInN0cmljdCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJpZ2ludCIsImJvb2wiLCJhcnJheU9mIiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwiYmEiLCJjYSIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJEIiwib2EiLCJwYSIsInFhIiwibWEiLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsImZvciIsIk1hIiwiS2EiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUWEiLCJfcmVuZGVyIiwiUmEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJkYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJ1YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJvbkVycm9yIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJSYyIsIlVjIiwicGVuZGluZ0xhbmVzIiwiZXhwaXJlZExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIlZjIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImV2ZW50VGltZXMiLCJiZCIsImNkIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJuZXh0U2libGluZyIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJHIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInBhc3NpdmUiLCJOYiIsInUiLCJlZiIsImZmIiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJwZiIsImNsZWFyVGltZW91dCIsInFmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiY2hpbGQiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJ1cGRhdGVyIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiUGciLCJRZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsInNpYmxpbmciLCJUZyIsIlVnIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiZGgiLCJlaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90IiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJwaiIsIlgiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJsayIsIm1rIiwibmsiLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJYaiIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImNjIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwicnVudGltZSIsIk9wIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwic2tpcFRlbXBSZXNldCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJwZXJmb3JtYW5jZSIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJvIiwiX3NldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInVwIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJhbGxLZXlzIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsIm9uIiwib2ZmIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwiX3Byb3RvIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImhpc3RvcnlDb250ZXh0IiwiUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIiLCJfcmVmMiRjb21wb25lbnQiLCJpc0R1cGxpY2F0ZU5hdmlnYXRpb24iLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsImNvbXBpbGVQYXRoJDEiLCJtYXRjaFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJxdWVyeVNlbGVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==